file_path,api_count,code
demo.py,0,"b'# coding:utf-8\nimport time\nfrom glob import glob\n\nimport numpy as np\nfrom PIL import Image\n\nimport model\n# ces\n\npaths = glob(\'./test/*.*\')\n\nif __name__ == \'__main__\':\n    im = Image.open(""./test/3.png"")\n    img = np.array(im.convert(\'RGB\'))\n    t = time.time()\n    \'\'\'\n    result,img,angel\xe5\x88\x86\xe5\x88\xab\xe5\xaf\xb9\xe5\xba\x94-\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x9b\xbe\xe5\x83\x8f\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe6\x96\x87\xe5\xad\x97\xe6\x97\x8b\xe8\xbd\xac\xe8\xa7\x92\xe5\xba\xa6\n    \'\'\'\n    result, img, angle = model.model(\n        img, model=\'keras\', adjust=True, detectAngle=True)\n    print(""It takes time:{}s"".format(time.time() - t))\n    print(""---------------------------------------"")\n    for key in result:\n        print(result[key][1])\n'"
keras_model.py,0,"b'# coding:utf-8\n##\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x96\x87\xe6\x9c\xac\xe6\x96\xb9\xe5\x90\x91 \xe6\xa3\x80\xe6\xb5\x8b\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe8\x87\xaa\xe5\x8a\xa8\xe6\xa3\x80\xe6\xb5\x8b\xe6\x96\x87\xe5\xad\x97\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c0\xe3\x80\x8190\xe3\x80\x81180\xe3\x80\x81270\n##keras\xe7\x89\x88\xe6\x9c\xac\xe7\x9a\x84OCR\xe8\xaf\x86\xe5\x88\xab\n\nfrom math import *\n\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfrom angle.predict import predict as angle_detect  ##\xe6\x96\x87\xe5\xad\x97\xe6\x96\xb9\xe5\x90\x91\xe6\xa3\x80\xe6\xb5\x8b\nfrom ctpn.text_detect import text_detect\nfrom ocr.model import predict as ocr\n\n\ndef crnnRec(im, text_recs, adjust=False):\n    """"""\n    crnn\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8cocr\xe8\xaf\x86\xe5\x88\xab\n    @@model,\n    @@converter,\n    @@im:Array\n    @@text_recs:text box\n\n    """"""\n    index = 0\n    results = {}\n    xDim, yDim = im.shape[1], im.shape[0]\n\n    for index, rec in enumerate(text_recs):\n        results[index] = [\n            rec,\n        ]\n        xlength = int((rec[6] - rec[0]) * 0.1)\n        ylength = int((rec[7] - rec[1]) * 0.2)\n        if adjust:\n            pt1 = (max(1, rec[0] - xlength), max(1, rec[1] - ylength))\n            pt2 = (rec[2], rec[3])\n            pt3 = (min(rec[6] + xlength, xDim - 2),\n                   min(yDim - 2, rec[7] + ylength))\n            pt4 = (rec[4], rec[5])\n        else:\n            pt1 = (max(1, rec[0]), max(1, rec[1]))\n            pt2 = (rec[2], rec[3])\n            pt3 = (min(rec[6], xDim - 2), min(yDim - 2, rec[7]))\n            pt4 = (rec[4], rec[5])\n\n        degree = degrees(atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]))  ##\xe5\x9b\xbe\xe5\x83\x8f\xe5\x80\xbe\xe6\x96\x9c\xe8\xa7\x92\xe5\xba\xa6\n\n        partImg = dumpRotateImage(im, degree, pt1, pt2, pt3, pt4)\n\n        image = Image.fromarray(partImg).convert(\'L\')\n        sim_pred = ocr(image)\n\n        results[index].append(sim_pred)  ##\xe8\xaf\x86\xe5\x88\xab\xe6\x96\x87\xe5\xad\x97\n\n    return results\n\n\ndef dumpRotateImage(img, degree, pt1, pt2, pt3, pt4):\n    height, width = img.shape[:2]\n    heightNew = int(width * fabs(sin(radians(degree))) +\n                    height * fabs(cos(radians(degree))))\n    widthNew = int(height * fabs(sin(radians(degree))) +\n                   width * fabs(cos(radians(degree))))\n    matRotation = cv2.getRotationMatrix2D((width / 2, height / 2), degree, 1)\n    matRotation[0, 2] += (widthNew - width) / 2\n    matRotation[1, 2] += (heightNew - height) / 2\n    imgRotation = cv2.warpAffine(\n        img, matRotation, (widthNew, heightNew), borderValue=(255, 255, 255))\n    pt1 = list(pt1)\n    pt3 = list(pt3)\n\n    [[pt1[0]], [pt1[1]]] = np.dot(matRotation,\n                                  np.array([[pt1[0]], [pt1[1]], [1]]))\n    [[pt3[0]], [pt3[1]]] = np.dot(matRotation,\n                                  np.array([[pt3[0]], [pt3[1]], [1]]))\n    ydim, xdim = imgRotation.shape[:2]\n    imgOut = imgRotation[max(1, int(pt1[1])):min(ydim - 1, int(pt3[1])),\n                         max(1, int(pt1[0])):min(xdim - 1, int(pt3[0]))]\n    # height,width=imgOut.shape[:2]\n    return imgOut\n\n\ndef model(img, adjust=False, detectAngle=False):\n    """"""\n    @@param:img,\n    @@param:model,\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84ocr\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81keras\\pytorch\xe7\x89\x88\xe6\x9c\xac\n    @@param:adjust \xe8\xb0\x83\xe6\x95\xb4\xe6\x96\x87\xe5\xad\x97\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n    @@param:detectAngle,\xe6\x98\xaf\xe5\x90\xa6\xe6\xa3\x80\xe6\xb5\x8b\xe6\x96\x87\xe5\xad\x97\xe6\x9c\x9d\xe5\x90\x91\n    \n    """"""\n    angle = 0\n    if detectAngle:\n\n        angle = angle_detect(img=np.copy(img))  ##\xe6\x96\x87\xe5\xad\x97\xe6\x9c\x9d\xe5\x90\x91\xe6\xa3\x80\xe6\xb5\x8b\n        im = Image.fromarray(img)\n        if angle == 90:\n            im = im.transpose(Image.ROTATE_90)\n        elif angle == 180:\n            im = im.transpose(Image.ROTATE_180)\n        elif angle == 270:\n            im = im.transpose(Image.ROTATE_270)\n        img = np.array(im)\n\n    text_recs, tmp, img = text_detect(img)\n    text_recs = sort_box(text_recs)\n    result = crnnRec(img, text_recs, model, adjust=adjust)\n    return result, tmp, angle\n\n\ndef sort_box(box):\n    """"""\n    \xe5\xaf\xb9box\xe6\x8e\x92\xe5\xba\x8f,\xe5\x8f\x8a\xe9\xa1\xb5\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe7\x89\x88\n    text_recs[index, 0] = x1\n        text_recs[index, 1] = y1\n        text_recs[index, 2] = x2\n        text_recs[index, 3] = y2\n        text_recs[index, 4] = x3\n        text_recs[index, 5] = y3\n        text_recs[index, 6] = x4\n        text_recs[index, 7] = y4\n    """"""\n\n    box = sorted(box, key=lambda x: sum([x[1], x[3], x[5], x[7]]))\n    return box\n'"
model.py,0,"b'# coding:utf-8\n##\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x96\x87\xe6\x9c\xac\xe6\x96\xb9\xe5\x90\x91 \xe6\xa3\x80\xe6\xb5\x8b\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe8\x87\xaa\xe5\x8a\xa8\xe6\xa3\x80\xe6\xb5\x8b\xe6\x96\x87\xe5\xad\x97\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c0\xe3\x80\x8190\xe3\x80\x81180\xe3\x80\x81270\nfrom math import *\n\nimport cv2\nimport numpy as np\nfrom PIL import Image\nimport sys\n\nsys.path.append(""ocr"")\nfrom angle.predict import predict as angle_detect  ##\xe6\x96\x87\xe5\xad\x97\xe6\x96\xb9\xe5\x90\x91\xe6\xa3\x80\xe6\xb5\x8b\n\nfrom crnn.crnn import crnnOcr\n\nfrom ctpn.text_detect import text_detect\nfrom ocr.model import predict as ocr\n\n\ndef crnnRec(im, text_recs, ocrMode=\'keras\', adjust=False):\n    """"""\n    crnn\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8cocr\xe8\xaf\x86\xe5\x88\xab\n    @@model,\n    @@converter,\n    @@im:Array\n    @@text_recs:text box\n\n    """"""\n    index = 0\n    results = {}\n    xDim, yDim = im.shape[1], im.shape[0]\n\n    for index, rec in enumerate(text_recs):\n        results[index] = [\n            rec,\n        ]\n        xlength = int((rec[6] - rec[0]) * 0.1)\n        ylength = int((rec[7] - rec[1]) * 0.2)\n        if adjust:\n            pt1 = (max(1, rec[0] - xlength), max(1, rec[1] - ylength))\n            pt2 = (rec[2], rec[3])\n            pt3 = (min(rec[6] + xlength, xDim - 2),\n                   min(yDim - 2, rec[7] + ylength))\n            pt4 = (rec[4], rec[5])\n        else:\n            pt1 = (max(1, rec[0]), max(1, rec[1]))\n            pt2 = (rec[2], rec[3])\n            pt3 = (min(rec[6], xDim - 2), min(yDim - 2, rec[7]))\n            pt4 = (rec[4], rec[5])\n\n        degree = degrees(atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]))  ##\xe5\x9b\xbe\xe5\x83\x8f\xe5\x80\xbe\xe6\x96\x9c\xe8\xa7\x92\xe5\xba\xa6\n\n        partImg = dumpRotateImage(im, degree, pt1, pt2, pt3, pt4)\n        # \xe6\xa0\xb9\xe6\x8d\xaectpn\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x86\xe5\x88\xab\xe5\x87\xba\xe7\x9a\x84\xe6\x96\x87\xe5\xad\x97\xe5\x8c\xba\xe5\x9f\x9f\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8d\xe5\x90\x8c\xe6\x96\x87\xe5\xad\x97\xe5\x8c\xba\xe5\x9f\x9f\xe7\x9a\x84crnn\xe8\xaf\x86\xe5\x88\xab\n        image = Image.fromarray(partImg).convert(\'L\')\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x86\xe5\x88\xab\xe5\x87\xba\xe7\x9a\x84\xe6\x96\x87\xe5\xad\x97\xe8\xaf\x86\xe5\x88\xab\n        if ocrMode == \'keras\':\n            sim_pred = ocr(image)\n        else:\n            sim_pred = crnnOcr(image)\n\n        results[index].append(sim_pred)  ##\xe8\xaf\x86\xe5\x88\xab\xe6\x96\x87\xe5\xad\x97\n\n    return results\n\n\ndef dumpRotateImage(img, degree, pt1, pt2, pt3, pt4):\n    height, width = img.shape[:2]\n    heightNew = int(width * fabs(sin(radians(degree))) +\n                    height * fabs(cos(radians(degree))))\n    widthNew = int(height * fabs(sin(radians(degree))) +\n                   width * fabs(cos(radians(degree))))\n    matRotation = cv2.getRotationMatrix2D((width / 2, height / 2), degree, 1)\n    matRotation[0, 2] += (widthNew - width) / 2\n    matRotation[1, 2] += (heightNew - height) / 2\n    imgRotation = cv2.warpAffine(\n        img, matRotation, (widthNew, heightNew), borderValue=(255, 255, 255))\n    pt1 = list(pt1)\n    pt3 = list(pt3)\n\n    [[pt1[0]], [pt1[1]]] = np.dot(matRotation,\n                                  np.array([[pt1[0]], [pt1[1]], [1]]))\n    [[pt3[0]], [pt3[1]]] = np.dot(matRotation,\n                                  np.array([[pt3[0]], [pt3[1]], [1]]))\n    ydim, xdim = imgRotation.shape[:2]\n    imgOut = imgRotation[max(1, int(pt1[1])):min(ydim - 1, int(pt3[1])),\n                         max(1, int(pt1[0])):min(xdim - 1, int(pt3[0]))]\n    # height,width=imgOut.shape[:2]\n    return imgOut\n\n\ndef model(img, model=\'keras\', adjust=False, detectAngle=False):\n    """"""\n    @@param:img,\n    @@param:model,\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84ocr\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81keras\\pytorch\xe7\x89\x88\xe6\x9c\xac\n    @@param:adjust \xe8\xb0\x83\xe6\x95\xb4\xe6\x96\x87\xe5\xad\x97\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n    @@param:detectAngle,\xe6\x98\xaf\xe5\x90\xa6\xe6\xa3\x80\xe6\xb5\x8b\xe6\x96\x87\xe5\xad\x97\xe6\x9c\x9d\xe5\x90\x91\n    \n    """"""\n    angle = 0\n    if detectAngle:\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe6\x96\x87\xe5\xad\x97\xe6\x97\x8b\xe8\xbd\xac\xe6\x96\xb9\xe5\x90\x91\xe6\xa3\x80\xe6\xb5\x8b\xef\xbc\x8c\xe5\x88\x86\xe4\xb8\xba[0, 90, 180, 270]\xe5\x9b\x9b\xe7\xa7\x8d\xe6\x83\x85\xe5\x86\xb5\n        angle = angle_detect(img=np.copy(img))  ##\xe6\x96\x87\xe5\xad\x97\xe6\x9c\x9d\xe5\x90\x91\xe6\xa3\x80\xe6\xb5\x8b\n        print(\'The angel of this character is:\', angle)\n        im = Image.fromarray(img)\n        print(\'Rotate the array of this img!\')\n        if angle == 90:\n            im = im.transpose(Image.ROTATE_90)\n        elif angle == 180:\n            im = im.transpose(Image.ROTATE_180)\n        elif angle == 270:\n            im = im.transpose(Image.ROTATE_270)\n        img = np.array(im)\n    # \xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\xbe\xe5\x83\x8f\xe4\xb8\xad\xe7\x9a\x84\xe6\x96\x87\xe5\xad\x97\xe5\x8c\xba\xe5\x9f\x9f\xe7\x9a\x84\xe8\xaf\x86\xe5\x88\xab\n    text_recs, tmp, img=text_detect(img)\n    # \xe8\xaf\x86\xe5\x88\xab\xe5\x8c\xba\xe5\x9f\x9f\xe6\x8e\x92\xe5\x88\x97\n    text_recs = sort_box(text_recs)\n    # \n    result = crnnRec(img, text_recs, model, adjust=adjust)\n    return result, tmp, angle\n\n\ndef sort_box(box):\n    """"""\n    \xe5\xaf\xb9box\xe6\x8e\x92\xe5\xba\x8f,\xe5\x8f\x8a\xe9\xa1\xb5\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe7\x89\x88\n    text_recs[index, 0] = x1\n        text_recs[index, 1] = y1\n        text_recs[index, 2] = x2\n        text_recs[index, 3] = y2\n        text_recs[index, 4] = x3\n        text_recs[index, 5] = y3\n        text_recs[index, 6] = x4\n        text_recs[index, 7] = y4\n    """"""\n\n    box = sorted(box, key=lambda x: sum([x[1], x[3], x[5], x[7]]))\n    return box\n'"
pytorch_model.py,0,"b'# coding:utf-8\n##\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x96\x87\xe6\x9c\xac\xe6\x96\xb9\xe5\x90\x91 \xe6\xa3\x80\xe6\xb5\x8b\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe8\x87\xaa\xe5\x8a\xa8\xe6\xa3\x80\xe6\xb5\x8b\xe6\x96\x87\xe5\xad\x97\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c0\xe3\x80\x8190\xe3\x80\x81180\xe3\x80\x81270\n##pytorch\xe7\x89\x88\xe6\x9c\xac\xe7\x9a\x84OCR\xe8\xaf\x86\xe5\x88\xab\nfrom math import *\n\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\nfrom angle.predict import predict as angle_detect  ##\xe6\x96\x87\xe5\xad\x97\xe6\x96\xb9\xe5\x90\x91\xe6\xa3\x80\xe6\xb5\x8b\nfrom crnn.crnn import crnnOcr\nfrom ctpn.text_detect import text_detect\n\n\ndef crnnRec(im, text_recs, adjust=False):\n    """"""\n    crnn\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8cocr\xe8\xaf\x86\xe5\x88\xab\n    @@model,\n    @@converter,\n    @@im:Array\n    @@text_recs:text box\n\n    """"""\n    index = 0\n    results = {}\n    xDim, yDim = im.shape[1], im.shape[0]\n\n    for index, rec in enumerate(text_recs):\n        results[index] = [rec, ]\n        xlength = int((rec[6] - rec[0]) * 0.1)\n        ylength = int((rec[7] - rec[1]) * 0.2)\n        if adjust:\n            pt1 = (max(1, rec[0] - xlength), max(1, rec[1] - ylength))\n            pt2 = (rec[2], rec[3])\n            pt3 = (min(rec[6] + xlength, xDim - 2), min(yDim - 2, rec[7] + ylength))\n            pt4 = (rec[4], rec[5])\n        else:\n            pt1 = (max(1, rec[0]), max(1, rec[1]))\n            pt2 = (rec[2], rec[3])\n            pt3 = (min(rec[6], xDim - 2), min(yDim - 2, rec[7]))\n            pt4 = (rec[4], rec[5])\n\n        degree = degrees(atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]))  ##\xe5\x9b\xbe\xe5\x83\x8f\xe5\x80\xbe\xe6\x96\x9c\xe8\xa7\x92\xe5\xba\xa6\n\n        partImg = dumpRotateImage(im, degree, pt1, pt2, pt3, pt4)\n\n        image = Image.fromarray(partImg).convert(\'L\')\n        sim_pred = crnnOcr(image)\n        results[index].append(sim_pred)  ##\xe8\xaf\x86\xe5\x88\xab\xe6\x96\x87\xe5\xad\x97\n\n    return results\n\n\ndef dumpRotateImage(img, degree, pt1, pt2, pt3, pt4):\n    height, width = img.shape[:2]\n    heightNew = int(width * fabs(sin(radians(degree))) + height * fabs(cos(radians(degree))))\n    widthNew = int(height * fabs(sin(radians(degree))) + width * fabs(cos(radians(degree))))\n    matRotation = cv2.getRotationMatrix2D((width / 2, height / 2), degree, 1)\n    matRotation[0, 2] += (widthNew - width) / 2\n    matRotation[1, 2] += (heightNew - height) / 2\n    imgRotation = cv2.warpAffine(img, matRotation, (widthNew, heightNew), borderValue=(255, 255, 255))\n    pt1 = list(pt1)\n    pt3 = list(pt3)\n\n    [[pt1[0]], [pt1[1]]] = np.dot(matRotation, np.array([[pt1[0]], [pt1[1]], [1]]))\n    [[pt3[0]], [pt3[1]]] = np.dot(matRotation, np.array([[pt3[0]], [pt3[1]], [1]]))\n    ydim, xdim = imgRotation.shape[:2]\n    imgOut = imgRotation[max(1, int(pt1[1])):min(ydim - 1, int(pt3[1])), max(1, int(pt1[0])):min(xdim - 1, int(pt3[0]))]\n    # height,width=imgOut.shape[:2]\n    return imgOut\n\n\ndef model(img, adjust=False, detectAngle=False):\n    """"""\n    @@param:img,\n    @@param:model,\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84ocr\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81keras\\pytorch\xe7\x89\x88\xe6\x9c\xac\n    @@param:adjust \xe8\xb0\x83\xe6\x95\xb4\xe6\x96\x87\xe5\xad\x97\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n    @@param:detectAngle,\xe6\x98\xaf\xe5\x90\xa6\xe6\xa3\x80\xe6\xb5\x8b\xe6\x96\x87\xe5\xad\x97\xe6\x9c\x9d\xe5\x90\x91\n    \n    """"""\n    angle = 0\n    if detectAngle:\n        angle = angle_detect(img=np.copy(img))  ##\xe6\x96\x87\xe5\xad\x97\xe6\x9c\x9d\xe5\x90\x91\xe6\xa3\x80\xe6\xb5\x8b\n        im = Image.fromarray(img)\n        if angle == 90:\n            im = im.transpose(Image.ROTATE_90)\n        elif angle == 180:\n            im = im.transpose(Image.ROTATE_180)\n        elif angle == 270:\n            im = im.transpose(Image.ROTATE_270)\n        img = np.array(im)\n\n    text_recs, tmp, img = text_detect(img)\n    text_recs = sort_box(text_recs)\n    result = crnnRec(img, text_recs, model, adjust=adjust)\n    return result, tmp, angle\n\n\ndef sort_box(box):\n    """"""\n    \xe5\xaf\xb9box\xe6\x8e\x92\xe5\xba\x8f,\xe5\x8f\x8a\xe9\xa1\xb5\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe7\x89\x88\n    text_recs[index, 0] = x1\n        text_recs[index, 1] = y1\n        text_recs[index, 2] = x2\n        text_recs[index, 3] = y2\n        text_recs[index, 4] = x3\n        text_recs[index, 5] = y3\n        text_recs[index, 6] = x4\n        text_recs[index, 7] = y4\n    """"""\n\n    box = sorted(box, key=lambda x: sum([x[1], x[3], x[5], x[7]]))\n    return box\n'"
angle/__init__.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n\xe5\x9b\xbe\xe5\x83\x8f\xe6\x96\x87\xe5\xad\x97\xe6\x96\xb9\xe5\x90\x91\xe6\xa3\x80\xe6\xb5\x8b\n@author: xiaofeng\n""""""\n'"
angle/predict.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# _Author_: xiaofeng\n# Date: 2018-04-22 18:13:46\n# Last Modified by: xiaofeng\n# Last Modified time: 2018-04-22 18:13:46\n\'\'\'\n\xe6\xa0\xb9\xe6\x8d\xae\xe7\xbb\x99\xe5\xae\x9a\xe7\x9a\x84\xe5\x9b\xbe\xe5\xbd\xa2\xef\xbc\x8c\xe5\x88\x86\xe6\x9e\x90\xe6\x96\x87\xe5\xad\x97\xe7\x9a\x84\xe6\x9c\x9d\xe5\x90\x91\n\'\'\'\n# from keras.models import load_model\nimport numpy as np\nfrom PIL import Image\nfrom keras.applications.vgg16 import preprocess_input, VGG16\nfrom keras.layers import Dense\nfrom keras.models import Model\n# \xe7\xbc\x96\xe8\xaf\x91\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbb\xa5\xe8\xbe\x83\xe5\xb0\x8f\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\nfrom keras.optimizers import SGD\n\n\ndef load():\n    vgg = VGG16(weights=None, input_shape=(224, 224, 3))\n    # \xe4\xbf\xae\xe6\x94\xb9\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82 3\xe4\xb8\xaa\xe8\xbe\x93\xe5\x87\xba\n    x = vgg.layers[-2].output\n    predictions_class = Dense(\n        4, activation=\'softmax\', name=\'predictions_class\')(x)\n    prediction = [predictions_class]\n    model = Model(inputs=vgg.input, outputs=prediction)\n    sgd = SGD(lr=0.00001, momentum=0.9)\n    model.compile(\n        optimizer=sgd, loss=\'categorical_crossentropy\', metrics=[\'accuracy\'])\n    model.load_weights(\n        \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/angle/modelAngle.h5\')\n    return model\n\n\n# \xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\nmodel = None\n\n\ndef predict(path=None, img=None):\n    global model\n    if model is None:\n        model = load()\n    """"""\n    \xe5\x9b\xbe\xe7\x89\x87\xe6\x96\x87\xe5\xad\x97\xe6\x96\xb9\xe5\x90\x91\xe9\xa2\x84\xe6\xb5\x8b\n    """"""\n    ROTATE = [0, 90, 180, 270]\n    if path is not None:\n        im = Image.open(path).convert(\'RGB\')\n    elif img is not None:\n        im = Image.fromarray(img).convert(\'RGB\')\n    w, h = im.size\n    # \xe5\xaf\xb9\xe5\x9b\xbe\xe5\x83\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x89\xaa\xe8\xa3\x81\n    # \xe5\xb7\xa6\xe4\xb8\x8a\xe8\xa7\x92(int(0.1 * w), int(0.1 * h))\n    # \xe5\x8f\xb3\xe4\xb8\x8b\xe8\xa7\x92(w - int(0.1 * w), h - int(0.1 * h))\n    xmin, ymin, xmax, ymax = int(0.1 * w), int(\n        0.1 * h), w - int(0.1 * w), h - int(0.1 * h)\n    im = im.crop((xmin, ymin, xmax, ymax))  # \xe5\x89\xaa\xe5\x88\x87\xe5\x9b\xbe\xe7\x89\x87\xe8\xbe\xb9\xe7\xbc\x98\xef\xbc\x8c\xe6\xb8\x85\xe9\x99\xa4\xe8\xbe\xb9\xe7\xbc\x98\xe5\x99\xaa\xe5\xa3\xb0\n    # \xe5\xaf\xb9\xe5\x9b\xbe\xe7\x89\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x89\xaa\xe8\xa3\x81\xe4\xb9\x8b\xe5\x90\x8e\xe8\xbf\x9b\xe8\xa1\x8cresize\xe6\x88\x90(224,224)\n    im = im.resize((224, 224))\n    # \xe5\xb0\x86\xe5\x9b\xbe\xe5\x83\x8f\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe6\x95\xb0\xe7\xbb\x84\xe5\xbd\xa2\xe5\xbc\x8f\n    img = np.array(im)\n    img = preprocess_input(img.astype(np.float32))\n    pred = model.predict(np.array([img]))\n    index = np.argmax(pred, axis=1)[0]\n    return ROTATE[index]\n'"
crnn/__init__.py,0,b''
crnn/crnn.py,0,"b'# coding:utf-8\nimport sys\n\nsys.path.insert(1, ""./crnn"")\nimport torch\nimport torch.utils.data\nfrom torch.autograd import Variable\nimport numpy as np\nimport util\nimport dataset\nimport models.crnn as crnn\nimport keys_crnn\nfrom math import *\nimport cv2\n\nGPU = False\n\n\ndef dumpRotateImage_(img, degree, pt1, pt2, pt3, pt4):\n    height, width = img.shape[:2]\n    heightNew = int(width * fabs(sin(radians(degree))) + height * fabs(cos(radians(degree))))\n    widthNew = int(height * fabs(sin(radians(degree))) + width * fabs(cos(radians(degree))))\n    matRotation = cv2.getRotationMatrix2D((width / 2, height / 2), degree, 1)\n    matRotation[0, 2] += (widthNew - width) / 2\n    matRotation[1, 2] += (heightNew - height) / 2\n    imgRotation = cv2.warpAffine(img, matRotation, (widthNew, heightNew), borderValue=(255, 255, 255))\n    pt1 = list(pt1)\n    pt3 = list(pt3)\n\n    [[pt1[0]], [pt1[1]]] = np.dot(matRotation, np.array([[pt1[0]], [pt1[1]], [1]]))\n    [[pt3[0]], [pt3[1]]] = np.dot(matRotation, np.array([[pt3[0]], [pt3[1]], [1]]))\n    imgOut = imgRotation[int(pt1[1]):int(pt3[1]), int(pt1[0]):int(pt3[0])]\n    height, width = imgOut.shape[:2]\n    return imgOut\n\n\ndef crnnSource():\n    alphabet = keys_crnn.alphabet\n    converter = util.strLabelConverter(alphabet)\n    if torch.cuda.is_available() and GPU:\n        model = crnn.CRNN(32, 1, len(alphabet) + 1, 256, 1).cuda()\n    else:\n        model = crnn.CRNN(32, 1, len(alphabet) + 1, 256, 1).cpu()\n    path = \'./crnn/samples/model_acc97.pth\'\n    model.eval()\n    model.load_state_dict(torch.load(path))\n    return model, converter\n\n\n##\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\nmodel, converter = crnnSource()\n\n\ndef crnnOcr(image):\n    """"""\n    crnn\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8cocr\xe8\xaf\x86\xe5\x88\xab\n    @@model,\n    @@converter,\n    @@im\n    @@text_recs:text box\n\n    """"""\n    scale = image.size[1] * 1.0 / 32\n    w = image.size[0] / scale\n    w = int(w)\n    # print ""im size:{},{}"".format(image.size,w)\n    transformer = dataset.resizeNormalize((w, 32))\n    if torch.cuda.is_available() and GPU:\n        image = transformer(image).cuda()\n    else:\n        image = transformer(image).cpu()\n\n    image = image.view(1, *image.size())\n    image = Variable(image)\n    model.eval()\n    preds = model(image)\n    _, preds = preds.max(2)\n    preds = preds.transpose(1, 0).contiguous().view(-1)\n    preds_size = Variable(torch.IntTensor([preds.size(0)]))\n    sim_pred = converter.decode(preds.data, preds_size.data, raw=False)\n    if len(sim_pred) > 0:\n        if sim_pred[0] == u\'-\':\n            sim_pred = sim_pred[1:]\n\n    return sim_pred\n'"
crnn/dataset.py,0,"b""#!/usr/bin/python\n# encoding: utf-8\n\nimport random\nimport sys\n\nimport lmdb\nimport numpy as np\nimport six\nimport torch\nimport torchvision.transforms as transforms\nfrom PIL import Image\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import sampler\n\n\nclass lmdbDataset(Dataset):\n    def __init__(self, root=None, transform=None, target_transform=None):\n        self.env = lmdb.open(\n            root,\n            max_readers=1,\n            readonly=True,\n            lock=False,\n            readahead=False,\n            meminit=False)\n\n        if not self.env:\n            print('cannot creat lmdb from %s' % (root))\n            sys.exit(0)\n\n        with self.env.begin(write=False) as txn:\n            nSamples = int(txn.get('num-samples'))\n            self.nSamples = nSamples\n\n        self.transform = transform\n        self.target_transform = target_transform\n\n    def __len__(self):\n        return self.nSamples\n\n    def __getitem__(self, index):\n        assert index <= len(self), 'index range error'\n        index += 1\n        with self.env.begin(write=False) as txn:\n            img_key = 'image-%09d' % index\n            imgbuf = txn.get(img_key)\n\n            buf = six.BytesIO()\n            buf.write(imgbuf)\n            buf.seek(0)\n            try:\n                img = Image.open(buf).convert('L')\n            except IOError:\n                print('Corrupted image for %d' % index)\n                return self[index + 1]\n\n            if self.transform is not None:\n                img = self.transform(img)\n\n            label_key = 'label-%09d' % index\n            label = str(txn.get(label_key))\n            if self.target_transform is not None:\n                label = self.target_transform(label)\n\n        return (img, label)\n\n\nclass resizeNormalize(object):\n    def __init__(self, size, interpolation=Image.BILINEAR):\n        self.size = size\n        self.interpolation = interpolation\n        self.toTensor = transforms.ToTensor()\n\n    def __call__(self, img):\n        img = img.resize(self.size, self.interpolation)\n        img = self.toTensor(img)\n        img.sub_(0.5).div_(0.5)\n        return img\n\n\nclass randomSequentialSampler(sampler.Sampler):\n    def __init__(self, data_source, batch_size):\n        self.num_samples = len(data_source)\n        self.batch_size = batch_size\n\n    def __iter__(self):\n        n_batch = len(self) // self.batch_size\n        tail = len(self) % self.batch_size\n        index = torch.LongTensor(len(self)).fill_(0)\n        for i in range(n_batch):\n            random_start = random.randint(0, len(self) - self.batch_size)\n            batch_index = random_start + torch.range(0, self.batch_size - 1)\n            index[i * self.batch_size:(i + 1) * self.batch_size] = batch_index\n        # deal with tail\n        if tail:\n            random_start = random.randint(0, len(self) - self.batch_size)\n            tail_index = random_start + torch.range(0, tail - 1)\n            index[(i + 1) * self.batch_size:] = tail_index\n\n        return iter(index)\n\n    def __len__(self):\n        return self.num_samples\n\n\nclass alignCollate(object):\n    def __init__(self, imgH=32, imgW=128, keep_ratio=False, min_ratio=1):\n        self.imgH = imgH\n        self.imgW = imgW\n        self.keep_ratio = keep_ratio\n        self.min_ratio = min_ratio\n\n    def __call__(self, batch):\n        images, labels = zip(*batch)\n\n        imgH = self.imgH\n        imgW = self.imgW\n        if self.keep_ratio:\n            ratios = []\n            for image in images:\n                w, h = image.size\n                ratios.append(w / float(h))\n            ratios.sort()\n            max_ratio = ratios[-1]\n            imgW = int(np.floor(max_ratio * imgH))\n            imgW = max(imgH * self.min_ratio, imgW)  # assure imgH >= imgW\n\n        transform = resizeNormalize((imgW, imgH))\n        images = [transform(image) for image in images]\n        images = torch.cat([t.unsqueeze(0) for t in images], 0)\n\n        return images, labels\n"""
crnn/keys_crnn.py,0,"b'# coding:UTF-8\nalphabet = u\'\\\'\xe7\x96\x97\xe7\xbb\x9a\xe8\xaf\x9a\xe5\xa8\x87\xe6\xba\x9c\xe9\xa2\x98\xe8\xb4\xbf\xe8\x80\x85\xe5\xbb\x96\xe6\x9b\xb4\xe7\xba\xb3\xe5\x8a\xa0\xe5\xa5\x89\xe5\x85\xac\xe4\xb8\x80\xe5\xb0\xb1\xe6\xb1\xb4\xe8\xae\xa1\xe4\xb8\x8e\xe8\xb7\xaf\xe6\x88\xbf\xe5\x8e\x9f\xe5\xa6\x87208-7\xe5\x85\xb6>:],\xef\xbc\x8c\xe9\xaa\x91\xe5\x88\x88\xe5\x85\xa8\xe6\xb6\x88\xe6\x98\x8f\xe5\x82\x88\xe5\xae\x89\xe4\xb9\x85\xe9\x92\x9f\xe5\x97\x85\xe4\xb8\x8d\xe5\xbd\xb1\xe5\xa4\x84\xe9\xa9\xbd\xe8\x9c\xbf\xe8\xb5\x84\xe5\x85\xb3\xe6\xa4\xa4\xe5\x9c\xb0\xe7\x98\xb8\xe4\xb8\x93\xe9\x97\xae\xe5\xbf\x96\xe7\xa5\xa8\xe5\xab\x89\xe7\x82\x8e\xe9\x9f\xb5\xe8\xa6\x81\xe6\x9c\x88\xe7\x94\xb0\xe8\x8a\x82\xe9\x99\x82\xe9\x84\x99\xe6\x8d\x8c\xe5\xa4\x87\xe6\x8b\xb3\xe4\xbc\xba\xe7\x9c\xbc\xe7\xbd\x91\xe7\x9b\x8e\xe5\xa4\xa7\xe5\x82\x8d\xe5\xbf\x83\xe4\xb8\x9c\xe6\x84\x89\xe6\xb1\x87\xe8\xb9\xbf\xe7\xa7\x91\xe6\xaf\x8f\xe4\xb8\x9a\xe9\x87\x8c\xe8\x88\xaa\xe6\x99\x8f\xe5\xad\x97\xe5\xb9\xb3\xe5\xbd\x95\xe5\x85\x8813\xe5\xbd\xa4\xe9\xb2\xb6\xe4\xba\xa7\xe7\xa8\x8d\xe7\x9d\xa3\xe8\x85\xb4\xe6\x9c\x89\xe8\xb1\xa1\xe5\xb2\xb3\xe6\xb3\xa8\xe7\xbb\x8d\xe5\x9c\xa8\xe6\xb3\xba\xe6\x96\x87\xe5\xae\x9a\xe6\xa0\xb8\xe5\x90\x8d\xe6\xb0\xb4\xe8\xbf\x87\xe7\x90\x86\xe8\xae\xa9\xe5\x81\xb7\xe7\x8e\x87\xe7\xad\x89\xe8\xbf\x99\xe5\x8f\x91\xe2\x80\x9d\xe4\xb8\xba\xe5\x90\xab\xe8\x82\xa5\xe9\x85\x89\xe7\x9b\xb8\xe9\x84\xb1\xe4\xb8\x83\xe7\xbc\x96\xe7\x8c\xa5\xe9\x94\x9b\xe6\x97\xa5\xe9\x95\x80\xe8\x92\x82\xe6\x8e\xb0\xe5\x80\x92\xe8\xbe\x86\xe6\xa0\xbe\xe6\xa0\x97\xe7\xbb\xbc\xe6\xb6\xa9\xe5\xb7\x9e\xe9\x9b\x8c\xe6\xbb\x91\xe9\xa6\x80\xe4\xba\x86\xe6\x9c\xba\xe5\x9d\x97\xe5\x8f\xb8\xe5\xae\xb0\xe7\x94\x99\xe5\x85\xb4\xe7\x9f\xbd\xe6\x8a\x9a\xe4\xbf\x9d\xe7\x94\xa8\xe6\xb2\xa7\xe7\xa7\xa9\xe5\xa6\x82\xe6\x94\xb6\xe6\x81\xaf\xe6\xbb\xa5\xe9\xa1\xb5\xe7\x96\x91\xe5\x9f\xa0!\xef\xbc\x81\xe5\xa7\xa5\xe5\xbc\x82\xe6\xa9\xb9\xe9\x92\x87\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\x84\xe7\x9a\x84\xe6\xa4\xb4\xe6\xb2\xab\xe5\x9b\xbd\xe7\xbb\xa5\xe7\x8d\xa0\xe6\x8a\xa5\xe5\xbc\x80\xe6\xb0\x91\xe8\x9c\x87\xe4\xbd\x95\xe5\x88\x86\xe5\x87\x87\xe9\x95\xbf\xe8\xae\xa5\xe8\x97\x8f\xe6\x8e\x8f\xe6\x96\xbd\xe7\xbe\xbd\xe4\xb8\xad\xe8\xae\xb2\xe6\xb4\xbe\xe5\x98\x9f\xe4\xba\xba\xe6\x8f\x90\xe6\xb5\xbc\xe9\x97\xb4\xe4\xb8\x96\xe8\x80\x8c\xe5\x8f\xa4\xe5\xa4\x9a\xe5\x80\xaa\xe5\x94\x87\xe9\xa5\xaf\xe6\x8e\xa7\xe5\xba\x9a\xe9\xa6\x96\xe8\xb5\x9b\xe8\x9c\x93\xe5\x91\xb3\xe6\x96\xad\xe5\x88\xb6\xe8\xa7\x89\xe6\x8a\x80\xe6\x9b\xbf\xe8\x89\xb0\xe6\xba\xa2\xe6\xbd\xae\xe5\xa4\x95\xe9\x92\xba\xe5\xa4\x96\xe6\x91\x98\xe6\x9e\x8b\xe5\x8a\xa8\xe5\x8f\x8c\xe5\x8d\x95\xe5\x95\xae\xe6\x88\xb7\xe6\x9e\x87\xe7\xa1\xae\xe9\x94\xa6\xe6\x9b\x9c\xe6\x9d\x9c\xe6\x88\x96\xe8\x83\xbd\xe6\x95\x88\xe9\x9c\x9c\xe7\x9b\x92\xe7\x84\xb6\xe4\xbe\x97\xe7\x94\xb5\xe6\x99\x81\xe6\x94\xbe\xe6\xad\xa5\xe9\xb9\x83\xe6\x96\xb0\xe6\x9d\x96\xe8\x9c\x82\xe5\x90\x92\xe6\xbf\x82\xe7\x9e\xac\xe8\xaf\x84\xe6\x80\xbb\xe9\x9a\x8d\xe5\xaf\xb9\xe7\x8b\xac\xe5\x90\x88\xe4\xb9\x9f\xe6\x98\xaf\xe5\xba\x9c\xe9\x9d\x92\xe5\xa4\xa9\xe8\xaf\xb2\xe5\xa2\x99\xe7\xbb\x84\xe6\xbb\xb4\xe7\xba\xa7\xe9\x82\x80\xe5\xb8\x98\xe7\xa4\xba\xe5\xb7\xb2\xe6\x97\xb6\xe9\xaa\xb8\xe4\xbb\x84\xe6\xb3\x85\xe5\x92\x8c\xe9\x81\xa8\xe5\xba\x97\xe9\x9b\x87\xe7\x96\xab\xe6\x8c\x81\xe5\xb7\x8d\xe8\xb8\xae\xe5\xa2\x83\xe5\x8f\xaa\xe4\xba\xa8\xe7\x9b\xae\xe9\x89\xb4\xe5\xb4\xa4\xe9\x97\xb2\xe4\xbd\x93\xe6\xb3\x84\xe6\x9d\x82\xe4\xbd\x9c\xe8\x88\xac\xe8\xbd\xb0\xe5\x8c\x96\xe8\xa7\xa3\xe8\xbf\x82\xe8\xaf\xbf\xe8\x9b\xad\xe7\x92\x80\xe8\x85\xbe\xe5\x91\x8a\xe7\x89\x88\xe6\x9c\x8d\xe7\x9c\x81\xe5\xb8\x88\xe5\xb0\x8f\xe8\xa7\x84\xe7\xa8\x8b\xe7\xba\xbf\xe6\xb5\xb7\xe5\x8a\x9e\xe5\xbc\x95\xe4\xba\x8c\xe6\xa1\xa7\xe7\x89\x8c\xe7\xa0\xba\xe6\xb4\x84\xe8\xa3\xb4\xe4\xbf\xae\xe5\x9b\xbe\xe7\x97\xab\xe8\x83\xa1\xe8\xae\xb8\xe7\x8a\x8a\xe4\xba\x8b\xe9\x83\x9b\xe5\x9f\xba\xe6\x9f\xb4\xe5\x91\xbc\xe9\xa3\x9f\xe7\xa0\x94\xe5\xa5\xb6\xe5\xbe\x8b\xe8\x9b\x8b\xe5\x9b\xa0\xe8\x91\x86\xe5\xaf\x9f\xe6\x88\x8f\xe8\xa4\x92\xe6\x88\x92\xe5\x86\x8d\xe6\x9d\x8e\xe9\xaa\x81\xe5\xb7\xa5\xe8\xb2\x82\xe6\xb2\xb9\xe9\xb9\x85\xe7\xab\xa0\xe5\x95\x84\xe4\xbc\x91\xe5\x9c\xba\xe7\xbb\x99\xe7\x9d\xa1\xe7\xba\xb7\xe8\xb1\x86\xe5\x99\xa8\xe6\x8d\x8e\xe8\xaf\xb4\xe6\x95\x8f\xe5\xad\xa6\xe4\xbc\x9a\xe6\xb5\x92\xe8\xae\xbe\xe8\xaf\x8a\xe6\xa0\xbc\xe5\xbb\x93\xe6\x9f\xa5\xe6\x9d\xa5\xe9\x9c\x93\xe5\xae\xa4\xe6\xba\x86\xef\xbf\xa0\xe8\xaf\xa1\xe5\xaf\xa5\xe7\x84\x95\xe8\x88\x9c\xe6\x9f\x92\xe7\x8b\x90\xe5\x9b\x9e\xe6\x88\x9f\xe7\xa0\xbe\xe5\x8e\x84\xe5\xae\x9e\xe7\xbf\xa9\xe5\xb0\xbf\xe4\xba\x94\xe5\x85\xa5\xe5\xbe\x84\xe6\x83\xad\xe5\x96\xb9\xe8\x82\xa1\xe5\xae\x87\xe7\xaf\x9d|;\xe7\xbe\x8e\xe6\x9c\x9f\xe4\xba\x91\xe4\xb9\x9d\xe7\xa5\xba\xe6\x89\xae\xe9\x9d\xa0\xe9\x94\x9d\xe6\xa7\x8c\xe7\xb3\xbb\xe4\xbc\x81\xe9\x85\xb0\xe9\x98\x8a\xe6\x9a\x82\xe8\x9a\x95\xe5\xbf\xbb\xe8\xb1\x81\xe6\x9c\xac\xe7\xbe\xb9\xe6\x89\xa7\xe6\x9d\xa1\xe9\x92\xa6H\xe7\x8d\x92\xe9\x99\x90\xe8\xbf\x9b\xe5\xad\xa3\xe6\xa5\xa6\xe4\xba\x8e\xe8\x8a\x98\xe7\x8e\x96\xe9\x93\x8b\xe8\x8c\xaf\xe6\x9c\xaa\xe7\xad\x94\xe7\xb2\x98\xe6\x8b\xac\xe6\xa0\xb7\xe7\xb2\xbe\xe6\xac\xa0\xe7\x9f\xa2\xe7\x94\xa5\xe5\xb8\xb7\xe5\xb5\xa9\xe6\x89\xa3\xe4\xbb\xa4\xe4\xbb\x94\xe9\xa3\x8e\xe7\x9a\x88\xe8\xa1\x8c\xe6\x94\xaf\xe9\x83\xa8\xe8\x93\x89\xe5\x88\xae\xe7\xab\x99\xe8\x9c\xa1\xe6\x95\x91\xe9\x92\x8a\xe6\xb1\x97\xe6\x9d\xbe\xe5\xab\x8c\xe6\x88\x90\xe5\x8f\xaf.\xe9\xb9\xa4\xe9\x99\xa2\xe4\xbb\x8e\xe4\xba\xa4\xe6\x94\xbf\xe6\x80\x95\xe6\xb4\xbb\xe8\xb0\x83\xe7\x90\x83\xe5\xb1\x80\xe9\xaa\x8c\xe9\xab\x8c\xe7\xac\xac\xe9\x9f\xab\xe8\xb0\x97\xe4\xb8\xb2\xe5\x88\xb0\xe5\x9c\x86\xe5\xb9\xb4\xe7\xb1\xb3/*\xe5\x8f\x8b\xe5\xbf\xbf\xe6\xa3\x80\xe5\x8c\xba\xe7\x9c\x8b\xe8\x87\xaa\xe6\x95\xa2\xe5\x88\x83\xe4\xb8\xaa\xe5\x85\xb9\xe5\xbc\x84\xe6\xb5\x81\xe7\x95\x99\xe5\x90\x8c\xe6\xb2\xa1\xe9\xbd\xbf\xe6\x98\x9f\xe8\x81\x86\xe8\xbd\xbc\xe6\xb9\x96\xe4\xbb\x80\xe4\xb8\x89\xe5\xbb\xba\xe8\x9b\x94\xe5\x84\xbf\xe6\xa4\x8b\xe6\xb1\x95\xe9\x9c\x87\xe9\xa2\xa7\xe9\xb2\xa4\xe8\xb7\x9f\xe5\x8a\x9b\xe6\x83\x85\xe7\x92\xba\xe9\x93\xa8\xe9\x99\xaa\xe5\x8a\xa1\xe6\x8c\x87\xe6\x97\x8f\xe8\xae\xad\xe6\xbb\xa6\xe9\x84\xa3\xe6\xbf\xae\xe6\x89\x92\xe5\x95\x86\xe7\xae\xb1\xe5\x8d\x81\xe5\x8f\xac\xe6\x85\xb7\xe8\xbe\x97\xe6\x89\x80\xe8\x8e\x9e\xe7\xae\xa1\xe6\x8a\xa4\xe8\x87\xad\xe6\xa8\xaa\xe7\xa1\x92\xe5\x97\x93\xe6\x8e\xa5\xe4\xbe\xa6\xe5\x85\xad\xe9\x9c\xb2\xe5\x85\x9a\xe9\xa6\x8b\xe9\xa9\xbe\xe5\x89\x96\xe9\xab\x98\xe4\xbe\xac\xe5\xa6\xaa\xe5\xb9\x82\xe7\x8c\x97\xe7\xbb\xba\xe9\xaa\x90\xe5\xa4\xae\xe9\x85\x90\xe5\xad\x9d\xe7\xad\x9d\xe8\xaf\xbe\xe5\xbe\x87\xe7\xbc\xb0\xe9\x97\xa8\xe7\x94\xb7\xe8\xa5\xbf\xe9\xa1\xb9\xe5\x8f\xa5\xe8\xb0\x99\xe7\x9e\x92\xe7\xa7\x83\xe7\xaf\x87\xe6\x95\x99\xe7\xa2\xb2\xe7\xbd\x9a\xe5\xa3\xb0\xe5\x91\x90\xe6\x99\xaf\xe5\x89\x8d\xe5\xaf\x8c\xe5\x98\xb4\xe9\xb3\x8c\xe7\xa8\x80\xe5\x85\x8d\xe6\x9c\x8b\xe5\x95\xac\xe7\x9d\x90\xe5\x8e\xbb\xe8\xb5\x88\xe9\xb1\xbc\xe4\xbd\x8f\xe8\x82\xa9\xe6\x84\x95\xe9\x80\x9f\xe6\x97\x81\xe6\xb3\xa2\xe5\x8e\x85\xe5\x81\xa5\xe8\x8c\xbc\xe5\x8e\xa5\xe9\xb2\x9f\xe8\xb0\x85\xe6\x8a\x95\xe6\x94\xb8\xe7\x82\x94\xe6\x95\xb0\xe6\x96\xb9\xe5\x87\xbb\xe5\x91\x8b\xe8\xb0\x88\xe7\xbb\xa9\xe5\x88\xab\xe6\x84\xab\xe5\x83\x9a\xe8\xba\xac\xe9\xb9\xa7\xe8\x83\xaa\xe7\x82\xb3\xe6\x8b\x9b\xe5\x96\x87\xe8\x86\xa8\xe6\xb3\xb5\xe8\xb9\xa6\xe6\xaf\x9b\xe7\xbb\x9354\xe8\xb0\xb1\xe8\xaf\x86\xe9\x99\x95\xe7\xb2\xbd\xe5\xa9\x9a\xe6\x8b\x9f\xe6\x9e\x84\xe4\xb8\x94\xe6\x90\x9c\xe4\xbb\xbb\xe6\xbd\x98\xe6\xaf\x94\xe9\x83\xa2\xe5\xa6\xa8\xe9\x86\xaa\xe9\x99\x80\xe6\xa1\x94\xe7\xa2\x98\xe6\x89\x8e\xe9\x80\x89\xe5\x93\x88\xe9\xaa\xb7\xe6\xa5\xb7\xe4\xba\xbf\xe6\x98\x8e\xe7\xbc\x86\xe8\x84\xaf\xe7\x9b\x91\xe7\x9d\xab\xe9\x80\xbb\xe5\xa9\xb5\xe5\x85\xb1\xe8\xb5\xb4\xe6\xb7\x9d\xe5\x87\xa1\xe6\x83\xa6\xe5\x8f\x8a\xe8\xbe\xbe\xe6\x8f\x96\xe8\xb0\xa9\xe6\xbe\xb9\xe5\x87\x8f\xe7\x84\xb0\xe8\x9b\xb9\xe7\x95\xaa\xe7\xa5\x81\xe6\x9f\x8f\xe5\x91\x98\xe7\xa6\x84\xe6\x80\xa1\xe5\xb3\xa4\xe9\xbe\x99\xe7\x99\xbd\xe5\x8f\xbd\xe7\x94\x9f\xe9\x97\xaf\xe8\xb5\xb7\xe7\xbb\x86\xe8\xa3\x85\xe8\xb0\x95\xe7\xab\x9f\xe8\x81\x9a\xe9\x92\x99\xe4\xb8\x8a\xe5\xaf\xbc\xe6\xb8\x8a\xe6\x8c\x89\xe8\x89\xbe\xe8\xbe\x98\xe6\x8c\xa1\xe8\x80\x92\xe7\x9b\xb9\xe9\xa5\xaa\xe8\x87\x80\xe8\xae\xb0\xe9\x82\xae\xe8\x95\x99\xe5\x8f\x97\xe5\x90\x84\xe5\x8c\xbb\xe6\x90\x82\xe6\x99\xae\xe6\xbb\x87\xe6\x9c\x97\xe8\x8c\xb8\xe5\xb8\xa6\xe7\xbf\xbb\xe9\x85\x9a(\xe5\x85\x89\xe5\xa0\xa4\xe5\xa2\x9f\xe8\x94\xb7\xe4\xb8\x87\xe5\xb9\xbb\xe3\x80\x93\xe7\x91\x99\xe8\xbe\x88\xe6\x98\xa7\xe7\x9b\x8f\xe4\xba\x98\xe8\x9b\x80\xe5\x90\x89\xe9\x93\xb0\xe8\xaf\xb7\xe5\xad\x90\xe5\x81\x87\xe9\x97\xbb\xe7\xa8\x8e\xe4\xba\x95\xe8\xaf\xa9\xe5\x93\xa8\xe5\xab\x82\xe5\xa5\xbd\xe9\x9d\xa2\xe7\x90\x90\xe6\xa0\xa1\xe9\xa6\x8a\xe9\xac\xa3\xe7\xbc\x82\xe8\x90\xa5\xe8\xae\xbf\xe7\x82\x96\xe5\x8d\xa0\xe5\x86\x9c\xe7\xbc\x80\xe5\x90\xa6\xe7\xbb\x8f\xe9\x92\x9a\xe6\xa3\xb5\xe8\xb6\x9f\xe5\xbc\xa0\xe4\xba\x9f\xe5\x90\x8f\xe8\x8c\xb6\xe8\xb0\xa8\xe6\x8d\xbb\xe8\xae\xba\xe8\xbf\xb8\xe5\xa0\x82\xe7\x8e\x89\xe4\xbf\xa1\xe5\x90\xa7\xe7\x9e\xa0\xe4\xb9\xa1\xe5\xa7\xac\xe5\xaf\xba\xe5\x92\xac\xe6\xba\x8f\xe8\x8b\x84\xe7\x9a\xbf\xe6\x84\x8f\xe8\xb5\x89\xe5\xae\x9d\xe5\xb0\x94\xe9\x92\xb0\xe8\x89\xba\xe7\x89\xb9\xe5\x94\xb3\xe8\xb8\x89\xe9\x83\xbd\xe8\x8d\xa3\xe5\x80\x9a\xe7\x99\xbb\xe8\x8d\x90\xe4\xb8\xa7\xe5\xa5\x87\xe6\xb6\xb5\xe6\x89\xb9\xe7\x82\xad\xe8\xbf\x91\xe7\xac\xa6\xe5\x82\xa9\xe6\x84\x9f\xe9\x81\x93\xe7\x9d\x80\xe8\x8f\x8a\xe8\x99\xb9\xe4\xbb\xb2\xe4\xbc\x97\xe6\x87\x88\xe6\xbf\xaf\xe9\xa2\x9e\xe7\x9c\xba\xe5\x8d\x97\xe9\x87\x8a\xe5\x8c\x97\xe7\xbc\x9d\xe6\xa0\x87\xe6\x97\xa2\xe8\x8c\x97\xe6\x95\xb4\xe6\x92\xbc\xe8\xbf\xa4\xe8\xb4\xb2\xe6\x8c\x8e\xe8\x80\xb1\xe6\x8b\x92\xe6\x9f\x90\xe5\xa6\x8d\xe5\x8d\xab\xe5\x93\x87\xe8\x8b\xb1\xe7\x9f\xb6\xe8\x97\xa9\xe6\xb2\xbb\xe4\xbb\x96\xe5\x85\x83\xe9\xa2\x86\xe8\x86\x9c\xe9\x81\xae\xe7\xa9\x97\xe8\x9b\xbe\xe9\xa3\x9e\xe8\x8d\x92\xe6\xa3\xba\xe5\x8a\xab\xe4\xb9\x88\xe5\xb8\x82\xe7\x81\xab\xe6\xb8\xa9\xe6\x8b\x88\xe6\xa3\x9a\xe6\xb4\xbc\xe8\xbd\xac\xe6\x9e\x9c\xe5\xa5\x95\xe5\x8d\xb8\xe8\xbf\xaa\xe4\xbc\xb8\xe6\xb3\xb3\xe6\x96\x97\xe9\x82\xa1\xe4\xbe\x84\xe6\xb6\xa8\xe5\xb1\xaf\xe8\x90\x8b\xe8\x83\xad\xe6\xb0\xa1\xe5\xb4\xae\xe6\x9e\x9e\xe6\x83\xa7\xe5\x86\x92\xe5\xbd\xa9\xe6\x96\x9c\xe6\x89\x8b\xe8\xb1\x9a\xe9\x9a\x8f\xe6\x97\xad\xe6\xb7\x91\xe5\xa6\x9e\xe5\xbd\xa2\xe8\x8f\x8c\xe5\x90\xb2\xe6\xb2\xb1\xe4\xba\x89\xe9\xa9\xaf\xe6\xad\xb9\xe6\x8c\x9f\xe5\x85\x86\xe6\x9f\xb1\xe4\xbc\xa0\xe8\x87\xb3\xe5\x8c\x85\xe5\x86\x85\xe5\x93\x8d\xe4\xb8\xb4\xe7\xba\xa2\xe5\x8a\x9f\xe5\xbc\xa9\xe8\xa1\xa1\xe5\xaf\x82\xe7\xa6\x81\xe8\x80\x81\xe6\xa3\x8d\xe8\x80\x86\xe6\xb8\x8d\xe7\xbb\x87\xe5\xae\xb3\xe6\xb0\xb5\xe6\xb8\x91\xe5\xb8\x83\xe8\xbd\xbd\xe9\x9d\xa5\xe5\x97\xac\xe8\x99\xbd\xe8\x8b\xb9\xe5\x92\xa8\xe5\xa8\x84\xe5\xba\x93\xe9\x9b\x89\xe6\xa6\x9c\xe5\xb8\x9c\xe5\x98\xb2\xe5\xa5\x97\xe7\x91\x9a\xe4\xba\xb2\xe7\xb0\xb8\xe6\xac\xa7\xe8\xbe\xb96\xe8\x85\xbf\xe6\x97\xae\xe6\x8a\x9b\xe5\x90\xb9\xe7\x9e\xb3\xe5\xbe\x97\xe9\x95\x93\xe6\xa2\x97\xe5\x8e\xa8\xe7\xbb\xa7\xe6\xbc\xbe\xe6\x84\xa3\xe6\x86\xa8\xe5\xa3\xab\xe7\xad\x96\xe7\xaa\x91\xe6\x8a\x91\xe8\xba\xaf\xe8\xa5\x9f\xe8\x84\x8f\xe5\x8f\x82\xe8\xb4\xb8\xe8\xa8\x80\xe5\xb9\xb2\xe7\xbb\xb8\xe9\xb3\x84\xe7\xa9\xb7\xe8\x97\x9c\xe9\x9f\xb3\xe6\x8a\x98\xe8\xaf\xa6)\xe4\xb8\xbe\xe6\x82\x8d\xe7\x94\xb8\xe7\x99\x8c\xe9\xbb\x8e\xe8\xb0\xb4\xe6\xad\xbb\xe7\xbd\xa9\xe8\xbf\x81\xe5\xaf\x92\xe9\xa9\xb7\xe8\xa2\x96\xe5\xaa\x92\xe8\x92\x8b\xe6\x8e\x98\xe6\xa8\xa1\xe7\xba\xa0\xe6\x81\xa3\xe8\xa7\x82\xe7\xa5\x96\xe8\x9b\x86\xe7\xa2\x8d\xe4\xbd\x8d\xe7\xa8\xbf\xe4\xb8\xbb\xe6\xbe\xa7\xe8\xb7\x8c\xe7\xad\x8f\xe4\xba\xac\xe9\x94\x8f\xe5\xb8\x9d\xe8\xb4\xb4\xe8\xaf\x81\xe7\xb3\xa0\xe6\x89\x8d\xe9\xbb\x84\xe9\xb2\xb8\xe7\x95\xa5\xe7\x82\xaf\xe9\xa5\xb1\xe5\x9b\x9b\xe5\x87\xba\xe5\x9b\xad\xe7\x8a\x80\xe7\x89\xa7\xe5\xae\xb9\xe6\xb1\x89\xe6\x9d\x86\xe6\xb5\x88\xe6\xb1\xb0\xe7\x91\xb7\xe9\x80\xa0\xe8\x99\xab\xe7\x98\xa9\xe6\x80\xaa\xe9\xa9\xb4\xe6\xb5\x8e\xe5\xba\x94\xe8\x8a\xb1\xe6\xb2\xa3\xe8\xb0\x94\xe5\xa4\x99\xe6\x97\x85\xe4\xbb\xb7\xe7\x9f\xbf\xe4\xbb\xa5\xe8\x80\x83su\xe5\x91\xa6\xe6\x99\x92\xe5\xb7\xa1\xe8\x8c\x85\xe5\x87\x86\xe8\x82\x9f\xe7\x93\xb4\xe8\xa9\xb9\xe4\xbb\x9f\xe8\xa4\x82\xe8\xaf\x91\xe6\xa1\x8c\xe6\xb7\xb7\xe5\xae\x81\xe6\x80\xa6\xe9\x83\x91\xe6\x8a\xbf\xe4\xba\x9b\xe4\xbd\x99\xe9\x84\x82\xe9\xa5\xb4\xe6\x94\x92\xe7\x8f\x91\xe7\xbe\xa4\xe9\x98\x96\xe5\xb2\x94\xe7\x90\xa8\xe8\x97\x93\xe9\xa2\x84\xe7\x8e\xaf\xe6\xb4\xae\xe5\xb2\x8c\xe5\xae\x80\xe6\x9d\xb2\xe7\x80\xb5\xe6\x9c\x80\xe5\xb8\xb8\xe5\x9b\xa1\xe5\x91\xa8\xe8\xb8\x8a\xe5\xa5\xb3\xe9\xbc\x93\xe8\xa2\xad\xe5\x96\x89\xe7\xae\x80\xe8\x8c\x83\xe8\x96\xaf\xe9\x81\x90\xe7\x96\x8f\xe7\xb2\xb1\xe9\xbb\x9c\xe7\xa6\xa7\xe6\xb3\x95\xe7\xae\x94\xe6\x96\xa4\xe9\x81\xa5\xe6\xb1\x9d\xe5\xa5\xa5\xe7\x9b\xb4\xe8\xb4\x9e\xe6\x92\x91\xe7\xbd\xae\xe7\xbb\xb1\xe9\x9b\x86\xe5\xa5\xb9\xe9\xa6\x85\xe9\x80\x97\xe9\x92\xa7\xe6\xa9\xb1\xe9\xad\x89[\xe6\x81\x99\xe8\xba\x81\xe5\x94\xa49\xe6\x97\xba\xe8\x86\x98\xe5\xbe\x85\xe8\x84\xbe\xe6\x83\xab\xe8\xb4\xad\xe5\x90\x97\xe4\xbe\x9d\xe7\x9b\xb2\xe5\xba\xa6\xe7\x98\xbf\xe8\xa0\x96\xe4\xbf\xbe\xe4\xb9\x8b\xe9\x95\x97\xe6\x8b\x87\xe9\xb2\xb5\xe5\x8e\x9d\xe7\xb0\xa7\xe7\xbb\xad\xe6\xac\xbe\xe5\xb1\x95\xe5\x95\x83\xe8\xa1\xa8\xe5\x89\x94\xe5\x93\x81\xe9\x92\xbb\xe8\x85\xad\xe6\x8d\x9f\xe6\xb8\x85\xe9\x94\xb6\xe7\xbb\x9f\xe6\xb6\x8c\xe5\xaf\xb8\xe6\xbb\xa8\xe8\xb4\xaa\xe9\x93\xbe\xe5\x90\xa0\xe5\x86\x88\xe4\xbc\x8e\xe8\xbf\xa5\xe5\x92\x8f\xe5\x90\x81\xe8\xa7\x88\xe9\x98\xb2\xe8\xbf\x85\xe5\xa4\xb1\xe6\xb1\xbe\xe9\x98\x94\xe9\x80\xb5\xe7\xbb\x80\xe8\x94\x91\xe5\x88\x97\xe5\xb7\x9d\xe5\x87\xad\xe5\x8a\xaa\xe7\x86\xa8\xe6\x8f\xaa\xe5\x88\xa9\xe4\xbf\xb1\xe7\xbb\x89\xe6\x8a\xa2\xe9\xb8\xa8\xe6\x88\x91\xe5\x8d\xb3\xe8\xb4\xa3\xe8\x86\xa6\xe6\x98\x93\xe6\xaf\x93\xe9\xb9\x8a\xe5\x88\xb9\xe7\x8e\xb7\xe5\xb2\xbf\xe7\xa9\xba\xe5\x98\x9e\xe7\xbb\x8a\xe6\x8e\x92\xe6\x9c\xaf\xe4\xbc\xb0\xe9\x94\xb7\xe8\xbf\x9d\xe4\xbb\xac\xe8\x8b\x9f\xe9\x93\x9c\xe6\x92\xad\xe8\x82\x98\xe4\xbb\xb6\xe7\x83\xab\xe5\xae\xa1\xe9\xb2\x82\xe5\xb9\xbf\xe5\x83\x8f\xe9\x93\x8c\xe6\x83\xb0\xe9\x93\x9f\xe5\xb7\xb3\xe8\x83\x8d\xe9\xb2\x8d\xe5\xba\xb7\xe6\x86\xa7\xe8\x89\xb2\xe6\x81\xa2\xe6\x83\xb3\xe6\x8b\xb7\xe5\xb0\xa4\xe7\x96\xb3\xe7\x9f\xa5SYFDA\xe5\xb3\x84\xe8\xa3\x95\xe5\xb8\xae\xe6\x8f\xa1\xe6\x90\x94\xe6\xb0\x90\xe6\xb0\x98\xe9\x9a\xbe\xe5\xa2\x92\xe6\xb2\xae\xe9\x9b\xa8\xe5\x8f\x81\xe7\xbc\xa5\xe6\x82\xb4\xe8\x97\x90\xe6\xb9\xab\xe5\xa8\x9f\xe8\x8b\x91\xe7\xa8\xa0\xe9\xa2\x9b\xe7\xb0\x87\xe5\x90\x8e\xe9\x98\x95\xe9\x97\xad\xe8\x95\xa4\xe7\xbc\x9a\xe6\x80\x8e\xe4\xbd\x9e\xe7\xa0\x81\xe5\x98\xa4\xe8\x94\xa1\xe7\x97\x8a\xe8\x88\xb1\xe8\x9e\xaf\xe5\xb8\x95\xe8\xb5\xab\xe6\x98\xb5\xe5\x8d\x87\xe7\x83\xac\xe5\xb2\xab\xe3\x80\x81\xe7\x96\xb5\xe8\x9c\xbb\xe9\xab\x81\xe8\x95\xa8\xe9\x9a\xb6\xe7\x83\x9b\xe6\xa2\xb0\xe4\xb8\x91\xe7\x9b\x82\xe6\xa2\x81\xe5\xbc\xba\xe9\xb2\x9b\xe7\x94\xb1\xe6\x8b\x98\xe6\x8f\x89\xe5\x8a\xad\xe9\xbe\x9f\xe6\x92\xa4\xe9\x92\xa9\xe5\x91\x95\xe5\xad\x9b\xe8\xb4\xb9\xe5\xa6\xbb\xe6\xbc\x82\xe6\xb1\x82\xe9\x98\x91\xe5\xb4\x96\xe7\xa7\xa4\xe7\x94\x98\xe9\x80\x9a\xe6\xb7\xb1\xe8\xa1\xa5\xe8\xb5\x83\xe5\x9d\x8e\xe5\xba\x8a\xe5\x95\xaa\xe6\x89\xbf\xe5\x90\xbc\xe9\x87\x8f\xe6\x9a\x87\xe9\x92\xbc\xe7\x83\xa8\xe9\x98\x82\xe6\x93\x8e\xe8\x84\xb1\xe9\x80\xae\xe7\xa7\xb0P\xe7\xa5\x9e\xe5\xb1\x9e\xe7\x9f\x97\xe5\x8d\x8e\xe5\xb1\x8a\xe7\x8b\x8d\xe8\x91\x91\xe6\xb1\xb9\xe8\x82\xb2\xe6\x82\xa3\xe7\xaa\x92\xe8\x9b\xb0\xe4\xbd\xbc\xe9\x9d\x99\xe6\xa7\x8e\xe8\xbf\x90\xe9\xb3\x97\xe5\xba\x86\xe9\x80\x9d\xe6\x9b\xbc\xe7\x96\xb1\xe5\x85\x8b\xe4\xbb\xa3\xe5\xae\x98\xe6\xad\xa4\xe9\xba\xb8\xe8\x80\xa7\xe8\x9a\x8c\xe6\x99\x9f\xe4\xbe\x8b\xe7\xa1\x80\xe6\xa6\x9b\xe5\x89\xaf\xe6\xb5\x8b\xe5\x94\xb0\xe7\xbc\xa2\xe8\xbf\xb9\xe7\x81\xac\xe9\x9c\x81\xe8\xba\xab\xe5\xb2\x81\xe8\xb5\xad\xe6\x89\x9b\xe5\x8f\x88\xe8\x8f\xa1\xe4\xb9\x9c\xe9\x9b\xbe\xe6\x9d\xbf\xe8\xaf\xbb\xe9\x99\xb7\xe5\xbe\x89\xe8\xb4\xaf\xe9\x83\x81\xe8\x99\x91\xe5\x8f\x98\xe9\x92\x93\xe8\x8f\x9c\xe5\x9c\xbe\xe7\x8e\xb0\xe7\x90\xa2\xe5\xbc\x8f\xe4\xb9\x90\xe7\xbb\xb4\xe6\xb8\x94\xe6\xb5\x9c\xe5\xb7\xa6\xe5\x90\xbe\xe8\x84\x91\xe9\x92\xa1\xe8\xad\xa6T\xe5\x95\xb5\xe6\x8b\xb4\xe5\x81\x8c\xe6\xbc\xb1\xe6\xb9\xbf\xe7\xa1\x95\xe6\xad\xa2\xe9\xaa\xbc\xe9\xad\x84\xe7\xa7\xaf\xe7\x87\xa5\xe8\x81\x94\xe8\xb8\xa2\xe7\x8e\x9b|\xe5\x88\x99\xe7\xaa\xbf\xe8\xa7\x81\xe6\x8c\xaf\xe7\x95\xbf\xe9\x80\x81\xe7\x8f\xad\xe9\x92\xbd\xe6\x82\xa8\xe8\xb5\xb5\xe5\x88\xa8\xe5\x8d\xb0\xe8\xae\xa8\xe8\xb8\x9d\xe7\xb1\x8d\xe8\xb0\xa1\xe8\x88\x8c\xe5\xb4\xa7\xe6\xb1\xbd\xe8\x94\xbd\xe6\xb2\xaa\xe9\x85\xa5\xe7\xbb\x92\xe6\x80\x96\xe8\xb4\xa2\xe5\xb8\x96\xe8\x82\xb1\xe7\xa7\x81\xe8\x8e\x8e\xe5\x8b\x8b\xe7\xbe\x94\xe9\x9c\xb8\xe5\x8a\xb1\xe5\x93\xbc\xe5\xb8\x90\xe5\xb0\x86\xe5\xb8\x85\xe6\xb8\xa0\xe7\xba\xaa\xe5\xa9\xb4\xe5\xa8\xa9\xe5\xb2\xad\xe5\x8e\x98\xe6\xbb\x95\xe5\x90\xbb\xe4\xbc\xa4\xe5\x9d\x9d\xe5\x86\xa0\xe6\x88\x8a\xe9\x9a\x86\xe7\x98\x81\xe4\xbb\x8b\xe6\xb6\xa7\xe7\x89\xa9\xe9\xbb\x8d\xe5\xb9\xb6\xe5\xa7\x97\xe5\xa5\xa2\xe8\xb9\x91\xe6\x8e\xa3\xe5\x9e\xb8\xe9\x94\xb4\xe5\x91\xbd\xe7\xae\x8d\xe6\x8d\x89\xe7\x97\x85\xe8\xbe\x96\xe7\x90\xb0\xe7\x9c\xad\xe8\xbf\xa9\xe8\x89\x98\xe7\xbb\x8c\xe7\xb9\x81\xe5\xaf\x85\xe8\x8b\xa5\xe6\xaf\x8b\xe6\x80\x9d\xe8\xaf\x89\xe7\xb1\xbb\xe8\xaf\x88\xe7\x87\xae\xe8\xbd\xb2\xe9\x85\xae\xe7\x8b\x82\xe9\x87\x8d\xe5\x8f\x8d\xe8\x81\x8c\xe7\xad\xb1\xe5\x8e\xbf\xe5\xa7\x94\xe7\xa3\x95\xe7\xbb\xa3\xe5\xa5\x96\xe6\x99\x8b\xe6\xbf\x89\xe5\xbf\x97\xe5\xbe\xbd\xe8\x82\xa0\xe5\x91\x88\xe7\x8d\x90\xe5\x9d\xbb\xe5\x8f\xa3\xe7\x89\x87\xe7\xa2\xb0\xe5\x87\xa0\xe6\x9d\x91\xe6\x9f\xbf\xe5\x8a\xb3\xe6\x96\x99\xe8\x8e\xb7\xe4\xba\xa9\xe6\x83\x95\xe6\x99\x95\xe5\x8e\x8c\xe5\x8f\xb7\xe7\xbd\xa2\xe6\xb1\xa0\xe6\xad\xa3\xe9\x8f\x96\xe7\x85\xa8\xe5\xae\xb6\xe6\xa3\x95\xe5\xa4\x8d\xe5\xb0\x9d\xe6\x87\x8b\xe8\x9c\xa5\xe9\x94\x85\xe5\xb2\x9b\xe6\x89\xb0\xe9\x98\x9f\xe5\x9d\xa0\xe7\x98\xbe\xe9\x92\xac@\xe5\x8d\xa7\xe7\x96\xa3\xe9\x95\x87\xe8\xad\xac\xe5\x86\xb0\xe5\xbd\xb7\xe9\xa2\x91\xe9\xbb\xaf\xe6\x8d\xae\xe5\x9e\x84\xe9\x87\x87\xe5\x85\xab\xe7\xbc\xaa\xe7\x98\xab\xe5\x9e\x8b\xe7\x86\xb9\xe7\xa0\xb0\xe6\xa5\xa0\xe8\xa5\x81\xe7\xae\x90\xe4\xbd\x86\xe5\x98\xb6\xe7\xbb\xb3\xe5\x95\xa4\xe6\x8b\x8d\xe7\x9b\xa5\xe7\xa9\x86\xe5\x82\xb2\xe6\xb4\x97\xe7\x9b\xaf\xe5\xa1\x98\xe6\x80\x94\xe7\xad\x9b\xe4\xb8\xbf\xe5\x8f\xb0\xe6\x81\x92\xe5\x96\x82\xe8\x91\x9b\xe6\xb0\xb8\xef\xbf\xa5\xe7\x83\x9f\xe9\x85\x92\xe6\xa1\xa6\xe4\xb9\xa6\xe7\xa0\x82\xe8\x9a\x9d\xe7\xbc\x89\xe6\x80\x81\xe7\x80\x9a\xe8\xa2\x84\xe5\x9c\xb3\xe8\xbd\xbb\xe8\x9b\x9b\xe8\xb6\x85\xe6\xa6\xa7\xe9\x81\x9b\xe5\xa7\x92\xe5\xa5\x98\xe9\x93\xae\xe5\x8f\xb3\xe8\x8d\xbd\xe6\x9c\x9b\xe5\x81\xbb\xe5\x8d\xa1\xe4\xb8\xb6\xe6\xb0\xb0\xe9\x99\x84\xe5\x81\x9a\xe9\x9d\xa9\xe7\xb4\xa2\xe6\x88\x9a\xe5\x9d\xa8\xe6\xa1\xb7\xe5\x94\x81\xe5\x9e\x85\xe6\xa6\xbb\xe5\xb2\x90\xe5\x81\x8e\xe5\x9d\x9b\xe8\x8e\xa8\xe5\xb1\xb1\xe6\xae\x8a\xe5\xbe\xae\xe9\xaa\x87\xe9\x99\x88\xe7\x88\xa8\xe6\x8e\xa8\xe5\x97\x9d\xe9\xa9\xb9\xe6\xbe\xa1\xe8\x97\x81\xe5\x91\xa4\xe5\x8d\xa4\xe5\x98\xbb\xe7\xb3\x85\xe9\x80\x9b\xe4\xbe\xb5\xe9\x83\x93\xe9\x85\x8c\xe5\xbe\xb7\xe6\x91\x87\xe2\x80\xbb\xe9\xac\x83\xe8\xa2\xab\xe6\x85\xa8\xe6\xae\xa1\xe7\xbe\xb8\xe6\x98\x8c\xe6\xb3\xa1\xe6\x88\x9b\xe9\x9e\x8b\xe6\xb2\xb3\xe5\xae\xaa\xe6\xb2\xbf\xe7\x8e\xb2\xe9\xb2\xa8\xe7\xbf\x85\xe5\x93\xbd\xe6\xba\x90\xe9\x93\x85\xe8\xaf\xad\xe7\x85\xa7\xe9\x82\xaf\xe5\x9d\x80\xe8\x8d\x83\xe4\xbd\xac\xe9\xa1\xba\xe9\xb8\xb3\xe7\x94\xba\xe9\x9c\xad\xe7\x9d\xbe\xe7\x93\xa2\xe5\xa4\xb8\xe6\xa4\x81\xe6\x99\x93\xe9\x85\xbf\xe7\x97\x88\xe5\x92\x94\xe4\xbe\x8f\xe5\x88\xb8\xe5\x99\x8e\xe6\xb9\x8d\xe7\xad\xbe\xe5\x9a\xb7\xe7\xa6\xbb\xe5\x8d\x88\xe5\xb0\x9a\xe7\xa4\xbe\xe9\x94\xa4\xe8\x83\x8c\xe5\xad\x9f\xe4\xbd\xbf\xe6\xb5\xaa\xe7\xbc\xa6\xe6\xbd\x8d\xe9\x9e\x85\xe5\x86\x9b\xe5\xa7\xb9\xe9\xa9\xb6\xe7\xac\x91\xe9\xb3\x9f\xe9\xb2\x81\xe3\x80\x8b\xe5\xad\xbd\xe9\x92\x9c\xe7\xbb\xbf\xe6\xb4\xb1\xe7\xa4\xb4\xe7\x84\xaf\xe6\xa4\xb0\xe9\xa2\x96\xe5\x9b\x94\xe4\xb9\x8c\xe5\xad\x94\xe5\xb7\xb4\xe4\xba\x92\xe6\x80\xa7\xe6\xa4\xbd\xe5\x93\x9e\xe8\x81\x98\xe6\x98\xa8\xe6\x97\xa9\xe6\x9a\xae\xe8\x83\xb6\xe7\x82\x80\xe9\x9a\xa7\xe4\xbd\x8e\xe5\xbd\x97\xe6\x98\x9d\xe9\x93\x81\xe5\x91\x93\xe6\xb0\xbd\xe8\x97\x89\xe5\x96\x94\xe7\x99\x96\xe7\x91\x97\xe5\xa7\xa8\xe6\x9d\x83\xe8\x83\xb1\xe9\x9f\xa6\xe5\xa0\x91\xe8\x9c\x9c\xe9\x85\x8b\xe6\xa5\x9d\xe7\xa0\x9d\xe6\xaf\x81\xe9\x9d\x93\xe6\xad\x99\xe9\x94\xb2\xe7\xa9\xb6\xe5\xb1\x8b\xe5\x96\xb3\xe9\xaa\xa8\xe8\xbe\xa8\xe7\xa2\x91\xe6\xad\xa6\xe9\xb8\xa0\xe5\xae\xab\xe8\xbe\x9c\xe7\x83\x8a\xe9\x80\x82\xe5\x9d\xa1\xe6\xae\x83\xe5\x9f\xb9\xe4\xbd\xa9\xe4\xbe\x9b\xe8\xb5\xb0\xe8\x9c\x88\xe8\xbf\x9f\xe7\xbf\xbc\xe5\x86\xb5\xe5\xa7\xa3\xe5\x87\x9b\xe6\xb5\x94\xe5\x90\x83\xe9\xa3\x98\xe5\x80\xba\xe7\x8a\x9f\xe9\x87\x91\xe4\xbf\x83\xe8\x8b\x9b\xe5\xb4\x87\xe5\x9d\x82\xe8\x8e\xb3\xe7\x95\x94\xe7\xbb\x82\xe5\x85\xb5\xe8\xa0\x95\xe6\x96\x8b\xe6\xa0\xb9\xe7\xa0\x8d\xe4\xba\xa2\xe6\xac\xa2\xe6\x81\xac\xe5\xb4\x94\xe5\x89\x81\xe9\xa4\x90\xe6\xa6\xab\xe5\xbf\xab\xe6\x89\xb6\xe2\x80\x96\xe6\xbf\x92\xe7\xbc\xa0\xe9\xb3\x9c\xe5\xbd\x93\xe5\xbd\xad\xe9\xa9\xad\xe6\xb5\xa6\xe7\xaf\xae\xe6\x98\x80\xe9\x94\x86\xe7\xa7\xb8\xe9\x92\xb3\xe5\xbc\x8b\xe5\xa8\xa3\xe7\x9e\x91\xe5\xa4\xb7\xe9\xbe\x9b\xe8\x8b\xab\xe6\x8b\xb1\xe8\x87\xb4%\xe5\xb5\x8a\xe9\x9a\x9c\xe9\x9a\x90\xe5\xbc\x91\xe5\x88\x9d\xe5\xa8\x93\xe6\x8a\x89\xe6\xb1\xa9\xe7\xb4\xaf\xe8\x93\x96""\xe5\x94\xac\xe5\x8a\xa9\xe8\x8b\x93\xe6\x98\x99\xe6\x8a\xbc\xe6\xaf\x99\xe7\xa0\xb4\xe5\x9f\x8e\xe9\x83\xa7\xe9\x80\xa2\xe5\x9a\x8f\xe7\x8d\xad\xe7\x9e\xbb\xe6\xba\xb1\xe5\xa9\xbf\xe8\xb5\x8a\xe8\xb7\xa8\xe6\x81\xbc\xe7\x92\xa7\xe8\x90\x83\xe5\xa7\xbb\xe8\xb2\x89\xe7\x81\xb5\xe7\x82\x89\xe5\xaf\x86\xe6\xb0\x9b\xe9\x99\xb6\xe7\xa0\xb8\xe8\xb0\xac\xe8\xa1\x94\xe7\x82\xb9\xe7\x90\x9b\xe6\xb2\x9b\xe6\x9e\xb3\xe5\xb1\x82\xe5\xb2\xb1\xe8\xaf\xba\xe8\x84\x8d\xe6\xa6\x88\xe5\x9f\x82\xe5\xbe\x81\xe5\x86\xb7\xe8\xa3\x81\xe6\x89\x93\xe8\xb9\xb4\xe7\xb4\xa0\xe7\x98\x98\xe9\x80\x9e\xe8\x9b\x90\xe8\x81\x8a\xe6\xbf\x80\xe8\x85\xb1\xe8\x90\x98\xe8\xb8\xb5\xe9\xa3\x92\xe8\x93\x9f\xe5\x90\x86\xe5\x8f\x96\xe5\x92\x99\xe7\xb0\x8b\xe6\xb6\x93\xe7\x9f\xa9\xe6\x9b\x9d\xe6\x8c\xba\xe6\x8f\xa3\xe5\xba\xa7\xe4\xbd\xa0\xe5\x8f\xb2\xe8\x88\xb5\xe7\x84\xb1\xe5\xb0\x98\xe8\x8b\x8f\xe7\xac\x88\xe8\x84\x9a\xe6\xba\x89\xe6\xa6\xa8\xe8\xaf\xb5\xe6\xa8\x8a\xe9\x82\x93\xe7\x84\x8a\xe4\xb9\x89\xe5\xba\xb6\xe5\x84\x8b\xe8\x9f\x8b\xe8\x92\xb2\xe8\xb5\xa6\xe5\x91\xb7\xe6\x9d\x9e\xe8\xaf\xa0\xe8\xb1\xaa\xe8\xbf\x98\xe8\xaf\x95\xe9\xa2\x93\xe8\x8c\x89\xe5\xa4\xaa\xe9\x99\xa4\xe7\xb4\xab\xe9\x80\x83\xe7\x97\xb4\xe8\x8d\x89\xe5\x85\x85\xe9\xb3\x95\xe7\x8f\x89\xe7\xa5\x97\xe5\xa2\xa8\xe6\xb8\xad\xe7\x83\xa9\xe8\x98\xb8\xe6\x85\x95\xe7\x92\x87\xe9\x95\xb6\xe7\xa9\xb4\xe5\xb5\x98\xe6\x81\xb6\xe9\xaa\x82\xe9\x99\xa9\xe7\xbb\x8b\xe5\xb9\x95\xe7\xa2\x89\xe8\x82\xba\xe6\x88\xb3\xe5\x88\x98\xe6\xbd\x9e\xe7\xa7\xa3\xe7\xba\xbe\xe6\xbd\x9c\xe9\x8a\xae\xe6\xb4\x9b\xe9\xa1\xbb\xe7\xbd\x98\xe9\x94\x80\xe7\x98\xaa\xe6\xb1\x9e\xe5\x85\xae\xe5\xb1\x89r\xe6\x9e\x97\xe5\x8e\x95\xe8\xb4\xa8\xe6\x8e\xa2\xe5\x88\x92\xe7\x8b\xb8\xe6\xae\x9a\xe5\x96\x84\xe7\x85\x8a\xe7\x83\xb9\xe3\x80\x92\xe9\x94\x88\xe9\x80\xaf\xe5\xae\xb8\xe8\xbe\x8d\xe6\xb3\xb1\xe6\x9f\x9a\xe8\xa2\x8d\xe8\xbf\x9c\xe8\xb9\x8b\xe5\xb6\x99\xe7\xbb\x9d\xe5\xb3\xa5\xe5\xa8\xa5\xe7\xbc\x8d\xe9\x9b\x80\xe5\xbe\xb5\xe8\xae\xa4\xe9\x95\xb1\xe8\xb0\xb7=\xe8\xb4\xa9\xe5\x8b\x89\xe6\x92\xa9\xe9\x84\xaf\xe6\x96\x90\xe6\xb4\x8b\xe9\x9d\x9e\xe7\xa5\x9a\xe6\xb3\xbe\xe8\xaf\x92\xe9\xa5\xbf\xe6\x92\xac\xe5\xa8\x81\xe6\x99\xb7\xe6\x90\xad\xe8\x8a\x8d\xe9\x94\xa5\xe7\xac\xba\xe8\x93\xa6\xe5\x80\x99\xe7\x90\x8a\xe6\xa1\xa3\xe7\xa4\x81\xe6\xb2\xbc\xe5\x8d\xb5\xe8\x8d\xa0\xe5\xbf\x91\xe6\x9c\x9d\xe5\x87\xb9\xe7\x91\x9e\xe5\xa4\xb4\xe4\xbb\xaa\xe5\xbc\xa7\xe5\xad\xb5\xe7\x95\x8f\xe9\x93\x86\xe7\xaa\x81\xe8\xa1\xb2\xe8\xbd\xa6\xe6\xb5\xa9\xe6\xb0\x94\xe8\x8c\x82\xe6\x82\x96\xe5\x8e\xa2\xe6\x9e\x95\xe9\x85\x9d\xe6\x88\xb4\xe6\xb9\xbe\xe9\x82\xb9\xe9\xa3\x9a\xe6\x94\x98\xe9\x94\x82\xe5\x86\x99\xe5\xae\xb5\xe7\xbf\x81\xe5\xb2\xb7\xe6\x97\xa0\xe5\x96\x9c\xe4\xb8\x88\xe6\x8c\x91\xe5\x97\x9f\xe7\xbb\x9b\xe6\xae\x89\xe8\xae\xae\xe6\xa7\xbd\xe5\x85\xb7\xe9\x86\x87\xe6\xb7\x9e\xe7\xac\x83\xe9\x83\xb4\xe9\x98\x85\xe9\xa5\xbc\xe5\xba\x95\xe5\xa3\x95\xe7\xa0\x9a\xe5\xbc\x88\xe8\xaf\xa2\xe7\xbc\x95\xe5\xba\xb9\xe7\xbf\x9f\xe9\x9b\xb6\xe7\xad\xb7\xe6\x9a\xa8\xe8\x88\x9f\xe9\x97\xba\xe7\x94\xaf\xe6\x92\x9e\xe9\xba\x82\xe8\x8c\x8c\xe8\x94\xbc\xe5\xbe\x88\xe7\x8f\xb2\xe6\x8d\x95\xe6\xa3\xa0\xe8\xa7\x92\xe9\x98\x89\xe5\xaa\x9b\xe5\xa8\xb2\xe8\xaf\xbd\xe5\x89\xbf\xe5\xb0\x89\xe7\x88\xb5\xe7\x9d\xac\xe9\x9f\xa9\xe8\xaf\xb0\xe5\x8c\xa3\xe5\x8d\xb1\xe7\xb3\x8d\xe9\x95\xaf\xe7\xab\x8b\xe6\xb5\x8f\xe9\x98\xb3\xe5\xb0\x91\xe7\x9b\x86\xe8\x88\x94\xe6\x93\x98\xe5\x8c\xaa\xe7\x94\xb3\xe5\xb0\xac\xe9\x93\xa3\xe6\x97\xaf\xe6\x8a\x96\xe8\xb5\x98\xe7\x93\xaf\xe5\xb1\x85\xcb\x87\xe5\x93\xae\xe6\xb8\xb8\xe9\x94\xad\xe8\x8c\x8f\xe6\xad\x8c\xe5\x9d\x8f\xe7\x94\x9a\xe7\xa7\x92\xe8\x88\x9e\xe6\xb2\x99\xe4\xbb\x97\xe5\x8a\xb2\xe6\xbd\xba\xe9\x98\xbf\xe7\x87\xa7\xe9\x83\xad\xe5\x97\x96\xe9\x9c\x8f\xe5\xbf\xa0\xe6\x9d\x90\xe5\xa5\x82\xe8\x80\x90\xe8\xb7\xba\xe7\xa0\x80\xe8\xbe\x93\xe5\xb2\x96\xe5\xaa\xb3\xe6\xb0\x9f\xe6\x9e\x81\xe6\x91\x86\xe7\x81\xbf\xe4\xbb\x8a\xe6\x89\x94\xe8\x85\xbb\xe6\x9e\x9d\xe5\xa5\x8e\xe8\x8d\xaf\xe7\x86\x84\xe5\x90\xa8\xe8\xaf\x9dq\xe9\xa2\x9d\xe6\x85\x91\xe5\x98\x8c\xe5\x8d\x8f\xe5\x96\x80\xe5\xa3\xb3\xe5\x9f\xad\xe8\xa7\x86\xe8\x91\x97\xe6\x96\xbc\xe6\x84\xa7\xe9\x99\xb2\xe7\xbf\x8c\xe5\xb3\x81\xe9\xa2\x85\xe4\xbd\x9b\xe8\x85\xb9\xe8\x81\x8b\xe4\xbe\xaf\xe5\x92\x8e\xe5\x8f\x9f\xe7\xa7\x80\xe9\xa2\x87\xe5\xad\x98\xe8\xbe\x83\xe7\xbd\xaa\xe5\x93\x84\xe5\xb2\x97\xe6\x89\xab\xe6\xa0\x8f\xe9\x92\xbe\xe7\xbe\x8c\xe5\xb7\xb1\xe7\x92\xa8\xe6\x9e\xad\xe9\x9c\x89\xe7\x85\x8c\xe6\xb6\xb8\xe8\xa1\xbf\xe9\x94\xae\xe9\x95\x9d\xe7\x9b\x8a\xe5\xb2\xa2\xe5\xa5\x8f\xe8\xbf\x9e\xe5\xa4\xaf\xe7\x9d\xbf\xe5\x86\xa5\xe5\x9d\x87\xe7\xb3\x96\xe7\x8b\x9e\xe8\xb9\x8a\xe7\xa8\xbb\xe7\x88\xb8\xe5\x88\xbf\xe8\x83\xa5\xe7\x85\x9c\xe4\xb8\xbd\xe8\x82\xbf\xe7\x92\x83\xe6\x8e\xb8\xe8\xb7\x9a\xe7\x81\xbe\xe5\x9e\x82\xe6\xa8\xbe\xe6\xbf\x91\xe4\xb9\x8e\xe8\x8e\xb2\xe7\xaa\x84\xe7\x8a\xb9\xe6\x92\xae\xe6\x88\x98\xe9\xa6\x84\xe8\xbd\xaf\xe7\xbb\x9c\xe6\x98\xbe\xe9\xb8\xa2\xe8\x83\xb8\xe5\xae\xbe\xe5\xa6\xb2\xe6\x81\x95\xe5\x9f\x94\xe8\x9d\x8c\xe4\xbb\xbd\xe9\x81\x87\xe5\xb7\xa7\xe7\x9e\x9f\xe7\xb2\x92\xe6\x81\xb0\xe5\x89\xa5\xe6\xa1\xa1\xe5\x8d\x9a\xe8\xae\xaf\xe5\x87\xaf\xe5\xa0\x87\xe9\x98\xb6\xe6\xbb\xa4\xe5\x8d\x96\xe6\x96\x8c\xe9\xaa\x9a\xe5\xbd\xac\xe5\x85\x91\xe7\xa3\xba\xe6\xa8\xb1\xe8\x88\xb7\xe4\xb8\xa4\xe5\xa8\xb1\xe7\xa6\x8f\xe4\xbb\x83\xe5\xb7\xae\xe6\x89\xbe\xe6\xa1\x81\xc3\xb7\xe5\x87\x80\xe6\x8a\x8a\xe9\x98\xb4\xe6\xb1\xa1\xe6\x88\xac\xe9\x9b\xb7\xe7\xa2\x93\xe8\x95\xb2\xe6\xa5\x9a\xe7\xbd\xa1\xe7\x84\x96\xe6\x8a\xbd\xe5\xa6\xab\xe5\x92\x92\xe4\xbb\x91\xe9\x97\xb1\xe5\xb0\xbd\xe9\x82\x91\xe8\x8f\x81\xe7\x88\xb1\xe8\xb4\xb7\xe6\xb2\xa5\xe9\x9e\x91\xe7\x89\xa1\xe5\x97\x89\xe5\xb4\xb4\xe9\xaa\xa4\xe5\xa1\x8c\xe5\x97\xa6\xe8\xae\xa2\xe6\x8b\xae\xe6\xbb\x93\xe6\x8d\xa1\xe9\x94\xbb\xe6\xac\xa1\xe5\x9d\xaa\xe6\x9d\xa9\xe8\x87\x83\xe7\xae\xac\xe8\x9e\x8d\xe7\x8f\x82\xe9\xb9\x97\xe5\xae\x97\xe6\x9e\x9a\xe9\x99\x8d\xe9\xb8\xac\xe5\xa6\xaf\xe9\x98\x84\xe5\xa0\xb0\xe7\x9b\x90\xe6\xaf\x85\xe5\xbf\x85\xe6\x9d\xa8\xe5\xb4\x83\xe4\xbf\xba\xe7\x94\xac\xe7\x8a\xb6\xe8\x8e\x98\xe8\xb4\xa7\xe8\x80\xb8\xe8\x8f\xb1\xe8\x85\xbc\xe9\x93\xb8\xe5\x94\x8f\xe7\x97\xa4\xe5\xad\x9a\xe6\xbe\xb3\xe6\x87\x92\xe6\xba\x85\xe7\xbf\x98\xe7\x96\x99\xe6\x9d\xb7\xe6\xb7\xbc\xe7\xbc\x99\xe9\xaa\xb0\xe5\x96\x8a\xe6\x82\x89\xe7\xa0\xbb\xe5\x9d\xb7\xe8\x89\x87\xe8\xb5\x81\xe7\x95\x8c\xe8\xb0\xa4\xe7\xba\xa3\xe5\xae\xb4\xe6\x99\x83\xe8\x8c\xb9\xe5\xbd\x92\xe9\xa5\xad\xe6\xa2\xa2\xe9\x93\xa1\xe8\xa1\x97\xe6\x8a\x84\xe8\x82\xbc\xe9\xac\x9f\xe8\x8b\xaf\xe9\xa2\x82\xe6\x92\xb7\xe6\x88\x88\xe7\x82\x92\xe5\x92\x86\xe8\x8c\xad\xe7\x98\x99\xe8\xb4\x9f\xe4\xbb\xb0\xe5\xae\xa2\xe7\x90\x89\xe9\x93\xa2\xe5\xb0\x81\xe5\x8d\x91\xe7\x8f\xa5\xe6\xa4\xbf\xe9\x95\xa7\xe7\xaa\xa8\xe9\xac\xb2\xe5\xaf\xbf\xe5\xbe\xa1\xe8\xa2\xa4\xe9\x93\x83\xe8\x90\x8e\xe7\xa0\x96\xe9\xa4\xae\xe8\x84\x92\xe8\xa3\xb3\xe8\x82\xaa\xe5\xad\x95\xe5\xab\xa3\xe9\xa6\x97\xe5\xb5\x87\xe6\x81\xb3\xe6\xb0\xaf\xe6\xb1\x9f\xe7\x9f\xb3\xe8\xa4\xb6\xe5\x86\xa2\xe7\xa5\xb8\xe9\x98\xbb\xe7\x8b\x88\xe7\xbe\x9e\xe9\x93\xb6\xe9\x9d\xb3\xe9\x80\x8f\xe5\x92\xb3\xe5\x8f\xbc\xe6\x95\xb7\xe8\x8a\xb7\xe5\x95\xa5\xe5\xae\x83\xe7\x93\xa4\xe5\x85\xb0\xe7\x97\x98\xe6\x87\x8a\xe9\x80\x91\xe8\x82\x8c\xe5\xbe\x80\xe6\x8d\xba\xe5\x9d\x8a\xe7\x94\xa9\xe5\x91\xbb\xe3\x80\x83\xe6\xb2\xa6\xe5\xbf\x98\xe8\x86\xbb\xe7\xa5\x9f\xe8\x8f\x85\xe5\x89\xa7\xe5\xb4\x86\xe6\x99\xba\xe5\x9d\xaf\xe8\x87\xa7\xe9\x9c\x8d\xe5\xa2\x85\xe6\x94\xbb\xe7\x9c\xaf\xe5\x80\x98\xe6\x8b\xa2\xe9\xaa\xa0\xe9\x93\x90\xe5\xba\xad\xe5\xb2\x99\xe7\x93\xa0\xe2\x80\xb2\xe7\xbc\xba\xe6\xb3\xa5\xe8\xbf\xa2\xe6\x8d\xb6?\xef\xbc\x9f\xe9\x83\x8f\xe5\x96\x99\xe6\x8e\xb7\xe6\xb2\x8c\xe7\xba\xaf\xe7\xa7\x98\xe7\xa7\x8d\xe5\x90\xac\xe7\xbb\x98\xe5\x9b\xba\xe8\x9e\xa8\xe5\x9b\xa2\xe9\xa6\x99\xe7\x9b\x97\xe5\xa6\x92\xe5\x9f\x9a\xe8\x93\x9d\xe6\x8b\x96\xe6\x97\xb1\xe8\x8d\x9e\xe9\x93\x80\xe8\xa1\x80\xe9\x81\x8f\xe6\xb1\xb2\xe8\xbe\xb0\xe5\x8f\xa9\xe6\x8b\xbd\xe5\xb9\x85\xe7\xa1\xac\xe6\x83\xb6\xe6\xa1\x80\xe6\xbc\xa0\xe6\x8e\xaa\xe6\xb3\xbc\xe5\x94\x91\xe9\xbd\x90\xe8\x82\xbe\xe5\xbf\xb5\xe9\x85\xb1\xe8\x99\x9a\xe5\xb1\x81\xe8\x80\xb6\xe6\x97\x97\xe7\xa0\xa6\xe9\x97\xb5\xe5\xa9\x89\xe9\xa6\x86\xe6\x8b\xad\xe7\xbb\x85\xe9\x9f\xa7\xe5\xbf\x8f\xe7\xaa\x9d\xe9\x86\x8b\xe8\x91\xba\xe9\xa1\xbe\xe8\xbe\x9e\xe5\x80\x9c\xe5\xa0\x86\xe8\xbe\x8b\xe9\x80\x86\xe7\x8e\x9f\xe8\xb4\xb1\xe7\x96\xbe\xe8\x91\xa3\xe6\x83\x98\xe5\x80\x8c\xe9\x94\x95\xe6\xb7\x98\xe5\x98\x80\xe8\x8e\xbd\xe4\xbf\xad\xe7\xac\x8f\xe7\xbb\x91\xe9\xb2\xb7\xe6\x9d\x88\xe6\x8b\xa9\xe8\x9f\x80\xe7\xb2\xa5\xe5\x97\xaf\xe9\xa9\xb0\xe9\x80\xbe\xe6\xa1\x88\xe8\xb0\xaa\xe8\xa4\x93\xe8\x83\xab\xe5\x93\xa9\xe6\x98\x95\xe9\xa2\x9a\xe9\xb2\xa2\xe7\xbb\xa0\xe8\xba\xba\xe9\xb9\x84\xe5\xb4\x82\xe5\x84\x92\xe4\xbf\xa8\xe4\xb8\x9d\xe5\xb0\x95\xe6\xb3\x8c\xe5\x95\x8a\xe8\x90\xb8\xe5\xbd\xb0\xe5\xb9\xba\xe5\x90\x9f\xe9\xaa\x84\xe8\x8b\xa3\xe5\xbc\xa6\xe8\x84\x8a\xe7\x91\xb0\xe3\x80\x88\xe8\xaf\x9b\xe9\x95\x81\xe6\x9e\x90\xe9\x97\xaa\xe5\x89\xaa\xe4\xbe\xa7\xe5\x93\x9f\xe6\xa1\x86\xe8\x9e\x83\xe5\xae\x88\xe5\xac\x97\xe7\x87\x95\xe7\x8b\xad\xe9\x93\x88\xe7\xbc\xae\xe6\xa6\x82\xe8\xbf\xb3\xe7\x97\xa7\xe9\xb2\xb2\xe4\xbf\xaf\xe5\x94\xae\xe7\xac\xbc\xe7\x97\xa3\xe6\x89\x89\xe6\x8c\x96\xe6\xbb\xa1\xe5\x92\x8b\xe6\x8f\xb4\xe9\x82\xb1\xe6\x89\x87\xe6\xad\xaa\xe4\xbe\xbf\xe7\x8e\x91\xe7\xbb\xa6\xe5\xb3\xa1\xe8\x9b\x87\xe5\x8f\xa8\xe3\x80\x96\xe6\xb3\xbd\xe8\x83\x83\xe6\x96\x93\xe5\x96\x8b\xe6\x80\x82\xe5\x9d\x9f\xe7\x8c\xaa\xe8\xaf\xa5\xe8\x9a\xac\xe7\x82\x95\xe5\xbc\xa5\xe8\xb5\x9e\xe6\xa3\xa3\xe6\x99\x94\xe5\xa8\xa0\xe6\x8c\xb2\xe7\x8b\xa1\xe5\x88\x9b\xe7\x96\x96\xe9\x93\x95\xe9\x95\xad\xe7\xa8\xb7\xe6\x8c\xab\xe5\xbc\xad\xe5\x95\xbe\xe7\xbf\x94\xe7\xb2\x89\xe5\xb1\xa5\xe8\x8b\x98\xe5\x93\xa6\xe6\xa5\xbc\xe7\xa7\x95\xe9\x93\x82\xe5\x9c\x9f\xe9\x94\xa3\xe7\x98\x9f\xe6\x8c\xa3\xe6\xa0\x89\xe4\xb9\xa0\xe4\xba\xab\xe6\xa1\xa2\xe8\xa2\x85\xe7\xa3\xa8\xe6\xa1\x82\xe8\xb0\xa6\xe5\xbb\xb6\xe5\x9d\x9a\xe8\x94\x9a\xe5\x99\x97\xe7\xbd\xb2\xe8\xb0\x9f\xe7\x8c\xac\xe9\x92\x8e\xe6\x81\x90\xe5\xac\x89\xe9\x9b\x92\xe5\x80\xa6\xe8\xa1\x85\xe4\xba\x8f\xe7\x92\xa9\xe7\x9d\xb9\xe5\x88\xbb\xe6\xae\xbf\xe7\x8e\x8b\xe7\xae\x97\xe9\x9b\x95\xe9\xba\xbb\xe4\xb8\x98\xe6\x9f\xaf\xe9\xaa\x86\xe4\xb8\xb8\xe5\xa1\x8d\xe8\xb0\x9a\xe6\xb7\xbb\xe9\xb2\x88\xe5\x9e\x93\xe6\xa1\x8e\xe8\x9a\xaf\xe8\x8a\xa5\xe4\xba\x88\xe9\xa3\x95\xe9\x95\xa6\xe8\xb0\x8c\xe7\xaa\x97\xe9\x86\x9a\xe8\x8f\x80\xe4\xba\xae\xe6\x90\xaa\xe8\x8e\xba\xe8\x92\xbf\xe7\xbe\x81\xe8\xb6\xb3J\xe7\x9c\x9f\xe8\xbd\xb6\xe6\x82\xac\xe8\xa1\xb7\xe9\x9d\x9b\xe7\xbf\x8a\xe6\x8e\xa9\xe5\x93\x92\xe7\x82\x85\xe6\x8e\x90\xe5\x86\xbc\xe5\xa6\xael\xe8\xb0\x90\xe7\xa8\x9a\xe8\x8d\x86\xe6\x93\x92\xe7\x8a\xaf\xe9\x99\xb5\xe8\x99\x8f\xe6\xb5\x93\xe5\xb4\xbd\xe5\x88\x8d\xe9\x99\x8c\xe5\x82\xbb\xe5\xad\x9c\xe5\x8d\x83\xe9\x9d\x96\xe6\xbc\x94\xe7\x9f\x9c\xe9\x92\x95\xe7\x85\xbd\xe6\x9d\xb0\xe9\x85\x97\xe6\xb8\x97\xe4\xbc\x9e\xe6\xa0\x8b\xe4\xbf\x97\xe6\xb3\xab\xe6\x88\x8d\xe7\xbd\x95\xe6\xb2\xbe\xe7\x96\xbd\xe7\x81\x8f\xe7\x85\xa6\xe8\x8a\xac\xe7\xa3\xb4\xe5\x8f\xb1\xe9\x98\xb1\xe6\xa6\x89\xe6\xb9\x83\xe8\x9c\x80\xe5\x8f\x89\xe9\x86\x92\xe5\xbd\xaa\xe7\xa7\x9f\xe9\x83\xa1\xe7\xaf\xb7\xe5\xb1\x8e\xe8\x89\xaf\xe5\x9e\xa2\xe9\x9a\x97\xe5\xbc\xb1\xe9\x99\xa8\xe5\xb3\xaa\xe7\xa0\xb7\xe6\x8e\xb4\xe9\xa2\x81\xe8\x83\x8e\xe9\x9b\xaf\xe7\xbb\xb5\xe8\xb4\xac\xe6\xb2\x90\xe6\x92\xb5\xe9\x9a\x98\xe7\xaf\x99\xe6\x9a\x96\xe6\x9b\xb9\xe9\x99\xa1\xe6\xa0\x93\xe5\xa1\xab\xe8\x87\xbc\xe5\xbd\xa6\xe7\x93\xb6\xe7\x90\xaa\xe6\xbd\xbc\xe5\x93\xaa\xe9\xb8\xa1\xe6\x91\xa9\xe5\x95\xa6\xe4\xbf\x9f\xe9\x94\x8b\xe5\x9f\x9f\xe8\x80\xbb\xe8\x94\xab\xe7\x96\xaf\xe7\xba\xb9\xe6\x92\x87\xe6\xaf\x92\xe7\xbb\xb6\xe7\x97\x9b\xe9\x85\xaf\xe5\xbf\x8d\xe7\x88\xaa\xe8\xb5\xb3\xe6\xad\x86\xe5\x98\xb9\xe8\xbe\x95\xe7\x83\x88\xe5\x86\x8c\xe6\x9c\xb4\xe9\x92\xb1\xe5\x90\xae\xe6\xaf\xaf\xe7\x99\x9c\xe5\xa8\x83\xe8\xb0\x80\xe9\x82\xb5\xe5\x8e\xae\xe7\x82\xbd\xe7\x92\x9e\xe9\x82\x83\xe4\xb8\x90\xe8\xbf\xbd\xe8\xaf\x8d\xe7\x93\x92\xe5\xbf\x86\xe8\xbd\xa7\xe8\x8a\xab\xe8\xb0\xaf\xe5\x96\xb7\xe5\xbc\x9f\xe5\x8d\x8a\xe5\x86\x95\xe8\xa3\x99\xe6\x8e\x96\xe5\xa2\x89\xe7\xbb\xae\xe5\xaf\x9d\xe8\x8b\x94\xe5\x8a\xbf\xe9\xa1\xb7\xe8\xa4\xa5\xe5\x88\x87\xe8\xa1\xae\xe5\x90\x9b\xe4\xbd\xb3\xe5\xab\x92\xe8\x9a\xa9\xe9\x9c\x9e\xe4\xbd\x9a\xe6\xb4\x99\xe9\x80\x8a\xe9\x95\x96\xe6\x9a\xb9\xe5\x94\x9b&\xe6\xae\x92\xe9\xa1\xb6\xe7\xa2\x97\xe7\x8d\x97\xe8\xbd\xad\xe9\x93\xba\xe8\x9b\x8a\xe5\xba\x9f\xe6\x81\xb9\xe6\xb1\xa8\xe5\xb4\xa9\xe7\x8f\x8d\xe9\x82\xa3\xe6\x9d\xb5\xe6\x9b\xb2\xe7\xba\xba\xe5\xa4\x8f\xe8\x96\xb0\xe5\x82\x80\xe9\x97\xb3\xe6\xb7\xac\xe5\xa7\x98\xe8\x88\x80\xe6\x8b\xa7\xe5\x8d\xb7\xe6\xa5\x82\xe6\x81\x8d\xe8\xae\xaa\xe5\x8e\xa9\xe5\xaf\xae\xe7\xaf\xaa\xe8\xb5\x93\xe4\xb9\x98\xe7\x81\xad\xe7\x9b\x85\xe9\x9e\xa3\xe6\xb2\x9f\xe6\x85\x8e\xe6\x8c\x82\xe9\xa5\xba\xe9\xbc\xbe\xe6\x9d\xb3\xe6\xa0\x91\xe7\xbc\xa8\xe4\xb8\x9b\xe7\xb5\xae\xe5\xa8\x8c\xe8\x87\xbb\xe5\x97\xb3\xe7\xaf\xa1\xe4\xbe\xa9\xe8\xbf\xb0\xe8\xa1\xb0\xe7\x9f\x9b\xe5\x9c\x88\xe8\x9a\x9c\xe5\x8c\x95\xe7\xad\xb9\xe5\x8c\xbf\xe6\xbf\x9e\xe6\x99\xa8\xe5\x8f\xb6\xe9\xaa\x8b\xe9\x83\x9d\xe6\x8c\x9a\xe8\x9a\xb4\xe6\xbb\x9e\xe5\xa2\x9e\xe4\xbe\x8d\xe6\x8f\x8f\xe7\x93\xa3\xe5\x90\x96\xe5\xab\xa6\xe8\x9f\x92\xe5\x8c\xbe\xe5\x9c\xa3\xe8\xb5\x8c\xe6\xaf\xa1\xe7\x99\x9e\xe6\x81\xba\xe7\x99\xbe\xe6\x9b\xb3\xe9\x9c\x80\xe7\xaf\x93\xe8\x82\xae\xe5\xba\x96\xe5\xb8\x8f\xe5\x8d\xbf\xe9\xa9\xbf\xe9\x81\x97\xe8\xb9\xac\xe9\xac\x93\xe9\xaa\xa1\xe6\xad\x89\xe8\x8a\x8e\xe8\x83\xb3\xe5\xb1\x90\xe7\xa6\xbd\xe7\x83\xa6\xe6\x99\x8c\xe5\xaf\x84\xe5\xaa\xbe\xe7\x8b\x84\xe7\xbf\xa1\xe8\x8b\x92\xe8\x88\xb9\xe5\xbb\x89\xe7\xbb\x88\xe7\x97\x9e\xe6\xae\x87\xe3\x80\x85\xe7\x95\xa6\xe9\xa5\xb6\xe6\x94\xb9\xe6\x8b\x86\xe6\x82\xbb\xe8\x90\x84\xef\xbf\xa1\xe7\x93\xbf\xe4\xb9\x83\xe8\xa8\xbe\xe6\xa1\x85\xe5\x8c\xae\xe6\xba\xa7\xe6\x8b\xa5\xe7\xba\xb1\xe9\x93\x8d\xe9\xaa\x97\xe8\x95\x83\xe9\xbe\x8b\xe7\xbc\xac\xe7\x88\xb6\xe4\xbd\x90\xe7\x96\x9a\xe6\xa0\x8e\xe9\x86\x8d\xe6\x8e\xb3\xe8\x93\x84x\xe6\x83\x86\xe9\xa2\x9c\xe9\xb2\x86\xe6\xa6\x86\xe3\x80\x94\xe7\x8c\x8e\xe6\x95\x8c\xe6\x9a\xb4\xe8\xb0\xa5\xe9\xb2\xab\xe8\xb4\xbe\xe7\xbd\x97\xe7\x8e\xbb\xe7\xbc\x84\xe6\x89\xa6\xe8\x8a\xaa\xe7\x99\xa3\xe8\x90\xbd\xe5\xbe\x92\xe8\x87\xbe\xe6\x81\xbf\xe7\x8c\xa9\xe6\x89\x98\xe9\x82\xb4\xe8\x82\x84\xe7\x89\xb5\xe6\x98\xa5\xe9\x99\x9b\xe8\x80\x80\xe5\x88\x8a\xe6\x8b\x93\xe8\x93\x93\xe9\x82\xb3\xe5\xa0\x95\xe5\xaf\x87\xe6\x9e\x89\xe6\xb7\x8c\xe5\x95\xa1\xe6\xb9\x84\xe5\x85\xbd\xe9\x85\xb7\xe8\x90\xbc\xe7\xa2\x9a\xe6\xbf\xa0\xe8\x90\xa4\xe5\xa4\xb9\xe6\x97\xac\xe6\x88\xae\xe6\xa2\xad\xe7\x90\xa5\xe6\xa4\xad\xe6\x98\x94\xe5\x8b\xba\xe8\x9c\x8a\xe7\xbb\x90\xe6\x99\x9a\xe5\xad\xba\xe5\x83\xb5\xe5\xae\xa3\xe6\x91\x84\xe5\x86\xbd\xe6\x97\xa8\xe8\x90\x8c\xe5\xbf\x99\xe8\x9a\xa4\xe7\x9c\x89\xe5\x99\xbc\xe8\x9f\x91\xe4\xbb\x98\xe5\xa5\x91\xe7\x93\x9c\xe6\x82\xbc\xe9\xa2\xa1\xe5\xa3\x81\xe6\x9b\xbe\xe7\xaa\x95\xe9\xa2\xa2\xe6\xbe\x8e\xe4\xbb\xbf\xe4\xbf\x91\xe6\xb5\x91\xe5\xb5\x8c\xe6\xb5\xa3\xe4\xb9\x8d\xe7\xa2\x8c\xe8\xa4\xaa\xe4\xb9\xb1\xe8\x94\x9f\xe9\x9a\x99\xe7\x8e\xa9\xe5\x89\x90\xe8\x91\xab\xe7\xae\xab\xe7\xba\xb2\xe5\x9b\xb4\xe4\xbc\x90\xe5\x86\xb3\xe4\xbc\x99\xe6\xbc\xa9\xe7\x91\x9f\xe5\x88\x91\xe8\x82\x93\xe9\x95\xb3\xe7\xbc\x93\xe8\xb9\xad\xe6\xb0\xa8\xe7\x9a\x93\xe5\x85\xb8\xe7\x95\xb2\xe5\x9d\x8d\xe9\x93\x91\xe6\xaa\x90\xe5\xa1\x91\xe6\xb4\x9e\xe5\x80\xac\xe5\x82\xa8\xe8\x83\xb4\xe6\xb7\xb3\xe6\x88\xbe\xe5\x90\x90\xe7\x81\xbc\xe6\x83\xba\xe5\xa6\x99\xe6\xaf\x95\xe7\x8f\x90\xe7\xbc\x88\xe8\x99\xb1\xe7\x9b\x96\xe7\xbe\xb0\xe9\xb8\xbf\xe7\xa3\x85\xe8\xb0\x93\xe9\xab\x85\xe5\xa8\xb4\xe8\x8b\xb4\xe5\x94\xb7\xe8\x9a\xa3\xe9\x9c\xb9\xe6\x8a\xa8\xe8\xb4\xa4\xe5\x94\xa0\xe7\x8a\xac\xe8\xaa\x93\xe9\x80\x8d\xe5\xba\xa0\xe9\x80\xbc\xe9\xba\x93\xe7\xb1\xbc\xe9\x87\x89\xe5\x91\x9c\xe7\xa2\xa7\xe7\xa7\xa7\xe6\xb0\xa9\xe6\x91\x94\xe9\x9c\x84\xe7\xa9\xb8\xe7\xba\xa8\xe8\xbe\x9f\xe5\xa6\x88\xe6\x98\xa0\xe5\xae\x8c\xe7\x89\x9b\xe7\xbc\xb4\xe5\x97\xb7\xe7\x82\x8a\xe6\x81\xa9\xe8\x8d\x94\xe8\x8c\x86\xe6\x8e\x89\xe7\xb4\x8a\xe6\x85\x8c\xe8\x8e\x93\xe7\xbe\x9f\xe9\x98\x99\xe8\x90\x81\xe7\xa3\x90\xe5\x8f\xa6\xe8\x95\xb9\xe8\xbe\xb1\xe9\xb3\x90\xe6\xb9\xae\xe5\x90\xa1\xe5\x90\xa9\xe5\x94\x90\xe7\x9d\xa6\xe5\x9e\xa0\xe8\x88\x92\xe5\x9c\x9c\xe5\x86\x97\xe7\x9e\xbf\xe6\xba\xba\xe8\x8a\xbe\xe5\x9b\xb1\xe5\x8c\xa0\xe5\x83\xb3\xe6\xb1\x90\xe8\x8f\xa9\xe9\xa5\xac\xe6\xbc\x93\xe9\xbb\x91\xe9\x9c\xb0\xe6\xb5\xb8\xe6\xbf\xa1\xe7\xaa\xa5\xe6\xaf\x82\xe8\x92\xa1\xe5\x85\xa2\xe9\xa9\xbb\xe9\xb9\x89\xe8\x8a\xae\xe8\xaf\x99\xe8\xbf\xab\xe9\x9b\xb3\xe5\x8e\x82\xe5\xbf\x90\xe8\x87\x86\xe7\x8c\xb4\xe9\xb8\xa3\xe8\x9a\xaa\xe6\xa0\x88\xe7\xae\x95\xe7\xbe\xa1\xe6\xb8\x90\xe8\x8e\x86\xe6\x8d\x8d\xe7\x9c\x88\xe5\x93\x93\xe8\xb6\xb4\xe8\xb9\xbc\xe5\x9f\x95\xe5\x9a\xa3\xe9\xaa\x9b\xe5\xae\x8f\xe6\xb7\x84\xe6\x96\x91\xe5\x99\x9c\xe4\xb8\xa5\xe7\x91\x9b\xe5\x9e\x83\xe6\xa4\x8e\xe8\xaf\xb1\xe5\x8e\x8b\xe5\xba\xbe\xe7\xbb\x9e\xe7\x84\x98\xe5\xbb\xbf\xe6\x8a\xa1\xe8\xbf\x84\xe6\xa3\x98\xe5\xa4\xab\xe7\xba\xac\xe9\x94\xb9\xe7\x9c\xa8\xe7\x9e\x8c\xe4\xbe\xa0\xe8\x84\x90\xe7\xab\x9e\xe7\x80\x91\xe5\xad\xb3\xe9\xaa\xa7\xe9\x81\x81\xe5\xa7\x9c\xe9\xa2\xa6\xe8\x8d\xaa\xe6\xbb\x9a\xe8\x90\xa6\xe4\xbc\xaa\xe9\x80\xb8\xe7\xb2\xb3\xe7\x88\xac\xe9\x94\x81\xe7\x9f\xa3\xe5\xbd\xb9\xe8\xb6\xa3\xe6\xb4\x92\xe9\xa2\x94\xe8\xaf\x8f\xe9\x80\x90\xe5\xa5\xb8\xe7\x94\xad\xe6\x83\xa0\xe6\x94\x80\xe8\xb9\x84\xe6\xb3\x9b\xe5\xb0\xbc\xe6\x8b\xbc\xe9\x98\xae\xe9\xb9\xb0\xe4\xba\x9a\xe9\xa2\x88\xe6\x83\x91\xe5\x8b\x92\xe3\x80\x89\xe9\x99\x85\xe8\x82\x9b\xe7\x88\xb7\xe5\x88\x9a\xe9\x92\xa8\xe4\xb8\xb0\xe5\x85\xbb\xe5\x86\xb6\xe9\xb2\xbd\xe8\xbe\x89\xe8\x94\xbb\xe7\x94\xbb\xe8\xa6\x86\xe7\x9a\xb4\xe5\xa6\x8a\xe9\xba\xa6\xe8\xbf\x94\xe9\x86\x89\xe7\x9a\x82\xe6\x93\x80\xe3\x80\x97\xe9\x85\xb6\xe5\x87\x91\xe7\xb2\xb9\xe6\x82\x9f\xe8\xaf\x80\xe7\xa1\x96\xe6\xb8\xaf\xe5\x8d\x9cz\xe6\x9d\x80\xe6\xb6\x95\xc2\xb1\xe8\x88\x8d\xe9\x93\xa0\xe6\x8a\xb5\xe5\xbc\x9b\xe6\xae\xb5\xe6\x95\x9d\xe9\x95\x90\xe5\xa5\xa0\xe6\x8b\x82\xe8\xbd\xb4\xe8\xb7\x9b\xe8\xa2\xb1et\xe6\xb2\x89\xe8\x8f\x87\xe4\xbf\x8e\xe8\x96\xaa\xe5\xb3\xa6\xe7\xa7\xad\xe8\x9f\xb9\xe5\x8e\x86\xe7\x9b\x9f\xe8\x8f\xa0\xe5\xaf\xa1\xe6\xb6\xb2\xe8\x82\xa2\xe5\x96\xbb\xe6\x9f\x93\xe8\xa3\xb1\xe6\x82\xb1\xe6\x8a\xb1\xe6\xb0\x99\xe8\xb5\xa4\xe6\x8d\x85\xe7\x8c\x9b\xe8\xb7\x91\xe6\xb0\xae\xe8\xb0\xa3\xe4\xbb\x81\xe5\xb0\xba\xe8\xbe\x8a\xe7\xaa\x8d\xe7\x83\x99\xe8\xa1\x8d\xe6\x9e\xb6\xe6\x93\xa6\xe5\x80\x8f\xe7\x92\x90\xe7\x91\x81\xe5\xb8\x81\xe6\xa5\x9e\xe8\x83\x96\xe5\xa4\x94\xe8\xb6\xb8\xe9\x82\x9b\xe6\x83\xb4\xe9\xa5\x95\xe8\x99\x94\xe8\x9d\x8e\xc2\xa7\xe5\x93\x89\xe8\xb4\x9d\xe5\xae\xbd\xe8\xbe\xab\xe7\x82\xae\xe6\x89\xa9\xe9\xa5\xb2\xe7\xb1\xbd\xe9\xad\x8f\xe8\x8f\x9f\xe9\x94\xb0\xe4\xbc\x8d\xe7\x8c\x9d\xe6\x9c\xab\xe7\x90\xb3\xe5\x93\x9a\xe8\x9b\x8e\xe9\x82\x82\xe5\x91\x80\xe5\xa7\xbf\xe9\x84\x9e\xe5\x8d\xb4\xe6\xad\xa7\xe4\xbb\x99\xe6\x81\xb8\xe6\xa4\x90\xe6\xa3\xae\xe7\x89\x92\xe5\xaf\xa4\xe8\xa2\x92\xe5\xa9\x86\xe8\x99\xa2\xe9\x9b\x85\xe9\x92\x89\xe6\x9c\xb5\xe8\xb4\xbc\xe6\xac\xb2\xe8\x8b\x9e\xe5\xaf\xb0\xe6\x95\x85\xe9\xbe\x9a\xe5\x9d\xad\xe5\x98\x98\xe5\x92\xab\xe7\xa4\xbc\xe7\xa1\xb7\xe5\x85\x80\xe7\x9d\xa2\xe6\xb1\xb6\xe2\x80\x99\xe9\x93\xb2\xe7\x83\xa7\xe7\xbb\x95\xe8\xaf\x83\xe6\xb5\x83\xe9\x92\xbf\xe5\x93\xba\xe6\x9f\x9c\xe8\xae\xbc\xe9\xa2\x8a\xe7\x92\x81\xe8\x85\x94\xe6\xb4\xbd\xe5\x92\x90\xe8\x84\xb2\xe7\xb0\x8c\xe7\xad\xa0\xe9\x95\xa3\xe7\x8e\xae\xe9\x9e\xa0\xe8\xb0\x81\xe5\x85\xbc\xe5\xa7\x86\xe6\x8c\xa5\xe6\xa2\xaf\xe8\x9d\xb4\xe8\xb0\x98\xe6\xbc\x95\xe5\x88\xb7\xe8\xba\x8f\xe5\xae\xa6\xe5\xbc\xbcb\xe5\x9e\x8c\xe5\x8a\x88\xe9\xba\x9f\xe8\x8e\x89\xe6\x8f\xad\xe7\xac\x99\xe6\xb8\x8e\xe4\xbb\x95\xe5\x97\xa4\xe4\xbb\x93\xe9\x85\x8d\xe6\x80\x8f\xe6\x8a\xac\xe9\x94\x99\xe6\xb3\xaf\xe9\x95\x8a\xe5\xad\xb0\xe7\x8c\xbf\xe9\x82\xaa\xe4\xbb\x8d\xe7\xa7\x8b\xe9\xbc\xac\xe5\xa3\xb9\xe6\xad\x87\xe5\x90\xb5\xe7\x82\xbc<\xe5\xb0\xa7\xe5\xb0\x84\xe6\x9f\xac\xe5\xbb\xb7\xe8\x83\xa7\xe9\x9c\xbe\xe5\x87\xb3\xe9\x9a\x8b\xe8\x82\x9a\xe6\xb5\xae\xe6\xa2\xa6\xe7\xa5\xa5\xe6\xa0\xaa\xe5\xa0\xb5\xe9\x80\x80L\xe9\xb9\xab\xe8\xb7\x8e\xe5\x87\xb6\xe6\xaf\xbd\xe8\x8d\x9f\xe7\x82\xab\xe6\xa0\xa9\xe7\x8e\xb3\xe7\x94\x9c\xe6\xb2\x82\xe9\xb9\xbf\xe9\xa1\xbd\xe4\xbc\xaf\xe7\x88\xb9\xe8\xb5\x94\xe8\x9b\xb4\xe5\xbe\x90\xe5\x8c\xa1\xe6\xac\xa3\xe7\x8b\xb0\xe7\xbc\xb8\xe9\x9b\xb9\xe8\x9f\x86\xe7\x96\xa4\xe9\xbb\x98\xe6\xb2\xa4\xe5\x95\x9c\xe7\x97\x82\xe8\xa1\xa3\xe7\xa6\x85wih\xe8\xbe\xbd\xe8\x91\xb3\xe9\xbb\x9d\xe9\x92\x97\xe5\x81\x9c\xe6\xb2\xbd\xe6\xa3\x92\xe9\xa6\xa8\xe9\xa2\x8c\xe8\x82\x89\xe5\x90\xb4\xe7\xa1\xab\xe6\x82\xaf\xe5\x8a\xbe\xe5\xa8\x88\xe9\xa9\xac\xe5\x95\xa7\xe5\x90\x8a\xe6\x82\x8c\xe9\x95\x91\xe5\xb3\xad\xe5\xb8\x86\xe7\x80\xa3\xe6\xb6\x89\xe5\x92\xb8\xe7\x96\xb8\xe6\xbb\x8b\xe6\xb3\xa3\xe7\xbf\xa6\xe6\x8b\x99\xe7\x99\xb8\xe9\x92\xa5\xe8\x9c\x92+\xe5\xb0\xbe\xe5\xba\x84\xe5\x87\x9d\xe6\xb3\x89\xe5\xa9\xa2\xe6\xb8\xb4\xe8\xb0\x8a\xe4\xb9\x9e\xe9\x99\x86\xe9\x94\x89\xe7\xb3\x8a\xe9\xb8\xa6\xe6\xb7\xaeIBN\xe6\x99\xa6\xe5\xbc\x97\xe4\xb9\x94\xe5\xba\xa5\xe8\x91\xa1\xe5\xb0\xbb\xe5\xb8\xad\xe6\xa9\xa1\xe5\x82\xa3\xe6\xb8\xa3\xe6\x8b\xbf\xe6\x83\xa9\xe9\xba\x8b\xe6\x96\x9b\xe7\xbc\x83\xe7\x9f\xae\xe8\x9b\x8f\xe5\xb2\x98\xe9\xb8\xbd\xe5\xa7\x90\xe8\x86\x8f\xe5\x82\xac\xe5\xa5\x94\xe9\x95\x92\xe5\x96\xb1\xe8\xa0\xa1\xe6\x91\xa7\xe9\x92\xaf\xe8\x83\xa4\xe6\x9f\xa0\xe6\x8b\x90\xe7\x92\x8b\xe9\xb8\xa5\xe5\x8d\xa2\xe8\x8d\xa1\xe5\x80\xbe^_\xe7\x8f\x80\xe9\x80\x84\xe8\x90\xa7\xe5\xa1\xbe\xe6\x8e\x87\xe8\xb4\xae\xe7\xac\x86\xe8\x81\x82\xe5\x9c\x83\xe5\x86\xb2\xe5\xb5\xacM\xe6\xbb\x94\xe7\xac\x95\xe5\x80\xbc\xe7\x82\x99\xe5\x81\xb6\xe8\x9c\xb1\xe6\x90\x90\xe6\xa2\x86\xe6\xb1\xaa\xe8\x94\xac\xe8\x85\x91\xe9\xb8\xaf\xe8\xb9\x87\xe6\x95\x9e\xe7\xbb\xaf\xe4\xbb\xa8\xe7\xa5\xaf\xe8\xb0\x86\xe6\xa2\xa7\xe7\xb3\x97\xe9\x91\xab\xe5\x95\xb8\xe8\xb1\xba\xe5\x9b\xb9\xe7\x8c\xbe\xe5\xb7\xa2\xe6\x9f\x84\xe7\x80\x9b\xe7\xad\x91\xe8\xb8\x8c\xe6\xb2\xad\xe6\x9a\x97\xe8\x8b\x81\xe9\xb1\xbf\xe8\xb9\x89\xe8\x84\x82\xe8\x98\x96\xe7\x89\xa2\xe7\x83\xad\xe6\x9c\xa8\xe5\x90\xb8\xe6\xba\x83\xe5\xae\xa0\xe5\xba\x8f\xe6\xb3\x9e\xe5\x81\xbf\xe6\x8b\x9c\xe6\xaa\xa9\xe5\x8e\x9a\xe6\x9c\x90\xe6\xaf\x97\xe8\x9e\xb3\xe5\x90\x9e\xe5\xaa\x9a\xe6\x9c\xbd\xe6\x8b\x85\xe8\x9d\x97\xe6\xa9\x98\xe7\x95\xb4\xe7\xa5\x88\xe7\xb3\x9f\xe7\x9b\xb1\xe9\x9a\xbc\xe9\x83\x9c\xe6\x83\x9c\xe7\x8f\xa0\xe8\xa3\xa8\xe9\x93\xb5\xe7\x84\x99\xe7\x90\x9a\xe5\x94\xaf\xe5\x92\x9a\xe5\x99\xaa\xe9\xaa\x8a\xe4\xb8\xab\xe6\xbb\xa2\xe5\x8b\xa4\xe6\xa3\x89\xe5\x91\xb8\xe5\x92\xa3\xe6\xb7\x80\xe9\x9a\x94\xe8\x95\xbe\xe7\xaa\x88\xe9\xa5\xa8\xe6\x8c\xa8\xe7\x85\x85\xe7\x9f\xad\xe5\x8c\x99\xe7\xb2\x95\xe9\x95\x9c\xe8\xb5\xa3\xe6\x92\x95\xe5\xa2\xa9\xe9\x85\xac\xe9\xa6\x81\xe8\xb1\x8c\xe9\xa2\x90\xe6\x8a\x97\xe9\x85\xa3\xe6\xb0\x93\xe4\xbd\x91\xe6\x90\x81\xe5\x93\xad\xe9\x80\x92\xe8\x80\xb7\xe6\xb6\xa1\xe6\xa1\x83\xe8\xb4\xbb\xe7\xa2\xa3\xe6\x88\xaa\xe7\x98\xa6\xe6\x98\xad\xe9\x95\x8c\xe8\x94\x93\xe6\xb0\x9a\xe7\x94\xb2\xe7\x8c\x95\xe8\x95\xb4\xe8\x93\xac\xe6\x95\xa3\xe6\x8b\xbe\xe7\xba\x9b\xe7\x8b\xbc\xe7\x8c\xb7\xe9\x93\x8e\xe5\x9f\x8b\xe6\x97\x96\xe7\x9f\xbe\xe8\xae\xb3\xe5\x9b\x8a\xe7\xb3\x9c\xe8\xbf\x88\xe7\xb2\x9f\xe8\x9a\x82\xe7\xb4\xa7\xe9\xb2\xb3\xe7\x98\xa2\xe6\xa0\xbd\xe7\xa8\xbc\xe7\xbe\x8a\xe9\x94\x84\xe6\x96\x9f\xe7\x9d\x81\xe6\xa1\xa5\xe7\x93\xae\xe8\xb9\x99\xe7\xa5\x89\xe9\x86\xba\xe9\xbc\xbb\xe6\x98\xb1\xe5\x89\x83\xe8\xb7\xb3\xe7\xaf\xb1\xe8\xb7\xb7\xe8\x92\x9c\xe7\xbf\x8e\xe5\xae\x85\xe6\x99\x96\xe5\x97\x91\xe5\xa3\x91\xe5\xb3\xbb\xe7\x99\xab\xe5\xb1\x8f\xe7\x8b\xa0\xe9\x99\x8b\xe8\xa2\x9c\xe9\x80\x94\xe6\x86\x8e\xe7\xa5\x80\xe8\x8e\xb9\xe6\xbb\x9f\xe4\xbd\xb6\xe6\xba\xa5\xe8\x87\xa3\xe7\xba\xa6\xe7\x9b\x9b\xe5\xb3\xb0\xe7\xa3\x81\xe6\x85\xb5\xe5\xa9\xaa\xe6\x8b\xa6\xe8\x8e\x85\xe6\x9c\x95\xe9\xb9\xa6\xe7\xb2\xb2\xe8\xa3\xa4\xe5\x93\x8e\xe7\x96\xa1\xe5\xab\x96\xe7\x90\xb5\xe7\xaa\x9f\xe5\xa0\xaa\xe8\xb0\x9b\xe5\x98\x89\xe5\x84\xa1\xe9\xb3\x9d\xe6\x96\xa9\xe9\x83\xbe\xe9\xa9\xb8\xe9\x85\x8a\xe5\xa6\x84\xe8\x83\x9c\xe8\xb4\xba\xe5\xbe\x99\xe5\x82\x85\xe5\x99\x8c\xe9\x92\xa2\xe6\xa0\x85\xe5\xba\x87\xe6\x81\x8b\xe5\x8c\x9d\xe5\xb7\xaf\xe9\x82\x88\xe5\xb0\xb8\xe9\x94\x9a\xe7\xb2\x97\xe4\xbd\x9f\xe8\x9b\x9f\xe8\x96\xb9\xe7\xba\xb5\xe8\x9a\x8a\xe9\x83\x85\xe7\xbb\xa2\xe9\x94\x90\xe8\x8b\x97\xe4\xbf\x9e\xe7\xaf\x86\xe6\xb7\x86\xe8\x86\x80\xe9\xb2\x9c\xe7\x85\x8e\xe8\xaf\xb6\xe7\xa7\xbd\xe5\xaf\xbb\xe6\xb6\xae\xe5\x88\xba\xe6\x80\x80\xe5\x99\xb6\xe5\xb7\xa8\xe8\xa4\xb0\xe9\xad\x85\xe7\x81\xb6\xe7\x81\x8c\xe6\xa1\x89\xe8\x97\x95\xe8\xb0\x9c\xe8\x88\xb8\xe8\x96\x84\xe6\x90\x80\xe6\x81\xbd\xe5\x80\x9f\xe7\x89\xaf\xe7\x97\x89\xe6\xb8\xa5\xe6\x84\xbf\xe4\xba\x93\xe8\x80\x98\xe6\x9d\xa0\xe6\x9f\xa9\xe9\x94\x94\xe8\x9a\xb6\xe9\x92\xa3\xe7\x8f\x88\xe5\x96\x98\xe8\xb9\x92\xe5\xb9\xbd\xe8\xb5\x90\xe7\xa8\x97\xe6\x99\xa4\xe8\x8e\xb1\xe6\xb3\x94\xe6\x89\xaf\xe8\x82\xaf\xe8\x8f\xaa\xe8\xa3\x86\xe8\x85\xa9\xe8\xb1\x89\xe7\x96\x86\xe9\xaa\x9c\xe8\x85\x90\xe5\x80\xad\xe7\x8f\x8f\xe5\x94\x94\xe7\xb2\xae\xe4\xba\xa1\xe6\xb6\xa6\xe6\x85\xb0\xe4\xbc\xbd\xe6\xa9\x84\xe7\x8e\x84\xe8\xaa\x89\xe9\x86\x90\xe8\x83\x86\xe9\xbe\x8a\xe7\xb2\xbc\xe5\xa1\xac\xe9\x99\x87\xe5\xbd\xbc\xe5\x89\x8a\xe5\x97\xa3\xe7\xbb\xbe\xe8\x8a\xbd\xe5\xa6\x97\xe5\x9e\xad\xe7\x98\xb4\xe7\x88\xbd\xe8\x96\x8f\xe5\xaf\xa8\xe9\xbe\x88\xe6\xb3\xa0\xe5\xbc\xb9\xe8\xb5\xa2\xe6\xbc\xaa\xe7\x8c\xab\xe5\x98\xa7\xe6\xb6\x82\xe6\x81\xa4\xe5\x9c\xad\xe8\x8c\xa7\xe7\x83\xbd\xe5\xb1\x91\xe7\x97\x95\xe5\xb7\xbe\xe8\xb5\x96\xe8\x8d\xb8\xe5\x87\xb0\xe8\x85\xae\xe7\x95\x88\xe4\xba\xb5\xe8\xb9\xb2\xe5\x81\x83\xe8\x8b\x87\xe6\xbe\x9c\xe8\x89\xae\xe6\x8d\xa2\xe9\xaa\xba\xe7\x83\x98\xe8\x8b\x95\xe6\xa2\x93\xe9\xa2\x89\xe8\x82\x87\xe5\x93\x97\xe6\x82\x84\xe6\xb0\xa4\xe6\xb6\xa0\xe8\x91\xac\xe5\xb1\xa0\xe9\xb9\xad\xe6\xa4\x8d\xe7\xab\xba\xe4\xbd\xaf\xe8\xaf\xa3\xe9\xb2\x87\xe7\x98\x80\xe9\xb2\x85\xe9\x82\xa6\xe7\xa7\xbb\xe6\xbb\x81\xe5\x86\xaf\xe8\x80\x95\xe7\x99\x94\xe6\x88\x8c\xe8\x8c\xac\xe6\xb2\x81\xe5\xb7\xa9\xe6\x82\xa0\xe6\xb9\x98\xe6\xb4\xaa\xe7\x97\xb9\xe9\x94\x9f\xe5\xbe\xaa\xe8\xb0\x8b\xe8\x85\x95\xe9\xb3\x83\xe9\x92\xa0\xe6\x8d\x9e\xe7\x84\x89\xe8\xbf\x8e\xe7\xa2\xb1\xe4\xbc\xab\xe6\x80\xa5\xe6\xa6\xb7\xe5\xa5\x88\xe9\x82\x9d\xe5\x8d\xaf\xe8\xbe\x84\xe7\x9a\xb2\xe5\x8d\x9f\xe9\x86\x9b\xe7\x95\xb9\xe5\xbf\xa7\xe7\xa8\xb3\xe9\x9b\x84\xe6\x98\xbc\xe7\xbc\xa9\xe9\x98\x88\xe7\x9d\x91\xe6\x89\x8c\xe8\x80\x97\xe6\x9b\xa6\xe6\xb6\x85\xe6\x8d\x8f\xe7\x9e\xa7\xe9\x82\x95\xe6\xb7\x96\xe6\xbc\x89\xe9\x93\x9d\xe8\x80\xa6\xe7\xa6\xb9\xe6\xb9\x9b\xe5\x96\xbd\xe8\x8e\xbc\xe7\x90\x85\xe8\xaf\xb8\xe8\x8b\x8e\xe7\xba\x82\xe7\xa1\x85\xe5\xa7\x8b\xe5\x97\xa8\xe5\x82\xa5\xe7\x87\x83\xe8\x87\x82\xe8\xb5\x85\xe5\x98\x88\xe5\x91\x86\xe8\xb4\xb5\xe5\xb1\xb9\xe5\xa3\xae\xe8\x82\x8b\xe4\xba\x8d\xe8\x9a\x80\xe5\x8d\x85\xe8\xb1\xb9\xe8\x85\x86\xe9\x82\xac\xe8\xbf\xad\xe6\xb5\x8a}\xe7\xab\xa5\xe8\x9e\x82\xe6\x8d\x90\xe5\x9c\xa9\xe5\x8b\x90\xe8\xa7\xa6\xe5\xaf\x9e\xe6\xb1\x8a\xe5\xa3\xa4\xe8\x8d\xab\xe8\x86\xba\xe6\xb8\x8c\xe8\x8a\xb3\xe6\x87\xbf\xe9\x81\xb4\xe8\x9e\x88\xe6\xb3\xb0\xe8\x93\xbc\xe8\x9b\xa4\xe8\x8c\x9c\xe8\x88\x85\xe6\x9e\xab\xe6\x9c\x94\xe8\x86\x9d\xe7\x9c\x99\xe9\x81\xbf\xe6\xa2\x85\xe5\x88\xa4\xe9\xb9\x9c\xe7\x92\x9c\xe7\x89\x8d\xe7\xbc\x85\xe5\x9e\xab\xe8\x97\xbb\xe9\xbb\x94\xe4\xbe\xa5\xe6\x83\x9a\xe6\x87\x82\xe8\xb8\xa9\xe8\x85\xb0\xe8\x85\x88\xe6\x9c\xad\xe4\xb8\x9e\xe5\x94\xbe\xe6\x85\x88\xe9\xa1\xbf\xe6\x91\xb9\xe8\x8d\xbb\xe7\x90\xac~\xe6\x96\xa7\xe6\xb2\x88\xe6\xbb\x82\xe8\x83\x81\xe8\x83\x80\xe5\xb9\x84\xe8\x8e\x9cZ\xe5\x8c\x80\xe9\x84\x84\xe6\x8e\x8c\xe7\xbb\xb0\xe8\x8c\x8e\xe7\x84\x9a\xe8\xb5\x8b\xe8\x90\xb1\xe8\xb0\x91\xe6\xb1\x81\xe9\x93\x92\xe7\x9e\x8e\xe5\xa4\xba\xe8\x9c\x97\xe9\x87\x8e\xe5\xa8\x86\xe5\x86\x80\xe5\xbc\xaf\xe7\xaf\x81\xe6\x87\xb5\xe7\x81\x9e\xe9\x9a\xbd\xe8\x8a\xa1\xe8\x84\x98\xe4\xbf\x90\xe8\xbe\xa9\xe8\x8a\xaf\xe6\x8e\xba\xe5\x96\x8f\xe8\x86\x88\xe8\x9d\x88\xe8\xa7\x90\xe6\x82\x9a\xe8\xb8\xb9\xe8\x94\x97\xe7\x86\xa0\xe9\xbc\xa0\xe5\x91\xb5\xe6\x8a\x93\xe6\xa9\xbc\xe5\xb3\xa8\xe7\x95\x9c\xe7\xbc\x94\xe7\xa6\xbe\xe5\xb4\xad\xe5\xbc\x83\xe7\x86\x8a\xe6\x91\x92\xe5\x87\xb8\xe6\x8b\x97\xe7\xa9\xb9\xe8\x92\x99\xe6\x8a\x92\xe7\xa5\x9b\xe5\x8a\x9d\xe9\x97\xab\xe6\x89\xb3\xe9\x98\xb5\xe9\x86\x8c\xe8\xb8\xaa\xe5\x96\xb5\xe4\xbe\xa3\xe6\x90\xac\xe4\xbb\x85\xe8\x8d\xa7\xe8\xb5\x8e\xe8\x9d\xbe\xe7\x90\xa6\xe4\xb9\xb0\xe5\xa9\xa7\xe7\x9e\x84\xe5\xaf\x93\xe7\x9a\x8e\xe5\x86\xbb\xe8\xb5\x9d\xe7\xae\xa9\xe8\x8e\xab\xe7\x9e\xb0\xe9\x83\x8a\xe7\xac\xab\xe5\xa7\x9d\xe7\xad\x92\xe6\x9e\xaa\xe9\x81\xa3\xe7\x85\xb8\xe8\xa2\x8b\xe8\x88\x86\xe7\x97\xb1\xe6\xb6\x9b\xe6\xaf\x8d\xe3\x80\x87\xe5\x90\xaf\xe8\xb7\xb5\xe8\x80\x99\xe7\xbb\xb2\xe7\x9b\x98\xe9\x81\x82\xe6\x98\x8a\xe6\x90\x9e\xe6\xa7\xbf\xe8\xaf\xac\xe7\xba\xb0\xe6\xb3\x93\xe6\x83\xa8\xe6\xaa\xac\xe4\xba\xbb\xe8\xb6\x8aCo\xe6\x86\xa9\xe7\x86\xb5\xe7\xa5\xb7\xe9\x92\x92\xe6\x9a\xa7\xe5\xa1\x94\xe9\x98\x97\xe8\x83\xb0\xe5\x92\x84\xe5\xa8\xb6\xe9\xad\x94\xe7\x90\xb6\xe9\x92\x9e\xe9\x82\xbb\xe6\x89\xac\xe6\x9d\x89\xe6\xae\xb4\xe5\x92\xbd\xe5\xbc\x93\xe3\x80\x86\xe9\xab\xbb\xe3\x80\x91\xe5\x90\xad\xe6\x8f\xbd\xe9\x9c\x86\xe6\x8b\x84\xe6\xae\x96\xe8\x84\x86\xe5\xbd\xbb\xe5\xb2\xa9\xe8\x8a\x9d\xe5\x8b\x83\xe8\xbe\xa3\xe5\x89\x8c\xe9\x92\x9d\xe5\x98\x8e\xe7\x94\x84\xe4\xbd\x98\xe7\x9a\x96\xe4\xbc\xa6\xe6\x8e\x88\xe5\xbe\x95\xe6\x86\x94\xe6\x8c\xaa\xe7\x9a\x87\xe5\xba\x9e\xe7\xa8\x94\xe8\x8a\x9c\xe8\xb8\x8f\xe6\xba\xb4\xe5\x85\x96\xe5\x8d\x92\xe6\x93\xa2\xe9\xa5\xa5\xe9\xb3\x9e\xe7\x85\xb2\xe2\x80\xb0\xe8\xb4\xa6\xe9\xa2\x97\xe5\x8f\xbb\xe6\x96\xaf\xe6\x8d\xa7\xe9\xb3\x8d\xe7\x90\xae\xe8\xae\xb9\xe8\x9b\x99\xe7\xba\xbd\xe8\xb0\xad\xe9\x85\xb8\xe5\x85\x94\xe8\x8e\x92\xe7\x9d\x87\xe4\xbc\x9f\xe8\xa7\x91\xe7\xbe\xb2\xe5\x97\x9c\xe5\xae\x9c\xe8\xa4\x90\xe6\x97\x8e\xe8\xbe\x9b\xe5\x8d\xa6\xe8\xaf\x98\xe7\xad\x8b\xe9\x8e\x8f\xe6\xba\xaa\xe6\x8c\x9b\xe7\x86\x94\xe9\x98\x9c\xe6\x99\xb0\xe9\xb3\x85\xe4\xb8\xa2\xe5\xa5\x9a\xe7\x81\xb8\xe5\x91\xb1\xe7\x8c\xae\xe9\x99\x89\xe9\xbb\x9b\xe9\xb8\xaa\xe7\x94\xbe\xe8\x90\xa8\xe7\x96\xae\xe6\x8b\xaf\xe6\xb4\xb2\xe7\x96\xb9\xe8\xbe\x91\xe5\x8f\x99\xe6\x81\xbb\xe8\xb0\x92\xe5\x85\x81\xe6\x9f\x94\xe7\x83\x82\xe6\xb0\x8f\xe9\x80\x85\xe6\xbc\x86\xe6\x8b\x8e\xe6\x83\x8b\xe6\x89\x88\xe6\xb9\x9f\xe7\xba\xad\xe5\x95\x95\xe6\x8e\xac\xe6\x93\x9e\xe5\x93\xa5\xe5\xbf\xbd\xe6\xb6\xa4\xe9\xb8\xb5\xe9\x9d\xa1\xe9\x83\x97\xe7\x93\xb7\xe6\x89\x81\xe5\xbb\x8a\xe6\x80\xa8\xe9\x9b\x8f\xe9\x92\xae\xe6\x95\xa6E\xe6\x87\xa6\xe6\x86\x8b\xe6\xb1\x80\xe6\x8b\x9a\xe5\x95\x89\xe8\x85\x8c\xe5\xb2\xb8f\xe7\x97\xbc\xe7\x9e\x85\xe5\xb0\x8a\xe5\x92\x80\xe7\x9c\xa9\xe9\xa3\x99\xe5\xbf\x8c\xe4\xbb\x9d\xe8\xbf\xa6\xe7\x86\xac\xe6\xaf\xab\xe8\x83\xaf\xe7\xaf\x91\xe8\x8c\x84\xe8\x85\xba\xe5\x87\x84\xe8\x88\x9b\xe7\xa2\xb4\xe9\x94\xb5\xe8\xaf\xa7\xe7\xbe\xaf\xe5\xbe\x8c\xe6\xbc\x8f\xe6\xb1\xa4\xe5\xae\x93\xe4\xbb\x9e\xe8\x9a\x81\xe5\xa3\xb6\xe8\xb0\xb0\xe7\x9a\x91\xe9\x93\x84\xe6\xa3\xb0\xe7\xbd\x94\xe8\xbe\x85\xe6\x99\xb6\xe8\x8b\xa6\xe7\x89\x9f\xe9\x97\xbd\\\xe7\x83\x83\xe9\xa5\xae\xe8\x81\xbf\xe4\xb8\x99\xe8\x9b\xb3\xe6\x9c\xb1\xe7\x85\xa4\xe6\xb6\x94\xe9\xb3\x96\xe7\x8a\x81\xe7\xbd\x90\xe8\x8d\xbc\xe7\xa0\x92\xe6\xb7\xa6\xe5\xa6\xa4\xe9\xbb\x8f\xe6\x88\x8e\xe5\xad\x91\xe5\xa9\x95\xe7\x91\xbe\xe6\x88\xa2\xe9\x92\xb5\xe6\x9e\xa3\xe6\x8d\x8b\xe7\xa0\xa5\xe8\xa1\xa9\xe7\x8b\x99\xe6\xa1\xa0\xe7\xa8\xa3\xe9\x98\x8e\xe8\x82\x83\xe6\xa2\x8f\xe8\xaf\xab\xe5\xad\xaa\xe6\x98\xb6\xe5\xa9\x8a\xe8\xa1\xab\xe5\x97\x94\xe4\xbe\x83\xe5\xa1\x9e\xe8\x9c\x83\xe6\xa8\xb5\xe5\xb3\x92\xe8\xb2\x8c\xe5\xb1\xbf\xe6\xac\xba\xe7\xbc\xab\xe9\x98\x90\xe6\xa0\x96\xe8\xaf\x9f\xe7\x8f\x9e\xe8\x8d\xad\xe5\x90\x9d\xe8\x90\x8d\xe5\x97\xbd\xe6\x81\x82\xe5\x95\xbb\xe8\x9c\xb4\xe7\xa3\xac\xe5\xb3\x8b\xe4\xbf\xb8\xe8\xb1\xab\xe8\xb0\x8e\xe5\xbe\x8a\xe9\x95\x8d\xe9\x9f\xac\xe9\xad\x87\xe6\x99\xb4U\xe5\x9b\x9f\xe7\x8c\x9c\xe8\x9b\xae\xe5\x9d\x90\xe5\x9b\xbf\xe4\xbc\xb4\xe4\xba\xad\xe8\x82\x9d\xe4\xbd\x97\xe8\x9d\xa0\xe5\xa6\x83\xe8\x83\x9e\xe6\xbb\xa9\xe6\xa6\xb4\xe6\xb0\x96\xe5\x9e\xa9\xe8\x8b\x8b\xe7\xa0\xa3\xe6\x89\xaa\xe9\xa6\x8f\xe5\xa7\x93\xe8\xbd\xa9\xe5\x8e\x89\xe5\xa4\xa5\xe4\xbe\x88\xe7\xa6\x80\xe5\x9e\x92\xe5\xb2\x91\xe8\xb5\x8f\xe9\x92\x9b\xe8\xbe\x90\xe7\x97\x94\xe6\x8a\xab\xe7\xba\xb8\xe7\xa2\xb3\xe2\x80\x9c\xe5\x9d\x9e\xe8\xa0\x93\xe6\x8c\xa4\xe8\x8d\xa5\xe6\xb2\x85\xe6\x82\x94\xe9\x93\xa7\xe5\xb8\xbc\xe8\x92\x8c\xe8\x9d\x87apyng\xe5\x93\x80\xe6\xb5\x86\xe7\x91\xb6\xe5\x87\xbf\xe6\xa1\xb6\xe9\xa6\x88\xe7\x9a\xae\xe5\xa5\xb4\xe8\x8b\x9c\xe4\xbd\xa4\xe4\xbc\xb6\xe6\x99\x97\xe9\x93\xb1\xe7\x82\xac\xe4\xbc\x98\xe5\xbc\x8a\xe6\xb0\xa2\xe6\x81\x83\xe7\x94\xab\xe6\x94\xa5\xe7\xab\xaf\xe9\x94\x8c\xe7\x81\xb0\xe7\xa8\xb9\xe7\x82\x9d\xe6\x9b\x99\xe9\x82\x8b\xe4\xba\xa5\xe7\x9c\xb6\xe7\xa2\xbe\xe6\x8b\x89\xe8\x90\x9d\xe7\xbb\x94\xe6\x8d\xb7\xe6\xb5\x8d\xe8\x85\x8b\xe5\xa7\x91\xe8\x8f\x96\xe5\x87\x8c\xe6\xb6\x9e\xe9\xba\xbd\xe9\x94\xa2\xe6\xa1\xa8\xe6\xbd\xa2\xe7\xbb\x8e\xe9\x95\xb0\xe6\xae\x86\xe9\x94\x91\xe6\xb8\x9d\xe9\x93\xac\xe5\x9b\xb0\xe7\xbb\xbd\xe8\xa7\x8e\xe5\x8c\x88\xe7\xb3\x99\xe6\x9a\x91\xe8\xa3\xb9\xe9\xb8\x9f\xe7\x9b\x94\xe8\x82\xbd\xe8\xbf\xb7\xe7\xb6\xa6\xe3\x80\x8e\xe4\xba\xb3\xe4\xbd\x9d\xe4\xbf\x98\xe9\x92\xb4\xe8\xa7\x87\xe9\xaa\xa5\xe4\xbb\x86\xe7\x96\x9d\xe8\xb7\xaa\xe5\xa9\xb6\xe9\x83\xaf\xe7\x80\xb9\xe5\x94\x89\xe8\x84\x96\xe8\xb8\x9e\xe9\x92\x88\xe6\x99\xbe\xe5\xbf\x92\xe6\x89\xbc\xe7\x9e\xa9\xe5\x8f\x9b\xe6\xa4\x92\xe7\x96\x9f\xe5\x97\xa1\xe9\x82\x97\xe8\x82\x86\xe8\xb7\x86\xe7\x8e\xab\xe5\xbf\xa1\xe6\x8d\xa3\xe5\x92\xa7\xe5\x94\x86\xe8\x89\x84\xe8\x98\x91\xe6\xbd\xa6\xe7\xac\x9b\xe9\x98\x9a\xe6\xb2\xb8\xe6\xb3\xbb\xe6\x8e\x8a\xe8\x8f\xbd\xe8\xb4\xab\xe6\x96\xa5\xe9\xab\x82\xe5\xad\xa2\xe9\x95\x82\xe8\xb5\x82\xe9\xba\x9d\xe9\xb8\xbe\xe5\xb1\xa1\xe8\xa1\xac\xe8\x8b\xb7\xe6\x81\xaa\xe5\x8f\xa0\xe5\xb8\x8c\xe7\xb2\xa4\xe7\x88\xbb\xe5\x96\x9d\xe8\x8c\xab\xe6\x83\xac\xe9\x83\xb8\xe7\xbb\xbb\xe5\xba\xb8\xe6\x92\x85\xe7\xa2\x9f\xe5\xae\x84\xe5\xa6\xb9\xe8\x86\x9b\xe5\x8f\xae\xe9\xa5\xb5\xe5\xb4\x9b\xe5\x97\xb2\xe6\xa4\x85\xe5\x86\xa4\xe6\x90\x85\xe5\x92\x95\xe6\x95\x9b\xe5\xb0\xb9\xe5\x9e\xa6\xe9\x97\xb7\xe8\x9d\x89\xe9\x9c\x8e\xe5\x8b\xb0\xe8\xb4\xa5\xe8\x93\x91\xe6\xb3\xb8\xe8\x82\xa4\xe9\xb9\x8c\xe5\xb9\x8c\xe7\x84\xa6\xe6\xb5\xa0\xe9\x9e\x8d\xe5\x88\x81\xe8\x88\xb0\xe4\xb9\x99\xe7\xab\xbf\xe8\xa3\x94\xe3\x80\x82\xe8\x8c\xb5\xe5\x87\xbd\xe4\xbc\x8a\xe5\x85\x84\xe4\xb8\xa8\xe5\xa8\x9c\xe5\x8c\x8d\xe8\xac\x87\xe8\x8e\xaa\xe5\xae\xa5\xe4\xbc\xbc\xe8\x9d\xbd\xe7\xbf\xb3\xe9\x85\xaa\xe7\xbf\xa0\xe7\xb2\x91\xe8\x96\x87\xe7\xa5\xa2\xe9\xaa\x8f\xe8\xb5\xa0\xe5\x8f\xabQ\xe5\x99\xa4\xe5\x99\xbb\xe7\xab\x96\xe8\x8a\x97\xe8\x8e\xa0\xe6\xbd\xad\xe4\xbf\x8a\xe7\xbe\xbf\xe8\x80\x9cO\xe9\x83\xab\xe8\xb6\x81\xe5\x97\xaa\xe5\x9b\x9a\xe8\xb9\xb6\xe8\x8a\x92\xe6\xb4\x81\xe7\xac\x8b\xe9\xb9\x91\xe6\x95\xb2\xe7\xa1\x9d\xe5\x95\xb6\xe5\xa0\xa1\xe6\xb8\xb2\xe6\x8f\xa9\xe3\x80\x8f\xe6\x90\xba\xe5\xae\xbf\xe9\x81\x92\xe9\xa2\x8d\xe6\x89\xad\xe6\xa3\xb1\xe5\x89\xb2\xe8\x90\x9c\xe8\x94\xb8\xe8\x91\xb5\xe7\x90\xb4\xe6\x8d\x82\xe9\xa5\xb0\xe8\xa1\x99\xe8\x80\xbf\xe6\x8e\xa0\xe5\x8b\x9f\xe5\xb2\x82\xe7\xaa\x96\xe6\xb6\x9f\xe8\x94\xba\xe7\x98\xa4\xe6\x9f\x9e\xe7\x9e\xaa\xe6\x80\x9c\xe5\x8c\xb9\xe8\xb7\x9d\xe6\xa5\x94\xe7\x82\x9c\xe5\x93\x86\xe7\xa7\xa6\xe7\xbc\x8e\xe5\xb9\xbc\xe8\x8c\x81\xe7\xbb\xaa\xe7\x97\xa8\xe6\x81\xa8\xe6\xa5\xb8\xe5\xa8\x85\xe7\x93\xa6\xe6\xa1\xa9\xe9\x9b\xaa\xe5\xac\xb4\xe4\xbc\x8f\xe6\xa6\x94\xe5\xa6\xa5\xe9\x93\xbf\xe6\x8b\x8c\xe7\x9c\xa0\xe9\x9b\x8d\xe7\xbc\x87\xe2\x80\x98\xe5\x8d\x93\xe6\x90\x93\xe5\x93\x8c\xe8\xa7\x9e\xe5\x99\xa9\xe5\xb1\x88\xe5\x93\xa7\xe9\xab\x93\xe5\x92\xa6\xe5\xb7\x85\xe5\xa8\x91\xe4\xbe\x91\xe6\xb7\xab\xe8\x86\xb3\xe7\xa5\x9d\xe5\x8b\xbe\xe5\xa7\x8a\xe8\x8e\xb4\xe8\x83\x84\xe7\x96\x83\xe8\x96\x9b\xe8\x9c\xb7\xe8\x83\x9b\xe5\xb7\xb7\xe8\x8a\x99\xe8\x8a\x8b\xe7\x86\x99\xe9\x97\xb0\xe5\x8b\xbf\xe7\xaa\x83\xe7\x8b\xb1\xe5\x89\xa9\xe9\x92\x8f\xe5\xb9\xa2\xe9\x99\x9f\xe9\x93\x9b\xe6\x85\xa7\xe9\x9d\xb4\xe8\x80\x8dk\xe6\xb5\x99\xe6\xb5\x87\xe9\xa3\xa8\xe6\x83\x9f\xe7\xbb\x97\xe7\xa5\x9c\xe6\xbe\x88\xe5\x95\xbc\xe5\x92\xaa\xe7\xa3\xb7\xe6\x91\x9e\xe8\xaf\x85\xe9\x83\xa6\xe6\x8a\xb9\xe8\xb7\x83\xe5\xa3\xac\xe5\x90\x95\xe8\x82\x96\xe7\x90\x8f\xe9\xa2\xa4\xe5\xb0\xb4\xe5\x89\xa1\xe6\x8a\xa0\xe5\x87\x8b\xe8\xb5\x9a\xe6\xb3\x8a\xe6\xb4\xa5\xe5\xae\x95\xe6\xae\xb7\xe5\x80\x94\xe6\xb0\xb2\xe6\xbc\xab\xe9\x82\xba\xe6\xb6\x8e\xe6\x80\xa0$\xe5\x9e\xae\xe8\x8d\xac\xe9\x81\xb5\xe4\xbf\x8f\xe5\x8f\xb9\xe5\x99\xa2\xe9\xa5\xbd\xe8\x9c\x98\xe5\xad\x99\xe7\xad\xb5\xe7\x96\xbc\xe9\x9e\xad\xe7\xbe\xa7\xe7\x89\xa6\xe7\xae\xad\xe6\xbd\xb4c\xe7\x9c\xb8\xe7\xa5\xad\xe9\xab\xaf\xe5\x95\x96\xe5\x9d\xb3\xe6\x84\x81\xe8\x8a\xa9\xe9\xa9\xae\xe5\x80\xa1\xe5\xb7\xbd\xe7\xa9\xb0\xe6\xb2\x83\xe8\x83\x9a\xe6\x80\x92\xe5\x87\xa4\xe6\xa7\x9b\xe5\x89\x82\xe8\xb6\xb5\xe5\xab\x81v\xe9\x82\xa2\xe7\x81\xaf\xe9\x84\xa2\xe6\xa1\x90\xe7\x9d\xbd\xe6\xaa\x97\xe9\x94\xaf\xe6\xa7\x9f\xe5\xa9\xb7\xe5\xb5\x8b\xe5\x9c\xbb\xe8\xaf\x97\xe8\x95\x88\xe9\xa2\xa0\xe9\x81\xad\xe7\x97\xa2\xe8\x8a\xb8\xe6\x80\xaf\xe9\xa6\xa5\xe7\xab\xad\xe9\x94\x97\xe5\xbe\x9c\xe6\x81\xad\xe9\x81\x8d\xe7\xb1\x81\xe5\x89\x91\xe5\x98\xb1\xe8\x8b\xa1\xe9\xbe\x84\xe5\x83\xa7\xe6\xa1\x91\xe6\xbd\xb8\xe5\xbc\x98\xe6\xbe\xb6\xe6\xa5\xb9\xe6\x82\xb2\xe8\xae\xab\xe6\x84\xa4\xe8\x85\xa5\xe6\x82\xb8\xe8\xb0\x8d\xe6\xa4\xb9\xe5\x91\xa2\xe6\xa1\x93\xe8\x91\xad\xe6\x94\xab\xe9\x98\x80\xe7\xbf\xb0\xe8\xba\xb2\xe6\x95\x96\xe6\x9f\x91\xe9\x83\x8e\xe7\xac\xa8\xe6\xa9\x87\xe5\x91\x83\xe9\xad\x81\xe7\x87\x8e\xe8\x84\x93\xe8\x91\xa9\xe7\xa3\x8b\xe5\x9e\x9b\xe7\x8e\xba\xe7\x8b\xae\xe6\xb2\x93\xe7\xa0\x9c\xe8\x95\x8a\xe9\x94\xba\xe7\xbd\xb9\xe8\x95\x89\xe7\xbf\xb1\xe8\x99\x90\xe9\x97\xbe\xe5\xb7\xab\xe6\x97\xa6\xe8\x8c\xb1\xe5\xac\xb7\xe6\x9e\xaf\xe9\xb9\x8f\xe8\xb4\xa1\xe8\x8a\xb9\xe6\xb1\x9b\xe7\x9f\xab\xe7\xbb\x81\xe6\x8b\xa3\xe7\xa6\xba\xe4\xbd\x83\xe8\xae\xa3\xe8\x88\xab\xe6\x83\xaf\xe4\xb9\xb3\xe8\xb6\x8b\xe7\x96\xb2\xe6\x8c\xbd\xe5\xb2\x9a\xe8\x99\xbe\xe8\xa1\xbe\xe8\xa0\xb9\xe8\xb9\x82\xe9\xa3\x93\xe6\xb0\xa6\xe9\x93\x96\xe5\xad\xa9\xe7\xa8\x9e\xe7\x91\x9c\xe5\xa3\x85\xe6\x8e\x80\xe5\x8b\x98\xe5\xa6\x93\xe7\x95\x85\xe9\xab\x8bW\xe5\xba\x90\xe7\x89\xb2\xe8\x93\xbf\xe6\xa6\x95\xe7\xbb\x83\xe5\x9e\xa3\xe5\x94\xb1\xe9\x82\xb8\xe8\x8f\xb2\xe6\x98\x86\xe5\xa9\xba\xe7\xa9\xbf\xe7\xbb\xa1\xe9\xba\x92\xe8\x9a\xb1\xe6\x8e\x82\xe6\x84\x9a\xe6\xb3\xb7\xe6\xb6\xaa\xe6\xbc\xb3\xe5\xa6\xa9\xe5\xa8\x89\xe6\xa6\x84\xe8\xae\xb7\xe8\xa7\x85\xe6\x97\xa7\xe8\x97\xa4\xe7\x85\xae\xe5\x91\x9b\xe6\x9f\xb3\xe8\x85\x93\xe5\x8f\xad\xe5\xba\xb5\xe7\x83\xb7\xe9\x98\xa1\xe7\xbd\x82\xe8\x9c\x95\xe6\x93\x82\xe7\x8c\x96\xe5\x92\xbf\xe5\xaa\xb2\xe8\x84\x89\xe3\x80\x90\xe6\xb2\x8f\xe8\xb2\x85\xe9\xbb\xa0\xe7\x86\x8f\xe5\x93\xb2\xe7\x83\x81\xe5\x9d\xa6\xe9\x85\xb5\xe5\x85\x9c\xc3\x97\xe6\xbd\x87\xe6\x92\x92\xe5\x89\xbd\xe7\x8f\xa9\xe5\x9c\xb9\xe4\xb9\xbe\xe6\x91\xb8\xe6\xa8\x9f\xe5\xb8\xbd\xe5\x97\x92\xe8\xa5\x84\xe9\xad\x82\xe8\xbd\xbf\xe6\x86\xac\xe9\x94\xa1\xe3\x80\x95\xe5\x96\x83\xe7\x9a\x86\xe5\x92\x96\xe9\x9a\x85\xe8\x84\xb8\xe6\xae\x8b\xe6\xb3\xae\xe8\xa2\x82\xe9\xb9\x82\xe7\x8f\x8a\xe5\x9b\xa4\xe6\x8d\x86\xe5\x92\xa4\xe8\xaf\xaf\xe5\xbe\xa8\xe9\x97\xb9\xe6\xb7\x99\xe8\x8a\x8a\xe6\xb7\x8b\xe6\x80\x86\xe5\x9b\x97\xe6\x8b\xa8\xe6\xa2\xb3\xe6\xb8\xa4RG\xe7\xbb\xa8\xe8\x9a\x93\xe5\xa9\x80\xe5\xb9\xa1\xe7\x8b\xa9\xe9\xba\xbe\xe8\xb0\xa2\xe5\x94\xa2\xe8\xa3\xb8\xe6\x97\x8c\xe4\xbc\x89\xe7\xba\xb6\xe8\xa3\x82\xe9\xa9\xb3\xe7\xa0\xbc\xe5\x92\x9b\xe6\xbe\x84\xe6\xa8\xa8\xe8\xb9\x88\xe5\xae\x99\xe6\xbe\x8d\xe5\x80\x8d\xe8\xb2\x94\xe6\x93\x8d\xe5\x8b\x87\xe8\x9f\xa0\xe6\x91\x88\xe7\xa0\xa7\xe8\x99\xac\xe5\xa4\x9f\xe7\xbc\x81\xe6\x82\xa6\xe8\x97\xbf\xe6\x92\xb8\xe8\x89\xb9\xe6\x91\x81\xe6\xb7\xb9\xe8\xb1\x87\xe8\x99\x8e\xe6\xa6\xad\xcb\x89\xe5\x90\xb1d\xc2\xb0\xe5\x96\xa7\xe8\x8d\x80\xe8\xb8\xb1\xe4\xbe\xae\xe5\xa5\x8b\xe5\x81\x95\xe9\xa5\xb7\xe7\x8a\x8d\xe6\x83\xae\xe5\x9d\x91\xe7\x92\x8e\xe5\xbe\x98\xe5\xae\x9b\xe5\xa6\x86\xe8\xa2\x88\xe5\x80\xa9\xe7\xaa\xa6\xe6\x98\x82\xe8\x8d\x8f\xe4\xb9\x96K\xe6\x80\x85\xe6\x92\xb0\xe9\xb3\x99\xe7\x89\x99\xe8\xa2\x81\xe9\x85\x9eX\xe7\x97\xbf\xe7\x90\xbc\xe9\x97\xb8\xe9\x9b\x81\xe8\xb6\xbe\xe8\x8d\x9a\xe8\x99\xbb\xe6\xb6\x9d\xe3\x80\x8a\xe6\x9d\x8f\xe9\x9f\xad\xe5\x81\x88\xe7\x83\xa4\xe7\xbb\xab\xe9\x9e\x98\xe5\x8d\x89\xe7\x97\x87\xe9\x81\xa2\xe8\x93\xa5\xe8\xaf\x8b\xe6\x9d\xad\xe8\x8d\xa8\xe5\x8c\x86\xe7\xab\xa3\xe7\xb0\xaa\xe8\xbe\x99\xe6\x95\x95\xe8\x99\x9e\xe4\xb8\xb9\xe7\xbc\xad\xe5\x92\xa9\xe9\xbb\x9fm\xe6\xb7\xa4\xe7\x91\x95\xe5\x92\x82\xe9\x93\x89\xe7\xa1\xbc\xe8\x8c\xa8\xe5\xb6\x82\xe7\x97\x92\xe7\x95\xb8\xe6\x95\xac\xe6\xb6\xbf\xe7\xb2\xaa\xe7\xaa\x98\xe7\x86\x9f\xe5\x8f\x94\xe5\xab\x94\xe7\x9b\xbe\xe5\xbf\xb1\xe8\xa3\x98\xe6\x86\xbe\xe6\xa2\xb5\xe8\xb5\xa1\xe7\x8f\x99\xe5\x92\xaf\xe5\xa8\x98\xe5\xba\x99\xe6\xba\xaf\xe8\x83\xba\xe8\x91\xb1\xe7\x97\xaa\xe6\x91\x8a\xe8\x8d\xb7\xe5\x8d\x9e\xe4\xb9\x92\xe9\xab\xa6\xe5\xaf\x90\xe9\x93\xad\xe5\x9d\xa9\xe8\x83\x97\xe6\x9e\xb7\xe7\x88\x86\xe6\xba\x9f\xe5\x9a\xbc\xe7\xbe\x9a\xe7\xa0\xac\xe8\xbd\xa8\xe6\x83\x8a\xe6\x8c\xa0\xe7\xbd\x84\xe7\xab\xbd\xe8\x8f\x8f\xe6\xb0\xa7\xe6\xb5\x85\xe6\xa5\xa3\xe7\x9b\xbc\xe6\x9e\xa2\xe7\x82\xb8\xe9\x98\x86\xe6\x9d\xaf\xe8\xb0\x8f\xe5\x99\xac\xe6\xb7\x87\xe6\xb8\xba\xe4\xbf\xaa\xe7\xa7\x86\xe5\xa2\x93\xe6\xb3\xaa\xe8\xb7\xbb\xe7\xa0\x8c\xe7\x97\xb0\xe5\x9e\xa1\xe6\xb8\xa1\xe8\x80\xbd\xe9\x87\x9c\xe8\xae\xb6\xe9\xb3\x8e\xe7\x85\x9e\xe5\x91\x97\xe9\x9f\xb6\xe8\x88\xb6\xe7\xbb\xb7\xe9\xb9\xb3\xe7\xbc\x9c\xe6\x97\xb7\xe9\x93\x8a\xe7\x9a\xb1\xe9\xbe\x8c\xe6\xaa\x80\xe9\x9c\x96\xe5\xa5\x84\xe6\xa7\x90\xe8\x89\xb3\xe8\x9d\xb6\xe6\x97\x8b\xe5\x93\x9d\xe8\xb5\xb6\xe9\xaa\x9e\xe8\x9a\xa7\xe8\x85\x8a\xe7\x9b\x88\xe4\xb8\x81`\xe8\x9c\x9a\xe7\x9f\xb8\xe8\x9d\x99\xe7\x9d\xa8\xe5\x9a\x93\xe5\x83\xbb\xe9\xac\xbc\xe9\x86\xb4\xe5\xa4\x9c\xe5\xbd\x9d\xe7\xa3\x8a\xe7\xac\x94\xe6\x8b\x94\xe6\xa0\x80\xe7\xb3\x95\xe5\x8e\xa6\xe9\x82\xb0\xe7\xba\xab\xe9\x80\xad\xe7\xba\xa4\xe7\x9c\xa6\xe8\x86\x8a\xe9\xa6\x8d\xe8\xba\x87\xe7\x83\xaf\xe8\x98\xbc\xe5\x86\xac\xe8\xaf\xa4\xe6\x9a\x84\xe9\xaa\xb6\xe5\x93\x91\xe7\x98\xa0\xe3\x80\x8d\xe8\x87\x8a\xe4\xb8\x95\xe6\x84\x88\xe5\x92\xb1\xe8\x9e\xba\xe6\x93\x85\xe8\xb7\x8b\xe6\x90\x8f\xe7\xa1\xaa\xe8\xb0\x84\xe7\xac\xa0\xe6\xb7\xa1\xe5\x98\xbf\xe9\xaa\x85\xe8\xb0\xa7\xe9\xbc\x8e\xe7\x9a\x8b\xe5\xa7\x9a\xe6\xad\xbc\xe8\xa0\xa2\xe9\xa9\xbc\xe8\x80\xb3\xe8\x83\xac\xe6\x8c\x9d\xe6\xb6\xaf\xe7\x8b\x97\xe8\x92\xbd\xe5\xad\x93\xe7\x8a\xb7\xe5\x87\x89\xe8\x8a\xa6\xe7\xae\xb4\xe9\x93\xa4\xe5\xad\xa4\xe5\x98\x9b\xe5\x9d\xa4V\xe8\x8c\xb4\xe6\x9c\xa6\xe6\x8c\x9e\xe5\xb0\x96\xe6\xa9\x99\xe8\xaf\x9e\xe6\x90\xb4\xe7\xa2\x87\xe6\xb4\xb5\xe6\xb5\x9a\xe5\xb8\x9a\xe8\x9c\x8d\xe6\xbc\xaf\xe6\x9f\x98\xe5\x9a\x8e\xe8\xae\xbd\xe8\x8a\xad\xe8\x8d\xa4\xe5\x92\xbb\xe7\xa5\xa0\xe7\xa7\x89\xe8\xb7\x96\xe5\x9f\x83\xe5\x90\x93\xe7\xb3\xaf\xe7\x9c\xb7\xe9\xa6\x92\xe6\x83\xb9\xe5\xa8\xbc\xe9\xb2\x91\xe5\xab\xa9\xe8\xae\xb4\xe8\xbd\xae\xe7\x9e\xa5\xe9\x9d\xb6\xe8\xa4\x9a\xe4\xb9\x8f\xe7\xbc\xa4\xe5\xae\x8b\xe5\xb8\xa7\xe5\x88\xa0\xe9\xa9\xb1\xe7\xa2\x8e\xe6\x89\x91\xe4\xbf\xa9\xe4\xbf\x84\xe5\x81\x8f\xe6\xb6\xa3\xe7\xab\xb9\xe5\x99\xb1\xe7\x9a\x99\xe4\xbd\xb0\xe6\xb8\x9a\xe5\x94\xa7\xe6\x96\xa1#\xe9\x95\x89\xe5\x88\x80\xe5\xb4\x8e\xe7\xad\x90\xe4\xbd\xa3\xe5\xa4\xad\xe8\xb4\xb0\xe8\x82\xb4\xe5\xb3\x99\xe5\x93\x94\xe8\x89\xbf\xe5\x8c\x90\xe7\x89\xba\xe9\x95\x9b\xe7\xbc\x98\xe4\xbb\xa1\xe5\xab\xa1\xe5\x8a\xa3\xe6\x9e\xb8\xe5\xa0\x80\xe6\xa2\xa8\xe7\xb0\xbf\xe9\xb8\xad\xe8\x92\xb8\xe4\xba\xa6\xe7\xa8\xbd\xe6\xb5\xb4{\xe8\xa1\xa2\xe6\x9d\x9f\xe6\xa7\xb2j\xe9\x98\x81\xe6\x8f\x8d\xe7\x96\xa5\xe6\xa3\x8b\xe6\xbd\x8b\xe8\x81\xaa\xe7\xaa\x9c\xe4\xb9\x93\xe7\x9d\x9b\xe6\x8f\x92\xe5\x86\x89\xe9\x98\xaa\xe8\x8b\x8d\xe6\x90\xbd\xe3\x80\x8c\xe8\x9f\xbe\xe8\x9e\x9f\xe5\xb9\xb8\xe4\xbb\x87\xe6\xa8\xbd\xe6\x92\x82\xe6\x85\xa2\xe8\xb7\xa4\xe5\xb9\x94\xe4\xbf\x9a\xe6\xb7\x85\xe8\xa6\x83\xe8\xa7\x8a\xe6\xba\xb6\xe5\xa6\x96\xe5\xb8\x9b\xe4\xbe\xa8\xe6\x9b\xb0\xe5\xa6\xbe\xe6\xb3\x97\'\n'"
crnn/test.py,0,"b'# coding:utf-8\n\nimport dataset\nimport keys\nimport models.crnn as crnn\nimport torch.utils.data\nimport util\nfrom PIL import Image\nfrom torch.autograd import Variable\n\nalphabet = keys.alphabet\nprint(len(alphabet))\nraw_input(\'\\ninput:\')\nconverter = util.strLabelConverter(alphabet)\nmodel = crnn.CRNN(32, 1, len(alphabet) + 1, 256, 1).cuda()\npath = \'./samples/netCRNN63.pth\'\nmodel.load_state_dict(torch.load(path))\nprint(model)\n\nwhile 1:\n    im_name = raw_input(""\\nplease input file name:"")\n    im_path = ""./img/"" + im_name\n    image = Image.open(im_path).convert(\'L\')\n    scale = image.size[1] * 1.0 / 32\n    w = image.size[0] / scale\n    w = int(w)\n    print(w)\n\n    transformer = dataset.resizeNormalize((w, 32))\n    image = transformer(image).cuda()\n    image = image.view(1, *image.size())\n    image = Variable(image)\n    model.eval()\n    preds = model(image)\n    _, preds = preds.max(2)\n    preds = preds.squeeze(2)\n    preds = preds.transpose(1, 0).contiguous().view(-1)\n    preds_size = Variable(torch.IntTensor([preds.size(0)]))\n    raw_pred = converter.decode(preds.data, preds_size.data, raw=True)\n    sim_pred = converter.decode(preds.data, preds_size.data, raw=False)\n    print(\'%-20s => %-20s\' % (raw_pred, sim_pred))\n'"
crnn/util.py,0,"b'#!/usr/bin/python\n# encoding: utf-8\n\nimport torch\nimport torch.nn as nn\n\n\nclass strLabelConverter(object):\n    def __init__(self, alphabet):\n        self.alphabet = alphabet + u\'-\'  # for `-1` index\n        self.dict = {}\n        for i, char in enumerate(alphabet):\n            # NOTE: 0 is reserved for \'blank\' required by wrap_ctc\n            self.dict[char] = i + 1\n\n    def encode(self, text, depth=0):\n        """"""Support batch or single str.""""""\n        length = []\n        result = []\n        for str in text:\n            str = unicode(str, ""utf8"")\n            length.append(len(str))\n            for char in str:\n                # print(char)\n                index = self.dict[char]\n                result.append(index)\n        text = result\n        return (torch.IntTensor(text), torch.IntTensor(length))\n\n    def decode(self, t, length, raw=False):\n        if length.numel() == 1:\n            length = length[0]\n            t = t[:length]\n            if raw:\n                return \'\'.join([self.alphabet[i - 1] for i in t])\n            else:\n                char_list = []\n                for i in range(length):\n                    if t[i] != 0 and (not (i > 0 and t[i - 1] == t[i])):\n                        char_list.append(self.alphabet[t[i] - 1])\n                return \'\'.join(char_list)\n        else:\n            texts = []\n            index = 0\n            for i in range(length.numel()):\n                l = length[i]\n                texts.append(self.decode(\n                    t[index:index + l], torch.IntTensor([l]), raw=raw))\n                index += l\n            return texts\n\n\nclass averager(object):\n    def __init__(self):\n        self.reset()\n\n    def add(self, v):\n        self.n_count += v.data.numel()\n        # NOTE: not `+= v.sum()`, which will add a node in the compute graph,\n        # which lead to memory leak\n        self.sum += v.data.sum()\n\n    def reset(self):\n        self.n_count = 0\n        self.sum = 0\n\n    def val(self):\n        res = 0\n        if self.n_count != 0:\n            res = self.sum / float(self.n_count)\n        return res\n\n\ndef oneHot(v, v_length, nc):\n    batchSize = v_length.size(0)\n    maxLength = v_length.max()\n    v_onehot = torch.FloatTensor(batchSize, maxLength, nc).fill_(0)\n    acc = 0\n    for i in range(batchSize):\n        length = v_length[i]\n        label = v[acc:acc + length].view(-1, 1).long()\n        v_onehot[i, :length].scatter_(1, label, 1.0)\n        acc += length\n    return v_onehot\n\n\ndef loadData(v, data):\n    v.data.resize_(data.size()).copy_(data)\n\n\ndef prettyPrint(v):\n    print(\'Size {0}, Type: {1}\'.format(str(v.size()), v.data.type()))\n    print(\'| Max: %f | Min: %f | Mean: %f\' % (v.max().data[0], v.min().data[0], v.mean().data[0]))\n\n\ndef assureRatio(img):\n    """"""Ensure imgH <= imgW.""""""\n    b, c, h, w = img.size()\n    if h > w:\n        main = nn.UpsamplingBilinear2d(size=(h, h), scale_factor=None)\n        img = main(img)\n    return img\n'"
ctpn/__init__.py,0,b''
ctpn/text_detect.py,0,"b""import numpy as np\n# import tensorflow as tf\nfrom .ctpn.detectors import TextDetector\nfrom .ctpn.model import ctpn\nfrom .ctpn.other import draw_boxes\n'''\n\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x96\x87\xe5\x8c\xba\xe5\x88\xab\xe4\xba\x8e\xe8\xaf\x86\xe5\x88\xab-\xe7\xbd\x91\xe7\xbb\x9c\xe7\xbb\x93\xe6\x9e\x84\xe4\xb8\xbacnn+rnn\n'''\n\n\ndef text_detect(img):\n    # ctpn\xe7\xbd\x91\xe7\xbb\x9c\xe6\xb5\x8b\xe5\x88\xb0\n    scores, boxes, img = ctpn(img)\n    textdetector = TextDetector()\n    boxes = textdetector.detect(boxes, scores[:, np.newaxis], img.shape[:2])\n    # text_recs, tmp = draw_boxes(img, boxes, caption='im_name', wait=True, is_display=False)\n    text_recs, tmp = draw_boxes(\n        img, boxes, caption='im_name', wait=True, is_display=True)\n    return text_recs, tmp, img\n"""
ocr/__init__.py,0,b''
ocr/keys_ocr.py,0,"b'# coding:UTF-8\nalphabet = u""""""\'\xe7\x96\x97\xe7\xbb\x9a\xe8\xaf\x9a\xe5\xa8\x87\xe6\xba\x9c\xe9\xa2\x98\xe8\xb4\xbf\xe8\x80\x85\xe5\xbb\x96\xe6\x9b\xb4\xe7\xba\xb3\xe5\x8a\xa0\xe5\xa5\x89\xe5\x85\xac\xe4\xb8\x80\xe5\xb0\xb1\xe6\xb1\xb4\xe8\xae\xa1\xe4\xb8\x8e\xe8\xb7\xaf\xe6\x88\xbf\xe5\x8e\x9f\xe5\xa6\x87208-7\xe5\x85\xb6>:],\xef\xbc\x8c\xe9\xaa\x91\xe5\x88\x88\xe5\x85\xa8\xe6\xb6\x88\xe6\x98\x8f\xe5\x82\x88\xe5\xae\x89\xe4\xb9\x85\xe9\x92\x9f\xe5\x97\x85\xe4\xb8\x8d\xe5\xbd\xb1\xe5\xa4\x84\xe9\xa9\xbd\xe8\x9c\xbf\xe8\xb5\x84\xe5\x85\xb3\xe6\xa4\xa4\xe5\x9c\xb0\xe7\x98\xb8\xe4\xb8\x93\xe9\x97\xae\xe5\xbf\x96\xe7\xa5\xa8\xe5\xab\x89\xe7\x82\x8e\xe9\x9f\xb5\xe8\xa6\x81\xe6\x9c\x88\xe7\x94\xb0\xe8\x8a\x82\xe9\x99\x82\xe9\x84\x99\xe6\x8d\x8c\xe5\xa4\x87\xe6\x8b\xb3\xe4\xbc\xba\xe7\x9c\xbc\xe7\xbd\x91\xe7\x9b\x8e\xe5\xa4\xa7\xe5\x82\x8d\xe5\xbf\x83\xe4\xb8\x9c\xe6\x84\x89\xe6\xb1\x87\xe8\xb9\xbf\xe7\xa7\x91\xe6\xaf\x8f\xe4\xb8\x9a\xe9\x87\x8c\xe8\x88\xaa\xe6\x99\x8f\xe5\xad\x97\xe5\xb9\xb3\xe5\xbd\x95\xe5\x85\x8813\xe5\xbd\xa4\xe9\xb2\xb6\xe4\xba\xa7\xe7\xa8\x8d\xe7\x9d\xa3\xe8\x85\xb4\xe6\x9c\x89\xe8\xb1\xa1\xe5\xb2\xb3\xe6\xb3\xa8\xe7\xbb\x8d\xe5\x9c\xa8\xe6\xb3\xba\xe6\x96\x87\xe5\xae\x9a\xe6\xa0\xb8\xe5\x90\x8d\xe6\xb0\xb4\xe8\xbf\x87\xe7\x90\x86\xe8\xae\xa9\xe5\x81\xb7\xe7\x8e\x87\xe7\xad\x89\xe8\xbf\x99\xe5\x8f\x91\xe2\x80\x9d\xe4\xb8\xba\xe5\x90\xab\xe8\x82\xa5\xe9\x85\x89\xe7\x9b\xb8\xe9\x84\xb1\xe4\xb8\x83\xe7\xbc\x96\xe7\x8c\xa5\xe9\x94\x9b\xe6\x97\xa5\xe9\x95\x80\xe8\x92\x82\xe6\x8e\xb0\xe5\x80\x92\xe8\xbe\x86\xe6\xa0\xbe\xe6\xa0\x97\xe7\xbb\xbc\xe6\xb6\xa9\xe5\xb7\x9e\xe9\x9b\x8c\xe6\xbb\x91\xe9\xa6\x80\xe4\xba\x86\xe6\x9c\xba\xe5\x9d\x97\xe5\x8f\xb8\xe5\xae\xb0\xe7\x94\x99\xe5\x85\xb4\xe7\x9f\xbd\xe6\x8a\x9a\xe4\xbf\x9d\xe7\x94\xa8\xe6\xb2\xa7\xe7\xa7\xa9\xe5\xa6\x82\xe6\x94\xb6\xe6\x81\xaf\xe6\xbb\xa5\xe9\xa1\xb5\xe7\x96\x91\xe5\x9f\xa0!\xef\xbc\x81\xe5\xa7\xa5\xe5\xbc\x82\xe6\xa9\xb9\xe9\x92\x87\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\x84\xe7\x9a\x84\xe6\xa4\xb4\xe6\xb2\xab\xe5\x9b\xbd\xe7\xbb\xa5\xe7\x8d\xa0\xe6\x8a\xa5\xe5\xbc\x80\xe6\xb0\x91\xe8\x9c\x87\xe4\xbd\x95\xe5\x88\x86\xe5\x87\x87\xe9\x95\xbf\xe8\xae\xa5\xe8\x97\x8f\xe6\x8e\x8f\xe6\x96\xbd\xe7\xbe\xbd\xe4\xb8\xad\xe8\xae\xb2\xe6\xb4\xbe\xe5\x98\x9f\xe4\xba\xba\xe6\x8f\x90\xe6\xb5\xbc\xe9\x97\xb4\xe4\xb8\x96\xe8\x80\x8c\xe5\x8f\xa4\xe5\xa4\x9a\xe5\x80\xaa\xe5\x94\x87\xe9\xa5\xaf\xe6\x8e\xa7\xe5\xba\x9a\xe9\xa6\x96\xe8\xb5\x9b\xe8\x9c\x93\xe5\x91\xb3\xe6\x96\xad\xe5\x88\xb6\xe8\xa7\x89\xe6\x8a\x80\xe6\x9b\xbf\xe8\x89\xb0\xe6\xba\xa2\xe6\xbd\xae\xe5\xa4\x95\xe9\x92\xba\xe5\xa4\x96\xe6\x91\x98\xe6\x9e\x8b\xe5\x8a\xa8\xe5\x8f\x8c\xe5\x8d\x95\xe5\x95\xae\xe6\x88\xb7\xe6\x9e\x87\xe7\xa1\xae\xe9\x94\xa6\xe6\x9b\x9c\xe6\x9d\x9c\xe6\x88\x96\xe8\x83\xbd\xe6\x95\x88\xe9\x9c\x9c\xe7\x9b\x92\xe7\x84\xb6\xe4\xbe\x97\xe7\x94\xb5\xe6\x99\x81\xe6\x94\xbe\xe6\xad\xa5\xe9\xb9\x83\xe6\x96\xb0\xe6\x9d\x96\xe8\x9c\x82\xe5\x90\x92\xe6\xbf\x82\xe7\x9e\xac\xe8\xaf\x84\xe6\x80\xbb\xe9\x9a\x8d\xe5\xaf\xb9\xe7\x8b\xac\xe5\x90\x88\xe4\xb9\x9f\xe6\x98\xaf\xe5\xba\x9c\xe9\x9d\x92\xe5\xa4\xa9\xe8\xaf\xb2\xe5\xa2\x99\xe7\xbb\x84\xe6\xbb\xb4\xe7\xba\xa7\xe9\x82\x80\xe5\xb8\x98\xe7\xa4\xba\xe5\xb7\xb2\xe6\x97\xb6\xe9\xaa\xb8\xe4\xbb\x84\xe6\xb3\x85\xe5\x92\x8c\xe9\x81\xa8\xe5\xba\x97\xe9\x9b\x87\xe7\x96\xab\xe6\x8c\x81\xe5\xb7\x8d\xe8\xb8\xae\xe5\xa2\x83\xe5\x8f\xaa\xe4\xba\xa8\xe7\x9b\xae\xe9\x89\xb4\xe5\xb4\xa4\xe9\x97\xb2\xe4\xbd\x93\xe6\xb3\x84\xe6\x9d\x82\xe4\xbd\x9c\xe8\x88\xac\xe8\xbd\xb0\xe5\x8c\x96\xe8\xa7\xa3\xe8\xbf\x82\xe8\xaf\xbf\xe8\x9b\xad\xe7\x92\x80\xe8\x85\xbe\xe5\x91\x8a\xe7\x89\x88\xe6\x9c\x8d\xe7\x9c\x81\xe5\xb8\x88\xe5\xb0\x8f\xe8\xa7\x84\xe7\xa8\x8b\xe7\xba\xbf\xe6\xb5\xb7\xe5\x8a\x9e\xe5\xbc\x95\xe4\xba\x8c\xe6\xa1\xa7\xe7\x89\x8c\xe7\xa0\xba\xe6\xb4\x84\xe8\xa3\xb4\xe4\xbf\xae\xe5\x9b\xbe\xe7\x97\xab\xe8\x83\xa1\xe8\xae\xb8\xe7\x8a\x8a\xe4\xba\x8b\xe9\x83\x9b\xe5\x9f\xba\xe6\x9f\xb4\xe5\x91\xbc\xe9\xa3\x9f\xe7\xa0\x94\xe5\xa5\xb6\xe5\xbe\x8b\xe8\x9b\x8b\xe5\x9b\xa0\xe8\x91\x86\xe5\xaf\x9f\xe6\x88\x8f\xe8\xa4\x92\xe6\x88\x92\xe5\x86\x8d\xe6\x9d\x8e\xe9\xaa\x81\xe5\xb7\xa5\xe8\xb2\x82\xe6\xb2\xb9\xe9\xb9\x85\xe7\xab\xa0\xe5\x95\x84\xe4\xbc\x91\xe5\x9c\xba\xe7\xbb\x99\xe7\x9d\xa1\xe7\xba\xb7\xe8\xb1\x86\xe5\x99\xa8\xe6\x8d\x8e\xe8\xaf\xb4\xe6\x95\x8f\xe5\xad\xa6\xe4\xbc\x9a\xe6\xb5\x92\xe8\xae\xbe\xe8\xaf\x8a\xe6\xa0\xbc\xe5\xbb\x93\xe6\x9f\xa5\xe6\x9d\xa5\xe9\x9c\x93\xe5\xae\xa4\xe6\xba\x86\xef\xbf\xa0\xe8\xaf\xa1\xe5\xaf\xa5\xe7\x84\x95\xe8\x88\x9c\xe6\x9f\x92\xe7\x8b\x90\xe5\x9b\x9e\xe6\x88\x9f\xe7\xa0\xbe\xe5\x8e\x84\xe5\xae\x9e\xe7\xbf\xa9\xe5\xb0\xbf\xe4\xba\x94\xe5\x85\xa5\xe5\xbe\x84\xe6\x83\xad\xe5\x96\xb9\xe8\x82\xa1\xe5\xae\x87\xe7\xaf\x9d|;\xe7\xbe\x8e\xe6\x9c\x9f\xe4\xba\x91\xe4\xb9\x9d\xe7\xa5\xba\xe6\x89\xae\xe9\x9d\xa0\xe9\x94\x9d\xe6\xa7\x8c\xe7\xb3\xbb\xe4\xbc\x81\xe9\x85\xb0\xe9\x98\x8a\xe6\x9a\x82\xe8\x9a\x95\xe5\xbf\xbb\xe8\xb1\x81\xe6\x9c\xac\xe7\xbe\xb9\xe6\x89\xa7\xe6\x9d\xa1\xe9\x92\xa6H\xe7\x8d\x92\xe9\x99\x90\xe8\xbf\x9b\xe5\xad\xa3\xe6\xa5\xa6\xe4\xba\x8e\xe8\x8a\x98\xe7\x8e\x96\xe9\x93\x8b\xe8\x8c\xaf\xe6\x9c\xaa\xe7\xad\x94\xe7\xb2\x98\xe6\x8b\xac\xe6\xa0\xb7\xe7\xb2\xbe\xe6\xac\xa0\xe7\x9f\xa2\xe7\x94\xa5\xe5\xb8\xb7\xe5\xb5\xa9\xe6\x89\xa3\xe4\xbb\xa4\xe4\xbb\x94\xe9\xa3\x8e\xe7\x9a\x88\xe8\xa1\x8c\xe6\x94\xaf\xe9\x83\xa8\xe8\x93\x89\xe5\x88\xae\xe7\xab\x99\xe8\x9c\xa1\xe6\x95\x91\xe9\x92\x8a\xe6\xb1\x97\xe6\x9d\xbe\xe5\xab\x8c\xe6\x88\x90\xe5\x8f\xaf.\xe9\xb9\xa4\xe9\x99\xa2\xe4\xbb\x8e\xe4\xba\xa4\xe6\x94\xbf\xe6\x80\x95\xe6\xb4\xbb\xe8\xb0\x83\xe7\x90\x83\xe5\xb1\x80\xe9\xaa\x8c\xe9\xab\x8c\xe7\xac\xac\xe9\x9f\xab\xe8\xb0\x97\xe4\xb8\xb2\xe5\x88\xb0\xe5\x9c\x86\xe5\xb9\xb4\xe7\xb1\xb3/*\xe5\x8f\x8b\xe5\xbf\xbf\xe6\xa3\x80\xe5\x8c\xba\xe7\x9c\x8b\xe8\x87\xaa\xe6\x95\xa2\xe5\x88\x83\xe4\xb8\xaa\xe5\x85\xb9\xe5\xbc\x84\xe6\xb5\x81\xe7\x95\x99\xe5\x90\x8c\xe6\xb2\xa1\xe9\xbd\xbf\xe6\x98\x9f\xe8\x81\x86\xe8\xbd\xbc\xe6\xb9\x96\xe4\xbb\x80\xe4\xb8\x89\xe5\xbb\xba\xe8\x9b\x94\xe5\x84\xbf\xe6\xa4\x8b\xe6\xb1\x95\xe9\x9c\x87\xe9\xa2\xa7\xe9\xb2\xa4\xe8\xb7\x9f\xe5\x8a\x9b\xe6\x83\x85\xe7\x92\xba\xe9\x93\xa8\xe9\x99\xaa\xe5\x8a\xa1\xe6\x8c\x87\xe6\x97\x8f\xe8\xae\xad\xe6\xbb\xa6\xe9\x84\xa3\xe6\xbf\xae\xe6\x89\x92\xe5\x95\x86\xe7\xae\xb1\xe5\x8d\x81\xe5\x8f\xac\xe6\x85\xb7\xe8\xbe\x97\xe6\x89\x80\xe8\x8e\x9e\xe7\xae\xa1\xe6\x8a\xa4\xe8\x87\xad\xe6\xa8\xaa\xe7\xa1\x92\xe5\x97\x93\xe6\x8e\xa5\xe4\xbe\xa6\xe5\x85\xad\xe9\x9c\xb2\xe5\x85\x9a\xe9\xa6\x8b\xe9\xa9\xbe\xe5\x89\x96\xe9\xab\x98\xe4\xbe\xac\xe5\xa6\xaa\xe5\xb9\x82\xe7\x8c\x97\xe7\xbb\xba\xe9\xaa\x90\xe5\xa4\xae\xe9\x85\x90\xe5\xad\x9d\xe7\xad\x9d\xe8\xaf\xbe\xe5\xbe\x87\xe7\xbc\xb0\xe9\x97\xa8\xe7\x94\xb7\xe8\xa5\xbf\xe9\xa1\xb9\xe5\x8f\xa5\xe8\xb0\x99\xe7\x9e\x92\xe7\xa7\x83\xe7\xaf\x87\xe6\x95\x99\xe7\xa2\xb2\xe7\xbd\x9a\xe5\xa3\xb0\xe5\x91\x90\xe6\x99\xaf\xe5\x89\x8d\xe5\xaf\x8c\xe5\x98\xb4\xe9\xb3\x8c\xe7\xa8\x80\xe5\x85\x8d\xe6\x9c\x8b\xe5\x95\xac\xe7\x9d\x90\xe5\x8e\xbb\xe8\xb5\x88\xe9\xb1\xbc\xe4\xbd\x8f\xe8\x82\xa9\xe6\x84\x95\xe9\x80\x9f\xe6\x97\x81\xe6\xb3\xa2\xe5\x8e\x85\xe5\x81\xa5\xe8\x8c\xbc\xe5\x8e\xa5\xe9\xb2\x9f\xe8\xb0\x85\xe6\x8a\x95\xe6\x94\xb8\xe7\x82\x94\xe6\x95\xb0\xe6\x96\xb9\xe5\x87\xbb\xe5\x91\x8b\xe8\xb0\x88\xe7\xbb\xa9\xe5\x88\xab\xe6\x84\xab\xe5\x83\x9a\xe8\xba\xac\xe9\xb9\xa7\xe8\x83\xaa\xe7\x82\xb3\xe6\x8b\x9b\xe5\x96\x87\xe8\x86\xa8\xe6\xb3\xb5\xe8\xb9\xa6\xe6\xaf\x9b\xe7\xbb\x9354\xe8\xb0\xb1\xe8\xaf\x86\xe9\x99\x95\xe7\xb2\xbd\xe5\xa9\x9a\xe6\x8b\x9f\xe6\x9e\x84\xe4\xb8\x94\xe6\x90\x9c\xe4\xbb\xbb\xe6\xbd\x98\xe6\xaf\x94\xe9\x83\xa2\xe5\xa6\xa8\xe9\x86\xaa\xe9\x99\x80\xe6\xa1\x94\xe7\xa2\x98\xe6\x89\x8e\xe9\x80\x89\xe5\x93\x88\xe9\xaa\xb7\xe6\xa5\xb7\xe4\xba\xbf\xe6\x98\x8e\xe7\xbc\x86\xe8\x84\xaf\xe7\x9b\x91\xe7\x9d\xab\xe9\x80\xbb\xe5\xa9\xb5\xe5\x85\xb1\xe8\xb5\xb4\xe6\xb7\x9d\xe5\x87\xa1\xe6\x83\xa6\xe5\x8f\x8a\xe8\xbe\xbe\xe6\x8f\x96\xe8\xb0\xa9\xe6\xbe\xb9\xe5\x87\x8f\xe7\x84\xb0\xe8\x9b\xb9\xe7\x95\xaa\xe7\xa5\x81\xe6\x9f\x8f\xe5\x91\x98\xe7\xa6\x84\xe6\x80\xa1\xe5\xb3\xa4\xe9\xbe\x99\xe7\x99\xbd\xe5\x8f\xbd\xe7\x94\x9f\xe9\x97\xaf\xe8\xb5\xb7\xe7\xbb\x86\xe8\xa3\x85\xe8\xb0\x95\xe7\xab\x9f\xe8\x81\x9a\xe9\x92\x99\xe4\xb8\x8a\xe5\xaf\xbc\xe6\xb8\x8a\xe6\x8c\x89\xe8\x89\xbe\xe8\xbe\x98\xe6\x8c\xa1\xe8\x80\x92\xe7\x9b\xb9\xe9\xa5\xaa\xe8\x87\x80\xe8\xae\xb0\xe9\x82\xae\xe8\x95\x99\xe5\x8f\x97\xe5\x90\x84\xe5\x8c\xbb\xe6\x90\x82\xe6\x99\xae\xe6\xbb\x87\xe6\x9c\x97\xe8\x8c\xb8\xe5\xb8\xa6\xe7\xbf\xbb\xe9\x85\x9a(\xe5\x85\x89\xe5\xa0\xa4\xe5\xa2\x9f\xe8\x94\xb7\xe4\xb8\x87\xe5\xb9\xbb\xe3\x80\x93\xe7\x91\x99\xe8\xbe\x88\xe6\x98\xa7\xe7\x9b\x8f\xe4\xba\x98\xe8\x9b\x80\xe5\x90\x89\xe9\x93\xb0\xe8\xaf\xb7\xe5\xad\x90\xe5\x81\x87\xe9\x97\xbb\xe7\xa8\x8e\xe4\xba\x95\xe8\xaf\xa9\xe5\x93\xa8\xe5\xab\x82\xe5\xa5\xbd\xe9\x9d\xa2\xe7\x90\x90\xe6\xa0\xa1\xe9\xa6\x8a\xe9\xac\xa3\xe7\xbc\x82\xe8\x90\xa5\xe8\xae\xbf\xe7\x82\x96\xe5\x8d\xa0\xe5\x86\x9c\xe7\xbc\x80\xe5\x90\xa6\xe7\xbb\x8f\xe9\x92\x9a\xe6\xa3\xb5\xe8\xb6\x9f\xe5\xbc\xa0\xe4\xba\x9f\xe5\x90\x8f\xe8\x8c\xb6\xe8\xb0\xa8\xe6\x8d\xbb\xe8\xae\xba\xe8\xbf\xb8\xe5\xa0\x82\xe7\x8e\x89\xe4\xbf\xa1\xe5\x90\xa7\xe7\x9e\xa0\xe4\xb9\xa1\xe5\xa7\xac\xe5\xaf\xba\xe5\x92\xac\xe6\xba\x8f\xe8\x8b\x84\xe7\x9a\xbf\xe6\x84\x8f\xe8\xb5\x89\xe5\xae\x9d\xe5\xb0\x94\xe9\x92\xb0\xe8\x89\xba\xe7\x89\xb9\xe5\x94\xb3\xe8\xb8\x89\xe9\x83\xbd\xe8\x8d\xa3\xe5\x80\x9a\xe7\x99\xbb\xe8\x8d\x90\xe4\xb8\xa7\xe5\xa5\x87\xe6\xb6\xb5\xe6\x89\xb9\xe7\x82\xad\xe8\xbf\x91\xe7\xac\xa6\xe5\x82\xa9\xe6\x84\x9f\xe9\x81\x93\xe7\x9d\x80\xe8\x8f\x8a\xe8\x99\xb9\xe4\xbb\xb2\xe4\xbc\x97\xe6\x87\x88\xe6\xbf\xaf\xe9\xa2\x9e\xe7\x9c\xba\xe5\x8d\x97\xe9\x87\x8a\xe5\x8c\x97\xe7\xbc\x9d\xe6\xa0\x87\xe6\x97\xa2\xe8\x8c\x97\xe6\x95\xb4\xe6\x92\xbc\xe8\xbf\xa4\xe8\xb4\xb2\xe6\x8c\x8e\xe8\x80\xb1\xe6\x8b\x92\xe6\x9f\x90\xe5\xa6\x8d\xe5\x8d\xab\xe5\x93\x87\xe8\x8b\xb1\xe7\x9f\xb6\xe8\x97\xa9\xe6\xb2\xbb\xe4\xbb\x96\xe5\x85\x83\xe9\xa2\x86\xe8\x86\x9c\xe9\x81\xae\xe7\xa9\x97\xe8\x9b\xbe\xe9\xa3\x9e\xe8\x8d\x92\xe6\xa3\xba\xe5\x8a\xab\xe4\xb9\x88\xe5\xb8\x82\xe7\x81\xab\xe6\xb8\xa9\xe6\x8b\x88\xe6\xa3\x9a\xe6\xb4\xbc\xe8\xbd\xac\xe6\x9e\x9c\xe5\xa5\x95\xe5\x8d\xb8\xe8\xbf\xaa\xe4\xbc\xb8\xe6\xb3\xb3\xe6\x96\x97\xe9\x82\xa1\xe4\xbe\x84\xe6\xb6\xa8\xe5\xb1\xaf\xe8\x90\x8b\xe8\x83\xad\xe6\xb0\xa1\xe5\xb4\xae\xe6\x9e\x9e\xe6\x83\xa7\xe5\x86\x92\xe5\xbd\xa9\xe6\x96\x9c\xe6\x89\x8b\xe8\xb1\x9a\xe9\x9a\x8f\xe6\x97\xad\xe6\xb7\x91\xe5\xa6\x9e\xe5\xbd\xa2\xe8\x8f\x8c\xe5\x90\xb2\xe6\xb2\xb1\xe4\xba\x89\xe9\xa9\xaf\xe6\xad\xb9\xe6\x8c\x9f\xe5\x85\x86\xe6\x9f\xb1\xe4\xbc\xa0\xe8\x87\xb3\xe5\x8c\x85\xe5\x86\x85\xe5\x93\x8d\xe4\xb8\xb4\xe7\xba\xa2\xe5\x8a\x9f\xe5\xbc\xa9\xe8\xa1\xa1\xe5\xaf\x82\xe7\xa6\x81\xe8\x80\x81\xe6\xa3\x8d\xe8\x80\x86\xe6\xb8\x8d\xe7\xbb\x87\xe5\xae\xb3\xe6\xb0\xb5\xe6\xb8\x91\xe5\xb8\x83\xe8\xbd\xbd\xe9\x9d\xa5\xe5\x97\xac\xe8\x99\xbd\xe8\x8b\xb9\xe5\x92\xa8\xe5\xa8\x84\xe5\xba\x93\xe9\x9b\x89\xe6\xa6\x9c\xe5\xb8\x9c\xe5\x98\xb2\xe5\xa5\x97\xe7\x91\x9a\xe4\xba\xb2\xe7\xb0\xb8\xe6\xac\xa7\xe8\xbe\xb96\xe8\x85\xbf\xe6\x97\xae\xe6\x8a\x9b\xe5\x90\xb9\xe7\x9e\xb3\xe5\xbe\x97\xe9\x95\x93\xe6\xa2\x97\xe5\x8e\xa8\xe7\xbb\xa7\xe6\xbc\xbe\xe6\x84\xa3\xe6\x86\xa8\xe5\xa3\xab\xe7\xad\x96\xe7\xaa\x91\xe6\x8a\x91\xe8\xba\xaf\xe8\xa5\x9f\xe8\x84\x8f\xe5\x8f\x82\xe8\xb4\xb8\xe8\xa8\x80\xe5\xb9\xb2\xe7\xbb\xb8\xe9\xb3\x84\xe7\xa9\xb7\xe8\x97\x9c\xe9\x9f\xb3\xe6\x8a\x98\xe8\xaf\xa6)\xe4\xb8\xbe\xe6\x82\x8d\xe7\x94\xb8\xe7\x99\x8c\xe9\xbb\x8e\xe8\xb0\xb4\xe6\xad\xbb\xe7\xbd\xa9\xe8\xbf\x81\xe5\xaf\x92\xe9\xa9\xb7\xe8\xa2\x96\xe5\xaa\x92\xe8\x92\x8b\xe6\x8e\x98\xe6\xa8\xa1\xe7\xba\xa0\xe6\x81\xa3\xe8\xa7\x82\xe7\xa5\x96\xe8\x9b\x86\xe7\xa2\x8d\xe4\xbd\x8d\xe7\xa8\xbf\xe4\xb8\xbb\xe6\xbe\xa7\xe8\xb7\x8c\xe7\xad\x8f\xe4\xba\xac\xe9\x94\x8f\xe5\xb8\x9d\xe8\xb4\xb4\xe8\xaf\x81\xe7\xb3\xa0\xe6\x89\x8d\xe9\xbb\x84\xe9\xb2\xb8\xe7\x95\xa5\xe7\x82\xaf\xe9\xa5\xb1\xe5\x9b\x9b\xe5\x87\xba\xe5\x9b\xad\xe7\x8a\x80\xe7\x89\xa7\xe5\xae\xb9\xe6\xb1\x89\xe6\x9d\x86\xe6\xb5\x88\xe6\xb1\xb0\xe7\x91\xb7\xe9\x80\xa0\xe8\x99\xab\xe7\x98\xa9\xe6\x80\xaa\xe9\xa9\xb4\xe6\xb5\x8e\xe5\xba\x94\xe8\x8a\xb1\xe6\xb2\xa3\xe8\xb0\x94\xe5\xa4\x99\xe6\x97\x85\xe4\xbb\xb7\xe7\x9f\xbf\xe4\xbb\xa5\xe8\x80\x83su\xe5\x91\xa6\xe6\x99\x92\xe5\xb7\xa1\xe8\x8c\x85\xe5\x87\x86\xe8\x82\x9f\xe7\x93\xb4\xe8\xa9\xb9\xe4\xbb\x9f\xe8\xa4\x82\xe8\xaf\x91\xe6\xa1\x8c\xe6\xb7\xb7\xe5\xae\x81\xe6\x80\xa6\xe9\x83\x91\xe6\x8a\xbf\xe4\xba\x9b\xe4\xbd\x99\xe9\x84\x82\xe9\xa5\xb4\xe6\x94\x92\xe7\x8f\x91\xe7\xbe\xa4\xe9\x98\x96\xe5\xb2\x94\xe7\x90\xa8\xe8\x97\x93\xe9\xa2\x84\xe7\x8e\xaf\xe6\xb4\xae\xe5\xb2\x8c\xe5\xae\x80\xe6\x9d\xb2\xe7\x80\xb5\xe6\x9c\x80\xe5\xb8\xb8\xe5\x9b\xa1\xe5\x91\xa8\xe8\xb8\x8a\xe5\xa5\xb3\xe9\xbc\x93\xe8\xa2\xad\xe5\x96\x89\xe7\xae\x80\xe8\x8c\x83\xe8\x96\xaf\xe9\x81\x90\xe7\x96\x8f\xe7\xb2\xb1\xe9\xbb\x9c\xe7\xa6\xa7\xe6\xb3\x95\xe7\xae\x94\xe6\x96\xa4\xe9\x81\xa5\xe6\xb1\x9d\xe5\xa5\xa5\xe7\x9b\xb4\xe8\xb4\x9e\xe6\x92\x91\xe7\xbd\xae\xe7\xbb\xb1\xe9\x9b\x86\xe5\xa5\xb9\xe9\xa6\x85\xe9\x80\x97\xe9\x92\xa7\xe6\xa9\xb1\xe9\xad\x89[\xe6\x81\x99\xe8\xba\x81\xe5\x94\xa49\xe6\x97\xba\xe8\x86\x98\xe5\xbe\x85\xe8\x84\xbe\xe6\x83\xab\xe8\xb4\xad\xe5\x90\x97\xe4\xbe\x9d\xe7\x9b\xb2\xe5\xba\xa6\xe7\x98\xbf\xe8\xa0\x96\xe4\xbf\xbe\xe4\xb9\x8b\xe9\x95\x97\xe6\x8b\x87\xe9\xb2\xb5\xe5\x8e\x9d\xe7\xb0\xa7\xe7\xbb\xad\xe6\xac\xbe\xe5\xb1\x95\xe5\x95\x83\xe8\xa1\xa8\xe5\x89\x94\xe5\x93\x81\xe9\x92\xbb\xe8\x85\xad\xe6\x8d\x9f\xe6\xb8\x85\xe9\x94\xb6\xe7\xbb\x9f\xe6\xb6\x8c\xe5\xaf\xb8\xe6\xbb\xa8\xe8\xb4\xaa\xe9\x93\xbe\xe5\x90\xa0\xe5\x86\x88\xe4\xbc\x8e\xe8\xbf\xa5\xe5\x92\x8f\xe5\x90\x81\xe8\xa7\x88\xe9\x98\xb2\xe8\xbf\x85\xe5\xa4\xb1\xe6\xb1\xbe\xe9\x98\x94\xe9\x80\xb5\xe7\xbb\x80\xe8\x94\x91\xe5\x88\x97\xe5\xb7\x9d\xe5\x87\xad\xe5\x8a\xaa\xe7\x86\xa8\xe6\x8f\xaa\xe5\x88\xa9\xe4\xbf\xb1\xe7\xbb\x89\xe6\x8a\xa2\xe9\xb8\xa8\xe6\x88\x91\xe5\x8d\xb3\xe8\xb4\xa3\xe8\x86\xa6\xe6\x98\x93\xe6\xaf\x93\xe9\xb9\x8a\xe5\x88\xb9\xe7\x8e\xb7\xe5\xb2\xbf\xe7\xa9\xba\xe5\x98\x9e\xe7\xbb\x8a\xe6\x8e\x92\xe6\x9c\xaf\xe4\xbc\xb0\xe9\x94\xb7\xe8\xbf\x9d\xe4\xbb\xac\xe8\x8b\x9f\xe9\x93\x9c\xe6\x92\xad\xe8\x82\x98\xe4\xbb\xb6\xe7\x83\xab\xe5\xae\xa1\xe9\xb2\x82\xe5\xb9\xbf\xe5\x83\x8f\xe9\x93\x8c\xe6\x83\xb0\xe9\x93\x9f\xe5\xb7\xb3\xe8\x83\x8d\xe9\xb2\x8d\xe5\xba\xb7\xe6\x86\xa7\xe8\x89\xb2\xe6\x81\xa2\xe6\x83\xb3\xe6\x8b\xb7\xe5\xb0\xa4\xe7\x96\xb3\xe7\x9f\xa5SYFDA\xe5\xb3\x84\xe8\xa3\x95\xe5\xb8\xae\xe6\x8f\xa1\xe6\x90\x94\xe6\xb0\x90\xe6\xb0\x98\xe9\x9a\xbe\xe5\xa2\x92\xe6\xb2\xae\xe9\x9b\xa8\xe5\x8f\x81\xe7\xbc\xa5\xe6\x82\xb4\xe8\x97\x90\xe6\xb9\xab\xe5\xa8\x9f\xe8\x8b\x91\xe7\xa8\xa0\xe9\xa2\x9b\xe7\xb0\x87\xe5\x90\x8e\xe9\x98\x95\xe9\x97\xad\xe8\x95\xa4\xe7\xbc\x9a\xe6\x80\x8e\xe4\xbd\x9e\xe7\xa0\x81\xe5\x98\xa4\xe8\x94\xa1\xe7\x97\x8a\xe8\x88\xb1\xe8\x9e\xaf\xe5\xb8\x95\xe8\xb5\xab\xe6\x98\xb5\xe5\x8d\x87\xe7\x83\xac\xe5\xb2\xab\xe3\x80\x81\xe7\x96\xb5\xe8\x9c\xbb\xe9\xab\x81\xe8\x95\xa8\xe9\x9a\xb6\xe7\x83\x9b\xe6\xa2\xb0\xe4\xb8\x91\xe7\x9b\x82\xe6\xa2\x81\xe5\xbc\xba\xe9\xb2\x9b\xe7\x94\xb1\xe6\x8b\x98\xe6\x8f\x89\xe5\x8a\xad\xe9\xbe\x9f\xe6\x92\xa4\xe9\x92\xa9\xe5\x91\x95\xe5\xad\x9b\xe8\xb4\xb9\xe5\xa6\xbb\xe6\xbc\x82\xe6\xb1\x82\xe9\x98\x91\xe5\xb4\x96\xe7\xa7\xa4\xe7\x94\x98\xe9\x80\x9a\xe6\xb7\xb1\xe8\xa1\xa5\xe8\xb5\x83\xe5\x9d\x8e\xe5\xba\x8a\xe5\x95\xaa\xe6\x89\xbf\xe5\x90\xbc\xe9\x87\x8f\xe6\x9a\x87\xe9\x92\xbc\xe7\x83\xa8\xe9\x98\x82\xe6\x93\x8e\xe8\x84\xb1\xe9\x80\xae\xe7\xa7\xb0P\xe7\xa5\x9e\xe5\xb1\x9e\xe7\x9f\x97\xe5\x8d\x8e\xe5\xb1\x8a\xe7\x8b\x8d\xe8\x91\x91\xe6\xb1\xb9\xe8\x82\xb2\xe6\x82\xa3\xe7\xaa\x92\xe8\x9b\xb0\xe4\xbd\xbc\xe9\x9d\x99\xe6\xa7\x8e\xe8\xbf\x90\xe9\xb3\x97\xe5\xba\x86\xe9\x80\x9d\xe6\x9b\xbc\xe7\x96\xb1\xe5\x85\x8b\xe4\xbb\xa3\xe5\xae\x98\xe6\xad\xa4\xe9\xba\xb8\xe8\x80\xa7\xe8\x9a\x8c\xe6\x99\x9f\xe4\xbe\x8b\xe7\xa1\x80\xe6\xa6\x9b\xe5\x89\xaf\xe6\xb5\x8b\xe5\x94\xb0\xe7\xbc\xa2\xe8\xbf\xb9\xe7\x81\xac\xe9\x9c\x81\xe8\xba\xab\xe5\xb2\x81\xe8\xb5\xad\xe6\x89\x9b\xe5\x8f\x88\xe8\x8f\xa1\xe4\xb9\x9c\xe9\x9b\xbe\xe6\x9d\xbf\xe8\xaf\xbb\xe9\x99\xb7\xe5\xbe\x89\xe8\xb4\xaf\xe9\x83\x81\xe8\x99\x91\xe5\x8f\x98\xe9\x92\x93\xe8\x8f\x9c\xe5\x9c\xbe\xe7\x8e\xb0\xe7\x90\xa2\xe5\xbc\x8f\xe4\xb9\x90\xe7\xbb\xb4\xe6\xb8\x94\xe6\xb5\x9c\xe5\xb7\xa6\xe5\x90\xbe\xe8\x84\x91\xe9\x92\xa1\xe8\xad\xa6T\xe5\x95\xb5\xe6\x8b\xb4\xe5\x81\x8c\xe6\xbc\xb1\xe6\xb9\xbf\xe7\xa1\x95\xe6\xad\xa2\xe9\xaa\xbc\xe9\xad\x84\xe7\xa7\xaf\xe7\x87\xa5\xe8\x81\x94\xe8\xb8\xa2\xe7\x8e\x9b|\xe5\x88\x99\xe7\xaa\xbf\xe8\xa7\x81\xe6\x8c\xaf\xe7\x95\xbf\xe9\x80\x81\xe7\x8f\xad\xe9\x92\xbd\xe6\x82\xa8\xe8\xb5\xb5\xe5\x88\xa8\xe5\x8d\xb0\xe8\xae\xa8\xe8\xb8\x9d\xe7\xb1\x8d\xe8\xb0\xa1\xe8\x88\x8c\xe5\xb4\xa7\xe6\xb1\xbd\xe8\x94\xbd\xe6\xb2\xaa\xe9\x85\xa5\xe7\xbb\x92\xe6\x80\x96\xe8\xb4\xa2\xe5\xb8\x96\xe8\x82\xb1\xe7\xa7\x81\xe8\x8e\x8e\xe5\x8b\x8b\xe7\xbe\x94\xe9\x9c\xb8\xe5\x8a\xb1\xe5\x93\xbc\xe5\xb8\x90\xe5\xb0\x86\xe5\xb8\x85\xe6\xb8\xa0\xe7\xba\xaa\xe5\xa9\xb4\xe5\xa8\xa9\xe5\xb2\xad\xe5\x8e\x98\xe6\xbb\x95\xe5\x90\xbb\xe4\xbc\xa4\xe5\x9d\x9d\xe5\x86\xa0\xe6\x88\x8a\xe9\x9a\x86\xe7\x98\x81\xe4\xbb\x8b\xe6\xb6\xa7\xe7\x89\xa9\xe9\xbb\x8d\xe5\xb9\xb6\xe5\xa7\x97\xe5\xa5\xa2\xe8\xb9\x91\xe6\x8e\xa3\xe5\x9e\xb8\xe9\x94\xb4\xe5\x91\xbd\xe7\xae\x8d\xe6\x8d\x89\xe7\x97\x85\xe8\xbe\x96\xe7\x90\xb0\xe7\x9c\xad\xe8\xbf\xa9\xe8\x89\x98\xe7\xbb\x8c\xe7\xb9\x81\xe5\xaf\x85\xe8\x8b\xa5\xe6\xaf\x8b\xe6\x80\x9d\xe8\xaf\x89\xe7\xb1\xbb\xe8\xaf\x88\xe7\x87\xae\xe8\xbd\xb2\xe9\x85\xae\xe7\x8b\x82\xe9\x87\x8d\xe5\x8f\x8d\xe8\x81\x8c\xe7\xad\xb1\xe5\x8e\xbf\xe5\xa7\x94\xe7\xa3\x95\xe7\xbb\xa3\xe5\xa5\x96\xe6\x99\x8b\xe6\xbf\x89\xe5\xbf\x97\xe5\xbe\xbd\xe8\x82\xa0\xe5\x91\x88\xe7\x8d\x90\xe5\x9d\xbb\xe5\x8f\xa3\xe7\x89\x87\xe7\xa2\xb0\xe5\x87\xa0\xe6\x9d\x91\xe6\x9f\xbf\xe5\x8a\xb3\xe6\x96\x99\xe8\x8e\xb7\xe4\xba\xa9\xe6\x83\x95\xe6\x99\x95\xe5\x8e\x8c\xe5\x8f\xb7\xe7\xbd\xa2\xe6\xb1\xa0\xe6\xad\xa3\xe9\x8f\x96\xe7\x85\xa8\xe5\xae\xb6\xe6\xa3\x95\xe5\xa4\x8d\xe5\xb0\x9d\xe6\x87\x8b\xe8\x9c\xa5\xe9\x94\x85\xe5\xb2\x9b\xe6\x89\xb0\xe9\x98\x9f\xe5\x9d\xa0\xe7\x98\xbe\xe9\x92\xac@\xe5\x8d\xa7\xe7\x96\xa3\xe9\x95\x87\xe8\xad\xac\xe5\x86\xb0\xe5\xbd\xb7\xe9\xa2\x91\xe9\xbb\xaf\xe6\x8d\xae\xe5\x9e\x84\xe9\x87\x87\xe5\x85\xab\xe7\xbc\xaa\xe7\x98\xab\xe5\x9e\x8b\xe7\x86\xb9\xe7\xa0\xb0\xe6\xa5\xa0\xe8\xa5\x81\xe7\xae\x90\xe4\xbd\x86\xe5\x98\xb6\xe7\xbb\xb3\xe5\x95\xa4\xe6\x8b\x8d\xe7\x9b\xa5\xe7\xa9\x86\xe5\x82\xb2\xe6\xb4\x97\xe7\x9b\xaf\xe5\xa1\x98\xe6\x80\x94\xe7\xad\x9b\xe4\xb8\xbf\xe5\x8f\xb0\xe6\x81\x92\xe5\x96\x82\xe8\x91\x9b\xe6\xb0\xb8\xef\xbf\xa5\xe7\x83\x9f\xe9\x85\x92\xe6\xa1\xa6\xe4\xb9\xa6\xe7\xa0\x82\xe8\x9a\x9d\xe7\xbc\x89\xe6\x80\x81\xe7\x80\x9a\xe8\xa2\x84\xe5\x9c\xb3\xe8\xbd\xbb\xe8\x9b\x9b\xe8\xb6\x85\xe6\xa6\xa7\xe9\x81\x9b\xe5\xa7\x92\xe5\xa5\x98\xe9\x93\xae\xe5\x8f\xb3\xe8\x8d\xbd\xe6\x9c\x9b\xe5\x81\xbb\xe5\x8d\xa1\xe4\xb8\xb6\xe6\xb0\xb0\xe9\x99\x84\xe5\x81\x9a\xe9\x9d\xa9\xe7\xb4\xa2\xe6\x88\x9a\xe5\x9d\xa8\xe6\xa1\xb7\xe5\x94\x81\xe5\x9e\x85\xe6\xa6\xbb\xe5\xb2\x90\xe5\x81\x8e\xe5\x9d\x9b\xe8\x8e\xa8\xe5\xb1\xb1\xe6\xae\x8a\xe5\xbe\xae\xe9\xaa\x87\xe9\x99\x88\xe7\x88\xa8\xe6\x8e\xa8\xe5\x97\x9d\xe9\xa9\xb9\xe6\xbe\xa1\xe8\x97\x81\xe5\x91\xa4\xe5\x8d\xa4\xe5\x98\xbb\xe7\xb3\x85\xe9\x80\x9b\xe4\xbe\xb5\xe9\x83\x93\xe9\x85\x8c\xe5\xbe\xb7\xe6\x91\x87\xe2\x80\xbb\xe9\xac\x83\xe8\xa2\xab\xe6\x85\xa8\xe6\xae\xa1\xe7\xbe\xb8\xe6\x98\x8c\xe6\xb3\xa1\xe6\x88\x9b\xe9\x9e\x8b\xe6\xb2\xb3\xe5\xae\xaa\xe6\xb2\xbf\xe7\x8e\xb2\xe9\xb2\xa8\xe7\xbf\x85\xe5\x93\xbd\xe6\xba\x90\xe9\x93\x85\xe8\xaf\xad\xe7\x85\xa7\xe9\x82\xaf\xe5\x9d\x80\xe8\x8d\x83\xe4\xbd\xac\xe9\xa1\xba\xe9\xb8\xb3\xe7\x94\xba\xe9\x9c\xad\xe7\x9d\xbe\xe7\x93\xa2\xe5\xa4\xb8\xe6\xa4\x81\xe6\x99\x93\xe9\x85\xbf\xe7\x97\x88\xe5\x92\x94\xe4\xbe\x8f\xe5\x88\xb8\xe5\x99\x8e\xe6\xb9\x8d\xe7\xad\xbe\xe5\x9a\xb7\xe7\xa6\xbb\xe5\x8d\x88\xe5\xb0\x9a\xe7\xa4\xbe\xe9\x94\xa4\xe8\x83\x8c\xe5\xad\x9f\xe4\xbd\xbf\xe6\xb5\xaa\xe7\xbc\xa6\xe6\xbd\x8d\xe9\x9e\x85\xe5\x86\x9b\xe5\xa7\xb9\xe9\xa9\xb6\xe7\xac\x91\xe9\xb3\x9f\xe9\xb2\x81\xe3\x80\x8b\xe5\xad\xbd\xe9\x92\x9c\xe7\xbb\xbf\xe6\xb4\xb1\xe7\xa4\xb4\xe7\x84\xaf\xe6\xa4\xb0\xe9\xa2\x96\xe5\x9b\x94\xe4\xb9\x8c\xe5\xad\x94\xe5\xb7\xb4\xe4\xba\x92\xe6\x80\xa7\xe6\xa4\xbd\xe5\x93\x9e\xe8\x81\x98\xe6\x98\xa8\xe6\x97\xa9\xe6\x9a\xae\xe8\x83\xb6\xe7\x82\x80\xe9\x9a\xa7\xe4\xbd\x8e\xe5\xbd\x97\xe6\x98\x9d\xe9\x93\x81\xe5\x91\x93\xe6\xb0\xbd\xe8\x97\x89\xe5\x96\x94\xe7\x99\x96\xe7\x91\x97\xe5\xa7\xa8\xe6\x9d\x83\xe8\x83\xb1\xe9\x9f\xa6\xe5\xa0\x91\xe8\x9c\x9c\xe9\x85\x8b\xe6\xa5\x9d\xe7\xa0\x9d\xe6\xaf\x81\xe9\x9d\x93\xe6\xad\x99\xe9\x94\xb2\xe7\xa9\xb6\xe5\xb1\x8b\xe5\x96\xb3\xe9\xaa\xa8\xe8\xbe\xa8\xe7\xa2\x91\xe6\xad\xa6\xe9\xb8\xa0\xe5\xae\xab\xe8\xbe\x9c\xe7\x83\x8a\xe9\x80\x82\xe5\x9d\xa1\xe6\xae\x83\xe5\x9f\xb9\xe4\xbd\xa9\xe4\xbe\x9b\xe8\xb5\xb0\xe8\x9c\x88\xe8\xbf\x9f\xe7\xbf\xbc\xe5\x86\xb5\xe5\xa7\xa3\xe5\x87\x9b\xe6\xb5\x94\xe5\x90\x83\xe9\xa3\x98\xe5\x80\xba\xe7\x8a\x9f\xe9\x87\x91\xe4\xbf\x83\xe8\x8b\x9b\xe5\xb4\x87\xe5\x9d\x82\xe8\x8e\xb3\xe7\x95\x94\xe7\xbb\x82\xe5\x85\xb5\xe8\xa0\x95\xe6\x96\x8b\xe6\xa0\xb9\xe7\xa0\x8d\xe4\xba\xa2\xe6\xac\xa2\xe6\x81\xac\xe5\xb4\x94\xe5\x89\x81\xe9\xa4\x90\xe6\xa6\xab\xe5\xbf\xab\xe6\x89\xb6\xe2\x80\x96\xe6\xbf\x92\xe7\xbc\xa0\xe9\xb3\x9c\xe5\xbd\x93\xe5\xbd\xad\xe9\xa9\xad\xe6\xb5\xa6\xe7\xaf\xae\xe6\x98\x80\xe9\x94\x86\xe7\xa7\xb8\xe9\x92\xb3\xe5\xbc\x8b\xe5\xa8\xa3\xe7\x9e\x91\xe5\xa4\xb7\xe9\xbe\x9b\xe8\x8b\xab\xe6\x8b\xb1\xe8\x87\xb4%\xe5\xb5\x8a\xe9\x9a\x9c\xe9\x9a\x90\xe5\xbc\x91\xe5\x88\x9d\xe5\xa8\x93\xe6\x8a\x89\xe6\xb1\xa9\xe7\xb4\xaf\xe8\x93\x96""\xe5\x94\xac\xe5\x8a\xa9\xe8\x8b\x93\xe6\x98\x99\xe6\x8a\xbc\xe6\xaf\x99\xe7\xa0\xb4\xe5\x9f\x8e\xe9\x83\xa7\xe9\x80\xa2\xe5\x9a\x8f\xe7\x8d\xad\xe7\x9e\xbb\xe6\xba\xb1\xe5\xa9\xbf\xe8\xb5\x8a\xe8\xb7\xa8\xe6\x81\xbc\xe7\x92\xa7\xe8\x90\x83\xe5\xa7\xbb\xe8\xb2\x89\xe7\x81\xb5\xe7\x82\x89\xe5\xaf\x86\xe6\xb0\x9b\xe9\x99\xb6\xe7\xa0\xb8\xe8\xb0\xac\xe8\xa1\x94\xe7\x82\xb9\xe7\x90\x9b\xe6\xb2\x9b\xe6\x9e\xb3\xe5\xb1\x82\xe5\xb2\xb1\xe8\xaf\xba\xe8\x84\x8d\xe6\xa6\x88\xe5\x9f\x82\xe5\xbe\x81\xe5\x86\xb7\xe8\xa3\x81\xe6\x89\x93\xe8\xb9\xb4\xe7\xb4\xa0\xe7\x98\x98\xe9\x80\x9e\xe8\x9b\x90\xe8\x81\x8a\xe6\xbf\x80\xe8\x85\xb1\xe8\x90\x98\xe8\xb8\xb5\xe9\xa3\x92\xe8\x93\x9f\xe5\x90\x86\xe5\x8f\x96\xe5\x92\x99\xe7\xb0\x8b\xe6\xb6\x93\xe7\x9f\xa9\xe6\x9b\x9d\xe6\x8c\xba\xe6\x8f\xa3\xe5\xba\xa7\xe4\xbd\xa0\xe5\x8f\xb2\xe8\x88\xb5\xe7\x84\xb1\xe5\xb0\x98\xe8\x8b\x8f\xe7\xac\x88\xe8\x84\x9a\xe6\xba\x89\xe6\xa6\xa8\xe8\xaf\xb5\xe6\xa8\x8a\xe9\x82\x93\xe7\x84\x8a\xe4\xb9\x89\xe5\xba\xb6\xe5\x84\x8b\xe8\x9f\x8b\xe8\x92\xb2\xe8\xb5\xa6\xe5\x91\xb7\xe6\x9d\x9e\xe8\xaf\xa0\xe8\xb1\xaa\xe8\xbf\x98\xe8\xaf\x95\xe9\xa2\x93\xe8\x8c\x89\xe5\xa4\xaa\xe9\x99\xa4\xe7\xb4\xab\xe9\x80\x83\xe7\x97\xb4\xe8\x8d\x89\xe5\x85\x85\xe9\xb3\x95\xe7\x8f\x89\xe7\xa5\x97\xe5\xa2\xa8\xe6\xb8\xad\xe7\x83\xa9\xe8\x98\xb8\xe6\x85\x95\xe7\x92\x87\xe9\x95\xb6\xe7\xa9\xb4\xe5\xb5\x98\xe6\x81\xb6\xe9\xaa\x82\xe9\x99\xa9\xe7\xbb\x8b\xe5\xb9\x95\xe7\xa2\x89\xe8\x82\xba\xe6\x88\xb3\xe5\x88\x98\xe6\xbd\x9e\xe7\xa7\xa3\xe7\xba\xbe\xe6\xbd\x9c\xe9\x8a\xae\xe6\xb4\x9b\xe9\xa1\xbb\xe7\xbd\x98\xe9\x94\x80\xe7\x98\xaa\xe6\xb1\x9e\xe5\x85\xae\xe5\xb1\x89r\xe6\x9e\x97\xe5\x8e\x95\xe8\xb4\xa8\xe6\x8e\xa2\xe5\x88\x92\xe7\x8b\xb8\xe6\xae\x9a\xe5\x96\x84\xe7\x85\x8a\xe7\x83\xb9\xe3\x80\x92\xe9\x94\x88\xe9\x80\xaf\xe5\xae\xb8\xe8\xbe\x8d\xe6\xb3\xb1\xe6\x9f\x9a\xe8\xa2\x8d\xe8\xbf\x9c\xe8\xb9\x8b\xe5\xb6\x99\xe7\xbb\x9d\xe5\xb3\xa5\xe5\xa8\xa5\xe7\xbc\x8d\xe9\x9b\x80\xe5\xbe\xb5\xe8\xae\xa4\xe9\x95\xb1\xe8\xb0\xb7=\xe8\xb4\xa9\xe5\x8b\x89\xe6\x92\xa9\xe9\x84\xaf\xe6\x96\x90\xe6\xb4\x8b\xe9\x9d\x9e\xe7\xa5\x9a\xe6\xb3\xbe\xe8\xaf\x92\xe9\xa5\xbf\xe6\x92\xac\xe5\xa8\x81\xe6\x99\xb7\xe6\x90\xad\xe8\x8a\x8d\xe9\x94\xa5\xe7\xac\xba\xe8\x93\xa6\xe5\x80\x99\xe7\x90\x8a\xe6\xa1\xa3\xe7\xa4\x81\xe6\xb2\xbc\xe5\x8d\xb5\xe8\x8d\xa0\xe5\xbf\x91\xe6\x9c\x9d\xe5\x87\xb9\xe7\x91\x9e\xe5\xa4\xb4\xe4\xbb\xaa\xe5\xbc\xa7\xe5\xad\xb5\xe7\x95\x8f\xe9\x93\x86\xe7\xaa\x81\xe8\xa1\xb2\xe8\xbd\xa6\xe6\xb5\xa9\xe6\xb0\x94\xe8\x8c\x82\xe6\x82\x96\xe5\x8e\xa2\xe6\x9e\x95\xe9\x85\x9d\xe6\x88\xb4\xe6\xb9\xbe\xe9\x82\xb9\xe9\xa3\x9a\xe6\x94\x98\xe9\x94\x82\xe5\x86\x99\xe5\xae\xb5\xe7\xbf\x81\xe5\xb2\xb7\xe6\x97\xa0\xe5\x96\x9c\xe4\xb8\x88\xe6\x8c\x91\xe5\x97\x9f\xe7\xbb\x9b\xe6\xae\x89\xe8\xae\xae\xe6\xa7\xbd\xe5\x85\xb7\xe9\x86\x87\xe6\xb7\x9e\xe7\xac\x83\xe9\x83\xb4\xe9\x98\x85\xe9\xa5\xbc\xe5\xba\x95\xe5\xa3\x95\xe7\xa0\x9a\xe5\xbc\x88\xe8\xaf\xa2\xe7\xbc\x95\xe5\xba\xb9\xe7\xbf\x9f\xe9\x9b\xb6\xe7\xad\xb7\xe6\x9a\xa8\xe8\x88\x9f\xe9\x97\xba\xe7\x94\xaf\xe6\x92\x9e\xe9\xba\x82\xe8\x8c\x8c\xe8\x94\xbc\xe5\xbe\x88\xe7\x8f\xb2\xe6\x8d\x95\xe6\xa3\xa0\xe8\xa7\x92\xe9\x98\x89\xe5\xaa\x9b\xe5\xa8\xb2\xe8\xaf\xbd\xe5\x89\xbf\xe5\xb0\x89\xe7\x88\xb5\xe7\x9d\xac\xe9\x9f\xa9\xe8\xaf\xb0\xe5\x8c\xa3\xe5\x8d\xb1\xe7\xb3\x8d\xe9\x95\xaf\xe7\xab\x8b\xe6\xb5\x8f\xe9\x98\xb3\xe5\xb0\x91\xe7\x9b\x86\xe8\x88\x94\xe6\x93\x98\xe5\x8c\xaa\xe7\x94\xb3\xe5\xb0\xac\xe9\x93\xa3\xe6\x97\xaf\xe6\x8a\x96\xe8\xb5\x98\xe7\x93\xaf\xe5\xb1\x85\xcb\x87\xe5\x93\xae\xe6\xb8\xb8\xe9\x94\xad\xe8\x8c\x8f\xe6\xad\x8c\xe5\x9d\x8f\xe7\x94\x9a\xe7\xa7\x92\xe8\x88\x9e\xe6\xb2\x99\xe4\xbb\x97\xe5\x8a\xb2\xe6\xbd\xba\xe9\x98\xbf\xe7\x87\xa7\xe9\x83\xad\xe5\x97\x96\xe9\x9c\x8f\xe5\xbf\xa0\xe6\x9d\x90\xe5\xa5\x82\xe8\x80\x90\xe8\xb7\xba\xe7\xa0\x80\xe8\xbe\x93\xe5\xb2\x96\xe5\xaa\xb3\xe6\xb0\x9f\xe6\x9e\x81\xe6\x91\x86\xe7\x81\xbf\xe4\xbb\x8a\xe6\x89\x94\xe8\x85\xbb\xe6\x9e\x9d\xe5\xa5\x8e\xe8\x8d\xaf\xe7\x86\x84\xe5\x90\xa8\xe8\xaf\x9dq\xe9\xa2\x9d\xe6\x85\x91\xe5\x98\x8c\xe5\x8d\x8f\xe5\x96\x80\xe5\xa3\xb3\xe5\x9f\xad\xe8\xa7\x86\xe8\x91\x97\xe6\x96\xbc\xe6\x84\xa7\xe9\x99\xb2\xe7\xbf\x8c\xe5\xb3\x81\xe9\xa2\x85\xe4\xbd\x9b\xe8\x85\xb9\xe8\x81\x8b\xe4\xbe\xaf\xe5\x92\x8e\xe5\x8f\x9f\xe7\xa7\x80\xe9\xa2\x87\xe5\xad\x98\xe8\xbe\x83\xe7\xbd\xaa\xe5\x93\x84\xe5\xb2\x97\xe6\x89\xab\xe6\xa0\x8f\xe9\x92\xbe\xe7\xbe\x8c\xe5\xb7\xb1\xe7\x92\xa8\xe6\x9e\xad\xe9\x9c\x89\xe7\x85\x8c\xe6\xb6\xb8\xe8\xa1\xbf\xe9\x94\xae\xe9\x95\x9d\xe7\x9b\x8a\xe5\xb2\xa2\xe5\xa5\x8f\xe8\xbf\x9e\xe5\xa4\xaf\xe7\x9d\xbf\xe5\x86\xa5\xe5\x9d\x87\xe7\xb3\x96\xe7\x8b\x9e\xe8\xb9\x8a\xe7\xa8\xbb\xe7\x88\xb8\xe5\x88\xbf\xe8\x83\xa5\xe7\x85\x9c\xe4\xb8\xbd\xe8\x82\xbf\xe7\x92\x83\xe6\x8e\xb8\xe8\xb7\x9a\xe7\x81\xbe\xe5\x9e\x82\xe6\xa8\xbe\xe6\xbf\x91\xe4\xb9\x8e\xe8\x8e\xb2\xe7\xaa\x84\xe7\x8a\xb9\xe6\x92\xae\xe6\x88\x98\xe9\xa6\x84\xe8\xbd\xaf\xe7\xbb\x9c\xe6\x98\xbe\xe9\xb8\xa2\xe8\x83\xb8\xe5\xae\xbe\xe5\xa6\xb2\xe6\x81\x95\xe5\x9f\x94\xe8\x9d\x8c\xe4\xbb\xbd\xe9\x81\x87\xe5\xb7\xa7\xe7\x9e\x9f\xe7\xb2\x92\xe6\x81\xb0\xe5\x89\xa5\xe6\xa1\xa1\xe5\x8d\x9a\xe8\xae\xaf\xe5\x87\xaf\xe5\xa0\x87\xe9\x98\xb6\xe6\xbb\xa4\xe5\x8d\x96\xe6\x96\x8c\xe9\xaa\x9a\xe5\xbd\xac\xe5\x85\x91\xe7\xa3\xba\xe6\xa8\xb1\xe8\x88\xb7\xe4\xb8\xa4\xe5\xa8\xb1\xe7\xa6\x8f\xe4\xbb\x83\xe5\xb7\xae\xe6\x89\xbe\xe6\xa1\x81\xc3\xb7\xe5\x87\x80\xe6\x8a\x8a\xe9\x98\xb4\xe6\xb1\xa1\xe6\x88\xac\xe9\x9b\xb7\xe7\xa2\x93\xe8\x95\xb2\xe6\xa5\x9a\xe7\xbd\xa1\xe7\x84\x96\xe6\x8a\xbd\xe5\xa6\xab\xe5\x92\x92\xe4\xbb\x91\xe9\x97\xb1\xe5\xb0\xbd\xe9\x82\x91\xe8\x8f\x81\xe7\x88\xb1\xe8\xb4\xb7\xe6\xb2\xa5\xe9\x9e\x91\xe7\x89\xa1\xe5\x97\x89\xe5\xb4\xb4\xe9\xaa\xa4\xe5\xa1\x8c\xe5\x97\xa6\xe8\xae\xa2\xe6\x8b\xae\xe6\xbb\x93\xe6\x8d\xa1\xe9\x94\xbb\xe6\xac\xa1\xe5\x9d\xaa\xe6\x9d\xa9\xe8\x87\x83\xe7\xae\xac\xe8\x9e\x8d\xe7\x8f\x82\xe9\xb9\x97\xe5\xae\x97\xe6\x9e\x9a\xe9\x99\x8d\xe9\xb8\xac\xe5\xa6\xaf\xe9\x98\x84\xe5\xa0\xb0\xe7\x9b\x90\xe6\xaf\x85\xe5\xbf\x85\xe6\x9d\xa8\xe5\xb4\x83\xe4\xbf\xba\xe7\x94\xac\xe7\x8a\xb6\xe8\x8e\x98\xe8\xb4\xa7\xe8\x80\xb8\xe8\x8f\xb1\xe8\x85\xbc\xe9\x93\xb8\xe5\x94\x8f\xe7\x97\xa4\xe5\xad\x9a\xe6\xbe\xb3\xe6\x87\x92\xe6\xba\x85\xe7\xbf\x98\xe7\x96\x99\xe6\x9d\xb7\xe6\xb7\xbc\xe7\xbc\x99\xe9\xaa\xb0\xe5\x96\x8a\xe6\x82\x89\xe7\xa0\xbb\xe5\x9d\xb7\xe8\x89\x87\xe8\xb5\x81\xe7\x95\x8c\xe8\xb0\xa4\xe7\xba\xa3\xe5\xae\xb4\xe6\x99\x83\xe8\x8c\xb9\xe5\xbd\x92\xe9\xa5\xad\xe6\xa2\xa2\xe9\x93\xa1\xe8\xa1\x97\xe6\x8a\x84\xe8\x82\xbc\xe9\xac\x9f\xe8\x8b\xaf\xe9\xa2\x82\xe6\x92\xb7\xe6\x88\x88\xe7\x82\x92\xe5\x92\x86\xe8\x8c\xad\xe7\x98\x99\xe8\xb4\x9f\xe4\xbb\xb0\xe5\xae\xa2\xe7\x90\x89\xe9\x93\xa2\xe5\xb0\x81\xe5\x8d\x91\xe7\x8f\xa5\xe6\xa4\xbf\xe9\x95\xa7\xe7\xaa\xa8\xe9\xac\xb2\xe5\xaf\xbf\xe5\xbe\xa1\xe8\xa2\xa4\xe9\x93\x83\xe8\x90\x8e\xe7\xa0\x96\xe9\xa4\xae\xe8\x84\x92\xe8\xa3\xb3\xe8\x82\xaa\xe5\xad\x95\xe5\xab\xa3\xe9\xa6\x97\xe5\xb5\x87\xe6\x81\xb3\xe6\xb0\xaf\xe6\xb1\x9f\xe7\x9f\xb3\xe8\xa4\xb6\xe5\x86\xa2\xe7\xa5\xb8\xe9\x98\xbb\xe7\x8b\x88\xe7\xbe\x9e\xe9\x93\xb6\xe9\x9d\xb3\xe9\x80\x8f\xe5\x92\xb3\xe5\x8f\xbc\xe6\x95\xb7\xe8\x8a\xb7\xe5\x95\xa5\xe5\xae\x83\xe7\x93\xa4\xe5\x85\xb0\xe7\x97\x98\xe6\x87\x8a\xe9\x80\x91\xe8\x82\x8c\xe5\xbe\x80\xe6\x8d\xba\xe5\x9d\x8a\xe7\x94\xa9\xe5\x91\xbb\xe3\x80\x83\xe6\xb2\xa6\xe5\xbf\x98\xe8\x86\xbb\xe7\xa5\x9f\xe8\x8f\x85\xe5\x89\xa7\xe5\xb4\x86\xe6\x99\xba\xe5\x9d\xaf\xe8\x87\xa7\xe9\x9c\x8d\xe5\xa2\x85\xe6\x94\xbb\xe7\x9c\xaf\xe5\x80\x98\xe6\x8b\xa2\xe9\xaa\xa0\xe9\x93\x90\xe5\xba\xad\xe5\xb2\x99\xe7\x93\xa0\xe2\x80\xb2\xe7\xbc\xba\xe6\xb3\xa5\xe8\xbf\xa2\xe6\x8d\xb6?\xef\xbc\x9f\xe9\x83\x8f\xe5\x96\x99\xe6\x8e\xb7\xe6\xb2\x8c\xe7\xba\xaf\xe7\xa7\x98\xe7\xa7\x8d\xe5\x90\xac\xe7\xbb\x98\xe5\x9b\xba\xe8\x9e\xa8\xe5\x9b\xa2\xe9\xa6\x99\xe7\x9b\x97\xe5\xa6\x92\xe5\x9f\x9a\xe8\x93\x9d\xe6\x8b\x96\xe6\x97\xb1\xe8\x8d\x9e\xe9\x93\x80\xe8\xa1\x80\xe9\x81\x8f\xe6\xb1\xb2\xe8\xbe\xb0\xe5\x8f\xa9\xe6\x8b\xbd\xe5\xb9\x85\xe7\xa1\xac\xe6\x83\xb6\xe6\xa1\x80\xe6\xbc\xa0\xe6\x8e\xaa\xe6\xb3\xbc\xe5\x94\x91\xe9\xbd\x90\xe8\x82\xbe\xe5\xbf\xb5\xe9\x85\xb1\xe8\x99\x9a\xe5\xb1\x81\xe8\x80\xb6\xe6\x97\x97\xe7\xa0\xa6\xe9\x97\xb5\xe5\xa9\x89\xe9\xa6\x86\xe6\x8b\xad\xe7\xbb\x85\xe9\x9f\xa7\xe5\xbf\x8f\xe7\xaa\x9d\xe9\x86\x8b\xe8\x91\xba\xe9\xa1\xbe\xe8\xbe\x9e\xe5\x80\x9c\xe5\xa0\x86\xe8\xbe\x8b\xe9\x80\x86\xe7\x8e\x9f\xe8\xb4\xb1\xe7\x96\xbe\xe8\x91\xa3\xe6\x83\x98\xe5\x80\x8c\xe9\x94\x95\xe6\xb7\x98\xe5\x98\x80\xe8\x8e\xbd\xe4\xbf\xad\xe7\xac\x8f\xe7\xbb\x91\xe9\xb2\xb7\xe6\x9d\x88\xe6\x8b\xa9\xe8\x9f\x80\xe7\xb2\xa5\xe5\x97\xaf\xe9\xa9\xb0\xe9\x80\xbe\xe6\xa1\x88\xe8\xb0\xaa\xe8\xa4\x93\xe8\x83\xab\xe5\x93\xa9\xe6\x98\x95\xe9\xa2\x9a\xe9\xb2\xa2\xe7\xbb\xa0\xe8\xba\xba\xe9\xb9\x84\xe5\xb4\x82\xe5\x84\x92\xe4\xbf\xa8\xe4\xb8\x9d\xe5\xb0\x95\xe6\xb3\x8c\xe5\x95\x8a\xe8\x90\xb8\xe5\xbd\xb0\xe5\xb9\xba\xe5\x90\x9f\xe9\xaa\x84\xe8\x8b\xa3\xe5\xbc\xa6\xe8\x84\x8a\xe7\x91\xb0\xe3\x80\x88\xe8\xaf\x9b\xe9\x95\x81\xe6\x9e\x90\xe9\x97\xaa\xe5\x89\xaa\xe4\xbe\xa7\xe5\x93\x9f\xe6\xa1\x86\xe8\x9e\x83\xe5\xae\x88\xe5\xac\x97\xe7\x87\x95\xe7\x8b\xad\xe9\x93\x88\xe7\xbc\xae\xe6\xa6\x82\xe8\xbf\xb3\xe7\x97\xa7\xe9\xb2\xb2\xe4\xbf\xaf\xe5\x94\xae\xe7\xac\xbc\xe7\x97\xa3\xe6\x89\x89\xe6\x8c\x96\xe6\xbb\xa1\xe5\x92\x8b\xe6\x8f\xb4\xe9\x82\xb1\xe6\x89\x87\xe6\xad\xaa\xe4\xbe\xbf\xe7\x8e\x91\xe7\xbb\xa6\xe5\xb3\xa1\xe8\x9b\x87\xe5\x8f\xa8\xe3\x80\x96\xe6\xb3\xbd\xe8\x83\x83\xe6\x96\x93\xe5\x96\x8b\xe6\x80\x82\xe5\x9d\x9f\xe7\x8c\xaa\xe8\xaf\xa5\xe8\x9a\xac\xe7\x82\x95\xe5\xbc\xa5\xe8\xb5\x9e\xe6\xa3\xa3\xe6\x99\x94\xe5\xa8\xa0\xe6\x8c\xb2\xe7\x8b\xa1\xe5\x88\x9b\xe7\x96\x96\xe9\x93\x95\xe9\x95\xad\xe7\xa8\xb7\xe6\x8c\xab\xe5\xbc\xad\xe5\x95\xbe\xe7\xbf\x94\xe7\xb2\x89\xe5\xb1\xa5\xe8\x8b\x98\xe5\x93\xa6\xe6\xa5\xbc\xe7\xa7\x95\xe9\x93\x82\xe5\x9c\x9f\xe9\x94\xa3\xe7\x98\x9f\xe6\x8c\xa3\xe6\xa0\x89\xe4\xb9\xa0\xe4\xba\xab\xe6\xa1\xa2\xe8\xa2\x85\xe7\xa3\xa8\xe6\xa1\x82\xe8\xb0\xa6\xe5\xbb\xb6\xe5\x9d\x9a\xe8\x94\x9a\xe5\x99\x97\xe7\xbd\xb2\xe8\xb0\x9f\xe7\x8c\xac\xe9\x92\x8e\xe6\x81\x90\xe5\xac\x89\xe9\x9b\x92\xe5\x80\xa6\xe8\xa1\x85\xe4\xba\x8f\xe7\x92\xa9\xe7\x9d\xb9\xe5\x88\xbb\xe6\xae\xbf\xe7\x8e\x8b\xe7\xae\x97\xe9\x9b\x95\xe9\xba\xbb\xe4\xb8\x98\xe6\x9f\xaf\xe9\xaa\x86\xe4\xb8\xb8\xe5\xa1\x8d\xe8\xb0\x9a\xe6\xb7\xbb\xe9\xb2\x88\xe5\x9e\x93\xe6\xa1\x8e\xe8\x9a\xaf\xe8\x8a\xa5\xe4\xba\x88\xe9\xa3\x95\xe9\x95\xa6\xe8\xb0\x8c\xe7\xaa\x97\xe9\x86\x9a\xe8\x8f\x80\xe4\xba\xae\xe6\x90\xaa\xe8\x8e\xba\xe8\x92\xbf\xe7\xbe\x81\xe8\xb6\xb3J\xe7\x9c\x9f\xe8\xbd\xb6\xe6\x82\xac\xe8\xa1\xb7\xe9\x9d\x9b\xe7\xbf\x8a\xe6\x8e\xa9\xe5\x93\x92\xe7\x82\x85\xe6\x8e\x90\xe5\x86\xbc\xe5\xa6\xael\xe8\xb0\x90\xe7\xa8\x9a\xe8\x8d\x86\xe6\x93\x92\xe7\x8a\xaf\xe9\x99\xb5\xe8\x99\x8f\xe6\xb5\x93\xe5\xb4\xbd\xe5\x88\x8d\xe9\x99\x8c\xe5\x82\xbb\xe5\xad\x9c\xe5\x8d\x83\xe9\x9d\x96\xe6\xbc\x94\xe7\x9f\x9c\xe9\x92\x95\xe7\x85\xbd\xe6\x9d\xb0\xe9\x85\x97\xe6\xb8\x97\xe4\xbc\x9e\xe6\xa0\x8b\xe4\xbf\x97\xe6\xb3\xab\xe6\x88\x8d\xe7\xbd\x95\xe6\xb2\xbe\xe7\x96\xbd\xe7\x81\x8f\xe7\x85\xa6\xe8\x8a\xac\xe7\xa3\xb4\xe5\x8f\xb1\xe9\x98\xb1\xe6\xa6\x89\xe6\xb9\x83\xe8\x9c\x80\xe5\x8f\x89\xe9\x86\x92\xe5\xbd\xaa\xe7\xa7\x9f\xe9\x83\xa1\xe7\xaf\xb7\xe5\xb1\x8e\xe8\x89\xaf\xe5\x9e\xa2\xe9\x9a\x97\xe5\xbc\xb1\xe9\x99\xa8\xe5\xb3\xaa\xe7\xa0\xb7\xe6\x8e\xb4\xe9\xa2\x81\xe8\x83\x8e\xe9\x9b\xaf\xe7\xbb\xb5\xe8\xb4\xac\xe6\xb2\x90\xe6\x92\xb5\xe9\x9a\x98\xe7\xaf\x99\xe6\x9a\x96\xe6\x9b\xb9\xe9\x99\xa1\xe6\xa0\x93\xe5\xa1\xab\xe8\x87\xbc\xe5\xbd\xa6\xe7\x93\xb6\xe7\x90\xaa\xe6\xbd\xbc\xe5\x93\xaa\xe9\xb8\xa1\xe6\x91\xa9\xe5\x95\xa6\xe4\xbf\x9f\xe9\x94\x8b\xe5\x9f\x9f\xe8\x80\xbb\xe8\x94\xab\xe7\x96\xaf\xe7\xba\xb9\xe6\x92\x87\xe6\xaf\x92\xe7\xbb\xb6\xe7\x97\x9b\xe9\x85\xaf\xe5\xbf\x8d\xe7\x88\xaa\xe8\xb5\xb3\xe6\xad\x86\xe5\x98\xb9\xe8\xbe\x95\xe7\x83\x88\xe5\x86\x8c\xe6\x9c\xb4\xe9\x92\xb1\xe5\x90\xae\xe6\xaf\xaf\xe7\x99\x9c\xe5\xa8\x83\xe8\xb0\x80\xe9\x82\xb5\xe5\x8e\xae\xe7\x82\xbd\xe7\x92\x9e\xe9\x82\x83\xe4\xb8\x90\xe8\xbf\xbd\xe8\xaf\x8d\xe7\x93\x92\xe5\xbf\x86\xe8\xbd\xa7\xe8\x8a\xab\xe8\xb0\xaf\xe5\x96\xb7\xe5\xbc\x9f\xe5\x8d\x8a\xe5\x86\x95\xe8\xa3\x99\xe6\x8e\x96\xe5\xa2\x89\xe7\xbb\xae\xe5\xaf\x9d\xe8\x8b\x94\xe5\x8a\xbf\xe9\xa1\xb7\xe8\xa4\xa5\xe5\x88\x87\xe8\xa1\xae\xe5\x90\x9b\xe4\xbd\xb3\xe5\xab\x92\xe8\x9a\xa9\xe9\x9c\x9e\xe4\xbd\x9a\xe6\xb4\x99\xe9\x80\x8a\xe9\x95\x96\xe6\x9a\xb9\xe5\x94\x9b&\xe6\xae\x92\xe9\xa1\xb6\xe7\xa2\x97\xe7\x8d\x97\xe8\xbd\xad\xe9\x93\xba\xe8\x9b\x8a\xe5\xba\x9f\xe6\x81\xb9\xe6\xb1\xa8\xe5\xb4\xa9\xe7\x8f\x8d\xe9\x82\xa3\xe6\x9d\xb5\xe6\x9b\xb2\xe7\xba\xba\xe5\xa4\x8f\xe8\x96\xb0\xe5\x82\x80\xe9\x97\xb3\xe6\xb7\xac\xe5\xa7\x98\xe8\x88\x80\xe6\x8b\xa7\xe5\x8d\xb7\xe6\xa5\x82\xe6\x81\x8d\xe8\xae\xaa\xe5\x8e\xa9\xe5\xaf\xae\xe7\xaf\xaa\xe8\xb5\x93\xe4\xb9\x98\xe7\x81\xad\xe7\x9b\x85\xe9\x9e\xa3\xe6\xb2\x9f\xe6\x85\x8e\xe6\x8c\x82\xe9\xa5\xba\xe9\xbc\xbe\xe6\x9d\xb3\xe6\xa0\x91\xe7\xbc\xa8\xe4\xb8\x9b\xe7\xb5\xae\xe5\xa8\x8c\xe8\x87\xbb\xe5\x97\xb3\xe7\xaf\xa1\xe4\xbe\xa9\xe8\xbf\xb0\xe8\xa1\xb0\xe7\x9f\x9b\xe5\x9c\x88\xe8\x9a\x9c\xe5\x8c\x95\xe7\xad\xb9\xe5\x8c\xbf\xe6\xbf\x9e\xe6\x99\xa8\xe5\x8f\xb6\xe9\xaa\x8b\xe9\x83\x9d\xe6\x8c\x9a\xe8\x9a\xb4\xe6\xbb\x9e\xe5\xa2\x9e\xe4\xbe\x8d\xe6\x8f\x8f\xe7\x93\xa3\xe5\x90\x96\xe5\xab\xa6\xe8\x9f\x92\xe5\x8c\xbe\xe5\x9c\xa3\xe8\xb5\x8c\xe6\xaf\xa1\xe7\x99\x9e\xe6\x81\xba\xe7\x99\xbe\xe6\x9b\xb3\xe9\x9c\x80\xe7\xaf\x93\xe8\x82\xae\xe5\xba\x96\xe5\xb8\x8f\xe5\x8d\xbf\xe9\xa9\xbf\xe9\x81\x97\xe8\xb9\xac\xe9\xac\x93\xe9\xaa\xa1\xe6\xad\x89\xe8\x8a\x8e\xe8\x83\xb3\xe5\xb1\x90\xe7\xa6\xbd\xe7\x83\xa6\xe6\x99\x8c\xe5\xaf\x84\xe5\xaa\xbe\xe7\x8b\x84\xe7\xbf\xa1\xe8\x8b\x92\xe8\x88\xb9\xe5\xbb\x89\xe7\xbb\x88\xe7\x97\x9e\xe6\xae\x87\xe3\x80\x85\xe7\x95\xa6\xe9\xa5\xb6\xe6\x94\xb9\xe6\x8b\x86\xe6\x82\xbb\xe8\x90\x84\xef\xbf\xa1\xe7\x93\xbf\xe4\xb9\x83\xe8\xa8\xbe\xe6\xa1\x85\xe5\x8c\xae\xe6\xba\xa7\xe6\x8b\xa5\xe7\xba\xb1\xe9\x93\x8d\xe9\xaa\x97\xe8\x95\x83\xe9\xbe\x8b\xe7\xbc\xac\xe7\x88\xb6\xe4\xbd\x90\xe7\x96\x9a\xe6\xa0\x8e\xe9\x86\x8d\xe6\x8e\xb3\xe8\x93\x84x\xe6\x83\x86\xe9\xa2\x9c\xe9\xb2\x86\xe6\xa6\x86\xe3\x80\x94\xe7\x8c\x8e\xe6\x95\x8c\xe6\x9a\xb4\xe8\xb0\xa5\xe9\xb2\xab\xe8\xb4\xbe\xe7\xbd\x97\xe7\x8e\xbb\xe7\xbc\x84\xe6\x89\xa6\xe8\x8a\xaa\xe7\x99\xa3\xe8\x90\xbd\xe5\xbe\x92\xe8\x87\xbe\xe6\x81\xbf\xe7\x8c\xa9\xe6\x89\x98\xe9\x82\xb4\xe8\x82\x84\xe7\x89\xb5\xe6\x98\xa5\xe9\x99\x9b\xe8\x80\x80\xe5\x88\x8a\xe6\x8b\x93\xe8\x93\x93\xe9\x82\xb3\xe5\xa0\x95\xe5\xaf\x87\xe6\x9e\x89\xe6\xb7\x8c\xe5\x95\xa1\xe6\xb9\x84\xe5\x85\xbd\xe9\x85\xb7\xe8\x90\xbc\xe7\xa2\x9a\xe6\xbf\xa0\xe8\x90\xa4\xe5\xa4\xb9\xe6\x97\xac\xe6\x88\xae\xe6\xa2\xad\xe7\x90\xa5\xe6\xa4\xad\xe6\x98\x94\xe5\x8b\xba\xe8\x9c\x8a\xe7\xbb\x90\xe6\x99\x9a\xe5\xad\xba\xe5\x83\xb5\xe5\xae\xa3\xe6\x91\x84\xe5\x86\xbd\xe6\x97\xa8\xe8\x90\x8c\xe5\xbf\x99\xe8\x9a\xa4\xe7\x9c\x89\xe5\x99\xbc\xe8\x9f\x91\xe4\xbb\x98\xe5\xa5\x91\xe7\x93\x9c\xe6\x82\xbc\xe9\xa2\xa1\xe5\xa3\x81\xe6\x9b\xbe\xe7\xaa\x95\xe9\xa2\xa2\xe6\xbe\x8e\xe4\xbb\xbf\xe4\xbf\x91\xe6\xb5\x91\xe5\xb5\x8c\xe6\xb5\xa3\xe4\xb9\x8d\xe7\xa2\x8c\xe8\xa4\xaa\xe4\xb9\xb1\xe8\x94\x9f\xe9\x9a\x99\xe7\x8e\xa9\xe5\x89\x90\xe8\x91\xab\xe7\xae\xab\xe7\xba\xb2\xe5\x9b\xb4\xe4\xbc\x90\xe5\x86\xb3\xe4\xbc\x99\xe6\xbc\xa9\xe7\x91\x9f\xe5\x88\x91\xe8\x82\x93\xe9\x95\xb3\xe7\xbc\x93\xe8\xb9\xad\xe6\xb0\xa8\xe7\x9a\x93\xe5\x85\xb8\xe7\x95\xb2\xe5\x9d\x8d\xe9\x93\x91\xe6\xaa\x90\xe5\xa1\x91\xe6\xb4\x9e\xe5\x80\xac\xe5\x82\xa8\xe8\x83\xb4\xe6\xb7\xb3\xe6\x88\xbe\xe5\x90\x90\xe7\x81\xbc\xe6\x83\xba\xe5\xa6\x99\xe6\xaf\x95\xe7\x8f\x90\xe7\xbc\x88\xe8\x99\xb1\xe7\x9b\x96\xe7\xbe\xb0\xe9\xb8\xbf\xe7\xa3\x85\xe8\xb0\x93\xe9\xab\x85\xe5\xa8\xb4\xe8\x8b\xb4\xe5\x94\xb7\xe8\x9a\xa3\xe9\x9c\xb9\xe6\x8a\xa8\xe8\xb4\xa4\xe5\x94\xa0\xe7\x8a\xac\xe8\xaa\x93\xe9\x80\x8d\xe5\xba\xa0\xe9\x80\xbc\xe9\xba\x93\xe7\xb1\xbc\xe9\x87\x89\xe5\x91\x9c\xe7\xa2\xa7\xe7\xa7\xa7\xe6\xb0\xa9\xe6\x91\x94\xe9\x9c\x84\xe7\xa9\xb8\xe7\xba\xa8\xe8\xbe\x9f\xe5\xa6\x88\xe6\x98\xa0\xe5\xae\x8c\xe7\x89\x9b\xe7\xbc\xb4\xe5\x97\xb7\xe7\x82\x8a\xe6\x81\xa9\xe8\x8d\x94\xe8\x8c\x86\xe6\x8e\x89\xe7\xb4\x8a\xe6\x85\x8c\xe8\x8e\x93\xe7\xbe\x9f\xe9\x98\x99\xe8\x90\x81\xe7\xa3\x90\xe5\x8f\xa6\xe8\x95\xb9\xe8\xbe\xb1\xe9\xb3\x90\xe6\xb9\xae\xe5\x90\xa1\xe5\x90\xa9\xe5\x94\x90\xe7\x9d\xa6\xe5\x9e\xa0\xe8\x88\x92\xe5\x9c\x9c\xe5\x86\x97\xe7\x9e\xbf\xe6\xba\xba\xe8\x8a\xbe\xe5\x9b\xb1\xe5\x8c\xa0\xe5\x83\xb3\xe6\xb1\x90\xe8\x8f\xa9\xe9\xa5\xac\xe6\xbc\x93\xe9\xbb\x91\xe9\x9c\xb0\xe6\xb5\xb8\xe6\xbf\xa1\xe7\xaa\xa5\xe6\xaf\x82\xe8\x92\xa1\xe5\x85\xa2\xe9\xa9\xbb\xe9\xb9\x89\xe8\x8a\xae\xe8\xaf\x99\xe8\xbf\xab\xe9\x9b\xb3\xe5\x8e\x82\xe5\xbf\x90\xe8\x87\x86\xe7\x8c\xb4\xe9\xb8\xa3\xe8\x9a\xaa\xe6\xa0\x88\xe7\xae\x95\xe7\xbe\xa1\xe6\xb8\x90\xe8\x8e\x86\xe6\x8d\x8d\xe7\x9c\x88\xe5\x93\x93\xe8\xb6\xb4\xe8\xb9\xbc\xe5\x9f\x95\xe5\x9a\xa3\xe9\xaa\x9b\xe5\xae\x8f\xe6\xb7\x84\xe6\x96\x91\xe5\x99\x9c\xe4\xb8\xa5\xe7\x91\x9b\xe5\x9e\x83\xe6\xa4\x8e\xe8\xaf\xb1\xe5\x8e\x8b\xe5\xba\xbe\xe7\xbb\x9e\xe7\x84\x98\xe5\xbb\xbf\xe6\x8a\xa1\xe8\xbf\x84\xe6\xa3\x98\xe5\xa4\xab\xe7\xba\xac\xe9\x94\xb9\xe7\x9c\xa8\xe7\x9e\x8c\xe4\xbe\xa0\xe8\x84\x90\xe7\xab\x9e\xe7\x80\x91\xe5\xad\xb3\xe9\xaa\xa7\xe9\x81\x81\xe5\xa7\x9c\xe9\xa2\xa6\xe8\x8d\xaa\xe6\xbb\x9a\xe8\x90\xa6\xe4\xbc\xaa\xe9\x80\xb8\xe7\xb2\xb3\xe7\x88\xac\xe9\x94\x81\xe7\x9f\xa3\xe5\xbd\xb9\xe8\xb6\xa3\xe6\xb4\x92\xe9\xa2\x94\xe8\xaf\x8f\xe9\x80\x90\xe5\xa5\xb8\xe7\x94\xad\xe6\x83\xa0\xe6\x94\x80\xe8\xb9\x84\xe6\xb3\x9b\xe5\xb0\xbc\xe6\x8b\xbc\xe9\x98\xae\xe9\xb9\xb0\xe4\xba\x9a\xe9\xa2\x88\xe6\x83\x91\xe5\x8b\x92\xe3\x80\x89\xe9\x99\x85\xe8\x82\x9b\xe7\x88\xb7\xe5\x88\x9a\xe9\x92\xa8\xe4\xb8\xb0\xe5\x85\xbb\xe5\x86\xb6\xe9\xb2\xbd\xe8\xbe\x89\xe8\x94\xbb\xe7\x94\xbb\xe8\xa6\x86\xe7\x9a\xb4\xe5\xa6\x8a\xe9\xba\xa6\xe8\xbf\x94\xe9\x86\x89\xe7\x9a\x82\xe6\x93\x80\xe3\x80\x97\xe9\x85\xb6\xe5\x87\x91\xe7\xb2\xb9\xe6\x82\x9f\xe8\xaf\x80\xe7\xa1\x96\xe6\xb8\xaf\xe5\x8d\x9cz\xe6\x9d\x80\xe6\xb6\x95\xc2\xb1\xe8\x88\x8d\xe9\x93\xa0\xe6\x8a\xb5\xe5\xbc\x9b\xe6\xae\xb5\xe6\x95\x9d\xe9\x95\x90\xe5\xa5\xa0\xe6\x8b\x82\xe8\xbd\xb4\xe8\xb7\x9b\xe8\xa2\xb1et\xe6\xb2\x89\xe8\x8f\x87\xe4\xbf\x8e\xe8\x96\xaa\xe5\xb3\xa6\xe7\xa7\xad\xe8\x9f\xb9\xe5\x8e\x86\xe7\x9b\x9f\xe8\x8f\xa0\xe5\xaf\xa1\xe6\xb6\xb2\xe8\x82\xa2\xe5\x96\xbb\xe6\x9f\x93\xe8\xa3\xb1\xe6\x82\xb1\xe6\x8a\xb1\xe6\xb0\x99\xe8\xb5\xa4\xe6\x8d\x85\xe7\x8c\x9b\xe8\xb7\x91\xe6\xb0\xae\xe8\xb0\xa3\xe4\xbb\x81\xe5\xb0\xba\xe8\xbe\x8a\xe7\xaa\x8d\xe7\x83\x99\xe8\xa1\x8d\xe6\x9e\xb6\xe6\x93\xa6\xe5\x80\x8f\xe7\x92\x90\xe7\x91\x81\xe5\xb8\x81\xe6\xa5\x9e\xe8\x83\x96\xe5\xa4\x94\xe8\xb6\xb8\xe9\x82\x9b\xe6\x83\xb4\xe9\xa5\x95\xe8\x99\x94\xe8\x9d\x8e\xc2\xa7\xe5\x93\x89\xe8\xb4\x9d\xe5\xae\xbd\xe8\xbe\xab\xe7\x82\xae\xe6\x89\xa9\xe9\xa5\xb2\xe7\xb1\xbd\xe9\xad\x8f\xe8\x8f\x9f\xe9\x94\xb0\xe4\xbc\x8d\xe7\x8c\x9d\xe6\x9c\xab\xe7\x90\xb3\xe5\x93\x9a\xe8\x9b\x8e\xe9\x82\x82\xe5\x91\x80\xe5\xa7\xbf\xe9\x84\x9e\xe5\x8d\xb4\xe6\xad\xa7\xe4\xbb\x99\xe6\x81\xb8\xe6\xa4\x90\xe6\xa3\xae\xe7\x89\x92\xe5\xaf\xa4\xe8\xa2\x92\xe5\xa9\x86\xe8\x99\xa2\xe9\x9b\x85\xe9\x92\x89\xe6\x9c\xb5\xe8\xb4\xbc\xe6\xac\xb2\xe8\x8b\x9e\xe5\xaf\xb0\xe6\x95\x85\xe9\xbe\x9a\xe5\x9d\xad\xe5\x98\x98\xe5\x92\xab\xe7\xa4\xbc\xe7\xa1\xb7\xe5\x85\x80\xe7\x9d\xa2\xe6\xb1\xb6\xe2\x80\x99\xe9\x93\xb2\xe7\x83\xa7\xe7\xbb\x95\xe8\xaf\x83\xe6\xb5\x83\xe9\x92\xbf\xe5\x93\xba\xe6\x9f\x9c\xe8\xae\xbc\xe9\xa2\x8a\xe7\x92\x81\xe8\x85\x94\xe6\xb4\xbd\xe5\x92\x90\xe8\x84\xb2\xe7\xb0\x8c\xe7\xad\xa0\xe9\x95\xa3\xe7\x8e\xae\xe9\x9e\xa0\xe8\xb0\x81\xe5\x85\xbc\xe5\xa7\x86\xe6\x8c\xa5\xe6\xa2\xaf\xe8\x9d\xb4\xe8\xb0\x98\xe6\xbc\x95\xe5\x88\xb7\xe8\xba\x8f\xe5\xae\xa6\xe5\xbc\xbcb\xe5\x9e\x8c\xe5\x8a\x88\xe9\xba\x9f\xe8\x8e\x89\xe6\x8f\xad\xe7\xac\x99\xe6\xb8\x8e\xe4\xbb\x95\xe5\x97\xa4\xe4\xbb\x93\xe9\x85\x8d\xe6\x80\x8f\xe6\x8a\xac\xe9\x94\x99\xe6\xb3\xaf\xe9\x95\x8a\xe5\xad\xb0\xe7\x8c\xbf\xe9\x82\xaa\xe4\xbb\x8d\xe7\xa7\x8b\xe9\xbc\xac\xe5\xa3\xb9\xe6\xad\x87\xe5\x90\xb5\xe7\x82\xbc<\xe5\xb0\xa7\xe5\xb0\x84\xe6\x9f\xac\xe5\xbb\xb7\xe8\x83\xa7\xe9\x9c\xbe\xe5\x87\xb3\xe9\x9a\x8b\xe8\x82\x9a\xe6\xb5\xae\xe6\xa2\xa6\xe7\xa5\xa5\xe6\xa0\xaa\xe5\xa0\xb5\xe9\x80\x80L\xe9\xb9\xab\xe8\xb7\x8e\xe5\x87\xb6\xe6\xaf\xbd\xe8\x8d\x9f\xe7\x82\xab\xe6\xa0\xa9\xe7\x8e\xb3\xe7\x94\x9c\xe6\xb2\x82\xe9\xb9\xbf\xe9\xa1\xbd\xe4\xbc\xaf\xe7\x88\xb9\xe8\xb5\x94\xe8\x9b\xb4\xe5\xbe\x90\xe5\x8c\xa1\xe6\xac\xa3\xe7\x8b\xb0\xe7\xbc\xb8\xe9\x9b\xb9\xe8\x9f\x86\xe7\x96\xa4\xe9\xbb\x98\xe6\xb2\xa4\xe5\x95\x9c\xe7\x97\x82\xe8\xa1\xa3\xe7\xa6\x85wih\xe8\xbe\xbd\xe8\x91\xb3\xe9\xbb\x9d\xe9\x92\x97\xe5\x81\x9c\xe6\xb2\xbd\xe6\xa3\x92\xe9\xa6\xa8\xe9\xa2\x8c\xe8\x82\x89\xe5\x90\xb4\xe7\xa1\xab\xe6\x82\xaf\xe5\x8a\xbe\xe5\xa8\x88\xe9\xa9\xac\xe5\x95\xa7\xe5\x90\x8a\xe6\x82\x8c\xe9\x95\x91\xe5\xb3\xad\xe5\xb8\x86\xe7\x80\xa3\xe6\xb6\x89\xe5\x92\xb8\xe7\x96\xb8\xe6\xbb\x8b\xe6\xb3\xa3\xe7\xbf\xa6\xe6\x8b\x99\xe7\x99\xb8\xe9\x92\xa5\xe8\x9c\x92+\xe5\xb0\xbe\xe5\xba\x84\xe5\x87\x9d\xe6\xb3\x89\xe5\xa9\xa2\xe6\xb8\xb4\xe8\xb0\x8a\xe4\xb9\x9e\xe9\x99\x86\xe9\x94\x89\xe7\xb3\x8a\xe9\xb8\xa6\xe6\xb7\xaeIBN\xe6\x99\xa6\xe5\xbc\x97\xe4\xb9\x94\xe5\xba\xa5\xe8\x91\xa1\xe5\xb0\xbb\xe5\xb8\xad\xe6\xa9\xa1\xe5\x82\xa3\xe6\xb8\xa3\xe6\x8b\xbf\xe6\x83\xa9\xe9\xba\x8b\xe6\x96\x9b\xe7\xbc\x83\xe7\x9f\xae\xe8\x9b\x8f\xe5\xb2\x98\xe9\xb8\xbd\xe5\xa7\x90\xe8\x86\x8f\xe5\x82\xac\xe5\xa5\x94\xe9\x95\x92\xe5\x96\xb1\xe8\xa0\xa1\xe6\x91\xa7\xe9\x92\xaf\xe8\x83\xa4\xe6\x9f\xa0\xe6\x8b\x90\xe7\x92\x8b\xe9\xb8\xa5\xe5\x8d\xa2\xe8\x8d\xa1\xe5\x80\xbe^_\xe7\x8f\x80\xe9\x80\x84\xe8\x90\xa7\xe5\xa1\xbe\xe6\x8e\x87\xe8\xb4\xae\xe7\xac\x86\xe8\x81\x82\xe5\x9c\x83\xe5\x86\xb2\xe5\xb5\xacM\xe6\xbb\x94\xe7\xac\x95\xe5\x80\xbc\xe7\x82\x99\xe5\x81\xb6\xe8\x9c\xb1\xe6\x90\x90\xe6\xa2\x86\xe6\xb1\xaa\xe8\x94\xac\xe8\x85\x91\xe9\xb8\xaf\xe8\xb9\x87\xe6\x95\x9e\xe7\xbb\xaf\xe4\xbb\xa8\xe7\xa5\xaf\xe8\xb0\x86\xe6\xa2\xa7\xe7\xb3\x97\xe9\x91\xab\xe5\x95\xb8\xe8\xb1\xba\xe5\x9b\xb9\xe7\x8c\xbe\xe5\xb7\xa2\xe6\x9f\x84\xe7\x80\x9b\xe7\xad\x91\xe8\xb8\x8c\xe6\xb2\xad\xe6\x9a\x97\xe8\x8b\x81\xe9\xb1\xbf\xe8\xb9\x89\xe8\x84\x82\xe8\x98\x96\xe7\x89\xa2\xe7\x83\xad\xe6\x9c\xa8\xe5\x90\xb8\xe6\xba\x83\xe5\xae\xa0\xe5\xba\x8f\xe6\xb3\x9e\xe5\x81\xbf\xe6\x8b\x9c\xe6\xaa\xa9\xe5\x8e\x9a\xe6\x9c\x90\xe6\xaf\x97\xe8\x9e\xb3\xe5\x90\x9e\xe5\xaa\x9a\xe6\x9c\xbd\xe6\x8b\x85\xe8\x9d\x97\xe6\xa9\x98\xe7\x95\xb4\xe7\xa5\x88\xe7\xb3\x9f\xe7\x9b\xb1\xe9\x9a\xbc\xe9\x83\x9c\xe6\x83\x9c\xe7\x8f\xa0\xe8\xa3\xa8\xe9\x93\xb5\xe7\x84\x99\xe7\x90\x9a\xe5\x94\xaf\xe5\x92\x9a\xe5\x99\xaa\xe9\xaa\x8a\xe4\xb8\xab\xe6\xbb\xa2\xe5\x8b\xa4\xe6\xa3\x89\xe5\x91\xb8\xe5\x92\xa3\xe6\xb7\x80\xe9\x9a\x94\xe8\x95\xbe\xe7\xaa\x88\xe9\xa5\xa8\xe6\x8c\xa8\xe7\x85\x85\xe7\x9f\xad\xe5\x8c\x99\xe7\xb2\x95\xe9\x95\x9c\xe8\xb5\xa3\xe6\x92\x95\xe5\xa2\xa9\xe9\x85\xac\xe9\xa6\x81\xe8\xb1\x8c\xe9\xa2\x90\xe6\x8a\x97\xe9\x85\xa3\xe6\xb0\x93\xe4\xbd\x91\xe6\x90\x81\xe5\x93\xad\xe9\x80\x92\xe8\x80\xb7\xe6\xb6\xa1\xe6\xa1\x83\xe8\xb4\xbb\xe7\xa2\xa3\xe6\x88\xaa\xe7\x98\xa6\xe6\x98\xad\xe9\x95\x8c\xe8\x94\x93\xe6\xb0\x9a\xe7\x94\xb2\xe7\x8c\x95\xe8\x95\xb4\xe8\x93\xac\xe6\x95\xa3\xe6\x8b\xbe\xe7\xba\x9b\xe7\x8b\xbc\xe7\x8c\xb7\xe9\x93\x8e\xe5\x9f\x8b\xe6\x97\x96\xe7\x9f\xbe\xe8\xae\xb3\xe5\x9b\x8a\xe7\xb3\x9c\xe8\xbf\x88\xe7\xb2\x9f\xe8\x9a\x82\xe7\xb4\xa7\xe9\xb2\xb3\xe7\x98\xa2\xe6\xa0\xbd\xe7\xa8\xbc\xe7\xbe\x8a\xe9\x94\x84\xe6\x96\x9f\xe7\x9d\x81\xe6\xa1\xa5\xe7\x93\xae\xe8\xb9\x99\xe7\xa5\x89\xe9\x86\xba\xe9\xbc\xbb\xe6\x98\xb1\xe5\x89\x83\xe8\xb7\xb3\xe7\xaf\xb1\xe8\xb7\xb7\xe8\x92\x9c\xe7\xbf\x8e\xe5\xae\x85\xe6\x99\x96\xe5\x97\x91\xe5\xa3\x91\xe5\xb3\xbb\xe7\x99\xab\xe5\xb1\x8f\xe7\x8b\xa0\xe9\x99\x8b\xe8\xa2\x9c\xe9\x80\x94\xe6\x86\x8e\xe7\xa5\x80\xe8\x8e\xb9\xe6\xbb\x9f\xe4\xbd\xb6\xe6\xba\xa5\xe8\x87\xa3\xe7\xba\xa6\xe7\x9b\x9b\xe5\xb3\xb0\xe7\xa3\x81\xe6\x85\xb5\xe5\xa9\xaa\xe6\x8b\xa6\xe8\x8e\x85\xe6\x9c\x95\xe9\xb9\xa6\xe7\xb2\xb2\xe8\xa3\xa4\xe5\x93\x8e\xe7\x96\xa1\xe5\xab\x96\xe7\x90\xb5\xe7\xaa\x9f\xe5\xa0\xaa\xe8\xb0\x9b\xe5\x98\x89\xe5\x84\xa1\xe9\xb3\x9d\xe6\x96\xa9\xe9\x83\xbe\xe9\xa9\xb8\xe9\x85\x8a\xe5\xa6\x84\xe8\x83\x9c\xe8\xb4\xba\xe5\xbe\x99\xe5\x82\x85\xe5\x99\x8c\xe9\x92\xa2\xe6\xa0\x85\xe5\xba\x87\xe6\x81\x8b\xe5\x8c\x9d\xe5\xb7\xaf\xe9\x82\x88\xe5\xb0\xb8\xe9\x94\x9a\xe7\xb2\x97\xe4\xbd\x9f\xe8\x9b\x9f\xe8\x96\xb9\xe7\xba\xb5\xe8\x9a\x8a\xe9\x83\x85\xe7\xbb\xa2\xe9\x94\x90\xe8\x8b\x97\xe4\xbf\x9e\xe7\xaf\x86\xe6\xb7\x86\xe8\x86\x80\xe9\xb2\x9c\xe7\x85\x8e\xe8\xaf\xb6\xe7\xa7\xbd\xe5\xaf\xbb\xe6\xb6\xae\xe5\x88\xba\xe6\x80\x80\xe5\x99\xb6\xe5\xb7\xa8\xe8\xa4\xb0\xe9\xad\x85\xe7\x81\xb6\xe7\x81\x8c\xe6\xa1\x89\xe8\x97\x95\xe8\xb0\x9c\xe8\x88\xb8\xe8\x96\x84\xe6\x90\x80\xe6\x81\xbd\xe5\x80\x9f\xe7\x89\xaf\xe7\x97\x89\xe6\xb8\xa5\xe6\x84\xbf\xe4\xba\x93\xe8\x80\x98\xe6\x9d\xa0\xe6\x9f\xa9\xe9\x94\x94\xe8\x9a\xb6\xe9\x92\xa3\xe7\x8f\x88\xe5\x96\x98\xe8\xb9\x92\xe5\xb9\xbd\xe8\xb5\x90\xe7\xa8\x97\xe6\x99\xa4\xe8\x8e\xb1\xe6\xb3\x94\xe6\x89\xaf\xe8\x82\xaf\xe8\x8f\xaa\xe8\xa3\x86\xe8\x85\xa9\xe8\xb1\x89\xe7\x96\x86\xe9\xaa\x9c\xe8\x85\x90\xe5\x80\xad\xe7\x8f\x8f\xe5\x94\x94\xe7\xb2\xae\xe4\xba\xa1\xe6\xb6\xa6\xe6\x85\xb0\xe4\xbc\xbd\xe6\xa9\x84\xe7\x8e\x84\xe8\xaa\x89\xe9\x86\x90\xe8\x83\x86\xe9\xbe\x8a\xe7\xb2\xbc\xe5\xa1\xac\xe9\x99\x87\xe5\xbd\xbc\xe5\x89\x8a\xe5\x97\xa3\xe7\xbb\xbe\xe8\x8a\xbd\xe5\xa6\x97\xe5\x9e\xad\xe7\x98\xb4\xe7\x88\xbd\xe8\x96\x8f\xe5\xaf\xa8\xe9\xbe\x88\xe6\xb3\xa0\xe5\xbc\xb9\xe8\xb5\xa2\xe6\xbc\xaa\xe7\x8c\xab\xe5\x98\xa7\xe6\xb6\x82\xe6\x81\xa4\xe5\x9c\xad\xe8\x8c\xa7\xe7\x83\xbd\xe5\xb1\x91\xe7\x97\x95\xe5\xb7\xbe\xe8\xb5\x96\xe8\x8d\xb8\xe5\x87\xb0\xe8\x85\xae\xe7\x95\x88\xe4\xba\xb5\xe8\xb9\xb2\xe5\x81\x83\xe8\x8b\x87\xe6\xbe\x9c\xe8\x89\xae\xe6\x8d\xa2\xe9\xaa\xba\xe7\x83\x98\xe8\x8b\x95\xe6\xa2\x93\xe9\xa2\x89\xe8\x82\x87\xe5\x93\x97\xe6\x82\x84\xe6\xb0\xa4\xe6\xb6\xa0\xe8\x91\xac\xe5\xb1\xa0\xe9\xb9\xad\xe6\xa4\x8d\xe7\xab\xba\xe4\xbd\xaf\xe8\xaf\xa3\xe9\xb2\x87\xe7\x98\x80\xe9\xb2\x85\xe9\x82\xa6\xe7\xa7\xbb\xe6\xbb\x81\xe5\x86\xaf\xe8\x80\x95\xe7\x99\x94\xe6\x88\x8c\xe8\x8c\xac\xe6\xb2\x81\xe5\xb7\xa9\xe6\x82\xa0\xe6\xb9\x98\xe6\xb4\xaa\xe7\x97\xb9\xe9\x94\x9f\xe5\xbe\xaa\xe8\xb0\x8b\xe8\x85\x95\xe9\xb3\x83\xe9\x92\xa0\xe6\x8d\x9e\xe7\x84\x89\xe8\xbf\x8e\xe7\xa2\xb1\xe4\xbc\xab\xe6\x80\xa5\xe6\xa6\xb7\xe5\xa5\x88\xe9\x82\x9d\xe5\x8d\xaf\xe8\xbe\x84\xe7\x9a\xb2\xe5\x8d\x9f\xe9\x86\x9b\xe7\x95\xb9\xe5\xbf\xa7\xe7\xa8\xb3\xe9\x9b\x84\xe6\x98\xbc\xe7\xbc\xa9\xe9\x98\x88\xe7\x9d\x91\xe6\x89\x8c\xe8\x80\x97\xe6\x9b\xa6\xe6\xb6\x85\xe6\x8d\x8f\xe7\x9e\xa7\xe9\x82\x95\xe6\xb7\x96\xe6\xbc\x89\xe9\x93\x9d\xe8\x80\xa6\xe7\xa6\xb9\xe6\xb9\x9b\xe5\x96\xbd\xe8\x8e\xbc\xe7\x90\x85\xe8\xaf\xb8\xe8\x8b\x8e\xe7\xba\x82\xe7\xa1\x85\xe5\xa7\x8b\xe5\x97\xa8\xe5\x82\xa5\xe7\x87\x83\xe8\x87\x82\xe8\xb5\x85\xe5\x98\x88\xe5\x91\x86\xe8\xb4\xb5\xe5\xb1\xb9\xe5\xa3\xae\xe8\x82\x8b\xe4\xba\x8d\xe8\x9a\x80\xe5\x8d\x85\xe8\xb1\xb9\xe8\x85\x86\xe9\x82\xac\xe8\xbf\xad\xe6\xb5\x8a}\xe7\xab\xa5\xe8\x9e\x82\xe6\x8d\x90\xe5\x9c\xa9\xe5\x8b\x90\xe8\xa7\xa6\xe5\xaf\x9e\xe6\xb1\x8a\xe5\xa3\xa4\xe8\x8d\xab\xe8\x86\xba\xe6\xb8\x8c\xe8\x8a\xb3\xe6\x87\xbf\xe9\x81\xb4\xe8\x9e\x88\xe6\xb3\xb0\xe8\x93\xbc\xe8\x9b\xa4\xe8\x8c\x9c\xe8\x88\x85\xe6\x9e\xab\xe6\x9c\x94\xe8\x86\x9d\xe7\x9c\x99\xe9\x81\xbf\xe6\xa2\x85\xe5\x88\xa4\xe9\xb9\x9c\xe7\x92\x9c\xe7\x89\x8d\xe7\xbc\x85\xe5\x9e\xab\xe8\x97\xbb\xe9\xbb\x94\xe4\xbe\xa5\xe6\x83\x9a\xe6\x87\x82\xe8\xb8\xa9\xe8\x85\xb0\xe8\x85\x88\xe6\x9c\xad\xe4\xb8\x9e\xe5\x94\xbe\xe6\x85\x88\xe9\xa1\xbf\xe6\x91\xb9\xe8\x8d\xbb\xe7\x90\xac~\xe6\x96\xa7\xe6\xb2\x88\xe6\xbb\x82\xe8\x83\x81\xe8\x83\x80\xe5\xb9\x84\xe8\x8e\x9cZ\xe5\x8c\x80\xe9\x84\x84\xe6\x8e\x8c\xe7\xbb\xb0\xe8\x8c\x8e\xe7\x84\x9a\xe8\xb5\x8b\xe8\x90\xb1\xe8\xb0\x91\xe6\xb1\x81\xe9\x93\x92\xe7\x9e\x8e\xe5\xa4\xba\xe8\x9c\x97\xe9\x87\x8e\xe5\xa8\x86\xe5\x86\x80\xe5\xbc\xaf\xe7\xaf\x81\xe6\x87\xb5\xe7\x81\x9e\xe9\x9a\xbd\xe8\x8a\xa1\xe8\x84\x98\xe4\xbf\x90\xe8\xbe\xa9\xe8\x8a\xaf\xe6\x8e\xba\xe5\x96\x8f\xe8\x86\x88\xe8\x9d\x88\xe8\xa7\x90\xe6\x82\x9a\xe8\xb8\xb9\xe8\x94\x97\xe7\x86\xa0\xe9\xbc\xa0\xe5\x91\xb5\xe6\x8a\x93\xe6\xa9\xbc\xe5\xb3\xa8\xe7\x95\x9c\xe7\xbc\x94\xe7\xa6\xbe\xe5\xb4\xad\xe5\xbc\x83\xe7\x86\x8a\xe6\x91\x92\xe5\x87\xb8\xe6\x8b\x97\xe7\xa9\xb9\xe8\x92\x99\xe6\x8a\x92\xe7\xa5\x9b\xe5\x8a\x9d\xe9\x97\xab\xe6\x89\xb3\xe9\x98\xb5\xe9\x86\x8c\xe8\xb8\xaa\xe5\x96\xb5\xe4\xbe\xa3\xe6\x90\xac\xe4\xbb\x85\xe8\x8d\xa7\xe8\xb5\x8e\xe8\x9d\xbe\xe7\x90\xa6\xe4\xb9\xb0\xe5\xa9\xa7\xe7\x9e\x84\xe5\xaf\x93\xe7\x9a\x8e\xe5\x86\xbb\xe8\xb5\x9d\xe7\xae\xa9\xe8\x8e\xab\xe7\x9e\xb0\xe9\x83\x8a\xe7\xac\xab\xe5\xa7\x9d\xe7\xad\x92\xe6\x9e\xaa\xe9\x81\xa3\xe7\x85\xb8\xe8\xa2\x8b\xe8\x88\x86\xe7\x97\xb1\xe6\xb6\x9b\xe6\xaf\x8d\xe3\x80\x87\xe5\x90\xaf\xe8\xb7\xb5\xe8\x80\x99\xe7\xbb\xb2\xe7\x9b\x98\xe9\x81\x82\xe6\x98\x8a\xe6\x90\x9e\xe6\xa7\xbf\xe8\xaf\xac\xe7\xba\xb0\xe6\xb3\x93\xe6\x83\xa8\xe6\xaa\xac\xe4\xba\xbb\xe8\xb6\x8aCo\xe6\x86\xa9\xe7\x86\xb5\xe7\xa5\xb7\xe9\x92\x92\xe6\x9a\xa7\xe5\xa1\x94\xe9\x98\x97\xe8\x83\xb0\xe5\x92\x84\xe5\xa8\xb6\xe9\xad\x94\xe7\x90\xb6\xe9\x92\x9e\xe9\x82\xbb\xe6\x89\xac\xe6\x9d\x89\xe6\xae\xb4\xe5\x92\xbd\xe5\xbc\x93\xe3\x80\x86\xe9\xab\xbb\xe3\x80\x91\xe5\x90\xad\xe6\x8f\xbd\xe9\x9c\x86\xe6\x8b\x84\xe6\xae\x96\xe8\x84\x86\xe5\xbd\xbb\xe5\xb2\xa9\xe8\x8a\x9d\xe5\x8b\x83\xe8\xbe\xa3\xe5\x89\x8c\xe9\x92\x9d\xe5\x98\x8e\xe7\x94\x84\xe4\xbd\x98\xe7\x9a\x96\xe4\xbc\xa6\xe6\x8e\x88\xe5\xbe\x95\xe6\x86\x94\xe6\x8c\xaa\xe7\x9a\x87\xe5\xba\x9e\xe7\xa8\x94\xe8\x8a\x9c\xe8\xb8\x8f\xe6\xba\xb4\xe5\x85\x96\xe5\x8d\x92\xe6\x93\xa2\xe9\xa5\xa5\xe9\xb3\x9e\xe7\x85\xb2\xe2\x80\xb0\xe8\xb4\xa6\xe9\xa2\x97\xe5\x8f\xbb\xe6\x96\xaf\xe6\x8d\xa7\xe9\xb3\x8d\xe7\x90\xae\xe8\xae\xb9\xe8\x9b\x99\xe7\xba\xbd\xe8\xb0\xad\xe9\x85\xb8\xe5\x85\x94\xe8\x8e\x92\xe7\x9d\x87\xe4\xbc\x9f\xe8\xa7\x91\xe7\xbe\xb2\xe5\x97\x9c\xe5\xae\x9c\xe8\xa4\x90\xe6\x97\x8e\xe8\xbe\x9b\xe5\x8d\xa6\xe8\xaf\x98\xe7\xad\x8b\xe9\x8e\x8f\xe6\xba\xaa\xe6\x8c\x9b\xe7\x86\x94\xe9\x98\x9c\xe6\x99\xb0\xe9\xb3\x85\xe4\xb8\xa2\xe5\xa5\x9a\xe7\x81\xb8\xe5\x91\xb1\xe7\x8c\xae\xe9\x99\x89\xe9\xbb\x9b\xe9\xb8\xaa\xe7\x94\xbe\xe8\x90\xa8\xe7\x96\xae\xe6\x8b\xaf\xe6\xb4\xb2\xe7\x96\xb9\xe8\xbe\x91\xe5\x8f\x99\xe6\x81\xbb\xe8\xb0\x92\xe5\x85\x81\xe6\x9f\x94\xe7\x83\x82\xe6\xb0\x8f\xe9\x80\x85\xe6\xbc\x86\xe6\x8b\x8e\xe6\x83\x8b\xe6\x89\x88\xe6\xb9\x9f\xe7\xba\xad\xe5\x95\x95\xe6\x8e\xac\xe6\x93\x9e\xe5\x93\xa5\xe5\xbf\xbd\xe6\xb6\xa4\xe9\xb8\xb5\xe9\x9d\xa1\xe9\x83\x97\xe7\x93\xb7\xe6\x89\x81\xe5\xbb\x8a\xe6\x80\xa8\xe9\x9b\x8f\xe9\x92\xae\xe6\x95\xa6E\xe6\x87\xa6\xe6\x86\x8b\xe6\xb1\x80\xe6\x8b\x9a\xe5\x95\x89\xe8\x85\x8c\xe5\xb2\xb8f\xe7\x97\xbc\xe7\x9e\x85\xe5\xb0\x8a\xe5\x92\x80\xe7\x9c\xa9\xe9\xa3\x99\xe5\xbf\x8c\xe4\xbb\x9d\xe8\xbf\xa6\xe7\x86\xac\xe6\xaf\xab\xe8\x83\xaf\xe7\xaf\x91\xe8\x8c\x84\xe8\x85\xba\xe5\x87\x84\xe8\x88\x9b\xe7\xa2\xb4\xe9\x94\xb5\xe8\xaf\xa7\xe7\xbe\xaf\xe5\xbe\x8c\xe6\xbc\x8f\xe6\xb1\xa4\xe5\xae\x93\xe4\xbb\x9e\xe8\x9a\x81\xe5\xa3\xb6\xe8\xb0\xb0\xe7\x9a\x91\xe9\x93\x84\xe6\xa3\xb0\xe7\xbd\x94\xe8\xbe\x85\xe6\x99\xb6\xe8\x8b\xa6\xe7\x89\x9f\xe9\x97\xbd\\\xe7\x83\x83\xe9\xa5\xae\xe8\x81\xbf\xe4\xb8\x99\xe8\x9b\xb3\xe6\x9c\xb1\xe7\x85\xa4\xe6\xb6\x94\xe9\xb3\x96\xe7\x8a\x81\xe7\xbd\x90\xe8\x8d\xbc\xe7\xa0\x92\xe6\xb7\xa6\xe5\xa6\xa4\xe9\xbb\x8f\xe6\x88\x8e\xe5\xad\x91\xe5\xa9\x95\xe7\x91\xbe\xe6\x88\xa2\xe9\x92\xb5\xe6\x9e\xa3\xe6\x8d\x8b\xe7\xa0\xa5\xe8\xa1\xa9\xe7\x8b\x99\xe6\xa1\xa0\xe7\xa8\xa3\xe9\x98\x8e\xe8\x82\x83\xe6\xa2\x8f\xe8\xaf\xab\xe5\xad\xaa\xe6\x98\xb6\xe5\xa9\x8a\xe8\xa1\xab\xe5\x97\x94\xe4\xbe\x83\xe5\xa1\x9e\xe8\x9c\x83\xe6\xa8\xb5\xe5\xb3\x92\xe8\xb2\x8c\xe5\xb1\xbf\xe6\xac\xba\xe7\xbc\xab\xe9\x98\x90\xe6\xa0\x96\xe8\xaf\x9f\xe7\x8f\x9e\xe8\x8d\xad\xe5\x90\x9d\xe8\x90\x8d\xe5\x97\xbd\xe6\x81\x82\xe5\x95\xbb\xe8\x9c\xb4\xe7\xa3\xac\xe5\xb3\x8b\xe4\xbf\xb8\xe8\xb1\xab\xe8\xb0\x8e\xe5\xbe\x8a\xe9\x95\x8d\xe9\x9f\xac\xe9\xad\x87\xe6\x99\xb4U\xe5\x9b\x9f\xe7\x8c\x9c\xe8\x9b\xae\xe5\x9d\x90\xe5\x9b\xbf\xe4\xbc\xb4\xe4\xba\xad\xe8\x82\x9d\xe4\xbd\x97\xe8\x9d\xa0\xe5\xa6\x83\xe8\x83\x9e\xe6\xbb\xa9\xe6\xa6\xb4\xe6\xb0\x96\xe5\x9e\xa9\xe8\x8b\x8b\xe7\xa0\xa3\xe6\x89\xaa\xe9\xa6\x8f\xe5\xa7\x93\xe8\xbd\xa9\xe5\x8e\x89\xe5\xa4\xa5\xe4\xbe\x88\xe7\xa6\x80\xe5\x9e\x92\xe5\xb2\x91\xe8\xb5\x8f\xe9\x92\x9b\xe8\xbe\x90\xe7\x97\x94\xe6\x8a\xab\xe7\xba\xb8\xe7\xa2\xb3\xe2\x80\x9c\xe5\x9d\x9e\xe8\xa0\x93\xe6\x8c\xa4\xe8\x8d\xa5\xe6\xb2\x85\xe6\x82\x94\xe9\x93\xa7\xe5\xb8\xbc\xe8\x92\x8c\xe8\x9d\x87apyng\xe5\x93\x80\xe6\xb5\x86\xe7\x91\xb6\xe5\x87\xbf\xe6\xa1\xb6\xe9\xa6\x88\xe7\x9a\xae\xe5\xa5\xb4\xe8\x8b\x9c\xe4\xbd\xa4\xe4\xbc\xb6\xe6\x99\x97\xe9\x93\xb1\xe7\x82\xac\xe4\xbc\x98\xe5\xbc\x8a\xe6\xb0\xa2\xe6\x81\x83\xe7\x94\xab\xe6\x94\xa5\xe7\xab\xaf\xe9\x94\x8c\xe7\x81\xb0\xe7\xa8\xb9\xe7\x82\x9d\xe6\x9b\x99\xe9\x82\x8b\xe4\xba\xa5\xe7\x9c\xb6\xe7\xa2\xbe\xe6\x8b\x89\xe8\x90\x9d\xe7\xbb\x94\xe6\x8d\xb7\xe6\xb5\x8d\xe8\x85\x8b\xe5\xa7\x91\xe8\x8f\x96\xe5\x87\x8c\xe6\xb6\x9e\xe9\xba\xbd\xe9\x94\xa2\xe6\xa1\xa8\xe6\xbd\xa2\xe7\xbb\x8e\xe9\x95\xb0\xe6\xae\x86\xe9\x94\x91\xe6\xb8\x9d\xe9\x93\xac\xe5\x9b\xb0\xe7\xbb\xbd\xe8\xa7\x8e\xe5\x8c\x88\xe7\xb3\x99\xe6\x9a\x91\xe8\xa3\xb9\xe9\xb8\x9f\xe7\x9b\x94\xe8\x82\xbd\xe8\xbf\xb7\xe7\xb6\xa6\xe3\x80\x8e\xe4\xba\xb3\xe4\xbd\x9d\xe4\xbf\x98\xe9\x92\xb4\xe8\xa7\x87\xe9\xaa\xa5\xe4\xbb\x86\xe7\x96\x9d\xe8\xb7\xaa\xe5\xa9\xb6\xe9\x83\xaf\xe7\x80\xb9\xe5\x94\x89\xe8\x84\x96\xe8\xb8\x9e\xe9\x92\x88\xe6\x99\xbe\xe5\xbf\x92\xe6\x89\xbc\xe7\x9e\xa9\xe5\x8f\x9b\xe6\xa4\x92\xe7\x96\x9f\xe5\x97\xa1\xe9\x82\x97\xe8\x82\x86\xe8\xb7\x86\xe7\x8e\xab\xe5\xbf\xa1\xe6\x8d\xa3\xe5\x92\xa7\xe5\x94\x86\xe8\x89\x84\xe8\x98\x91\xe6\xbd\xa6\xe7\xac\x9b\xe9\x98\x9a\xe6\xb2\xb8\xe6\xb3\xbb\xe6\x8e\x8a\xe8\x8f\xbd\xe8\xb4\xab\xe6\x96\xa5\xe9\xab\x82\xe5\xad\xa2\xe9\x95\x82\xe8\xb5\x82\xe9\xba\x9d\xe9\xb8\xbe\xe5\xb1\xa1\xe8\xa1\xac\xe8\x8b\xb7\xe6\x81\xaa\xe5\x8f\xa0\xe5\xb8\x8c\xe7\xb2\xa4\xe7\x88\xbb\xe5\x96\x9d\xe8\x8c\xab\xe6\x83\xac\xe9\x83\xb8\xe7\xbb\xbb\xe5\xba\xb8\xe6\x92\x85\xe7\xa2\x9f\xe5\xae\x84\xe5\xa6\xb9\xe8\x86\x9b\xe5\x8f\xae\xe9\xa5\xb5\xe5\xb4\x9b\xe5\x97\xb2\xe6\xa4\x85\xe5\x86\xa4\xe6\x90\x85\xe5\x92\x95\xe6\x95\x9b\xe5\xb0\xb9\xe5\x9e\xa6\xe9\x97\xb7\xe8\x9d\x89\xe9\x9c\x8e\xe5\x8b\xb0\xe8\xb4\xa5\xe8\x93\x91\xe6\xb3\xb8\xe8\x82\xa4\xe9\xb9\x8c\xe5\xb9\x8c\xe7\x84\xa6\xe6\xb5\xa0\xe9\x9e\x8d\xe5\x88\x81\xe8\x88\xb0\xe4\xb9\x99\xe7\xab\xbf\xe8\xa3\x94\xe3\x80\x82\xe8\x8c\xb5\xe5\x87\xbd\xe4\xbc\x8a\xe5\x85\x84\xe4\xb8\xa8\xe5\xa8\x9c\xe5\x8c\x8d\xe8\xac\x87\xe8\x8e\xaa\xe5\xae\xa5\xe4\xbc\xbc\xe8\x9d\xbd\xe7\xbf\xb3\xe9\x85\xaa\xe7\xbf\xa0\xe7\xb2\x91\xe8\x96\x87\xe7\xa5\xa2\xe9\xaa\x8f\xe8\xb5\xa0\xe5\x8f\xabQ\xe5\x99\xa4\xe5\x99\xbb\xe7\xab\x96\xe8\x8a\x97\xe8\x8e\xa0\xe6\xbd\xad\xe4\xbf\x8a\xe7\xbe\xbf\xe8\x80\x9cO\xe9\x83\xab\xe8\xb6\x81\xe5\x97\xaa\xe5\x9b\x9a\xe8\xb9\xb6\xe8\x8a\x92\xe6\xb4\x81\xe7\xac\x8b\xe9\xb9\x91\xe6\x95\xb2\xe7\xa1\x9d\xe5\x95\xb6\xe5\xa0\xa1\xe6\xb8\xb2\xe6\x8f\xa9\xe3\x80\x8f\xe6\x90\xba\xe5\xae\xbf\xe9\x81\x92\xe9\xa2\x8d\xe6\x89\xad\xe6\xa3\xb1\xe5\x89\xb2\xe8\x90\x9c\xe8\x94\xb8\xe8\x91\xb5\xe7\x90\xb4\xe6\x8d\x82\xe9\xa5\xb0\xe8\xa1\x99\xe8\x80\xbf\xe6\x8e\xa0\xe5\x8b\x9f\xe5\xb2\x82\xe7\xaa\x96\xe6\xb6\x9f\xe8\x94\xba\xe7\x98\xa4\xe6\x9f\x9e\xe7\x9e\xaa\xe6\x80\x9c\xe5\x8c\xb9\xe8\xb7\x9d\xe6\xa5\x94\xe7\x82\x9c\xe5\x93\x86\xe7\xa7\xa6\xe7\xbc\x8e\xe5\xb9\xbc\xe8\x8c\x81\xe7\xbb\xaa\xe7\x97\xa8\xe6\x81\xa8\xe6\xa5\xb8\xe5\xa8\x85\xe7\x93\xa6\xe6\xa1\xa9\xe9\x9b\xaa\xe5\xac\xb4\xe4\xbc\x8f\xe6\xa6\x94\xe5\xa6\xa5\xe9\x93\xbf\xe6\x8b\x8c\xe7\x9c\xa0\xe9\x9b\x8d\xe7\xbc\x87\xe2\x80\x98\xe5\x8d\x93\xe6\x90\x93\xe5\x93\x8c\xe8\xa7\x9e\xe5\x99\xa9\xe5\xb1\x88\xe5\x93\xa7\xe9\xab\x93\xe5\x92\xa6\xe5\xb7\x85\xe5\xa8\x91\xe4\xbe\x91\xe6\xb7\xab\xe8\x86\xb3\xe7\xa5\x9d\xe5\x8b\xbe\xe5\xa7\x8a\xe8\x8e\xb4\xe8\x83\x84\xe7\x96\x83\xe8\x96\x9b\xe8\x9c\xb7\xe8\x83\x9b\xe5\xb7\xb7\xe8\x8a\x99\xe8\x8a\x8b\xe7\x86\x99\xe9\x97\xb0\xe5\x8b\xbf\xe7\xaa\x83\xe7\x8b\xb1\xe5\x89\xa9\xe9\x92\x8f\xe5\xb9\xa2\xe9\x99\x9f\xe9\x93\x9b\xe6\x85\xa7\xe9\x9d\xb4\xe8\x80\x8dk\xe6\xb5\x99\xe6\xb5\x87\xe9\xa3\xa8\xe6\x83\x9f\xe7\xbb\x97\xe7\xa5\x9c\xe6\xbe\x88\xe5\x95\xbc\xe5\x92\xaa\xe7\xa3\xb7\xe6\x91\x9e\xe8\xaf\x85\xe9\x83\xa6\xe6\x8a\xb9\xe8\xb7\x83\xe5\xa3\xac\xe5\x90\x95\xe8\x82\x96\xe7\x90\x8f\xe9\xa2\xa4\xe5\xb0\xb4\xe5\x89\xa1\xe6\x8a\xa0\xe5\x87\x8b\xe8\xb5\x9a\xe6\xb3\x8a\xe6\xb4\xa5\xe5\xae\x95\xe6\xae\xb7\xe5\x80\x94\xe6\xb0\xb2\xe6\xbc\xab\xe9\x82\xba\xe6\xb6\x8e\xe6\x80\xa0$\xe5\x9e\xae\xe8\x8d\xac\xe9\x81\xb5\xe4\xbf\x8f\xe5\x8f\xb9\xe5\x99\xa2\xe9\xa5\xbd\xe8\x9c\x98\xe5\xad\x99\xe7\xad\xb5\xe7\x96\xbc\xe9\x9e\xad\xe7\xbe\xa7\xe7\x89\xa6\xe7\xae\xad\xe6\xbd\xb4c\xe7\x9c\xb8\xe7\xa5\xad\xe9\xab\xaf\xe5\x95\x96\xe5\x9d\xb3\xe6\x84\x81\xe8\x8a\xa9\xe9\xa9\xae\xe5\x80\xa1\xe5\xb7\xbd\xe7\xa9\xb0\xe6\xb2\x83\xe8\x83\x9a\xe6\x80\x92\xe5\x87\xa4\xe6\xa7\x9b\xe5\x89\x82\xe8\xb6\xb5\xe5\xab\x81v\xe9\x82\xa2\xe7\x81\xaf\xe9\x84\xa2\xe6\xa1\x90\xe7\x9d\xbd\xe6\xaa\x97\xe9\x94\xaf\xe6\xa7\x9f\xe5\xa9\xb7\xe5\xb5\x8b\xe5\x9c\xbb\xe8\xaf\x97\xe8\x95\x88\xe9\xa2\xa0\xe9\x81\xad\xe7\x97\xa2\xe8\x8a\xb8\xe6\x80\xaf\xe9\xa6\xa5\xe7\xab\xad\xe9\x94\x97\xe5\xbe\x9c\xe6\x81\xad\xe9\x81\x8d\xe7\xb1\x81\xe5\x89\x91\xe5\x98\xb1\xe8\x8b\xa1\xe9\xbe\x84\xe5\x83\xa7\xe6\xa1\x91\xe6\xbd\xb8\xe5\xbc\x98\xe6\xbe\xb6\xe6\xa5\xb9\xe6\x82\xb2\xe8\xae\xab\xe6\x84\xa4\xe8\x85\xa5\xe6\x82\xb8\xe8\xb0\x8d\xe6\xa4\xb9\xe5\x91\xa2\xe6\xa1\x93\xe8\x91\xad\xe6\x94\xab\xe9\x98\x80\xe7\xbf\xb0\xe8\xba\xb2\xe6\x95\x96\xe6\x9f\x91\xe9\x83\x8e\xe7\xac\xa8\xe6\xa9\x87\xe5\x91\x83\xe9\xad\x81\xe7\x87\x8e\xe8\x84\x93\xe8\x91\xa9\xe7\xa3\x8b\xe5\x9e\x9b\xe7\x8e\xba\xe7\x8b\xae\xe6\xb2\x93\xe7\xa0\x9c\xe8\x95\x8a\xe9\x94\xba\xe7\xbd\xb9\xe8\x95\x89\xe7\xbf\xb1\xe8\x99\x90\xe9\x97\xbe\xe5\xb7\xab\xe6\x97\xa6\xe8\x8c\xb1\xe5\xac\xb7\xe6\x9e\xaf\xe9\xb9\x8f\xe8\xb4\xa1\xe8\x8a\xb9\xe6\xb1\x9b\xe7\x9f\xab\xe7\xbb\x81\xe6\x8b\xa3\xe7\xa6\xba\xe4\xbd\x83\xe8\xae\xa3\xe8\x88\xab\xe6\x83\xaf\xe4\xb9\xb3\xe8\xb6\x8b\xe7\x96\xb2\xe6\x8c\xbd\xe5\xb2\x9a\xe8\x99\xbe\xe8\xa1\xbe\xe8\xa0\xb9\xe8\xb9\x82\xe9\xa3\x93\xe6\xb0\xa6\xe9\x93\x96\xe5\xad\xa9\xe7\xa8\x9e\xe7\x91\x9c\xe5\xa3\x85\xe6\x8e\x80\xe5\x8b\x98\xe5\xa6\x93\xe7\x95\x85\xe9\xab\x8bW\xe5\xba\x90\xe7\x89\xb2\xe8\x93\xbf\xe6\xa6\x95\xe7\xbb\x83\xe5\x9e\xa3\xe5\x94\xb1\xe9\x82\xb8\xe8\x8f\xb2\xe6\x98\x86\xe5\xa9\xba\xe7\xa9\xbf\xe7\xbb\xa1\xe9\xba\x92\xe8\x9a\xb1\xe6\x8e\x82\xe6\x84\x9a\xe6\xb3\xb7\xe6\xb6\xaa\xe6\xbc\xb3\xe5\xa6\xa9\xe5\xa8\x89\xe6\xa6\x84\xe8\xae\xb7\xe8\xa7\x85\xe6\x97\xa7\xe8\x97\xa4\xe7\x85\xae\xe5\x91\x9b\xe6\x9f\xb3\xe8\x85\x93\xe5\x8f\xad\xe5\xba\xb5\xe7\x83\xb7\xe9\x98\xa1\xe7\xbd\x82\xe8\x9c\x95\xe6\x93\x82\xe7\x8c\x96\xe5\x92\xbf\xe5\xaa\xb2\xe8\x84\x89\xe3\x80\x90\xe6\xb2\x8f\xe8\xb2\x85\xe9\xbb\xa0\xe7\x86\x8f\xe5\x93\xb2\xe7\x83\x81\xe5\x9d\xa6\xe9\x85\xb5\xe5\x85\x9c\xc3\x97\xe6\xbd\x87\xe6\x92\x92\xe5\x89\xbd\xe7\x8f\xa9\xe5\x9c\xb9\xe4\xb9\xbe\xe6\x91\xb8\xe6\xa8\x9f\xe5\xb8\xbd\xe5\x97\x92\xe8\xa5\x84\xe9\xad\x82\xe8\xbd\xbf\xe6\x86\xac\xe9\x94\xa1\xe3\x80\x95\xe5\x96\x83\xe7\x9a\x86\xe5\x92\x96\xe9\x9a\x85\xe8\x84\xb8\xe6\xae\x8b\xe6\xb3\xae\xe8\xa2\x82\xe9\xb9\x82\xe7\x8f\x8a\xe5\x9b\xa4\xe6\x8d\x86\xe5\x92\xa4\xe8\xaf\xaf\xe5\xbe\xa8\xe9\x97\xb9\xe6\xb7\x99\xe8\x8a\x8a\xe6\xb7\x8b\xe6\x80\x86\xe5\x9b\x97\xe6\x8b\xa8\xe6\xa2\xb3\xe6\xb8\xa4RG\xe7\xbb\xa8\xe8\x9a\x93\xe5\xa9\x80\xe5\xb9\xa1\xe7\x8b\xa9\xe9\xba\xbe\xe8\xb0\xa2\xe5\x94\xa2\xe8\xa3\xb8\xe6\x97\x8c\xe4\xbc\x89\xe7\xba\xb6\xe8\xa3\x82\xe9\xa9\xb3\xe7\xa0\xbc\xe5\x92\x9b\xe6\xbe\x84\xe6\xa8\xa8\xe8\xb9\x88\xe5\xae\x99\xe6\xbe\x8d\xe5\x80\x8d\xe8\xb2\x94\xe6\x93\x8d\xe5\x8b\x87\xe8\x9f\xa0\xe6\x91\x88\xe7\xa0\xa7\xe8\x99\xac\xe5\xa4\x9f\xe7\xbc\x81\xe6\x82\xa6\xe8\x97\xbf\xe6\x92\xb8\xe8\x89\xb9\xe6\x91\x81\xe6\xb7\xb9\xe8\xb1\x87\xe8\x99\x8e\xe6\xa6\xad\xcb\x89\xe5\x90\xb1d\xc2\xb0\xe5\x96\xa7\xe8\x8d\x80\xe8\xb8\xb1\xe4\xbe\xae\xe5\xa5\x8b\xe5\x81\x95\xe9\xa5\xb7\xe7\x8a\x8d\xe6\x83\xae\xe5\x9d\x91\xe7\x92\x8e\xe5\xbe\x98\xe5\xae\x9b\xe5\xa6\x86\xe8\xa2\x88\xe5\x80\xa9\xe7\xaa\xa6\xe6\x98\x82\xe8\x8d\x8f\xe4\xb9\x96K\xe6\x80\x85\xe6\x92\xb0\xe9\xb3\x99\xe7\x89\x99\xe8\xa2\x81\xe9\x85\x9eX\xe7\x97\xbf\xe7\x90\xbc\xe9\x97\xb8\xe9\x9b\x81\xe8\xb6\xbe\xe8\x8d\x9a\xe8\x99\xbb\xe6\xb6\x9d\xe3\x80\x8a\xe6\x9d\x8f\xe9\x9f\xad\xe5\x81\x88\xe7\x83\xa4\xe7\xbb\xab\xe9\x9e\x98\xe5\x8d\x89\xe7\x97\x87\xe9\x81\xa2\xe8\x93\xa5\xe8\xaf\x8b\xe6\x9d\xad\xe8\x8d\xa8\xe5\x8c\x86\xe7\xab\xa3\xe7\xb0\xaa\xe8\xbe\x99\xe6\x95\x95\xe8\x99\x9e\xe4\xb8\xb9\xe7\xbc\xad\xe5\x92\xa9\xe9\xbb\x9fm\xe6\xb7\xa4\xe7\x91\x95\xe5\x92\x82\xe9\x93\x89\xe7\xa1\xbc\xe8\x8c\xa8\xe5\xb6\x82\xe7\x97\x92\xe7\x95\xb8\xe6\x95\xac\xe6\xb6\xbf\xe7\xb2\xaa\xe7\xaa\x98\xe7\x86\x9f\xe5\x8f\x94\xe5\xab\x94\xe7\x9b\xbe\xe5\xbf\xb1\xe8\xa3\x98\xe6\x86\xbe\xe6\xa2\xb5\xe8\xb5\xa1\xe7\x8f\x99\xe5\x92\xaf\xe5\xa8\x98\xe5\xba\x99\xe6\xba\xaf\xe8\x83\xba\xe8\x91\xb1\xe7\x97\xaa\xe6\x91\x8a\xe8\x8d\xb7\xe5\x8d\x9e\xe4\xb9\x92\xe9\xab\xa6\xe5\xaf\x90\xe9\x93\xad\xe5\x9d\xa9\xe8\x83\x97\xe6\x9e\xb7\xe7\x88\x86\xe6\xba\x9f\xe5\x9a\xbc\xe7\xbe\x9a\xe7\xa0\xac\xe8\xbd\xa8\xe6\x83\x8a\xe6\x8c\xa0\xe7\xbd\x84\xe7\xab\xbd\xe8\x8f\x8f\xe6\xb0\xa7\xe6\xb5\x85\xe6\xa5\xa3\xe7\x9b\xbc\xe6\x9e\xa2\xe7\x82\xb8\xe9\x98\x86\xe6\x9d\xaf\xe8\xb0\x8f\xe5\x99\xac\xe6\xb7\x87\xe6\xb8\xba\xe4\xbf\xaa\xe7\xa7\x86\xe5\xa2\x93\xe6\xb3\xaa\xe8\xb7\xbb\xe7\xa0\x8c\xe7\x97\xb0\xe5\x9e\xa1\xe6\xb8\xa1\xe8\x80\xbd\xe9\x87\x9c\xe8\xae\xb6\xe9\xb3\x8e\xe7\x85\x9e\xe5\x91\x97\xe9\x9f\xb6\xe8\x88\xb6\xe7\xbb\xb7\xe9\xb9\xb3\xe7\xbc\x9c\xe6\x97\xb7\xe9\x93\x8a\xe7\x9a\xb1\xe9\xbe\x8c\xe6\xaa\x80\xe9\x9c\x96\xe5\xa5\x84\xe6\xa7\x90\xe8\x89\xb3\xe8\x9d\xb6\xe6\x97\x8b\xe5\x93\x9d\xe8\xb5\xb6\xe9\xaa\x9e\xe8\x9a\xa7\xe8\x85\x8a\xe7\x9b\x88\xe4\xb8\x81`\xe8\x9c\x9a\xe7\x9f\xb8\xe8\x9d\x99\xe7\x9d\xa8\xe5\x9a\x93\xe5\x83\xbb\xe9\xac\xbc\xe9\x86\xb4\xe5\xa4\x9c\xe5\xbd\x9d\xe7\xa3\x8a\xe7\xac\x94\xe6\x8b\x94\xe6\xa0\x80\xe7\xb3\x95\xe5\x8e\xa6\xe9\x82\xb0\xe7\xba\xab\xe9\x80\xad\xe7\xba\xa4\xe7\x9c\xa6\xe8\x86\x8a\xe9\xa6\x8d\xe8\xba\x87\xe7\x83\xaf\xe8\x98\xbc\xe5\x86\xac\xe8\xaf\xa4\xe6\x9a\x84\xe9\xaa\xb6\xe5\x93\x91\xe7\x98\xa0\xe3\x80\x8d\xe8\x87\x8a\xe4\xb8\x95\xe6\x84\x88\xe5\x92\xb1\xe8\x9e\xba\xe6\x93\x85\xe8\xb7\x8b\xe6\x90\x8f\xe7\xa1\xaa\xe8\xb0\x84\xe7\xac\xa0\xe6\xb7\xa1\xe5\x98\xbf\xe9\xaa\x85\xe8\xb0\xa7\xe9\xbc\x8e\xe7\x9a\x8b\xe5\xa7\x9a\xe6\xad\xbc\xe8\xa0\xa2\xe9\xa9\xbc\xe8\x80\xb3\xe8\x83\xac\xe6\x8c\x9d\xe6\xb6\xaf\xe7\x8b\x97\xe8\x92\xbd\xe5\xad\x93\xe7\x8a\xb7\xe5\x87\x89\xe8\x8a\xa6\xe7\xae\xb4\xe9\x93\xa4\xe5\xad\xa4\xe5\x98\x9b\xe5\x9d\xa4V\xe8\x8c\xb4\xe6\x9c\xa6\xe6\x8c\x9e\xe5\xb0\x96\xe6\xa9\x99\xe8\xaf\x9e\xe6\x90\xb4\xe7\xa2\x87\xe6\xb4\xb5\xe6\xb5\x9a\xe5\xb8\x9a\xe8\x9c\x8d\xe6\xbc\xaf\xe6\x9f\x98\xe5\x9a\x8e\xe8\xae\xbd\xe8\x8a\xad\xe8\x8d\xa4\xe5\x92\xbb\xe7\xa5\xa0\xe7\xa7\x89\xe8\xb7\x96\xe5\x9f\x83\xe5\x90\x93\xe7\xb3\xaf\xe7\x9c\xb7\xe9\xa6\x92\xe6\x83\xb9\xe5\xa8\xbc\xe9\xb2\x91\xe5\xab\xa9\xe8\xae\xb4\xe8\xbd\xae\xe7\x9e\xa5\xe9\x9d\xb6\xe8\xa4\x9a\xe4\xb9\x8f\xe7\xbc\xa4\xe5\xae\x8b\xe5\xb8\xa7\xe5\x88\xa0\xe9\xa9\xb1\xe7\xa2\x8e\xe6\x89\x91\xe4\xbf\xa9\xe4\xbf\x84\xe5\x81\x8f\xe6\xb6\xa3\xe7\xab\xb9\xe5\x99\xb1\xe7\x9a\x99\xe4\xbd\xb0\xe6\xb8\x9a\xe5\x94\xa7\xe6\x96\xa1#\xe9\x95\x89\xe5\x88\x80\xe5\xb4\x8e\xe7\xad\x90\xe4\xbd\xa3\xe5\xa4\xad\xe8\xb4\xb0\xe8\x82\xb4\xe5\xb3\x99\xe5\x93\x94\xe8\x89\xbf\xe5\x8c\x90\xe7\x89\xba\xe9\x95\x9b\xe7\xbc\x98\xe4\xbb\xa1\xe5\xab\xa1\xe5\x8a\xa3\xe6\x9e\xb8\xe5\xa0\x80\xe6\xa2\xa8\xe7\xb0\xbf\xe9\xb8\xad\xe8\x92\xb8\xe4\xba\xa6\xe7\xa8\xbd\xe6\xb5\xb4{\xe8\xa1\xa2\xe6\x9d\x9f\xe6\xa7\xb2j\xe9\x98\x81\xe6\x8f\x8d\xe7\x96\xa5\xe6\xa3\x8b\xe6\xbd\x8b\xe8\x81\xaa\xe7\xaa\x9c\xe4\xb9\x93\xe7\x9d\x9b\xe6\x8f\x92\xe5\x86\x89\xe9\x98\xaa\xe8\x8b\x8d\xe6\x90\xbd\xe3\x80\x8c\xe8\x9f\xbe\xe8\x9e\x9f\xe5\xb9\xb8\xe4\xbb\x87\xe6\xa8\xbd\xe6\x92\x82\xe6\x85\xa2\xe8\xb7\xa4\xe5\xb9\x94\xe4\xbf\x9a\xe6\xb7\x85\xe8\xa6\x83\xe8\xa7\x8a\xe6\xba\xb6\xe5\xa6\x96\xe5\xb8\x9b\xe4\xbe\xa8\xe6\x9b\xb0\xe5\xa6\xbe\xe6\xb3\x97 """"""\n# alphabet = u""""""\'\xe7\x96\x97\xe7\xbb\x9a\xe8\xaf\x9a\xe5\xa8\x87\xe6\xba\x9c\xe9\xa2\x98\xe8\xb4\xbf\xe8\x80\x85\xe5\xbb\x96\xe6\x9b\xb4\xe7\xba\xb3\xe5\x8a\xa0\xe5\xa5\x89\xe5\x85\xac""""""'"
ocr/model.py,0,"b'# -*- coding: utf-8 -*-\n## \xe4\xbf\xae\xe5\xa4\x8dK.ctc_decode bug \xe5\xbd\x93\xe5\xa4\xa7\xe9\x87\x8f\xe6\xb5\x8b\xe8\xaf\x95\xe6\x97\xb6\xe5\xb0\x86GPU\xe6\x98\xbe\xe5\xad\x98\xe6\xb6\x88\xe8\x80\x97\xe5\xae\x8c\xef\xbc\x8c\xe5\xaf\xbc\xe8\x87\xb4\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe7\x94\xa8decode \xe6\x9b\xbf\xe4\xbb\xa3\n###\nimport os,sys\nparentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.append(parentdir)\n# from PIL import Image\nimport keras.backend as K\n\nimport keys_ocr\nimport numpy as np\nfrom keras.layers import Flatten, BatchNormalization, Permute, TimeDistributed, Dense, Bidirectional, GRU\nfrom keras.layers import Input, Conv2D, MaxPooling2D, ZeroPadding2D\nfrom keras.layers import Lambda\nfrom keras.models import Model\nfrom keras.optimizers import SGD\n\n\n# from keras.models import load_model\n\n\ndef ctc_lambda_func(args):\n    y_pred, labels, input_length, label_length = args\n    y_pred = y_pred[:, 2:, :]\n    return K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\n\ndef get_model(height, nclass):\n    rnnunit = 256\n    input = Input(shape=(height, None, 1), name=\'the_input\')\n    m = Conv2D(64, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv1\')(input)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=\'pool1\')(m)\n    m = Conv2D(128, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv2\')(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=\'pool2\')(m)\n    m = Conv2D(256, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv3\')(m)\n    m = Conv2D(256, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv4\')(m)\n\n    m = ZeroPadding2D(padding=(0, 1))(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 1), padding=\'valid\', name=\'pool3\')(m)\n\n    m = Conv2D(512, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv5\')(m)\n    m = BatchNormalization(axis=1)(m)\n    m = Conv2D(512, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv6\')(m)\n    m = BatchNormalization(axis=1)(m)\n    m = ZeroPadding2D(padding=(0, 1))(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 1), padding=\'valid\', name=\'pool4\')(m)\n    m = Conv2D(512, kernel_size=(2, 2), activation=\'relu\', padding=\'valid\', name=\'conv7\')(m)\n    # m\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\xb4\xe5\xba\xa6\xe4\xb8\xbaHWC?\n    # \xe5\xb0\x86\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\xe6\x8c\x89\xe7\x85\xa7\xe7\xbb\x99\xe5\xae\x9a\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe6\x8e\x92\xef\xbc\x8c\xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x8c\xe5\xbd\x93\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86RNN\xe5\x92\x8cCNN\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x97\xb6\xef\xbc\x8c\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe7\x94\xa8\xe5\x88\xb0\xe8\xaf\xa5\xe5\xb1\x82\n    # \xe5\xb0\x86\xe7\xbb\xb4\xe5\xba\xa6\xe8\xbd\xac\xe6\x88\x90WHC\n    m = Permute((2, 1, 3), name=\'permute\')(m)\n    m = TimeDistributed(Flatten(), name=\'timedistrib\')(m)\n\n    m = Bidirectional(GRU(rnnunit, return_sequences=True), name=\'blstm1\')(m)\n    m = Dense(rnnunit, name=\'blstm1_out\', activation=\'linear\')(m)\n    m = Bidirectional(GRU(rnnunit, return_sequences=True), name=\'blstm2\')(m)\n    y_pred = Dense(nclass, name=\'blstm2_out\', activation=\'softmax\')(m)\n\n    basemodel = Model(inputs=input, outputs=y_pred)\n\n    labels = Input(name=\'the_labels\', shape=[None, ], dtype=\'float32\')\n    input_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n    label_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n    loss_out = Lambda(ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n    model = Model(inputs=[input, labels, input_length, label_length], outputs=[loss_out])\n    sgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n    # model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=\'adadelta\')\n    model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n    # model.summary()\n    return model, basemodel\n\n\ncharacters = keys_ocr.alphabet[:]\nmodelPath = os.path.join(os.getcwd(), ""ocr/ocr0.2.h5"")\n# modelPath = \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/save_model/my_model_keras.h5\'\nheight = 32\nnclass=len(characters)+1\nif os.path.exists(modelPath):\n    model, basemodel = get_model(height, nclass)\n    basemodel.load_weights(modelPath)\n    # model.load_weights(modelPath)\n\n\ndef predict(im):\n    """"""\n    \xe8\xbe\x93\xe5\x85\xa5\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xbakeras\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n    """"""\n    im = im.convert(\'L\')\n    scale = im.size[1] * 1.0 / 32\n    w = im.size[0] / scale\n    w = int(w)\n    im = im.resize((w, 32))\n    img = np.array(im).astype(np.float32) / 255.0\n    X = img.reshape((32, w, 1))\n    X = np.array([X])\n    y_pred = basemodel.predict(X)\n    y_pred = y_pred[:, 2:, :]\n    out = decode(y_pred)  ##\n    # out = K.get_value(K.ctc_decode(y_pred, input_length=np.ones(y_pred.shape[0])*y_pred.shape[1], )[0][0])[:, :]\n\n    # out = u\'\'.join([characters[x] for x in out[0]])\n\n    if len(out) > 0:\n        while out[0] == u\'\xe3\x80\x82\':\n            if len(out) > 1:\n                out = out[1:]\n            else:\n                break\n\n    return out\n\n\ndef decode(pred):\n    charactersS = characters + u\' \'\n    t = pred.argmax(axis=2)[0]\n    length = len(t)\n    char_list = []\n    n = len(characters)\n    for i in range(length):\n        if t[i] != n and (not (i > 0 and t[i - 1] == t[i])):\n            char_list.append(charactersS[t[i]])\n    return u\'\'.join(char_list)\n'"
ocr/model_tf.py,0,b''
crnn/models/__init__.py,0,b''
crnn/models/crnn.py,0,"b'import sys\nsys.path.insert(1, ""./crnn"")\nimport torch.nn as nn\nimport utils\n\n\nclass BidirectionalLSTM(nn.Module):\n    def __init__(self, nIn, nHidden, nOut, ngpu):\n        super(BidirectionalLSTM, self).__init__()\n        self.ngpu = ngpu\n\n        self.rnn = nn.LSTM(nIn, nHidden, bidirectional=True)\n        self.embedding = nn.Linear(nHidden * 2, nOut)\n\n    def forward(self, input):\n        recurrent, _ = utils.data_parallel(self.rnn, input,\n                                           self.ngpu)  # [T, b, h * 2]\n\n        T, b, h = recurrent.size()\n        t_rec = recurrent.view(T * b, h)\n        output = utils.data_parallel(self.embedding, t_rec,\n                                     self.ngpu)  # [T * b, nOut]\n        output = output.view(T, b, -1)\n\n        return output\n\n\nclass CRNN(nn.Module):\n    def __init__(self, imgH, nc, nclass, nh, ngpu, n_rnn=2, leakyRelu=False):\n        super(CRNN, self).__init__()\n        self.ngpu = ngpu\n        assert imgH % 16 == 0, \'imgH has to be a multiple of 16\'\n\n        ks = [3, 3, 3, 3, 3, 3, 2]\n        ps = [1, 1, 1, 1, 1, 1, 0]\n        ss = [1, 1, 1, 1, 1, 1, 1]\n        nm = [64, 128, 256, 256, 512, 512, 512]\n\n        cnn = nn.Sequential()\n\n        def convRelu(i, batchNormalization=False):\n            nIn = nc if i == 0 else nm[i - 1]\n            nOut = nm[i]\n            cnn.add_module(\'conv{0}\'.format(i),\n                           nn.Conv2d(nIn, nOut, ks[i], ss[i], ps[i]))\n            if batchNormalization:\n                cnn.add_module(\'batchnorm{0}\'.format(i), nn.BatchNorm2d(nOut))\n            if leakyRelu:\n                cnn.add_module(\'relu{0}\'.format(i),\n                               nn.LeakyReLU(0.2, inplace=True))\n            else:\n                cnn.add_module(\'relu{0}\'.format(i), nn.ReLU(True))\n\n        convRelu(0)\n        cnn.add_module(\'pooling{0}\'.format(0), nn.MaxPool2d(2, 2))  # 64x16x64\n        convRelu(1)\n        cnn.add_module(\'pooling{0}\'.format(1), nn.MaxPool2d(2, 2))  # 128x8x32\n        convRelu(2, True)\n        convRelu(3)\n        cnn.add_module(\'pooling{0}\'.format(2),\n                       nn.MaxPool2d((2, 2), (2, 1), (0, 1)))  # 256x4x16\n        convRelu(4, True)\n        convRelu(5)\n        cnn.add_module(\'pooling{0}\'.format(3),\n                       nn.MaxPool2d((2, 2), (2, 1), (0, 1)))  # 512x2x16\n        convRelu(6, True)  # 512x1x16\n\n        self.cnn = cnn\n        self.rnn = nn.Sequential(\n            BidirectionalLSTM(512, nh, nh, ngpu),\n            BidirectionalLSTM(nh, nh, nclass, ngpu))\n\n    def forward(self, input):\n        # conv features\n        conv = utils.data_parallel(self.cnn, input, self.ngpu)\n        b, c, h, w = conv.size()\n        assert h == 1, ""the height of conv must be 1""\n        conv = conv.squeeze(2)\n        conv = conv.permute(2, 0, 1)  # [w, b, c]\n\n        # rnn features\n        output = utils.data_parallel(self.rnn, conv, self.ngpu)\n\n        return output\n'"
crnn/models/utils.py,0,"b'#!/usr/bin/python\n# encoding: utf-8\n\nimport torch.nn as nn\nimport torch.nn.parallel\n\n\ndef data_parallel(model, input, ngpu):\n    if isinstance(input.data, torch.cuda.FloatTensor) and ngpu > 1:\n        output = nn.parallel.data_parallel(model, input, range(ngpu))\n    else:\n        output = model(input)\n    return output\n'"
ctpn/ctpn/__init__.py,0,b'\n'
ctpn/ctpn/cfg.py,0,"b'import numpy as np\n\n\nclass Config:\n    MEAN = np.float32([102.9801, 115.9465, 122.7717])\n    # MEAN=np.float32([100.0, 100.0, 100.0])\n    TEST_GPU_ID = 0\n    SCALE = 900\n    MAX_SCALE = 1500\n    TEXT_PROPOSALS_WIDTH = 0\n    MIN_RATIO = 0.01\n    LINE_MIN_SCORE = 0.6\n    TEXT_LINE_NMS_THRESH = 0.3\n    MAX_HORIZONTAL_GAP = 30\n    TEXT_PROPOSALS_MIN_SCORE = 0.7\n    TEXT_PROPOSALS_NMS_THRESH = 0.3\n    MIN_NUM_PROPOSALS = 0\n    MIN_V_OVERLAPS = 0.6\n    MIN_SIZE_SIM = 0.6\n'"
ctpn/ctpn/demo.py,3,"b'import glob\nimport os\nimport shutil\nimport sys\n\nimport cv2\nimport numpy as np\nimport tensorflow as tf\n\nparentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.append(parentdir)\n\nfrom lib.networks.factory import get_network\nfrom lib.fast_rcnn.config import cfg\nfrom lib.fast_rcnn.test import test_ctpn\nfrom lib.fast_rcnn.nms_wrapper import nms\nfrom lib.utils.timer import Timer\nfrom text_proposal_connector import TextProposalConnector\n\nCLASSES = (\'__background__\', \'text\')\n\n\ndef connect_proposal(text_proposals, scores, im_size):\n    cp = TextProposalConnector()\n    line = cp.get_text_lines(text_proposals, scores, im_size)\n    return line\n\n\ndef save_results(image_name, im, line, thresh):\n    inds = np.where(line[:, -1] >= thresh)[0]\n    if len(inds) == 0:\n        return\n\n    for i in inds:\n        bbox = line[i, :4]\n        score = line[i, -1]\n        cv2.rectangle(\n            im, (bbox[0], bbox[1]), (bbox[2], bbox[3]),\n            color=(0, 0, 255),\n            thickness=1)\n    image_name = image_name.split(\'/\')[-1]\n    cv2.imwrite(os.path.join(""../data/results"", image_name), im)\n\n\ndef check_img(im):\n    im_size = im.shape\n    if max(im_size[0:2]) < 600:\n        img = np.zeros((600, 600, 3), dtype=np.uint8)\n        start_row = int((600 - im_size[0]) / 2)\n        start_col = int((600 - im_size[1]) / 2)\n        end_row = start_row + im_size[0]\n        end_col = start_col + im_size[1]\n        img[start_row:end_row, start_col:end_col, :] = im\n        return img\n    else:\n        return im\n\n\ndef ctpn(sess, net, image_name):\n    img = cv2.imread(image_name)\n    im = check_img(img)\n    timer = Timer()\n    timer.tic()\n    scores, boxes = test_ctpn(sess, net, im)\n    timer.toc()\n    # print(\'Detection took {:.3f}s for \'\n    #       \'{:d} object proposals\').format(timer.total_time, boxes.shape[0])\n\n    # Visualize detections for each class\n    CONF_THRESH = 0.9\n    NMS_THRESH = 0.3\n    dets = np.hstack((boxes, scores[:, np.newaxis])).astype(np.float32)\n    keep = nms(dets, NMS_THRESH)\n    dets = dets[keep, :]\n\n    keep = np.where(dets[:, 4] >= 0.7)[0]\n    dets = dets[keep, :]\n    line = connect_proposal(dets[:, 0:4], dets[:, 4], im.shape)\n    save_results(image_name, im, line, thresh=0.9)\n\n\nif __name__ == \'__main__\':\n    if os.path.exists(""../data/results/""):\n        shutil.rmtree(""../data/results/"")\n    os.makedirs(""../data/results/"")\n\n    cfg.TEST.HAS_RPN = True  # Use RPN for proposals\n    # init session\n    config = tf.ConfigProto(allow_soft_placement=True)\n    sess = tf.Session(config=config)\n    # load network\n    net = get_network(""VGGnet_test"")\n    # load model\n    print(\'Loading network {:s}... \'.format(""VGGnet_test"")),\n    saver = tf.train.Saver()\n    # saver.restore(sess,\n    #               os.path.join(os.getcwd(), ""checkpoints/model_final.ckpt""))\n    saver.restore(sess,\n                  os.path.join(os.getcwd(),\n                               ""/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/ctpn/checkpoints/VGGnet_fast_rcnn_iter_50000.ckpt""))\n    print(\' done.\')\n\n    # Warmup on a dummy image\n    im = 128 * np.ones((300, 300, 3), dtype=np.uint8)\n    for i in range(2):\n        _, _ = test_ctpn(sess, net, im)\n\n    im_names = glob.glob(os.path.join(cfg.DATA_DIR, \'demo\', \'*.png\')) + \\\n               glob.glob(os.path.join(cfg.DATA_DIR, \'demo\', \'*.jpg\'))\n\n    for im_name in im_names:\n        print(\'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\')\n        print(\'Demo for {:s}\'.format(im_name))\n        ctpn(sess, net, im_name)\n'"
ctpn/ctpn/detectors.py,0,"b'# coding:utf-8\nimport sys\n\nimport numpy as np\n\nfrom .cfg import Config as cfg\nfrom .other import normalize\n\nsys.path.append(\'..\')\nfrom ..lib.fast_rcnn.nms_wrapper import nms\n# from lib.fast_rcnn.test import  test_ctpn\n\nfrom .text_proposal_connector import TextProposalConnector\n\n\nclass TextDetector:\n    """"""\n        Detect text from an image\n    """"""\n\n    def __init__(self):\n        """"""\n        pass\n        """"""\n        self.text_proposal_connector = TextProposalConnector()\n\n    def detect(self, text_proposals, scores, size):\n        """"""\n        Detecting texts from an image\n        :return: the bounding boxes of the detected texts\n        """"""\n        # text_proposals, scores=self.text_proposal_detector.detect(im, cfg.MEAN)\n        keep_inds = np.where(scores > cfg.TEXT_PROPOSALS_MIN_SCORE)[0]\n        text_proposals, scores = text_proposals[keep_inds], scores[keep_inds]\n\n        sorted_indices = np.argsort(scores.ravel())[::-1]\n        text_proposals, scores = text_proposals[sorted_indices], scores[sorted_indices]\n\n        # nms for text proposals\n        keep_inds = nms(np.hstack((text_proposals, scores)), cfg.TEXT_PROPOSALS_NMS_THRESH)\n        text_proposals, scores = text_proposals[keep_inds], scores[keep_inds]\n\n        scores = normalize(scores)\n\n        text_lines = self.text_proposal_connector.get_text_lines(text_proposals, scores, size)\n\n        keep_inds = self.filter_boxes(text_lines)\n        text_lines = text_lines[keep_inds]\n\n        if text_lines.shape[0] != 0:\n            keep_inds = nms(text_lines, cfg.TEXT_LINE_NMS_THRESH)\n            text_lines = text_lines[keep_inds]\n\n        return text_lines\n\n    def filter_boxes(self, boxes):\n        heights = boxes[:, 3] - boxes[:, 1] + 1\n        widths = boxes[:, 2] - boxes[:, 0] + 1\n        scores = boxes[:, -1]\n        return np.where((widths / heights > cfg.MIN_RATIO) & (scores > cfg.LINE_MIN_SCORE) &\n                        (widths > (cfg.TEXT_PROPOSALS_WIDTH * cfg.MIN_NUM_PROPOSALS)))[0]\n'"
ctpn/ctpn/model.py,6,"b'import sys\nimport os\n\nimport tensorflow as tf\n\nfrom .cfg import Config\nfrom .other import resize_im\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), \'..\', \'..\'))\n\n\nsys.path.append(os.getcwd())\nfrom lib.fast_rcnn.config import cfg\nfrom lib.networks.factory import get_network\nfrom lib.fast_rcnn.test import test_ctpn\n\n# from ..lib.networks.factory import get_network\n# from ..lib.fast_rcnn.config import cfg\n# from..lib.fast_rcnn.test import test_ctpn\n\'\'\'\nload network\n\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\xba\'Net_model\'\n\'VGGnet_test\'--test\n\'VGGnet_train\'-train\n\'\'\'\n\n\ndef load_tf_model():\n    cfg.TEST.HAS_RPN = True  # Use RPN for proposals\n    # init session\n    config = tf.ConfigProto(allow_soft_placement=True)\n    net = get_network(""VGGnet_test"")\n    # load model\n    saver = tf.train.Saver()\n    # sess = tf.Session(config=config)\n    sess = tf.Session()\n    ckpt_path = \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/ctpn/ctpn/retrain/ckpt\'\n    ckpt = tf.train.get_checkpoint_state(ckpt_path)\n    reader = tf.train.NewCheckpointReader(ckpt.model_checkpoint_path)\n    var_to_shape_map = reader.get_variable_to_shape_map()\n    for key in var_to_shape_map:\n        print(""Tensor_name is : "", key)\n        # print(reader.get_tensor(key))\n    saver.restore(sess, ckpt.model_checkpoint_path)\n    print(""load vggnet done"")\n    return sess, saver, net\n\n\n\n# init model\nsess, saver, net = load_tf_model()\n\n\n# \xe8\xbf\x9b\xe8\xa1\x8c\xe6\x96\x87\xe6\x9c\xac\xe8\xaf\x86\xe5\x88\xab\ndef ctpn(img):\n    """"""\n    text box detect\n    """"""\n    scale, max_scale = Config.SCALE, Config.MAX_SCALE\n    # \xe5\xaf\xb9\xe5\x9b\xbe\xe5\x83\x8f\xe8\xbf\x9b\xe8\xa1\x8cresize\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe5\x9b\xbe\xe5\x83\x8f\xe9\x95\xbf\xe5\xae\xbd\n    img, f = resize_im(img, scale=scale, max_scale=max_scale)\n    scores, boxes = test_ctpn(sess, net, img)\n    return scores, boxes, img\n'"
ctpn/ctpn/other.py,0,"b'import cv2\nimport numpy as np\nfrom matplotlib import cm\n\n\ndef prepare_img(im, mean):\n    """"""\n        transform img into caffe\'s input img.\n    """"""\n    im_data = np.transpose(im - mean, (2, 0, 1))\n    return im_data\n\n\ndef draw_boxes(im,\n               bboxes,\n               is_display=True,\n               color=None,\n               caption=""Image"",\n               wait=True):\n    """"""\n        boxes: bounding boxes\n    """"""\n    text_recs = np.zeros((len(bboxes), 8), np.int)\n\n    im = im.copy()\n    index = 0\n    for box in bboxes:\n        if color == None:\n            if len(box) == 8 or len(box) == 9:\n                c = tuple(cm.jet([box[-1]])[0, 2::-1] * 255)\n            else:\n                c = tuple(np.random.randint(0, 256, 3))\n        else:\n            c = color\n\n        b1 = box[6] - box[7] / 2\n        b2 = box[6] + box[7] / 2\n        x1 = box[0]\n        y1 = box[5] * box[0] + b1\n        x2 = box[2]\n        y2 = box[5] * box[2] + b1\n        x3 = box[0]\n        y3 = box[5] * box[0] + b2\n        x4 = box[2]\n        y4 = box[5] * box[2] + b2\n\n        disX = x2 - x1\n        disY = y2 - y1\n        width = np.sqrt(disX * disX + disY * disY)\n        fTmp0 = y3 - y1\n        fTmp1 = fTmp0 * disY / width\n        x = np.fabs(fTmp1 * disX / width)\n        y = np.fabs(fTmp1 * disY / width)\n        if box[5] < 0:\n            x1 -= x\n            y1 += y\n            x4 += x\n            y4 -= y\n        else:\n            x2 += x\n            y2 += y\n            x3 -= x\n            y3 -= y\n        cv2.line(im, (int(x1), int(y1)), (int(x2), int(y2)), c, 2)\n        cv2.line(im, (int(x1), int(y1)), (int(x3), int(y3)), c, 2)\n        cv2.line(im, (int(x4), int(y4)), (int(x2), int(y2)), c, 2)\n        cv2.line(im, (int(x3), int(y3)), (int(x4), int(y4)), c, 2)\n        text_recs[index, 0] = x1\n        text_recs[index, 1] = y1\n        text_recs[index, 2] = x2\n        text_recs[index, 3] = y2\n        text_recs[index, 4] = x3\n        text_recs[index, 5] = y3\n        text_recs[index, 6] = x4\n        text_recs[index, 7] = y4\n        index = index + 1\n        # cv2.rectangle(im, tuple(box[:2]), tuple(box[2:4]), c,2)\n        # cv2.waitKey(0)\n        # cv2.imshow(\'kk\', im)\n        cv2.imwrite(\'/Users/xiaofeng/Code/Github/Chinese-OCR/test/test_result.png\',im)\n\n    return text_recs, im\n\n\ndef threshold(coords, min_, max_):\n    return np.maximum(np.minimum(coords, max_), min_)\n\n\ndef clip_boxes(boxes, im_shape):\n    """"""\n    Clip boxes to image boundaries.\n    """"""\n    boxes[:, 0::2] = threshold(boxes[:, 0::2], 0, im_shape[1] - 1)\n    boxes[:, 1::2] = threshold(boxes[:, 1::2], 0, im_shape[0] - 1)\n    return boxes\n\n\ndef normalize(data):\n    if data.shape[0] == 0:\n        return data\n    max_ = data.max()\n    min_ = data.min()\n    return (data - min_) / (max_ - min_) if max_ - min_ != 0 else data - min_\n\n\ndef resize_im(im, scale, max_scale=None):\n    # \xe6\x8c\x89\xe7\x85\xa7scale\xe5\x92\x8c\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe9\x95\xbf\xe5\xae\xbd\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x9a\x84\xe6\xaf\x94\xe5\x80\xbc\xe4\xbd\x9c\xe4\xb8\xba\xe8\xbe\x93\xe5\x85\xa5\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xb0\xba\xe5\xaf\xb8\n    f = float(scale) / min(im.shape[0], im.shape[1])\n    if max_scale != None and f * max(im.shape[0], im.shape[1]) > max_scale:\n        f = float(max_scale) / max(im.shape[0], im.shape[1])\n    return cv2.resize(im, (0, 0), fx=f, fy=f), f\n    # return cv2.resize(im, (0, 0), fx=1.2, fy=1.2), f\n\n\nclass Graph:\n    def __init__(self, graph):\n        self.graph = graph\n\n    def sub_graphs_connected(self):\n        sub_graphs = []\n        for index in range(self.graph.shape[0]):\n            if not self.graph[:, index].any() and self.graph[index, :].any():\n                v = index\n                sub_graphs.append([v])\n                while self.graph[v, :].any():\n                    v = np.where(self.graph[v, :])[0][0]\n                    sub_graphs[-1].append(v)\n        return sub_graphs\n'"
ctpn/ctpn/text_proposal_connector.py,0,"b'import numpy as np\nimport os, sys\nparentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.append(parentdir)\n\nfrom .text_proposal_graph_builder import TextProposalGraphBuilder\n\n\nclass TextProposalConnector:\n    """"""\n        Connect text proposals into text lines\n    """"""\n\n    def __init__(self):\n        self.graph_builder = TextProposalGraphBuilder()\n\n    def group_text_proposals(self, text_proposals, scores, im_size):\n        graph = self.graph_builder.build_graph(text_proposals, scores, im_size)\n        return graph.sub_graphs_connected()\n\n    def fit_y(self, X, Y, x1, x2):\n        len(X) != 0\n        # if X only include one point, the function will get line y=Y[0]\n        if np.sum(X == X[0]) == len(X):\n            return Y[0], Y[0]\n        p = np.poly1d(np.polyfit(X, Y, 1))\n        return p(x1), p(x2)\n\n    def get_text_lines(self, text_proposals, scores, im_size):\n        """"""\n        text_proposals:boxes\n        \n        """"""\n        # tp=text proposal\n        tp_groups = self.group_text_proposals(text_proposals, scores,\n                                              im_size)  ##find the text line\n\n        text_lines = np.zeros((len(tp_groups), 8), np.float32)\n\n        for index, tp_indices in enumerate(tp_groups):\n            text_line_boxes = text_proposals[list(tp_indices)]\n            num = np.size(text_line_boxes)  ##find\n            X = (text_line_boxes[:, 0] + text_line_boxes[:, 2]) / 2\n            Y = (text_line_boxes[:, 1] + text_line_boxes[:, 3]) / 2\n\n            z1 = np.polyfit(X, Y, 1)\n            p1 = np.poly1d(z1)\n\n            x0 = np.min(text_line_boxes[:, 0])\n            x1 = np.max(text_line_boxes[:, 2])\n\n            offset = (text_line_boxes[0, 2] - text_line_boxes[0, 0]) * 0.5\n\n            lt_y, rt_y = self.fit_y(text_line_boxes[:, 0],\n                                    text_line_boxes[:, 1], x0 + offset,\n                                    x1 - offset)\n            lb_y, rb_y = self.fit_y(text_line_boxes[:, 0],\n                                    text_line_boxes[:, 3], x0 + offset,\n                                    x1 - offset)\n\n            # the score of a text line is the average score of the scores\n            # of all text proposals contained in the text line\n            score = scores[list(tp_indices)].sum() / float(len(tp_indices))\n\n            text_lines[index, 0] = x0\n            text_lines[index, 1] = min(lt_y, rt_y)\n            text_lines[index, 2] = x1\n            text_lines[index, 3] = max(lb_y, rb_y)\n            text_lines[index, 4] = score\n            text_lines[index, 5] = z1[0]\n            text_lines[index, 6] = z1[1]\n            height = np.mean((text_line_boxes[:, 3] - text_line_boxes[:, 1]))\n            text_lines[index, 7] = height + 2.5\n        # text_lines=clip_boxes(text_lines, im_size)\n\n        return text_lines\n'"
ctpn/ctpn/text_proposal_graph_builder.py,0,"b'import numpy as np\n\nimport os, sys\nparentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.append(parentdir)\n\nfrom .cfg import Config as cfg\nfrom .other import Graph\n\n\nclass TextProposalGraphBuilder:\n    """"""\n        Build Text proposals into a graph.\n    """"""\n\n    def get_successions(self, index):\n        box = self.text_proposals[index]\n        results = []\n        for left in range(int(box[0]) + 1, min(int(box[0]) + cfg.MAX_HORIZONTAL_GAP + 1, self.im_size[1])):\n            adj_box_indices = self.boxes_table[left]\n            for adj_box_index in adj_box_indices:\n                if self.meet_v_iou(adj_box_index, index):\n                    results.append(adj_box_index)\n            if len(results) != 0:\n                return results\n        return results\n\n    def get_precursors(self, index):\n        box = self.text_proposals[index]\n        results = []\n        for left in range(int(box[0]) - 1, max(int(box[0] - cfg.MAX_HORIZONTAL_GAP), 0) - 1, -1):\n            adj_box_indices = self.boxes_table[left]\n            for adj_box_index in adj_box_indices:\n                if self.meet_v_iou(adj_box_index, index):\n                    results.append(adj_box_index)\n            if len(results) != 0:\n                return results\n        return results\n\n    def is_succession_node(self, index, succession_index):\n        precursors = self.get_precursors(succession_index)\n        if self.scores[index] >= np.max(self.scores[precursors]):\n            return True\n        return False\n\n    def meet_v_iou(self, index1, index2):\n        def overlaps_v(index1, index2):\n            h1 = self.heights[index1]\n            h2 = self.heights[index2]\n            y0 = max(self.text_proposals[index2][1], self.text_proposals[index1][1])\n            y1 = min(self.text_proposals[index2][3], self.text_proposals[index1][3])\n            return max(0, y1 - y0 + 1) / min(h1, h2)\n\n        def size_similarity(index1, index2):\n            h1 = self.heights[index1]\n            h2 = self.heights[index2]\n            return min(h1, h2) / max(h1, h2)\n\n        return overlaps_v(index1, index2) >= cfg.MIN_V_OVERLAPS and \\\n               size_similarity(index1, index2) >= cfg.MIN_SIZE_SIM\n\n    def build_graph(self, text_proposals, scores, im_size):\n        self.text_proposals = text_proposals\n        self.scores = scores\n        self.im_size = im_size\n        self.heights = text_proposals[:, 3] - text_proposals[:, 1] + 1\n\n        boxes_table = [[] for _ in range(self.im_size[1])]\n        for index, box in enumerate(text_proposals):\n            boxes_table[int(box[0])].append(index)\n        self.boxes_table = boxes_table\n\n        graph = np.zeros((text_proposals.shape[0], text_proposals.shape[0]), np.bool)\n\n        for index, box in enumerate(text_proposals):\n            successions = self.get_successions(index)\n            if len(successions) == 0:\n                continue\n            succession_index = successions[np.argmax(scores[successions])]\n            if self.is_succession_node(index, succession_index):\n                # NOTE: a box can have multiple successions(precursors) if multiple successions(precursors)\n                # have equal scores.\n                graph[index, succession_index] = True\n        return Graph(graph)\n'"
ctpn/ctpn/train_net.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# _Author_: xiaofeng\n# Date: 2018-04-16 10:55:15\n# Last Modified by: xiaofeng\n# Last Modified time: 2018-04-16 10:55:15\n'''\n\xe4\xbd\xbf\xe7\x94\xa8keras\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe9\x80\x9f\xe5\xba\xa6\xe7\x9b\xb8\xe5\xaf\xb9pytorch\xe6\xaf\x94\xe8\xbe\x83\xe6\x85\xa2\n'''\nimport os.path as osp\nimport pprint\nimport sys\nimport os\n\n# sys.path.append(os.getcwd())\n# this_dir = os.path.dirname(__file__)\nparentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.append(parentdir)\n\nfrom lib.fast_rcnn.train import get_training_roidb, train_net\nfrom lib.fast_rcnn.config import cfg_from_file, get_output_dir, get_log_dir\nfrom lib.datasets.factory import get_imdb\nfrom lib.networks.factory import get_network\nfrom lib.fast_rcnn.config import cfg\n\nif __name__ == '__main__':\n    # \xe5\xb0\x86text.yml\xe7\x9a\x84\xe9\x85\x8d\xe7\xbd\xae\xe4\xb8\x8e\xe9\xbb\x98\xe8\xae\xa4config\xe4\xb8\xad\xe7\x9a\x84\xe9\xbb\x98\xe8\xae\xa4\xe9\x85\x8d\xe7\xbd\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x88\xe5\xb9\xb6\n    cfg_from_file('text.yml')\n    print('Using config:~~~~~~~~~~~~~~~~')\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe7\xbb\x99\xe5\xae\x9a\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe8\xa6\x81\xe5\x8a\xa0\xe8\xbd\xbd\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\n    imdb = get_imdb('voc_2007_trainval')\n    print('Loaded dataset `{:s}` for training'.format(imdb.name))\n    # \xe5\x87\x86\xe5\xa4\x87\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\n    roidb = get_training_roidb(imdb)\n    # \xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n    output_dir = get_output_dir(imdb, None)\n    # summary\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe8\xb7\xaf\xe5\xbe\x84\n    log_dir = get_log_dir(imdb)\n    print('Output will be saved to `{:s}`'.format(output_dir))\n    print('Logs will be saved to `{:s}`'.format(log_dir))\n\n    device_name = '/gpu:0'\n    print(device_name)\n\n    network = get_network('VGGnet_train')\n\n    train_net(\n        network,\n        imdb,\n        roidb,\n        output_dir=output_dir,\n        log_dir=log_dir,\n        # pretrained_model=\n        # '/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/ctpn/pretrain/VGG_imagenet.npy',\n        # pretrained_model='/home/xiaofeng/data/ctpn/pretrainde_vgg',\n        pretrained_model=None,\n        max_iters=180000,\n        restore=bool(int(1)))\n"""
ctpn/lib/__init__.py,0,b'from . import fast_rcnn\n'
ctpn/prepare_training_data/ToVoc.py,0,"b""from xml.dom.minidom import Document\nimport cv2\nimport os\nimport glob\nimport shutil\nimport numpy as np\n\ndef generate_xml(name, lines, img_size, class_sets, doncateothers=True):\n    doc = Document()\n\n    def append_xml_node_attr(child, parent=None, text=None):\n        ele = doc.createElement(child)\n        if not text is None:\n            text_node = doc.createTextNode(text)\n            ele.appendChild(text_node)\n        parent = doc if parent is None else parent\n        parent.appendChild(ele)\n        return ele\n\n    img_name = name + '.jpg'\n    # create header\n    annotation = append_xml_node_attr('annotation')\n    append_xml_node_attr('folder', parent=annotation, text='text')\n    append_xml_node_attr('filename', parent=annotation, text=img_name)\n    source = append_xml_node_attr('source', parent=annotation)\n    append_xml_node_attr('database', parent=source, text='coco_text_database')\n    append_xml_node_attr('annotation', parent=source, text='text')\n    append_xml_node_attr('image', parent=source, text='text')\n    append_xml_node_attr('flickrid', parent=source, text='000000')\n    owner = append_xml_node_attr('owner', parent=annotation)\n    append_xml_node_attr('name', parent=owner, text='ms')\n    size = append_xml_node_attr('size', annotation)\n    append_xml_node_attr('width', size, str(img_size[1]))\n    append_xml_node_attr('height', size, str(img_size[0]))\n    append_xml_node_attr('depth', size, str(img_size[2]))\n    append_xml_node_attr('segmented', parent=annotation, text='0')\n\n    # create objects\n    objs = []\n    for line in lines:\n        splitted_line = line.strip().lower().split()\n        cls = splitted_line[0].lower()\n        if not doncateothers and cls not in class_sets:\n            continue\n        cls = 'dontcare' if cls not in class_sets else cls\n        if cls == 'dontcare':\n            continue\n        obj = append_xml_node_attr('object', parent=annotation)\n        occlusion = int(0)\n        x1, y1, x2, y2 = int(float(splitted_line[1]) + 1), int(float(splitted_line[2]) + 1), \\\n                         int(float(splitted_line[3]) + 1), int(float(splitted_line[4]) + 1)\n        truncation = float(0)\n        difficult = 1 if _is_hard(cls, truncation, occlusion, x1, y1, x2, y2) else 0\n        truncted = 0 if truncation < 0.5 else 1\n\n        append_xml_node_attr('name', parent=obj, text=cls)\n        append_xml_node_attr('pose', parent=obj, text='none')\n        append_xml_node_attr('truncated', parent=obj, text=str(truncted))\n        append_xml_node_attr('difficult', parent=obj, text=str(int(difficult)))\n        bb = append_xml_node_attr('bndbox', parent=obj)\n        append_xml_node_attr('xmin', parent=bb, text=str(x1))\n        append_xml_node_attr('ymin', parent=bb, text=str(y1))\n        append_xml_node_attr('xmax', parent=bb, text=str(x2))\n        append_xml_node_attr('ymax', parent=bb, text=str(y2))\n\n        o = {'class': cls, 'box': np.asarray([x1, y1, x2, y2], dtype=float), \\\n             'truncation': truncation, 'difficult': difficult, 'occlusion': occlusion}\n        objs.append(o)\n\n    return doc, objs\n\n\ndef _is_hard(cls, truncation, occlusion, x1, y1, x2, y2):\n    hard = False\n    if y2 - y1 < 25 and occlusion >= 2:\n        hard = True\n        return hard\n    if occlusion >= 3:\n        hard = True\n        return hard\n    if truncation > 0.8:\n        hard = True\n        return hard\n    return hard\n\n\ndef build_voc_dirs(outdir):\n    mkdir = lambda dir: os.makedirs(dir) if not os.path.exists(dir) else None\n    mkdir(outdir)\n    mkdir(os.path.join(outdir, 'Annotations'))\n    mkdir(os.path.join(outdir, 'ImageSets'))\n    mkdir(os.path.join(outdir, 'ImageSets', 'Layout'))\n    mkdir(os.path.join(outdir, 'ImageSets', 'Main'))\n    mkdir(os.path.join(outdir, 'ImageSets', 'Segmentation'))\n    mkdir(os.path.join(outdir, 'JPEGImages'))\n    mkdir(os.path.join(outdir, 'SegmentationClass'))\n    mkdir(os.path.join(outdir, 'SegmentationObject'))\n    return os.path.join(outdir, 'Annotations'), os.path.join(outdir, 'JPEGImages'), os.path.join(outdir, 'ImageSets',\n                                                                                                 'Main')\n\n\nif __name__ == '__main__':\n    _outdir = 'TEXTVOC/VOC2007'\n    _draw = bool(0)\n    _dest_label_dir, _dest_img_dir, _dest_set_dir = build_voc_dirs(_outdir)\n    _doncateothers = bool(1)\n    for dset in ['train']:\n        _labeldir = 'label_tmp'\n        _imagedir = 're_image'\n        class_sets = ('text', 'dontcare')\n        class_sets_dict = dict((k, i) for i, k in enumerate(class_sets))\n        allclasses = {}\n        fs = [open(os.path.join(_dest_set_dir, cls + '_' + dset + '.txt'), 'w') for cls in class_sets]\n        ftrain = open(os.path.join(_dest_set_dir, dset + '.txt'), 'w')\n\n        files = glob.glob(os.path.join(_labeldir, '*.txt'))\n        files.sort()\n        for file in files:\n            path, basename = os.path.split(file)\n            stem, ext = os.path.splitext(basename)\n            with open(file, 'r') as f:\n                lines = f.readlines()\n            img_file = os.path.join(_imagedir, stem + '.jpg')\n\n            print(img_file)\n            img = cv2.imread(img_file)\n            img_size = img.shape\n\n            doc, objs = generate_xml(stem, lines, img_size, class_sets=class_sets, doncateothers=_doncateothers)\n\n            cv2.imwrite(os.path.join(_dest_img_dir, stem + '.jpg'), img)\n            xmlfile = os.path.join(_dest_label_dir, stem + '.xml')\n            with open(xmlfile, 'w') as f:\n                f.write(doc.toprettyxml(indent='\t'))\n\n            ftrain.writelines(stem + '\\n')\n\n            cls_in_image = set([o['class'] for o in objs])\n\n            for obj in objs:\n                cls = obj['class']\n                allclasses[cls] = 0 \\\n                    if not cls in list(allclasses.keys()) else allclasses[cls] + 1\n\n            for cls in cls_in_image:\n                if cls in class_sets:\n                    fs[class_sets_dict[cls]].writelines(stem + ' 1\\n')\n            for cls in class_sets:\n                if cls not in cls_in_image:\n                    fs[class_sets_dict[cls]].writelines(stem + ' -1\\n')\n\n\n        (f.close() for f in fs)\n        ftrain.close()\n\n        print('~~~~~~~~~~~~~~~~~~~')\n        print(allclasses)\n        print('~~~~~~~~~~~~~~~~~~~')\n        shutil.copyfile(os.path.join(_dest_set_dir, 'train.txt'), os.path.join(_dest_set_dir, 'val.txt'))\n        shutil.copyfile(os.path.join(_dest_set_dir, 'train.txt'), os.path.join(_dest_set_dir, 'trainval.txt'))\n        for cls in class_sets:\n            shutil.copyfile(os.path.join(_dest_set_dir, cls + '_train.txt'),\n                            os.path.join(_dest_set_dir, cls + '_trainval.txt'))\n            shutil.copyfile(os.path.join(_dest_set_dir, cls + '_train.txt'),\n                            os.path.join(_dest_set_dir, cls + '_val.txt'))\n"""
ctpn/prepare_training_data/split_label.py,0,"b'import os\nimport numpy as np\nimport math\nimport cv2 as cv\n\npath = \'/media/D/code/OCR/text-detection-ctpn/data/mlt_english+chinese/image\'\ngt_path = \'/media/D/code/OCR/text-detection-ctpn/data/mlt_english+chinese/label\'\nout_path = \'re_image\'\nif not os.path.exists(out_path):\n    os.makedirs(out_path)\nfiles = os.listdir(path)\nfiles.sort()\n#files=files[:100]\nfor file in files:\n    _, basename = os.path.split(file)\n    if basename.lower().split(\'.\')[-1] not in [\'jpg\', \'png\']:\n        continue\n    stem, ext = os.path.splitext(basename)\n    gt_file = os.path.join(gt_path, \'gt_\' + stem + \'.txt\')\n    img_path = os.path.join(path, file)\n    print(img_path)\n    img = cv.imread(img_path)\n    img_size = img.shape\n    im_size_min = np.min(img_size[0:2])\n    im_size_max = np.max(img_size[0:2])\n\n    im_scale = float(600) / float(im_size_min)\n    if np.round(im_scale * im_size_max) > 1200:\n        im_scale = float(1200) / float(im_size_max)\n    re_im = cv.resize(img, None, None, fx=im_scale, fy=im_scale, interpolation=cv.INTER_LINEAR)\n    re_size = re_im.shape\n    cv.imwrite(os.path.join(out_path, stem) + \'.jpg\', re_im)\n\n    with open(gt_file, \'r\') as f:\n        lines = f.readlines()\n    for line in lines:\n        splitted_line = line.strip().lower().split(\',\')\n        pt_x = np.zeros((4, 1))\n        pt_y = np.zeros((4, 1))\n        pt_x[0, 0] = int(float(splitted_line[0]) / img_size[1] * re_size[1])\n        pt_y[0, 0] = int(float(splitted_line[1]) / img_size[0] * re_size[0])\n        pt_x[1, 0] = int(float(splitted_line[2]) / img_size[1] * re_size[1])\n        pt_y[1, 0] = int(float(splitted_line[3]) / img_size[0] * re_size[0])\n        pt_x[2, 0] = int(float(splitted_line[4]) / img_size[1] * re_size[1])\n        pt_y[2, 0] = int(float(splitted_line[5]) / img_size[0] * re_size[0])\n        pt_x[3, 0] = int(float(splitted_line[6]) / img_size[1] * re_size[1])\n        pt_y[3, 0] = int(float(splitted_line[7]) / img_size[0] * re_size[0])\n\n        ind_x = np.argsort(pt_x, axis=0)\n        pt_x = pt_x[ind_x]\n        pt_y = pt_y[ind_x]\n\n        if pt_y[0] < pt_y[1]:\n            pt1 = (pt_x[0], pt_y[0])\n            pt3 = (pt_x[1], pt_y[1])\n        else:\n            pt1 = (pt_x[1], pt_y[1])\n            pt3 = (pt_x[0], pt_y[0])\n\n        if pt_y[2] < pt_y[3]:\n            pt2 = (pt_x[2], pt_y[2])\n            pt4 = (pt_x[3], pt_y[3])\n        else:\n            pt2 = (pt_x[3], pt_y[3])\n            pt4 = (pt_x[2], pt_y[2])\n\n        xmin = int(min(pt1[0], pt2[0]))\n        ymin = int(min(pt1[1], pt2[1]))\n        xmax = int(max(pt2[0], pt4[0]))\n        ymax = int(max(pt3[1], pt4[1]))\n\n        if xmin < 0:\n            xmin = 0\n        if xmax > re_size[1] - 1:\n            xmax = re_size[1] - 1\n        if ymin < 0:\n            ymin = 0\n        if ymax > re_size[0] - 1:\n            ymax = re_size[0] - 1\n\n        width = xmax - xmin\n        height = ymax - ymin\n\n        # reimplement\n        step = 16.0\n        x_left = []\n        x_right = []\n        x_left.append(xmin)\n        x_left_start = int(math.ceil(xmin / 16.0) * 16.0)\n        if x_left_start == xmin:\n            x_left_start = xmin + 16\n        for i in np.arange(x_left_start, xmax, 16):\n            x_left.append(i)\n        x_left = np.array(x_left)\n\n        x_right.append(x_left_start - 1)\n        for i in range(1, len(x_left) - 1):\n            x_right.append(x_left[i] + 15)\n        x_right.append(xmax)\n        x_right = np.array(x_right)\n\n        idx = np.where(x_left == x_right)\n        x_left = np.delete(x_left, idx, axis=0)\n        x_right = np.delete(x_right, idx, axis=0)\n\n        if not os.path.exists(\'label_tmp\'):\n            os.makedirs(\'label_tmp\')\n        with open(os.path.join(\'label_tmp\', stem) + \'.txt\', \'a\') as f:\n            for i in range(len(x_left)):\n                f.writelines(""text\\t"")\n                f.writelines(str(int(x_left[i])))\n                f.writelines(""\\t"")\n                f.writelines(str(int(ymin)))\n                f.writelines(""\\t"")\n                f.writelines(str(int(x_right[i])))\n                f.writelines(""\\t"")\n                f.writelines(str(int(ymax)))\n                f.writelines(""\\n"")\n'"
train/create_dataset/create_dataset.py,0,"b'import os\n\nimport cv2\nimport lmdb  # install lmdb by ""pip install lmdb""\nimport numpy as np\n\n\n# from genLineText import GenTextImage\n\ndef checkImageIsValid(imageBin):\n    if imageBin is None:\n        return False\n    imageBuf = np.fromstring(imageBin, dtype=np.uint8)\n    img = cv2.imdecode(imageBuf, cv2.IMREAD_GRAYSCALE)\n    if img is None:\n        return False\n    imgH, imgW = img.shape[0], img.shape[1]\n    if imgH * imgW == 0:\n        return False\n    return True\n\n\ndef writeCache(env, cache):\n    with env.begin(write=True) as txn:\n        for k, v in cache.items():\n            txn.put(k.encode(), v)\n\n\ndef createDataset(outputPath, imagePathList, labelList, lexiconList=None, checkValid=True):\n    """"""\n    Create LMDB dataset for CRNN training.\n\n    ARGS:\n        outputPath    : LMDB output path\n        imagePathList : list of image path\n        labelList     : list of corresponding groundtruth texts\n        lexiconList   : (optional) list of lexicon lists\n        checkValid    : if true, check the validity of every image\n    """"""\n    # print (len(imagePathList) , len(labelList))\n    assert (len(imagePathList) == len(labelList))\n    nSamples = len(imagePathList)\n    print(\'...................\')\n    env = lmdb.open(outputPath, map_size=1099511627776)\n\n    cache = {}\n    cnt = 1\n    for i in range(nSamples):\n        imagePath = imagePathList[i]\n        label = labelList[i]\n        if not os.path.exists(imagePath):\n            print(\'%s does not exist\' % imagePath)\n            continue\n        with open(imagePath, \'rb\') as f:\n            imageBin = f.read()\n        if checkValid:\n            if not checkImageIsValid(imageBin):\n                print(\'%s is not a valid image\' % imagePath)\n                continue\n\n        imageKey = \'image-%09d\' % cnt\n        labelKey = \'label-%09d\' % cnt\n        cache[imageKey] = imageBin\n        cache[labelKey] = label.encode()\n        if lexiconList:\n            lexiconKey = \'lexicon-%09d\' % cnt\n            cache[lexiconKey] = \' \'.join(lexiconList[i]).encode()\n        if cnt % 1000 == 0:\n            writeCache(env, cache)\n            cache = {}\n            print(\'Written %d / %d\' % (cnt, nSamples))\n        cnt += 1\n    nSamples = cnt - 1\n    cache[\'num-samples\'] = str(nSamples).encode()\n    writeCache(env, cache)\n    print(\'Created dataset with %d samples\' % nSamples)\n\n\ndef read_text(path):\n    with open(path) as f:\n        text = f.read()\n    text = text.strip()\n\n    return text\n\n\nimport glob\n\nif __name__ == \'__main__\':\n\n    ##lmdb \xe8\xbe\x93\xe5\x87\xba\xe7\x9b\xae\xe5\xbd\x95\n    outputPath = \'../data/lmdb/train\'\n\n    path = \'../data/dataline/*.jpg\'\n    imagePathList = glob.glob(path)\n    print(\'------------\', len(imagePathList), \'------------\')\n    imgLabelLists = []\n    for p in imagePathList:\n        try:\n            imgLabelLists.append((p, read_text(p.replace(\'.jpg\', \'.txt\'))))\n        except:\n            continue\n\n    # imgLabelList = [ (p,read_text(p.replace(\'.jpg\',\'.txt\'))) for p in imagePathList]\n    ##sort by lebelList \n    imgLabelList = sorted(imgLabelLists, key=lambda x: len(x[1]))\n    imgPaths = [p[0] for p in imgLabelList]\n    txtLists = [p[1] for p in imgLabelList]\n\n    createDataset(outputPath, imgPaths, txtLists, lexiconList=None, checkValid=True)\n'"
train/create_dataset/textgen.py,0,"b'# -*- coding: utf-8 -*-\nfrom PIL import Image, ImageDraw, ImageFont\nimport random\nimport os\n\n\ndef genImage(label, fontsize, color=(0, 0, 0),fontName=""\xe5\x8d\x8e\xe6\x96\x87\xe7\xbb\x86\xe9\xbb\x91.ttf""):\n    img = Image.new(""RGB"", ((int)(fontsize * 1.2 * len(label)), (int)(fontsize * 2)), (255, 255, 255))\n    font = ImageFont.truetype(fontName, fontsize)\n    draw = ImageDraw.Draw(img)\n    draw.text((0, 0), label, fill=color, font=font)\n    with open(""../data/dataline/"" + label + ""-"" + str(fontsize) + "".txt"", ""w"", encoding=\'utf-8\') as f:\n        f.write(label)\n    img.save(""../data/dataline/"" + label + ""-"" + str(fontsize) + "".jpg"")\n\n\nif __name__ == \'__main__\':\n    alphabet = """"""\'\xe7\x96\x97\xe7\xbb\x9a\xe8\xaf\x9a\xe5\xa8\x87\xe6\xba\x9c\xe9\xa2\x98\xe8\xb4\xbf\xe8\x80\x85\xe5\xbb\x96\xe6\x9b\xb4\xe7\xba\xb3\xe5\x8a\xa0\xe5\xa5\x89\xe5\x85\xac\xe4\xb8\x80\xe5\xb0\xb1\xe6\xb1\xb4\xe8\xae\xa1\xe4\xb8\x8e\xe8\xb7\xaf\xe6\x88\xbf\xe5\x8e\x9f\xe5\xa6\x87208-7\xe5\x85\xb6>:],\xef\xbc\x8c\xe9\xaa\x91\xe5\x88\x88\xe5\x85\xa8\xe6\xb6\x88\xe6\x98\x8f\xe5\x82\x88\xe5\xae\x89\xe4\xb9\x85\xe9\x92\x9f\xe5\x97\x85\xe4\xb8\x8d\xe5\xbd\xb1\xe5\xa4\x84\xe9\xa9\xbd\xe8\x9c\xbf\xe8\xb5\x84\xe5\x85\xb3\xe6\xa4\xa4\xe5\x9c\xb0\xe7\x98\xb8\xe4\xb8\x93\xe9\x97\xae\xe5\xbf\x96\xe7\xa5\xa8\xe5\xab\x89\xe7\x82\x8e\xe9\x9f\xb5\xe8\xa6\x81\xe6\x9c\x88\xe7\x94\xb0\xe8\x8a\x82\xe9\x99\x82\xe9\x84\x99\xe6\x8d\x8c\xe5\xa4\x87\xe6\x8b\xb3\xe4\xbc\xba\xe7\x9c\xbc\xe7\xbd\x91\xe7\x9b\x8e\xe5\xa4\xa7\xe5\x82\x8d\xe5\xbf\x83\xe4\xb8\x9c\xe6\x84\x89\xe6\xb1\x87\xe8\xb9\xbf\xe7\xa7\x91\xe6\xaf\x8f\xe4\xb8\x9a\xe9\x87\x8c\xe8\x88\xaa\xe6\x99\x8f\xe5\xad\x97\xe5\xb9\xb3\xe5\xbd\x95\xe5\x85\x8813\xe5\xbd\xa4\xe9\xb2\xb6\xe4\xba\xa7\xe7\xa8\x8d\xe7\x9d\xa3\xe8\x85\xb4\xe6\x9c\x89\xe8\xb1\xa1\xe5\xb2\xb3\xe6\xb3\xa8\xe7\xbb\x8d\xe5\x9c\xa8\xe6\xb3\xba\xe6\x96\x87\xe5\xae\x9a\xe6\xa0\xb8\xe5\x90\x8d\xe6\xb0\xb4\xe8\xbf\x87\xe7\x90\x86\xe8\xae\xa9\xe5\x81\xb7\xe7\x8e\x87\xe7\xad\x89\xe8\xbf\x99\xe5\x8f\x91\xe2\x80\x9d\xe4\xb8\xba\xe5\x90\xab\xe8\x82\xa5\xe9\x85\x89\xe7\x9b\xb8\xe9\x84\xb1\xe4\xb8\x83\xe7\xbc\x96\xe7\x8c\xa5\xe9\x94\x9b\xe6\x97\xa5\xe9\x95\x80\xe8\x92\x82\xe6\x8e\xb0\xe5\x80\x92\xe8\xbe\x86\xe6\xa0\xbe\xe6\xa0\x97\xe7\xbb\xbc\xe6\xb6\xa9\xe5\xb7\x9e\xe9\x9b\x8c\xe6\xbb\x91\xe9\xa6\x80\xe4\xba\x86\xe6\x9c\xba\xe5\x9d\x97\xe5\x8f\xb8\xe5\xae\xb0\xe7\x94\x99\xe5\x85\xb4\xe7\x9f\xbd\xe6\x8a\x9a\xe4\xbf\x9d\xe7\x94\xa8\xe6\xb2\xa7\xe7\xa7\xa9\xe5\xa6\x82\xe6\x94\xb6\xe6\x81\xaf\xe6\xbb\xa5\xe9\xa1\xb5\xe7\x96\x91\xe5\x9f\xa0!\xef\xbc\x81\xe5\xa7\xa5\xe5\xbc\x82\xe6\xa9\xb9\xe9\x92\x87\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\x84\xe7\x9a\x84\xe6\xa4\xb4\xe6\xb2\xab\xe5\x9b\xbd\xe7\xbb\xa5\xe7\x8d\xa0\xe6\x8a\xa5\xe5\xbc\x80\xe6\xb0\x91\xe8\x9c\x87\xe4\xbd\x95\xe5\x88\x86\xe5\x87\x87\xe9\x95\xbf\xe8\xae\xa5\xe8\x97\x8f\xe6\x8e\x8f\xe6\x96\xbd\xe7\xbe\xbd\xe4\xb8\xad\xe8\xae\xb2\xe6\xb4\xbe\xe5\x98\x9f\xe4\xba\xba\xe6\x8f\x90\xe6\xb5\xbc\xe9\x97\xb4\xe4\xb8\x96\xe8\x80\x8c\xe5\x8f\xa4\xe5\xa4\x9a\xe5\x80\xaa\xe5\x94\x87\xe9\xa5\xaf\xe6\x8e\xa7\xe5\xba\x9a\xe9\xa6\x96\xe8\xb5\x9b\xe8\x9c\x93\xe5\x91\xb3\xe6\x96\xad\xe5\x88\xb6\xe8\xa7\x89\xe6\x8a\x80\xe6\x9b\xbf\xe8\x89\xb0\xe6\xba\xa2\xe6\xbd\xae\xe5\xa4\x95\xe9\x92\xba\xe5\xa4\x96\xe6\x91\x98\xe6\x9e\x8b\xe5\x8a\xa8\xe5\x8f\x8c\xe5\x8d\x95\xe5\x95\xae\xe6\x88\xb7\xe6\x9e\x87\xe7\xa1\xae\xe9\x94\xa6\xe6\x9b\x9c\xe6\x9d\x9c\xe6\x88\x96\xe8\x83\xbd\xe6\x95\x88\xe9\x9c\x9c\xe7\x9b\x92\xe7\x84\xb6\xe4\xbe\x97\xe7\x94\xb5\xe6\x99\x81\xe6\x94\xbe\xe6\xad\xa5\xe9\xb9\x83\xe6\x96\xb0\xe6\x9d\x96\xe8\x9c\x82\xe5\x90\x92\xe6\xbf\x82\xe7\x9e\xac\xe8\xaf\x84\xe6\x80\xbb\xe9\x9a\x8d\xe5\xaf\xb9\xe7\x8b\xac\xe5\x90\x88\xe4\xb9\x9f\xe6\x98\xaf\xe5\xba\x9c\xe9\x9d\x92\xe5\xa4\xa9\xe8\xaf\xb2\xe5\xa2\x99\xe7\xbb\x84\xe6\xbb\xb4\xe7\xba\xa7\xe9\x82\x80\xe5\xb8\x98\xe7\xa4\xba\xe5\xb7\xb2\xe6\x97\xb6\xe9\xaa\xb8\xe4\xbb\x84\xe6\xb3\x85\xe5\x92\x8c\xe9\x81\xa8\xe5\xba\x97\xe9\x9b\x87\xe7\x96\xab\xe6\x8c\x81\xe5\xb7\x8d\xe8\xb8\xae\xe5\xa2\x83\xe5\x8f\xaa\xe4\xba\xa8\xe7\x9b\xae\xe9\x89\xb4\xe5\xb4\xa4\xe9\x97\xb2\xe4\xbd\x93\xe6\xb3\x84\xe6\x9d\x82\xe4\xbd\x9c\xe8\x88\xac\xe8\xbd\xb0\xe5\x8c\x96\xe8\xa7\xa3\xe8\xbf\x82\xe8\xaf\xbf\xe8\x9b\xad\xe7\x92\x80\xe8\x85\xbe\xe5\x91\x8a\xe7\x89\x88\xe6\x9c\x8d\xe7\x9c\x81\xe5\xb8\x88\xe5\xb0\x8f\xe8\xa7\x84\xe7\xa8\x8b\xe7\xba\xbf\xe6\xb5\xb7\xe5\x8a\x9e\xe5\xbc\x95\xe4\xba\x8c\xe6\xa1\xa7\xe7\x89\x8c\xe7\xa0\xba\xe6\xb4\x84\xe8\xa3\xb4\xe4\xbf\xae\xe5\x9b\xbe\xe7\x97\xab\xe8\x83\xa1\xe8\xae\xb8\xe7\x8a\x8a\xe4\xba\x8b\xe9\x83\x9b\xe5\x9f\xba\xe6\x9f\xb4\xe5\x91\xbc\xe9\xa3\x9f\xe7\xa0\x94\xe5\xa5\xb6\xe5\xbe\x8b\xe8\x9b\x8b\xe5\x9b\xa0\xe8\x91\x86\xe5\xaf\x9f\xe6\x88\x8f\xe8\xa4\x92\xe6\x88\x92\xe5\x86\x8d\xe6\x9d\x8e\xe9\xaa\x81\xe5\xb7\xa5\xe8\xb2\x82\xe6\xb2\xb9\xe9\xb9\x85\xe7\xab\xa0\xe5\x95\x84\xe4\xbc\x91\xe5\x9c\xba\xe7\xbb\x99\xe7\x9d\xa1\xe7\xba\xb7\xe8\xb1\x86\xe5\x99\xa8\xe6\x8d\x8e\xe8\xaf\xb4\xe6\x95\x8f\xe5\xad\xa6\xe4\xbc\x9a\xe6\xb5\x92\xe8\xae\xbe\xe8\xaf\x8a\xe6\xa0\xbc\xe5\xbb\x93\xe6\x9f\xa5\xe6\x9d\xa5\xe9\x9c\x93\xe5\xae\xa4\xe6\xba\x86\xef\xbf\xa0\xe8\xaf\xa1\xe5\xaf\xa5\xe7\x84\x95\xe8\x88\x9c\xe6\x9f\x92\xe7\x8b\x90\xe5\x9b\x9e\xe6\x88\x9f\xe7\xa0\xbe\xe5\x8e\x84\xe5\xae\x9e\xe7\xbf\xa9\xe5\xb0\xbf\xe4\xba\x94\xe5\x85\xa5\xe5\xbe\x84\xe6\x83\xad\xe5\x96\xb9\xe8\x82\xa1\xe5\xae\x87\xe7\xaf\x9d|;\xe7\xbe\x8e\xe6\x9c\x9f\xe4\xba\x91\xe4\xb9\x9d\xe7\xa5\xba\xe6\x89\xae\xe9\x9d\xa0\xe9\x94\x9d\xe6\xa7\x8c\xe7\xb3\xbb\xe4\xbc\x81\xe9\x85\xb0\xe9\x98\x8a\xe6\x9a\x82\xe8\x9a\x95\xe5\xbf\xbb\xe8\xb1\x81\xe6\x9c\xac\xe7\xbe\xb9\xe6\x89\xa7\xe6\x9d\xa1\xe9\x92\xa6H\xe7\x8d\x92\xe9\x99\x90\xe8\xbf\x9b\xe5\xad\xa3\xe6\xa5\xa6\xe4\xba\x8e\xe8\x8a\x98\xe7\x8e\x96\xe9\x93\x8b\xe8\x8c\xaf\xe6\x9c\xaa\xe7\xad\x94\xe7\xb2\x98\xe6\x8b\xac\xe6\xa0\xb7\xe7\xb2\xbe\xe6\xac\xa0\xe7\x9f\xa2\xe7\x94\xa5\xe5\xb8\xb7\xe5\xb5\xa9\xe6\x89\xa3\xe4\xbb\xa4\xe4\xbb\x94\xe9\xa3\x8e\xe7\x9a\x88\xe8\xa1\x8c\xe6\x94\xaf\xe9\x83\xa8\xe8\x93\x89\xe5\x88\xae\xe7\xab\x99\xe8\x9c\xa1\xe6\x95\x91\xe9\x92\x8a\xe6\xb1\x97\xe6\x9d\xbe\xe5\xab\x8c\xe6\x88\x90\xe5\x8f\xaf.\xe9\xb9\xa4\xe9\x99\xa2\xe4\xbb\x8e\xe4\xba\xa4\xe6\x94\xbf\xe6\x80\x95\xe6\xb4\xbb\xe8\xb0\x83\xe7\x90\x83\xe5\xb1\x80\xe9\xaa\x8c\xe9\xab\x8c\xe7\xac\xac\xe9\x9f\xab\xe8\xb0\x97\xe4\xb8\xb2\xe5\x88\xb0\xe5\x9c\x86\xe5\xb9\xb4\xe7\xb1\xb3/*\xe5\x8f\x8b\xe5\xbf\xbf\xe6\xa3\x80\xe5\x8c\xba\xe7\x9c\x8b\xe8\x87\xaa\xe6\x95\xa2\xe5\x88\x83\xe4\xb8\xaa\xe5\x85\xb9\xe5\xbc\x84\xe6\xb5\x81\xe7\x95\x99\xe5\x90\x8c\xe6\xb2\xa1\xe9\xbd\xbf\xe6\x98\x9f\xe8\x81\x86\xe8\xbd\xbc\xe6\xb9\x96\xe4\xbb\x80\xe4\xb8\x89\xe5\xbb\xba\xe8\x9b\x94\xe5\x84\xbf\xe6\xa4\x8b\xe6\xb1\x95\xe9\x9c\x87\xe9\xa2\xa7\xe9\xb2\xa4\xe8\xb7\x9f\xe5\x8a\x9b\xe6\x83\x85\xe7\x92\xba\xe9\x93\xa8\xe9\x99\xaa\xe5\x8a\xa1\xe6\x8c\x87\xe6\x97\x8f\xe8\xae\xad\xe6\xbb\xa6\xe9\x84\xa3\xe6\xbf\xae\xe6\x89\x92\xe5\x95\x86\xe7\xae\xb1\xe5\x8d\x81\xe5\x8f\xac\xe6\x85\xb7\xe8\xbe\x97\xe6\x89\x80\xe8\x8e\x9e\xe7\xae\xa1\xe6\x8a\xa4\xe8\x87\xad\xe6\xa8\xaa\xe7\xa1\x92\xe5\x97\x93\xe6\x8e\xa5\xe4\xbe\xa6\xe5\x85\xad\xe9\x9c\xb2\xe5\x85\x9a\xe9\xa6\x8b\xe9\xa9\xbe\xe5\x89\x96\xe9\xab\x98\xe4\xbe\xac\xe5\xa6\xaa\xe5\xb9\x82\xe7\x8c\x97\xe7\xbb\xba\xe9\xaa\x90\xe5\xa4\xae\xe9\x85\x90\xe5\xad\x9d\xe7\xad\x9d\xe8\xaf\xbe\xe5\xbe\x87\xe7\xbc\xb0\xe9\x97\xa8\xe7\x94\xb7\xe8\xa5\xbf\xe9\xa1\xb9\xe5\x8f\xa5\xe8\xb0\x99\xe7\x9e\x92\xe7\xa7\x83\xe7\xaf\x87\xe6\x95\x99\xe7\xa2\xb2\xe7\xbd\x9a\xe5\xa3\xb0\xe5\x91\x90\xe6\x99\xaf\xe5\x89\x8d\xe5\xaf\x8c\xe5\x98\xb4\xe9\xb3\x8c\xe7\xa8\x80\xe5\x85\x8d\xe6\x9c\x8b\xe5\x95\xac\xe7\x9d\x90\xe5\x8e\xbb\xe8\xb5\x88\xe9\xb1\xbc\xe4\xbd\x8f\xe8\x82\xa9\xe6\x84\x95\xe9\x80\x9f\xe6\x97\x81\xe6\xb3\xa2\xe5\x8e\x85\xe5\x81\xa5\xe8\x8c\xbc\xe5\x8e\xa5\xe9\xb2\x9f\xe8\xb0\x85\xe6\x8a\x95\xe6\x94\xb8\xe7\x82\x94\xe6\x95\xb0\xe6\x96\xb9\xe5\x87\xbb\xe5\x91\x8b\xe8\xb0\x88\xe7\xbb\xa9\xe5\x88\xab\xe6\x84\xab\xe5\x83\x9a\xe8\xba\xac\xe9\xb9\xa7\xe8\x83\xaa\xe7\x82\xb3\xe6\x8b\x9b\xe5\x96\x87\xe8\x86\xa8\xe6\xb3\xb5\xe8\xb9\xa6\xe6\xaf\x9b\xe7\xbb\x9354\xe8\xb0\xb1\xe8\xaf\x86\xe9\x99\x95\xe7\xb2\xbd\xe5\xa9\x9a\xe6\x8b\x9f\xe6\x9e\x84\xe4\xb8\x94\xe6\x90\x9c\xe4\xbb\xbb\xe6\xbd\x98\xe6\xaf\x94\xe9\x83\xa2\xe5\xa6\xa8\xe9\x86\xaa\xe9\x99\x80\xe6\xa1\x94\xe7\xa2\x98\xe6\x89\x8e\xe9\x80\x89\xe5\x93\x88\xe9\xaa\xb7\xe6\xa5\xb7\xe4\xba\xbf\xe6\x98\x8e\xe7\xbc\x86\xe8\x84\xaf\xe7\x9b\x91\xe7\x9d\xab\xe9\x80\xbb\xe5\xa9\xb5\xe5\x85\xb1\xe8\xb5\xb4\xe6\xb7\x9d\xe5\x87\xa1\xe6\x83\xa6\xe5\x8f\x8a\xe8\xbe\xbe\xe6\x8f\x96\xe8\xb0\xa9\xe6\xbe\xb9\xe5\x87\x8f\xe7\x84\xb0\xe8\x9b\xb9\xe7\x95\xaa\xe7\xa5\x81\xe6\x9f\x8f\xe5\x91\x98\xe7\xa6\x84\xe6\x80\xa1\xe5\xb3\xa4\xe9\xbe\x99\xe7\x99\xbd\xe5\x8f\xbd\xe7\x94\x9f\xe9\x97\xaf\xe8\xb5\xb7\xe7\xbb\x86\xe8\xa3\x85\xe8\xb0\x95\xe7\xab\x9f\xe8\x81\x9a\xe9\x92\x99\xe4\xb8\x8a\xe5\xaf\xbc\xe6\xb8\x8a\xe6\x8c\x89\xe8\x89\xbe\xe8\xbe\x98\xe6\x8c\xa1\xe8\x80\x92\xe7\x9b\xb9\xe9\xa5\xaa\xe8\x87\x80\xe8\xae\xb0\xe9\x82\xae\xe8\x95\x99\xe5\x8f\x97\xe5\x90\x84\xe5\x8c\xbb\xe6\x90\x82\xe6\x99\xae\xe6\xbb\x87\xe6\x9c\x97\xe8\x8c\xb8\xe5\xb8\xa6\xe7\xbf\xbb\xe9\x85\x9a(\xe5\x85\x89\xe5\xa0\xa4\xe5\xa2\x9f\xe8\x94\xb7\xe4\xb8\x87\xe5\xb9\xbb\xe3\x80\x93\xe7\x91\x99\xe8\xbe\x88\xe6\x98\xa7\xe7\x9b\x8f\xe4\xba\x98\xe8\x9b\x80\xe5\x90\x89\xe9\x93\xb0\xe8\xaf\xb7\xe5\xad\x90\xe5\x81\x87\xe9\x97\xbb\xe7\xa8\x8e\xe4\xba\x95\xe8\xaf\xa9\xe5\x93\xa8\xe5\xab\x82\xe5\xa5\xbd\xe9\x9d\xa2\xe7\x90\x90\xe6\xa0\xa1\xe9\xa6\x8a\xe9\xac\xa3\xe7\xbc\x82\xe8\x90\xa5\xe8\xae\xbf\xe7\x82\x96\xe5\x8d\xa0\xe5\x86\x9c\xe7\xbc\x80\xe5\x90\xa6\xe7\xbb\x8f\xe9\x92\x9a\xe6\xa3\xb5\xe8\xb6\x9f\xe5\xbc\xa0\xe4\xba\x9f\xe5\x90\x8f\xe8\x8c\xb6\xe8\xb0\xa8\xe6\x8d\xbb\xe8\xae\xba\xe8\xbf\xb8\xe5\xa0\x82\xe7\x8e\x89\xe4\xbf\xa1\xe5\x90\xa7\xe7\x9e\xa0\xe4\xb9\xa1\xe5\xa7\xac\xe5\xaf\xba\xe5\x92\xac\xe6\xba\x8f\xe8\x8b\x84\xe7\x9a\xbf\xe6\x84\x8f\xe8\xb5\x89\xe5\xae\x9d\xe5\xb0\x94\xe9\x92\xb0\xe8\x89\xba\xe7\x89\xb9\xe5\x94\xb3\xe8\xb8\x89\xe9\x83\xbd\xe8\x8d\xa3\xe5\x80\x9a\xe7\x99\xbb\xe8\x8d\x90\xe4\xb8\xa7\xe5\xa5\x87\xe6\xb6\xb5\xe6\x89\xb9\xe7\x82\xad\xe8\xbf\x91\xe7\xac\xa6\xe5\x82\xa9\xe6\x84\x9f\xe9\x81\x93\xe7\x9d\x80\xe8\x8f\x8a\xe8\x99\xb9\xe4\xbb\xb2\xe4\xbc\x97\xe6\x87\x88\xe6\xbf\xaf\xe9\xa2\x9e\xe7\x9c\xba\xe5\x8d\x97\xe9\x87\x8a\xe5\x8c\x97\xe7\xbc\x9d\xe6\xa0\x87\xe6\x97\xa2\xe8\x8c\x97\xe6\x95\xb4\xe6\x92\xbc\xe8\xbf\xa4\xe8\xb4\xb2\xe6\x8c\x8e\xe8\x80\xb1\xe6\x8b\x92\xe6\x9f\x90\xe5\xa6\x8d\xe5\x8d\xab\xe5\x93\x87\xe8\x8b\xb1\xe7\x9f\xb6\xe8\x97\xa9\xe6\xb2\xbb\xe4\xbb\x96\xe5\x85\x83\xe9\xa2\x86\xe8\x86\x9c\xe9\x81\xae\xe7\xa9\x97\xe8\x9b\xbe\xe9\xa3\x9e\xe8\x8d\x92\xe6\xa3\xba\xe5\x8a\xab\xe4\xb9\x88\xe5\xb8\x82\xe7\x81\xab\xe6\xb8\xa9\xe6\x8b\x88\xe6\xa3\x9a\xe6\xb4\xbc\xe8\xbd\xac\xe6\x9e\x9c\xe5\xa5\x95\xe5\x8d\xb8\xe8\xbf\xaa\xe4\xbc\xb8\xe6\xb3\xb3\xe6\x96\x97\xe9\x82\xa1\xe4\xbe\x84\xe6\xb6\xa8\xe5\xb1\xaf\xe8\x90\x8b\xe8\x83\xad\xe6\xb0\xa1\xe5\xb4\xae\xe6\x9e\x9e\xe6\x83\xa7\xe5\x86\x92\xe5\xbd\xa9\xe6\x96\x9c\xe6\x89\x8b\xe8\xb1\x9a\xe9\x9a\x8f\xe6\x97\xad\xe6\xb7\x91\xe5\xa6\x9e\xe5\xbd\xa2\xe8\x8f\x8c\xe5\x90\xb2\xe6\xb2\xb1\xe4\xba\x89\xe9\xa9\xaf\xe6\xad\xb9\xe6\x8c\x9f\xe5\x85\x86\xe6\x9f\xb1\xe4\xbc\xa0\xe8\x87\xb3\xe5\x8c\x85\xe5\x86\x85\xe5\x93\x8d\xe4\xb8\xb4\xe7\xba\xa2\xe5\x8a\x9f\xe5\xbc\xa9\xe8\xa1\xa1\xe5\xaf\x82\xe7\xa6\x81\xe8\x80\x81\xe6\xa3\x8d\xe8\x80\x86\xe6\xb8\x8d\xe7\xbb\x87\xe5\xae\xb3\xe6\xb0\xb5\xe6\xb8\x91\xe5\xb8\x83\xe8\xbd\xbd\xe9\x9d\xa5\xe5\x97\xac\xe8\x99\xbd\xe8\x8b\xb9\xe5\x92\xa8\xe5\xa8\x84\xe5\xba\x93\xe9\x9b\x89\xe6\xa6\x9c\xe5\xb8\x9c\xe5\x98\xb2\xe5\xa5\x97\xe7\x91\x9a\xe4\xba\xb2\xe7\xb0\xb8\xe6\xac\xa7\xe8\xbe\xb96\xe8\x85\xbf\xe6\x97\xae\xe6\x8a\x9b\xe5\x90\xb9\xe7\x9e\xb3\xe5\xbe\x97\xe9\x95\x93\xe6\xa2\x97\xe5\x8e\xa8\xe7\xbb\xa7\xe6\xbc\xbe\xe6\x84\xa3\xe6\x86\xa8\xe5\xa3\xab\xe7\xad\x96\xe7\xaa\x91\xe6\x8a\x91\xe8\xba\xaf\xe8\xa5\x9f\xe8\x84\x8f\xe5\x8f\x82\xe8\xb4\xb8\xe8\xa8\x80\xe5\xb9\xb2\xe7\xbb\xb8\xe9\xb3\x84\xe7\xa9\xb7\xe8\x97\x9c\xe9\x9f\xb3\xe6\x8a\x98\xe8\xaf\xa6)\xe4\xb8\xbe\xe6\x82\x8d\xe7\x94\xb8\xe7\x99\x8c\xe9\xbb\x8e\xe8\xb0\xb4\xe6\xad\xbb\xe7\xbd\xa9\xe8\xbf\x81\xe5\xaf\x92\xe9\xa9\xb7\xe8\xa2\x96\xe5\xaa\x92\xe8\x92\x8b\xe6\x8e\x98\xe6\xa8\xa1\xe7\xba\xa0\xe6\x81\xa3\xe8\xa7\x82\xe7\xa5\x96\xe8\x9b\x86\xe7\xa2\x8d\xe4\xbd\x8d\xe7\xa8\xbf\xe4\xb8\xbb\xe6\xbe\xa7\xe8\xb7\x8c\xe7\xad\x8f\xe4\xba\xac\xe9\x94\x8f\xe5\xb8\x9d\xe8\xb4\xb4\xe8\xaf\x81\xe7\xb3\xa0\xe6\x89\x8d\xe9\xbb\x84\xe9\xb2\xb8\xe7\x95\xa5\xe7\x82\xaf\xe9\xa5\xb1\xe5\x9b\x9b\xe5\x87\xba\xe5\x9b\xad\xe7\x8a\x80\xe7\x89\xa7\xe5\xae\xb9\xe6\xb1\x89\xe6\x9d\x86\xe6\xb5\x88\xe6\xb1\xb0\xe7\x91\xb7\xe9\x80\xa0\xe8\x99\xab\xe7\x98\xa9\xe6\x80\xaa\xe9\xa9\xb4\xe6\xb5\x8e\xe5\xba\x94\xe8\x8a\xb1\xe6\xb2\xa3\xe8\xb0\x94\xe5\xa4\x99\xe6\x97\x85\xe4\xbb\xb7\xe7\x9f\xbf\xe4\xbb\xa5\xe8\x80\x83su\xe5\x91\xa6\xe6\x99\x92\xe5\xb7\xa1\xe8\x8c\x85\xe5\x87\x86\xe8\x82\x9f\xe7\x93\xb4\xe8\xa9\xb9\xe4\xbb\x9f\xe8\xa4\x82\xe8\xaf\x91\xe6\xa1\x8c\xe6\xb7\xb7\xe5\xae\x81\xe6\x80\xa6\xe9\x83\x91\xe6\x8a\xbf\xe4\xba\x9b\xe4\xbd\x99\xe9\x84\x82\xe9\xa5\xb4\xe6\x94\x92\xe7\x8f\x91\xe7\xbe\xa4\xe9\x98\x96\xe5\xb2\x94\xe7\x90\xa8\xe8\x97\x93\xe9\xa2\x84\xe7\x8e\xaf\xe6\xb4\xae\xe5\xb2\x8c\xe5\xae\x80\xe6\x9d\xb2\xe7\x80\xb5\xe6\x9c\x80\xe5\xb8\xb8\xe5\x9b\xa1\xe5\x91\xa8\xe8\xb8\x8a\xe5\xa5\xb3\xe9\xbc\x93\xe8\xa2\xad\xe5\x96\x89\xe7\xae\x80\xe8\x8c\x83\xe8\x96\xaf\xe9\x81\x90\xe7\x96\x8f\xe7\xb2\xb1\xe9\xbb\x9c\xe7\xa6\xa7\xe6\xb3\x95\xe7\xae\x94\xe6\x96\xa4\xe9\x81\xa5\xe6\xb1\x9d\xe5\xa5\xa5\xe7\x9b\xb4\xe8\xb4\x9e\xe6\x92\x91\xe7\xbd\xae\xe7\xbb\xb1\xe9\x9b\x86\xe5\xa5\xb9\xe9\xa6\x85\xe9\x80\x97\xe9\x92\xa7\xe6\xa9\xb1\xe9\xad\x89[\xe6\x81\x99\xe8\xba\x81\xe5\x94\xa49\xe6\x97\xba\xe8\x86\x98\xe5\xbe\x85\xe8\x84\xbe\xe6\x83\xab\xe8\xb4\xad\xe5\x90\x97\xe4\xbe\x9d\xe7\x9b\xb2\xe5\xba\xa6\xe7\x98\xbf\xe8\xa0\x96\xe4\xbf\xbe\xe4\xb9\x8b\xe9\x95\x97\xe6\x8b\x87\xe9\xb2\xb5\xe5\x8e\x9d\xe7\xb0\xa7\xe7\xbb\xad\xe6\xac\xbe\xe5\xb1\x95\xe5\x95\x83\xe8\xa1\xa8\xe5\x89\x94\xe5\x93\x81\xe9\x92\xbb\xe8\x85\xad\xe6\x8d\x9f\xe6\xb8\x85\xe9\x94\xb6\xe7\xbb\x9f\xe6\xb6\x8c\xe5\xaf\xb8\xe6\xbb\xa8\xe8\xb4\xaa\xe9\x93\xbe\xe5\x90\xa0\xe5\x86\x88\xe4\xbc\x8e\xe8\xbf\xa5\xe5\x92\x8f\xe5\x90\x81\xe8\xa7\x88\xe9\x98\xb2\xe8\xbf\x85\xe5\xa4\xb1\xe6\xb1\xbe\xe9\x98\x94\xe9\x80\xb5\xe7\xbb\x80\xe8\x94\x91\xe5\x88\x97\xe5\xb7\x9d\xe5\x87\xad\xe5\x8a\xaa\xe7\x86\xa8\xe6\x8f\xaa\xe5\x88\xa9\xe4\xbf\xb1\xe7\xbb\x89\xe6\x8a\xa2\xe9\xb8\xa8\xe6\x88\x91\xe5\x8d\xb3\xe8\xb4\xa3\xe8\x86\xa6\xe6\x98\x93\xe6\xaf\x93\xe9\xb9\x8a\xe5\x88\xb9\xe7\x8e\xb7\xe5\xb2\xbf\xe7\xa9\xba\xe5\x98\x9e\xe7\xbb\x8a\xe6\x8e\x92\xe6\x9c\xaf\xe4\xbc\xb0\xe9\x94\xb7\xe8\xbf\x9d\xe4\xbb\xac\xe8\x8b\x9f\xe9\x93\x9c\xe6\x92\xad\xe8\x82\x98\xe4\xbb\xb6\xe7\x83\xab\xe5\xae\xa1\xe9\xb2\x82\xe5\xb9\xbf\xe5\x83\x8f\xe9\x93\x8c\xe6\x83\xb0\xe9\x93\x9f\xe5\xb7\xb3\xe8\x83\x8d\xe9\xb2\x8d\xe5\xba\xb7\xe6\x86\xa7\xe8\x89\xb2\xe6\x81\xa2\xe6\x83\xb3\xe6\x8b\xb7\xe5\xb0\xa4\xe7\x96\xb3\xe7\x9f\xa5SYFDA\xe5\xb3\x84\xe8\xa3\x95\xe5\xb8\xae\xe6\x8f\xa1\xe6\x90\x94\xe6\xb0\x90\xe6\xb0\x98\xe9\x9a\xbe\xe5\xa2\x92\xe6\xb2\xae\xe9\x9b\xa8\xe5\x8f\x81\xe7\xbc\xa5\xe6\x82\xb4\xe8\x97\x90\xe6\xb9\xab\xe5\xa8\x9f\xe8\x8b\x91\xe7\xa8\xa0\xe9\xa2\x9b\xe7\xb0\x87\xe5\x90\x8e\xe9\x98\x95\xe9\x97\xad\xe8\x95\xa4\xe7\xbc\x9a\xe6\x80\x8e\xe4\xbd\x9e\xe7\xa0\x81\xe5\x98\xa4\xe8\x94\xa1\xe7\x97\x8a\xe8\x88\xb1\xe8\x9e\xaf\xe5\xb8\x95\xe8\xb5\xab\xe6\x98\xb5\xe5\x8d\x87\xe7\x83\xac\xe5\xb2\xab\xe3\x80\x81\xe7\x96\xb5\xe8\x9c\xbb\xe9\xab\x81\xe8\x95\xa8\xe9\x9a\xb6\xe7\x83\x9b\xe6\xa2\xb0\xe4\xb8\x91\xe7\x9b\x82\xe6\xa2\x81\xe5\xbc\xba\xe9\xb2\x9b\xe7\x94\xb1\xe6\x8b\x98\xe6\x8f\x89\xe5\x8a\xad\xe9\xbe\x9f\xe6\x92\xa4\xe9\x92\xa9\xe5\x91\x95\xe5\xad\x9b\xe8\xb4\xb9\xe5\xa6\xbb\xe6\xbc\x82\xe6\xb1\x82\xe9\x98\x91\xe5\xb4\x96\xe7\xa7\xa4\xe7\x94\x98\xe9\x80\x9a\xe6\xb7\xb1\xe8\xa1\xa5\xe8\xb5\x83\xe5\x9d\x8e\xe5\xba\x8a\xe5\x95\xaa\xe6\x89\xbf\xe5\x90\xbc\xe9\x87\x8f\xe6\x9a\x87\xe9\x92\xbc\xe7\x83\xa8\xe9\x98\x82\xe6\x93\x8e\xe8\x84\xb1\xe9\x80\xae\xe7\xa7\xb0P\xe7\xa5\x9e\xe5\xb1\x9e\xe7\x9f\x97\xe5\x8d\x8e\xe5\xb1\x8a\xe7\x8b\x8d\xe8\x91\x91\xe6\xb1\xb9\xe8\x82\xb2\xe6\x82\xa3\xe7\xaa\x92\xe8\x9b\xb0\xe4\xbd\xbc\xe9\x9d\x99\xe6\xa7\x8e\xe8\xbf\x90\xe9\xb3\x97\xe5\xba\x86\xe9\x80\x9d\xe6\x9b\xbc\xe7\x96\xb1\xe5\x85\x8b\xe4\xbb\xa3\xe5\xae\x98\xe6\xad\xa4\xe9\xba\xb8\xe8\x80\xa7\xe8\x9a\x8c\xe6\x99\x9f\xe4\xbe\x8b\xe7\xa1\x80\xe6\xa6\x9b\xe5\x89\xaf\xe6\xb5\x8b\xe5\x94\xb0\xe7\xbc\xa2\xe8\xbf\xb9\xe7\x81\xac\xe9\x9c\x81\xe8\xba\xab\xe5\xb2\x81\xe8\xb5\xad\xe6\x89\x9b\xe5\x8f\x88\xe8\x8f\xa1\xe4\xb9\x9c\xe9\x9b\xbe\xe6\x9d\xbf\xe8\xaf\xbb\xe9\x99\xb7\xe5\xbe\x89\xe8\xb4\xaf\xe9\x83\x81\xe8\x99\x91\xe5\x8f\x98\xe9\x92\x93\xe8\x8f\x9c\xe5\x9c\xbe\xe7\x8e\xb0\xe7\x90\xa2\xe5\xbc\x8f\xe4\xb9\x90\xe7\xbb\xb4\xe6\xb8\x94\xe6\xb5\x9c\xe5\xb7\xa6\xe5\x90\xbe\xe8\x84\x91\xe9\x92\xa1\xe8\xad\xa6T\xe5\x95\xb5\xe6\x8b\xb4\xe5\x81\x8c\xe6\xbc\xb1\xe6\xb9\xbf\xe7\xa1\x95\xe6\xad\xa2\xe9\xaa\xbc\xe9\xad\x84\xe7\xa7\xaf\xe7\x87\xa5\xe8\x81\x94\xe8\xb8\xa2\xe7\x8e\x9b|\xe5\x88\x99\xe7\xaa\xbf\xe8\xa7\x81\xe6\x8c\xaf\xe7\x95\xbf\xe9\x80\x81\xe7\x8f\xad\xe9\x92\xbd\xe6\x82\xa8\xe8\xb5\xb5\xe5\x88\xa8\xe5\x8d\xb0\xe8\xae\xa8\xe8\xb8\x9d\xe7\xb1\x8d\xe8\xb0\xa1\xe8\x88\x8c\xe5\xb4\xa7\xe6\xb1\xbd\xe8\x94\xbd\xe6\xb2\xaa\xe9\x85\xa5\xe7\xbb\x92\xe6\x80\x96\xe8\xb4\xa2\xe5\xb8\x96\xe8\x82\xb1\xe7\xa7\x81\xe8\x8e\x8e\xe5\x8b\x8b\xe7\xbe\x94\xe9\x9c\xb8\xe5\x8a\xb1\xe5\x93\xbc\xe5\xb8\x90\xe5\xb0\x86\xe5\xb8\x85\xe6\xb8\xa0\xe7\xba\xaa\xe5\xa9\xb4\xe5\xa8\xa9\xe5\xb2\xad\xe5\x8e\x98\xe6\xbb\x95\xe5\x90\xbb\xe4\xbc\xa4\xe5\x9d\x9d\xe5\x86\xa0\xe6\x88\x8a\xe9\x9a\x86\xe7\x98\x81\xe4\xbb\x8b\xe6\xb6\xa7\xe7\x89\xa9\xe9\xbb\x8d\xe5\xb9\xb6\xe5\xa7\x97\xe5\xa5\xa2\xe8\xb9\x91\xe6\x8e\xa3\xe5\x9e\xb8\xe9\x94\xb4\xe5\x91\xbd\xe7\xae\x8d\xe6\x8d\x89\xe7\x97\x85\xe8\xbe\x96\xe7\x90\xb0\xe7\x9c\xad\xe8\xbf\xa9\xe8\x89\x98\xe7\xbb\x8c\xe7\xb9\x81\xe5\xaf\x85\xe8\x8b\xa5\xe6\xaf\x8b\xe6\x80\x9d\xe8\xaf\x89\xe7\xb1\xbb\xe8\xaf\x88\xe7\x87\xae\xe8\xbd\xb2\xe9\x85\xae\xe7\x8b\x82\xe9\x87\x8d\xe5\x8f\x8d\xe8\x81\x8c\xe7\xad\xb1\xe5\x8e\xbf\xe5\xa7\x94\xe7\xa3\x95\xe7\xbb\xa3\xe5\xa5\x96\xe6\x99\x8b\xe6\xbf\x89\xe5\xbf\x97\xe5\xbe\xbd\xe8\x82\xa0\xe5\x91\x88\xe7\x8d\x90\xe5\x9d\xbb\xe5\x8f\xa3\xe7\x89\x87\xe7\xa2\xb0\xe5\x87\xa0\xe6\x9d\x91\xe6\x9f\xbf\xe5\x8a\xb3\xe6\x96\x99\xe8\x8e\xb7\xe4\xba\xa9\xe6\x83\x95\xe6\x99\x95\xe5\x8e\x8c\xe5\x8f\xb7\xe7\xbd\xa2\xe6\xb1\xa0\xe6\xad\xa3\xe9\x8f\x96\xe7\x85\xa8\xe5\xae\xb6\xe6\xa3\x95\xe5\xa4\x8d\xe5\xb0\x9d\xe6\x87\x8b\xe8\x9c\xa5\xe9\x94\x85\xe5\xb2\x9b\xe6\x89\xb0\xe9\x98\x9f\xe5\x9d\xa0\xe7\x98\xbe\xe9\x92\xac@\xe5\x8d\xa7\xe7\x96\xa3\xe9\x95\x87\xe8\xad\xac\xe5\x86\xb0\xe5\xbd\xb7\xe9\xa2\x91\xe9\xbb\xaf\xe6\x8d\xae\xe5\x9e\x84\xe9\x87\x87\xe5\x85\xab\xe7\xbc\xaa\xe7\x98\xab\xe5\x9e\x8b\xe7\x86\xb9\xe7\xa0\xb0\xe6\xa5\xa0\xe8\xa5\x81\xe7\xae\x90\xe4\xbd\x86\xe5\x98\xb6\xe7\xbb\xb3\xe5\x95\xa4\xe6\x8b\x8d\xe7\x9b\xa5\xe7\xa9\x86\xe5\x82\xb2\xe6\xb4\x97\xe7\x9b\xaf\xe5\xa1\x98\xe6\x80\x94\xe7\xad\x9b\xe4\xb8\xbf\xe5\x8f\xb0\xe6\x81\x92\xe5\x96\x82\xe8\x91\x9b\xe6\xb0\xb8\xef\xbf\xa5\xe7\x83\x9f\xe9\x85\x92\xe6\xa1\xa6\xe4\xb9\xa6\xe7\xa0\x82\xe8\x9a\x9d\xe7\xbc\x89\xe6\x80\x81\xe7\x80\x9a\xe8\xa2\x84\xe5\x9c\xb3\xe8\xbd\xbb\xe8\x9b\x9b\xe8\xb6\x85\xe6\xa6\xa7\xe9\x81\x9b\xe5\xa7\x92\xe5\xa5\x98\xe9\x93\xae\xe5\x8f\xb3\xe8\x8d\xbd\xe6\x9c\x9b\xe5\x81\xbb\xe5\x8d\xa1\xe4\xb8\xb6\xe6\xb0\xb0\xe9\x99\x84\xe5\x81\x9a\xe9\x9d\xa9\xe7\xb4\xa2\xe6\x88\x9a\xe5\x9d\xa8\xe6\xa1\xb7\xe5\x94\x81\xe5\x9e\x85\xe6\xa6\xbb\xe5\xb2\x90\xe5\x81\x8e\xe5\x9d\x9b\xe8\x8e\xa8\xe5\xb1\xb1\xe6\xae\x8a\xe5\xbe\xae\xe9\xaa\x87\xe9\x99\x88\xe7\x88\xa8\xe6\x8e\xa8\xe5\x97\x9d\xe9\xa9\xb9\xe6\xbe\xa1\xe8\x97\x81\xe5\x91\xa4\xe5\x8d\xa4\xe5\x98\xbb\xe7\xb3\x85\xe9\x80\x9b\xe4\xbe\xb5\xe9\x83\x93\xe9\x85\x8c\xe5\xbe\xb7\xe6\x91\x87\xe2\x80\xbb\xe9\xac\x83\xe8\xa2\xab\xe6\x85\xa8\xe6\xae\xa1\xe7\xbe\xb8\xe6\x98\x8c\xe6\xb3\xa1\xe6\x88\x9b\xe9\x9e\x8b\xe6\xb2\xb3\xe5\xae\xaa\xe6\xb2\xbf\xe7\x8e\xb2\xe9\xb2\xa8\xe7\xbf\x85\xe5\x93\xbd\xe6\xba\x90\xe9\x93\x85\xe8\xaf\xad\xe7\x85\xa7\xe9\x82\xaf\xe5\x9d\x80\xe8\x8d\x83\xe4\xbd\xac\xe9\xa1\xba\xe9\xb8\xb3\xe7\x94\xba\xe9\x9c\xad\xe7\x9d\xbe\xe7\x93\xa2\xe5\xa4\xb8\xe6\xa4\x81\xe6\x99\x93\xe9\x85\xbf\xe7\x97\x88\xe5\x92\x94\xe4\xbe\x8f\xe5\x88\xb8\xe5\x99\x8e\xe6\xb9\x8d\xe7\xad\xbe\xe5\x9a\xb7\xe7\xa6\xbb\xe5\x8d\x88\xe5\xb0\x9a\xe7\xa4\xbe\xe9\x94\xa4\xe8\x83\x8c\xe5\xad\x9f\xe4\xbd\xbf\xe6\xb5\xaa\xe7\xbc\xa6\xe6\xbd\x8d\xe9\x9e\x85\xe5\x86\x9b\xe5\xa7\xb9\xe9\xa9\xb6\xe7\xac\x91\xe9\xb3\x9f\xe9\xb2\x81\xe3\x80\x8b\xe5\xad\xbd\xe9\x92\x9c\xe7\xbb\xbf\xe6\xb4\xb1\xe7\xa4\xb4\xe7\x84\xaf\xe6\xa4\xb0\xe9\xa2\x96\xe5\x9b\x94\xe4\xb9\x8c\xe5\xad\x94\xe5\xb7\xb4\xe4\xba\x92\xe6\x80\xa7\xe6\xa4\xbd\xe5\x93\x9e\xe8\x81\x98\xe6\x98\xa8\xe6\x97\xa9\xe6\x9a\xae\xe8\x83\xb6\xe7\x82\x80\xe9\x9a\xa7\xe4\xbd\x8e\xe5\xbd\x97\xe6\x98\x9d\xe9\x93\x81\xe5\x91\x93\xe6\xb0\xbd\xe8\x97\x89\xe5\x96\x94\xe7\x99\x96\xe7\x91\x97\xe5\xa7\xa8\xe6\x9d\x83\xe8\x83\xb1\xe9\x9f\xa6\xe5\xa0\x91\xe8\x9c\x9c\xe9\x85\x8b\xe6\xa5\x9d\xe7\xa0\x9d\xe6\xaf\x81\xe9\x9d\x93\xe6\xad\x99\xe9\x94\xb2\xe7\xa9\xb6\xe5\xb1\x8b\xe5\x96\xb3\xe9\xaa\xa8\xe8\xbe\xa8\xe7\xa2\x91\xe6\xad\xa6\xe9\xb8\xa0\xe5\xae\xab\xe8\xbe\x9c\xe7\x83\x8a\xe9\x80\x82\xe5\x9d\xa1\xe6\xae\x83\xe5\x9f\xb9\xe4\xbd\xa9\xe4\xbe\x9b\xe8\xb5\xb0\xe8\x9c\x88\xe8\xbf\x9f\xe7\xbf\xbc\xe5\x86\xb5\xe5\xa7\xa3\xe5\x87\x9b\xe6\xb5\x94\xe5\x90\x83\xe9\xa3\x98\xe5\x80\xba\xe7\x8a\x9f\xe9\x87\x91\xe4\xbf\x83\xe8\x8b\x9b\xe5\xb4\x87\xe5\x9d\x82\xe8\x8e\xb3\xe7\x95\x94\xe7\xbb\x82\xe5\x85\xb5\xe8\xa0\x95\xe6\x96\x8b\xe6\xa0\xb9\xe7\xa0\x8d\xe4\xba\xa2\xe6\xac\xa2\xe6\x81\xac\xe5\xb4\x94\xe5\x89\x81\xe9\xa4\x90\xe6\xa6\xab\xe5\xbf\xab\xe6\x89\xb6\xe2\x80\x96\xe6\xbf\x92\xe7\xbc\xa0\xe9\xb3\x9c\xe5\xbd\x93\xe5\xbd\xad\xe9\xa9\xad\xe6\xb5\xa6\xe7\xaf\xae\xe6\x98\x80\xe9\x94\x86\xe7\xa7\xb8\xe9\x92\xb3\xe5\xbc\x8b\xe5\xa8\xa3\xe7\x9e\x91\xe5\xa4\xb7\xe9\xbe\x9b\xe8\x8b\xab\xe6\x8b\xb1\xe8\x87\xb4%\xe5\xb5\x8a\xe9\x9a\x9c\xe9\x9a\x90\xe5\xbc\x91\xe5\x88\x9d\xe5\xa8\x93\xe6\x8a\x89\xe6\xb1\xa9\xe7\xb4\xaf\xe8\x93\x96""\xe5\x94\xac\xe5\x8a\xa9\xe8\x8b\x93\xe6\x98\x99\xe6\x8a\xbc\xe6\xaf\x99\xe7\xa0\xb4\xe5\x9f\x8e\xe9\x83\xa7\xe9\x80\xa2\xe5\x9a\x8f\xe7\x8d\xad\xe7\x9e\xbb\xe6\xba\xb1\xe5\xa9\xbf\xe8\xb5\x8a\xe8\xb7\xa8\xe6\x81\xbc\xe7\x92\xa7\xe8\x90\x83\xe5\xa7\xbb\xe8\xb2\x89\xe7\x81\xb5\xe7\x82\x89\xe5\xaf\x86\xe6\xb0\x9b\xe9\x99\xb6\xe7\xa0\xb8\xe8\xb0\xac\xe8\xa1\x94\xe7\x82\xb9\xe7\x90\x9b\xe6\xb2\x9b\xe6\x9e\xb3\xe5\xb1\x82\xe5\xb2\xb1\xe8\xaf\xba\xe8\x84\x8d\xe6\xa6\x88\xe5\x9f\x82\xe5\xbe\x81\xe5\x86\xb7\xe8\xa3\x81\xe6\x89\x93\xe8\xb9\xb4\xe7\xb4\xa0\xe7\x98\x98\xe9\x80\x9e\xe8\x9b\x90\xe8\x81\x8a\xe6\xbf\x80\xe8\x85\xb1\xe8\x90\x98\xe8\xb8\xb5\xe9\xa3\x92\xe8\x93\x9f\xe5\x90\x86\xe5\x8f\x96\xe5\x92\x99\xe7\xb0\x8b\xe6\xb6\x93\xe7\x9f\xa9\xe6\x9b\x9d\xe6\x8c\xba\xe6\x8f\xa3\xe5\xba\xa7\xe4\xbd\xa0\xe5\x8f\xb2\xe8\x88\xb5\xe7\x84\xb1\xe5\xb0\x98\xe8\x8b\x8f\xe7\xac\x88\xe8\x84\x9a\xe6\xba\x89\xe6\xa6\xa8\xe8\xaf\xb5\xe6\xa8\x8a\xe9\x82\x93\xe7\x84\x8a\xe4\xb9\x89\xe5\xba\xb6\xe5\x84\x8b\xe8\x9f\x8b\xe8\x92\xb2\xe8\xb5\xa6\xe5\x91\xb7\xe6\x9d\x9e\xe8\xaf\xa0\xe8\xb1\xaa\xe8\xbf\x98\xe8\xaf\x95\xe9\xa2\x93\xe8\x8c\x89\xe5\xa4\xaa\xe9\x99\xa4\xe7\xb4\xab\xe9\x80\x83\xe7\x97\xb4\xe8\x8d\x89\xe5\x85\x85\xe9\xb3\x95\xe7\x8f\x89\xe7\xa5\x97\xe5\xa2\xa8\xe6\xb8\xad\xe7\x83\xa9\xe8\x98\xb8\xe6\x85\x95\xe7\x92\x87\xe9\x95\xb6\xe7\xa9\xb4\xe5\xb5\x98\xe6\x81\xb6\xe9\xaa\x82\xe9\x99\xa9\xe7\xbb\x8b\xe5\xb9\x95\xe7\xa2\x89\xe8\x82\xba\xe6\x88\xb3\xe5\x88\x98\xe6\xbd\x9e\xe7\xa7\xa3\xe7\xba\xbe\xe6\xbd\x9c\xe9\x8a\xae\xe6\xb4\x9b\xe9\xa1\xbb\xe7\xbd\x98\xe9\x94\x80\xe7\x98\xaa\xe6\xb1\x9e\xe5\x85\xae\xe5\xb1\x89r\xe6\x9e\x97\xe5\x8e\x95\xe8\xb4\xa8\xe6\x8e\xa2\xe5\x88\x92\xe7\x8b\xb8\xe6\xae\x9a\xe5\x96\x84\xe7\x85\x8a\xe7\x83\xb9\xe3\x80\x92\xe9\x94\x88\xe9\x80\xaf\xe5\xae\xb8\xe8\xbe\x8d\xe6\xb3\xb1\xe6\x9f\x9a\xe8\xa2\x8d\xe8\xbf\x9c\xe8\xb9\x8b\xe5\xb6\x99\xe7\xbb\x9d\xe5\xb3\xa5\xe5\xa8\xa5\xe7\xbc\x8d\xe9\x9b\x80\xe5\xbe\xb5\xe8\xae\xa4\xe9\x95\xb1\xe8\xb0\xb7=\xe8\xb4\xa9\xe5\x8b\x89\xe6\x92\xa9\xe9\x84\xaf\xe6\x96\x90\xe6\xb4\x8b\xe9\x9d\x9e\xe7\xa5\x9a\xe6\xb3\xbe\xe8\xaf\x92\xe9\xa5\xbf\xe6\x92\xac\xe5\xa8\x81\xe6\x99\xb7\xe6\x90\xad\xe8\x8a\x8d\xe9\x94\xa5\xe7\xac\xba\xe8\x93\xa6\xe5\x80\x99\xe7\x90\x8a\xe6\xa1\xa3\xe7\xa4\x81\xe6\xb2\xbc\xe5\x8d\xb5\xe8\x8d\xa0\xe5\xbf\x91\xe6\x9c\x9d\xe5\x87\xb9\xe7\x91\x9e\xe5\xa4\xb4\xe4\xbb\xaa\xe5\xbc\xa7\xe5\xad\xb5\xe7\x95\x8f\xe9\x93\x86\xe7\xaa\x81\xe8\xa1\xb2\xe8\xbd\xa6\xe6\xb5\xa9\xe6\xb0\x94\xe8\x8c\x82\xe6\x82\x96\xe5\x8e\xa2\xe6\x9e\x95\xe9\x85\x9d\xe6\x88\xb4\xe6\xb9\xbe\xe9\x82\xb9\xe9\xa3\x9a\xe6\x94\x98\xe9\x94\x82\xe5\x86\x99\xe5\xae\xb5\xe7\xbf\x81\xe5\xb2\xb7\xe6\x97\xa0\xe5\x96\x9c\xe4\xb8\x88\xe6\x8c\x91\xe5\x97\x9f\xe7\xbb\x9b\xe6\xae\x89\xe8\xae\xae\xe6\xa7\xbd\xe5\x85\xb7\xe9\x86\x87\xe6\xb7\x9e\xe7\xac\x83\xe9\x83\xb4\xe9\x98\x85\xe9\xa5\xbc\xe5\xba\x95\xe5\xa3\x95\xe7\xa0\x9a\xe5\xbc\x88\xe8\xaf\xa2\xe7\xbc\x95\xe5\xba\xb9\xe7\xbf\x9f\xe9\x9b\xb6\xe7\xad\xb7\xe6\x9a\xa8\xe8\x88\x9f\xe9\x97\xba\xe7\x94\xaf\xe6\x92\x9e\xe9\xba\x82\xe8\x8c\x8c\xe8\x94\xbc\xe5\xbe\x88\xe7\x8f\xb2\xe6\x8d\x95\xe6\xa3\xa0\xe8\xa7\x92\xe9\x98\x89\xe5\xaa\x9b\xe5\xa8\xb2\xe8\xaf\xbd\xe5\x89\xbf\xe5\xb0\x89\xe7\x88\xb5\xe7\x9d\xac\xe9\x9f\xa9\xe8\xaf\xb0\xe5\x8c\xa3\xe5\x8d\xb1\xe7\xb3\x8d\xe9\x95\xaf\xe7\xab\x8b\xe6\xb5\x8f\xe9\x98\xb3\xe5\xb0\x91\xe7\x9b\x86\xe8\x88\x94\xe6\x93\x98\xe5\x8c\xaa\xe7\x94\xb3\xe5\xb0\xac\xe9\x93\xa3\xe6\x97\xaf\xe6\x8a\x96\xe8\xb5\x98\xe7\x93\xaf\xe5\xb1\x85\xcb\x87\xe5\x93\xae\xe6\xb8\xb8\xe9\x94\xad\xe8\x8c\x8f\xe6\xad\x8c\xe5\x9d\x8f\xe7\x94\x9a\xe7\xa7\x92\xe8\x88\x9e\xe6\xb2\x99\xe4\xbb\x97\xe5\x8a\xb2\xe6\xbd\xba\xe9\x98\xbf\xe7\x87\xa7\xe9\x83\xad\xe5\x97\x96\xe9\x9c\x8f\xe5\xbf\xa0\xe6\x9d\x90\xe5\xa5\x82\xe8\x80\x90\xe8\xb7\xba\xe7\xa0\x80\xe8\xbe\x93\xe5\xb2\x96\xe5\xaa\xb3\xe6\xb0\x9f\xe6\x9e\x81\xe6\x91\x86\xe7\x81\xbf\xe4\xbb\x8a\xe6\x89\x94\xe8\x85\xbb\xe6\x9e\x9d\xe5\xa5\x8e\xe8\x8d\xaf\xe7\x86\x84\xe5\x90\xa8\xe8\xaf\x9dq\xe9\xa2\x9d\xe6\x85\x91\xe5\x98\x8c\xe5\x8d\x8f\xe5\x96\x80\xe5\xa3\xb3\xe5\x9f\xad\xe8\xa7\x86\xe8\x91\x97\xe6\x96\xbc\xe6\x84\xa7\xe9\x99\xb2\xe7\xbf\x8c\xe5\xb3\x81\xe9\xa2\x85\xe4\xbd\x9b\xe8\x85\xb9\xe8\x81\x8b\xe4\xbe\xaf\xe5\x92\x8e\xe5\x8f\x9f\xe7\xa7\x80\xe9\xa2\x87\xe5\xad\x98\xe8\xbe\x83\xe7\xbd\xaa\xe5\x93\x84\xe5\xb2\x97\xe6\x89\xab\xe6\xa0\x8f\xe9\x92\xbe\xe7\xbe\x8c\xe5\xb7\xb1\xe7\x92\xa8\xe6\x9e\xad\xe9\x9c\x89\xe7\x85\x8c\xe6\xb6\xb8\xe8\xa1\xbf\xe9\x94\xae\xe9\x95\x9d\xe7\x9b\x8a\xe5\xb2\xa2\xe5\xa5\x8f\xe8\xbf\x9e\xe5\xa4\xaf\xe7\x9d\xbf\xe5\x86\xa5\xe5\x9d\x87\xe7\xb3\x96\xe7\x8b\x9e\xe8\xb9\x8a\xe7\xa8\xbb\xe7\x88\xb8\xe5\x88\xbf\xe8\x83\xa5\xe7\x85\x9c\xe4\xb8\xbd\xe8\x82\xbf\xe7\x92\x83\xe6\x8e\xb8\xe8\xb7\x9a\xe7\x81\xbe\xe5\x9e\x82\xe6\xa8\xbe\xe6\xbf\x91\xe4\xb9\x8e\xe8\x8e\xb2\xe7\xaa\x84\xe7\x8a\xb9\xe6\x92\xae\xe6\x88\x98\xe9\xa6\x84\xe8\xbd\xaf\xe7\xbb\x9c\xe6\x98\xbe\xe9\xb8\xa2\xe8\x83\xb8\xe5\xae\xbe\xe5\xa6\xb2\xe6\x81\x95\xe5\x9f\x94\xe8\x9d\x8c\xe4\xbb\xbd\xe9\x81\x87\xe5\xb7\xa7\xe7\x9e\x9f\xe7\xb2\x92\xe6\x81\xb0\xe5\x89\xa5\xe6\xa1\xa1\xe5\x8d\x9a\xe8\xae\xaf\xe5\x87\xaf\xe5\xa0\x87\xe9\x98\xb6\xe6\xbb\xa4\xe5\x8d\x96\xe6\x96\x8c\xe9\xaa\x9a\xe5\xbd\xac\xe5\x85\x91\xe7\xa3\xba\xe6\xa8\xb1\xe8\x88\xb7\xe4\xb8\xa4\xe5\xa8\xb1\xe7\xa6\x8f\xe4\xbb\x83\xe5\xb7\xae\xe6\x89\xbe\xe6\xa1\x81\xc3\xb7\xe5\x87\x80\xe6\x8a\x8a\xe9\x98\xb4\xe6\xb1\xa1\xe6\x88\xac\xe9\x9b\xb7\xe7\xa2\x93\xe8\x95\xb2\xe6\xa5\x9a\xe7\xbd\xa1\xe7\x84\x96\xe6\x8a\xbd\xe5\xa6\xab\xe5\x92\x92\xe4\xbb\x91\xe9\x97\xb1\xe5\xb0\xbd\xe9\x82\x91\xe8\x8f\x81\xe7\x88\xb1\xe8\xb4\xb7\xe6\xb2\xa5\xe9\x9e\x91\xe7\x89\xa1\xe5\x97\x89\xe5\xb4\xb4\xe9\xaa\xa4\xe5\xa1\x8c\xe5\x97\xa6\xe8\xae\xa2\xe6\x8b\xae\xe6\xbb\x93\xe6\x8d\xa1\xe9\x94\xbb\xe6\xac\xa1\xe5\x9d\xaa\xe6\x9d\xa9\xe8\x87\x83\xe7\xae\xac\xe8\x9e\x8d\xe7\x8f\x82\xe9\xb9\x97\xe5\xae\x97\xe6\x9e\x9a\xe9\x99\x8d\xe9\xb8\xac\xe5\xa6\xaf\xe9\x98\x84\xe5\xa0\xb0\xe7\x9b\x90\xe6\xaf\x85\xe5\xbf\x85\xe6\x9d\xa8\xe5\xb4\x83\xe4\xbf\xba\xe7\x94\xac\xe7\x8a\xb6\xe8\x8e\x98\xe8\xb4\xa7\xe8\x80\xb8\xe8\x8f\xb1\xe8\x85\xbc\xe9\x93\xb8\xe5\x94\x8f\xe7\x97\xa4\xe5\xad\x9a\xe6\xbe\xb3\xe6\x87\x92\xe6\xba\x85\xe7\xbf\x98\xe7\x96\x99\xe6\x9d\xb7\xe6\xb7\xbc\xe7\xbc\x99\xe9\xaa\xb0\xe5\x96\x8a\xe6\x82\x89\xe7\xa0\xbb\xe5\x9d\xb7\xe8\x89\x87\xe8\xb5\x81\xe7\x95\x8c\xe8\xb0\xa4\xe7\xba\xa3\xe5\xae\xb4\xe6\x99\x83\xe8\x8c\xb9\xe5\xbd\x92\xe9\xa5\xad\xe6\xa2\xa2\xe9\x93\xa1\xe8\xa1\x97\xe6\x8a\x84\xe8\x82\xbc\xe9\xac\x9f\xe8\x8b\xaf\xe9\xa2\x82\xe6\x92\xb7\xe6\x88\x88\xe7\x82\x92\xe5\x92\x86\xe8\x8c\xad\xe7\x98\x99\xe8\xb4\x9f\xe4\xbb\xb0\xe5\xae\xa2\xe7\x90\x89\xe9\x93\xa2\xe5\xb0\x81\xe5\x8d\x91\xe7\x8f\xa5\xe6\xa4\xbf\xe9\x95\xa7\xe7\xaa\xa8\xe9\xac\xb2\xe5\xaf\xbf\xe5\xbe\xa1\xe8\xa2\xa4\xe9\x93\x83\xe8\x90\x8e\xe7\xa0\x96\xe9\xa4\xae\xe8\x84\x92\xe8\xa3\xb3\xe8\x82\xaa\xe5\xad\x95\xe5\xab\xa3\xe9\xa6\x97\xe5\xb5\x87\xe6\x81\xb3\xe6\xb0\xaf\xe6\xb1\x9f\xe7\x9f\xb3\xe8\xa4\xb6\xe5\x86\xa2\xe7\xa5\xb8\xe9\x98\xbb\xe7\x8b\x88\xe7\xbe\x9e\xe9\x93\xb6\xe9\x9d\xb3\xe9\x80\x8f\xe5\x92\xb3\xe5\x8f\xbc\xe6\x95\xb7\xe8\x8a\xb7\xe5\x95\xa5\xe5\xae\x83\xe7\x93\xa4\xe5\x85\xb0\xe7\x97\x98\xe6\x87\x8a\xe9\x80\x91\xe8\x82\x8c\xe5\xbe\x80\xe6\x8d\xba\xe5\x9d\x8a\xe7\x94\xa9\xe5\x91\xbb\xe3\x80\x83\xe6\xb2\xa6\xe5\xbf\x98\xe8\x86\xbb\xe7\xa5\x9f\xe8\x8f\x85\xe5\x89\xa7\xe5\xb4\x86\xe6\x99\xba\xe5\x9d\xaf\xe8\x87\xa7\xe9\x9c\x8d\xe5\xa2\x85\xe6\x94\xbb\xe7\x9c\xaf\xe5\x80\x98\xe6\x8b\xa2\xe9\xaa\xa0\xe9\x93\x90\xe5\xba\xad\xe5\xb2\x99\xe7\x93\xa0\xe2\x80\xb2\xe7\xbc\xba\xe6\xb3\xa5\xe8\xbf\xa2\xe6\x8d\xb6?\xef\xbc\x9f\xe9\x83\x8f\xe5\x96\x99\xe6\x8e\xb7\xe6\xb2\x8c\xe7\xba\xaf\xe7\xa7\x98\xe7\xa7\x8d\xe5\x90\xac\xe7\xbb\x98\xe5\x9b\xba\xe8\x9e\xa8\xe5\x9b\xa2\xe9\xa6\x99\xe7\x9b\x97\xe5\xa6\x92\xe5\x9f\x9a\xe8\x93\x9d\xe6\x8b\x96\xe6\x97\xb1\xe8\x8d\x9e\xe9\x93\x80\xe8\xa1\x80\xe9\x81\x8f\xe6\xb1\xb2\xe8\xbe\xb0\xe5\x8f\xa9\xe6\x8b\xbd\xe5\xb9\x85\xe7\xa1\xac\xe6\x83\xb6\xe6\xa1\x80\xe6\xbc\xa0\xe6\x8e\xaa\xe6\xb3\xbc\xe5\x94\x91\xe9\xbd\x90\xe8\x82\xbe\xe5\xbf\xb5\xe9\x85\xb1\xe8\x99\x9a\xe5\xb1\x81\xe8\x80\xb6\xe6\x97\x97\xe7\xa0\xa6\xe9\x97\xb5\xe5\xa9\x89\xe9\xa6\x86\xe6\x8b\xad\xe7\xbb\x85\xe9\x9f\xa7\xe5\xbf\x8f\xe7\xaa\x9d\xe9\x86\x8b\xe8\x91\xba\xe9\xa1\xbe\xe8\xbe\x9e\xe5\x80\x9c\xe5\xa0\x86\xe8\xbe\x8b\xe9\x80\x86\xe7\x8e\x9f\xe8\xb4\xb1\xe7\x96\xbe\xe8\x91\xa3\xe6\x83\x98\xe5\x80\x8c\xe9\x94\x95\xe6\xb7\x98\xe5\x98\x80\xe8\x8e\xbd\xe4\xbf\xad\xe7\xac\x8f\xe7\xbb\x91\xe9\xb2\xb7\xe6\x9d\x88\xe6\x8b\xa9\xe8\x9f\x80\xe7\xb2\xa5\xe5\x97\xaf\xe9\xa9\xb0\xe9\x80\xbe\xe6\xa1\x88\xe8\xb0\xaa\xe8\xa4\x93\xe8\x83\xab\xe5\x93\xa9\xe6\x98\x95\xe9\xa2\x9a\xe9\xb2\xa2\xe7\xbb\xa0\xe8\xba\xba\xe9\xb9\x84\xe5\xb4\x82\xe5\x84\x92\xe4\xbf\xa8\xe4\xb8\x9d\xe5\xb0\x95\xe6\xb3\x8c\xe5\x95\x8a\xe8\x90\xb8\xe5\xbd\xb0\xe5\xb9\xba\xe5\x90\x9f\xe9\xaa\x84\xe8\x8b\xa3\xe5\xbc\xa6\xe8\x84\x8a\xe7\x91\xb0\xe3\x80\x88\xe8\xaf\x9b\xe9\x95\x81\xe6\x9e\x90\xe9\x97\xaa\xe5\x89\xaa\xe4\xbe\xa7\xe5\x93\x9f\xe6\xa1\x86\xe8\x9e\x83\xe5\xae\x88\xe5\xac\x97\xe7\x87\x95\xe7\x8b\xad\xe9\x93\x88\xe7\xbc\xae\xe6\xa6\x82\xe8\xbf\xb3\xe7\x97\xa7\xe9\xb2\xb2\xe4\xbf\xaf\xe5\x94\xae\xe7\xac\xbc\xe7\x97\xa3\xe6\x89\x89\xe6\x8c\x96\xe6\xbb\xa1\xe5\x92\x8b\xe6\x8f\xb4\xe9\x82\xb1\xe6\x89\x87\xe6\xad\xaa\xe4\xbe\xbf\xe7\x8e\x91\xe7\xbb\xa6\xe5\xb3\xa1\xe8\x9b\x87\xe5\x8f\xa8\xe3\x80\x96\xe6\xb3\xbd\xe8\x83\x83\xe6\x96\x93\xe5\x96\x8b\xe6\x80\x82\xe5\x9d\x9f\xe7\x8c\xaa\xe8\xaf\xa5\xe8\x9a\xac\xe7\x82\x95\xe5\xbc\xa5\xe8\xb5\x9e\xe6\xa3\xa3\xe6\x99\x94\xe5\xa8\xa0\xe6\x8c\xb2\xe7\x8b\xa1\xe5\x88\x9b\xe7\x96\x96\xe9\x93\x95\xe9\x95\xad\xe7\xa8\xb7\xe6\x8c\xab\xe5\xbc\xad\xe5\x95\xbe\xe7\xbf\x94\xe7\xb2\x89\xe5\xb1\xa5\xe8\x8b\x98\xe5\x93\xa6\xe6\xa5\xbc\xe7\xa7\x95\xe9\x93\x82\xe5\x9c\x9f\xe9\x94\xa3\xe7\x98\x9f\xe6\x8c\xa3\xe6\xa0\x89\xe4\xb9\xa0\xe4\xba\xab\xe6\xa1\xa2\xe8\xa2\x85\xe7\xa3\xa8\xe6\xa1\x82\xe8\xb0\xa6\xe5\xbb\xb6\xe5\x9d\x9a\xe8\x94\x9a\xe5\x99\x97\xe7\xbd\xb2\xe8\xb0\x9f\xe7\x8c\xac\xe9\x92\x8e\xe6\x81\x90\xe5\xac\x89\xe9\x9b\x92\xe5\x80\xa6\xe8\xa1\x85\xe4\xba\x8f\xe7\x92\xa9\xe7\x9d\xb9\xe5\x88\xbb\xe6\xae\xbf\xe7\x8e\x8b\xe7\xae\x97\xe9\x9b\x95\xe9\xba\xbb\xe4\xb8\x98\xe6\x9f\xaf\xe9\xaa\x86\xe4\xb8\xb8\xe5\xa1\x8d\xe8\xb0\x9a\xe6\xb7\xbb\xe9\xb2\x88\xe5\x9e\x93\xe6\xa1\x8e\xe8\x9a\xaf\xe8\x8a\xa5\xe4\xba\x88\xe9\xa3\x95\xe9\x95\xa6\xe8\xb0\x8c\xe7\xaa\x97\xe9\x86\x9a\xe8\x8f\x80\xe4\xba\xae\xe6\x90\xaa\xe8\x8e\xba\xe8\x92\xbf\xe7\xbe\x81\xe8\xb6\xb3J\xe7\x9c\x9f\xe8\xbd\xb6\xe6\x82\xac\xe8\xa1\xb7\xe9\x9d\x9b\xe7\xbf\x8a\xe6\x8e\xa9\xe5\x93\x92\xe7\x82\x85\xe6\x8e\x90\xe5\x86\xbc\xe5\xa6\xael\xe8\xb0\x90\xe7\xa8\x9a\xe8\x8d\x86\xe6\x93\x92\xe7\x8a\xaf\xe9\x99\xb5\xe8\x99\x8f\xe6\xb5\x93\xe5\xb4\xbd\xe5\x88\x8d\xe9\x99\x8c\xe5\x82\xbb\xe5\xad\x9c\xe5\x8d\x83\xe9\x9d\x96\xe6\xbc\x94\xe7\x9f\x9c\xe9\x92\x95\xe7\x85\xbd\xe6\x9d\xb0\xe9\x85\x97\xe6\xb8\x97\xe4\xbc\x9e\xe6\xa0\x8b\xe4\xbf\x97\xe6\xb3\xab\xe6\x88\x8d\xe7\xbd\x95\xe6\xb2\xbe\xe7\x96\xbd\xe7\x81\x8f\xe7\x85\xa6\xe8\x8a\xac\xe7\xa3\xb4\xe5\x8f\xb1\xe9\x98\xb1\xe6\xa6\x89\xe6\xb9\x83\xe8\x9c\x80\xe5\x8f\x89\xe9\x86\x92\xe5\xbd\xaa\xe7\xa7\x9f\xe9\x83\xa1\xe7\xaf\xb7\xe5\xb1\x8e\xe8\x89\xaf\xe5\x9e\xa2\xe9\x9a\x97\xe5\xbc\xb1\xe9\x99\xa8\xe5\xb3\xaa\xe7\xa0\xb7\xe6\x8e\xb4\xe9\xa2\x81\xe8\x83\x8e\xe9\x9b\xaf\xe7\xbb\xb5\xe8\xb4\xac\xe6\xb2\x90\xe6\x92\xb5\xe9\x9a\x98\xe7\xaf\x99\xe6\x9a\x96\xe6\x9b\xb9\xe9\x99\xa1\xe6\xa0\x93\xe5\xa1\xab\xe8\x87\xbc\xe5\xbd\xa6\xe7\x93\xb6\xe7\x90\xaa\xe6\xbd\xbc\xe5\x93\xaa\xe9\xb8\xa1\xe6\x91\xa9\xe5\x95\xa6\xe4\xbf\x9f\xe9\x94\x8b\xe5\x9f\x9f\xe8\x80\xbb\xe8\x94\xab\xe7\x96\xaf\xe7\xba\xb9\xe6\x92\x87\xe6\xaf\x92\xe7\xbb\xb6\xe7\x97\x9b\xe9\x85\xaf\xe5\xbf\x8d\xe7\x88\xaa\xe8\xb5\xb3\xe6\xad\x86\xe5\x98\xb9\xe8\xbe\x95\xe7\x83\x88\xe5\x86\x8c\xe6\x9c\xb4\xe9\x92\xb1\xe5\x90\xae\xe6\xaf\xaf\xe7\x99\x9c\xe5\xa8\x83\xe8\xb0\x80\xe9\x82\xb5\xe5\x8e\xae\xe7\x82\xbd\xe7\x92\x9e\xe9\x82\x83\xe4\xb8\x90\xe8\xbf\xbd\xe8\xaf\x8d\xe7\x93\x92\xe5\xbf\x86\xe8\xbd\xa7\xe8\x8a\xab\xe8\xb0\xaf\xe5\x96\xb7\xe5\xbc\x9f\xe5\x8d\x8a\xe5\x86\x95\xe8\xa3\x99\xe6\x8e\x96\xe5\xa2\x89\xe7\xbb\xae\xe5\xaf\x9d\xe8\x8b\x94\xe5\x8a\xbf\xe9\xa1\xb7\xe8\xa4\xa5\xe5\x88\x87\xe8\xa1\xae\xe5\x90\x9b\xe4\xbd\xb3\xe5\xab\x92\xe8\x9a\xa9\xe9\x9c\x9e\xe4\xbd\x9a\xe6\xb4\x99\xe9\x80\x8a\xe9\x95\x96\xe6\x9a\xb9\xe5\x94\x9b&\xe6\xae\x92\xe9\xa1\xb6\xe7\xa2\x97\xe7\x8d\x97\xe8\xbd\xad\xe9\x93\xba\xe8\x9b\x8a\xe5\xba\x9f\xe6\x81\xb9\xe6\xb1\xa8\xe5\xb4\xa9\xe7\x8f\x8d\xe9\x82\xa3\xe6\x9d\xb5\xe6\x9b\xb2\xe7\xba\xba\xe5\xa4\x8f\xe8\x96\xb0\xe5\x82\x80\xe9\x97\xb3\xe6\xb7\xac\xe5\xa7\x98\xe8\x88\x80\xe6\x8b\xa7\xe5\x8d\xb7\xe6\xa5\x82\xe6\x81\x8d\xe8\xae\xaa\xe5\x8e\xa9\xe5\xaf\xae\xe7\xaf\xaa\xe8\xb5\x93\xe4\xb9\x98\xe7\x81\xad\xe7\x9b\x85\xe9\x9e\xa3\xe6\xb2\x9f\xe6\x85\x8e\xe6\x8c\x82\xe9\xa5\xba\xe9\xbc\xbe\xe6\x9d\xb3\xe6\xa0\x91\xe7\xbc\xa8\xe4\xb8\x9b\xe7\xb5\xae\xe5\xa8\x8c\xe8\x87\xbb\xe5\x97\xb3\xe7\xaf\xa1\xe4\xbe\xa9\xe8\xbf\xb0\xe8\xa1\xb0\xe7\x9f\x9b\xe5\x9c\x88\xe8\x9a\x9c\xe5\x8c\x95\xe7\xad\xb9\xe5\x8c\xbf\xe6\xbf\x9e\xe6\x99\xa8\xe5\x8f\xb6\xe9\xaa\x8b\xe9\x83\x9d\xe6\x8c\x9a\xe8\x9a\xb4\xe6\xbb\x9e\xe5\xa2\x9e\xe4\xbe\x8d\xe6\x8f\x8f\xe7\x93\xa3\xe5\x90\x96\xe5\xab\xa6\xe8\x9f\x92\xe5\x8c\xbe\xe5\x9c\xa3\xe8\xb5\x8c\xe6\xaf\xa1\xe7\x99\x9e\xe6\x81\xba\xe7\x99\xbe\xe6\x9b\xb3\xe9\x9c\x80\xe7\xaf\x93\xe8\x82\xae\xe5\xba\x96\xe5\xb8\x8f\xe5\x8d\xbf\xe9\xa9\xbf\xe9\x81\x97\xe8\xb9\xac\xe9\xac\x93\xe9\xaa\xa1\xe6\xad\x89\xe8\x8a\x8e\xe8\x83\xb3\xe5\xb1\x90\xe7\xa6\xbd\xe7\x83\xa6\xe6\x99\x8c\xe5\xaf\x84\xe5\xaa\xbe\xe7\x8b\x84\xe7\xbf\xa1\xe8\x8b\x92\xe8\x88\xb9\xe5\xbb\x89\xe7\xbb\x88\xe7\x97\x9e\xe6\xae\x87\xe3\x80\x85\xe7\x95\xa6\xe9\xa5\xb6\xe6\x94\xb9\xe6\x8b\x86\xe6\x82\xbb\xe8\x90\x84\xef\xbf\xa1\xe7\x93\xbf\xe4\xb9\x83\xe8\xa8\xbe\xe6\xa1\x85\xe5\x8c\xae\xe6\xba\xa7\xe6\x8b\xa5\xe7\xba\xb1\xe9\x93\x8d\xe9\xaa\x97\xe8\x95\x83\xe9\xbe\x8b\xe7\xbc\xac\xe7\x88\xb6\xe4\xbd\x90\xe7\x96\x9a\xe6\xa0\x8e\xe9\x86\x8d\xe6\x8e\xb3\xe8\x93\x84x\xe6\x83\x86\xe9\xa2\x9c\xe9\xb2\x86\xe6\xa6\x86\xe3\x80\x94\xe7\x8c\x8e\xe6\x95\x8c\xe6\x9a\xb4\xe8\xb0\xa5\xe9\xb2\xab\xe8\xb4\xbe\xe7\xbd\x97\xe7\x8e\xbb\xe7\xbc\x84\xe6\x89\xa6\xe8\x8a\xaa\xe7\x99\xa3\xe8\x90\xbd\xe5\xbe\x92\xe8\x87\xbe\xe6\x81\xbf\xe7\x8c\xa9\xe6\x89\x98\xe9\x82\xb4\xe8\x82\x84\xe7\x89\xb5\xe6\x98\xa5\xe9\x99\x9b\xe8\x80\x80\xe5\x88\x8a\xe6\x8b\x93\xe8\x93\x93\xe9\x82\xb3\xe5\xa0\x95\xe5\xaf\x87\xe6\x9e\x89\xe6\xb7\x8c\xe5\x95\xa1\xe6\xb9\x84\xe5\x85\xbd\xe9\x85\xb7\xe8\x90\xbc\xe7\xa2\x9a\xe6\xbf\xa0\xe8\x90\xa4\xe5\xa4\xb9\xe6\x97\xac\xe6\x88\xae\xe6\xa2\xad\xe7\x90\xa5\xe6\xa4\xad\xe6\x98\x94\xe5\x8b\xba\xe8\x9c\x8a\xe7\xbb\x90\xe6\x99\x9a\xe5\xad\xba\xe5\x83\xb5\xe5\xae\xa3\xe6\x91\x84\xe5\x86\xbd\xe6\x97\xa8\xe8\x90\x8c\xe5\xbf\x99\xe8\x9a\xa4\xe7\x9c\x89\xe5\x99\xbc\xe8\x9f\x91\xe4\xbb\x98\xe5\xa5\x91\xe7\x93\x9c\xe6\x82\xbc\xe9\xa2\xa1\xe5\xa3\x81\xe6\x9b\xbe\xe7\xaa\x95\xe9\xa2\xa2\xe6\xbe\x8e\xe4\xbb\xbf\xe4\xbf\x91\xe6\xb5\x91\xe5\xb5\x8c\xe6\xb5\xa3\xe4\xb9\x8d\xe7\xa2\x8c\xe8\xa4\xaa\xe4\xb9\xb1\xe8\x94\x9f\xe9\x9a\x99\xe7\x8e\xa9\xe5\x89\x90\xe8\x91\xab\xe7\xae\xab\xe7\xba\xb2\xe5\x9b\xb4\xe4\xbc\x90\xe5\x86\xb3\xe4\xbc\x99\xe6\xbc\xa9\xe7\x91\x9f\xe5\x88\x91\xe8\x82\x93\xe9\x95\xb3\xe7\xbc\x93\xe8\xb9\xad\xe6\xb0\xa8\xe7\x9a\x93\xe5\x85\xb8\xe7\x95\xb2\xe5\x9d\x8d\xe9\x93\x91\xe6\xaa\x90\xe5\xa1\x91\xe6\xb4\x9e\xe5\x80\xac\xe5\x82\xa8\xe8\x83\xb4\xe6\xb7\xb3\xe6\x88\xbe\xe5\x90\x90\xe7\x81\xbc\xe6\x83\xba\xe5\xa6\x99\xe6\xaf\x95\xe7\x8f\x90\xe7\xbc\x88\xe8\x99\xb1\xe7\x9b\x96\xe7\xbe\xb0\xe9\xb8\xbf\xe7\xa3\x85\xe8\xb0\x93\xe9\xab\x85\xe5\xa8\xb4\xe8\x8b\xb4\xe5\x94\xb7\xe8\x9a\xa3\xe9\x9c\xb9\xe6\x8a\xa8\xe8\xb4\xa4\xe5\x94\xa0\xe7\x8a\xac\xe8\xaa\x93\xe9\x80\x8d\xe5\xba\xa0\xe9\x80\xbc\xe9\xba\x93\xe7\xb1\xbc\xe9\x87\x89\xe5\x91\x9c\xe7\xa2\xa7\xe7\xa7\xa7\xe6\xb0\xa9\xe6\x91\x94\xe9\x9c\x84\xe7\xa9\xb8\xe7\xba\xa8\xe8\xbe\x9f\xe5\xa6\x88\xe6\x98\xa0\xe5\xae\x8c\xe7\x89\x9b\xe7\xbc\xb4\xe5\x97\xb7\xe7\x82\x8a\xe6\x81\xa9\xe8\x8d\x94\xe8\x8c\x86\xe6\x8e\x89\xe7\xb4\x8a\xe6\x85\x8c\xe8\x8e\x93\xe7\xbe\x9f\xe9\x98\x99\xe8\x90\x81\xe7\xa3\x90\xe5\x8f\xa6\xe8\x95\xb9\xe8\xbe\xb1\xe9\xb3\x90\xe6\xb9\xae\xe5\x90\xa1\xe5\x90\xa9\xe5\x94\x90\xe7\x9d\xa6\xe5\x9e\xa0\xe8\x88\x92\xe5\x9c\x9c\xe5\x86\x97\xe7\x9e\xbf\xe6\xba\xba\xe8\x8a\xbe\xe5\x9b\xb1\xe5\x8c\xa0\xe5\x83\xb3\xe6\xb1\x90\xe8\x8f\xa9\xe9\xa5\xac\xe6\xbc\x93\xe9\xbb\x91\xe9\x9c\xb0\xe6\xb5\xb8\xe6\xbf\xa1\xe7\xaa\xa5\xe6\xaf\x82\xe8\x92\xa1\xe5\x85\xa2\xe9\xa9\xbb\xe9\xb9\x89\xe8\x8a\xae\xe8\xaf\x99\xe8\xbf\xab\xe9\x9b\xb3\xe5\x8e\x82\xe5\xbf\x90\xe8\x87\x86\xe7\x8c\xb4\xe9\xb8\xa3\xe8\x9a\xaa\xe6\xa0\x88\xe7\xae\x95\xe7\xbe\xa1\xe6\xb8\x90\xe8\x8e\x86\xe6\x8d\x8d\xe7\x9c\x88\xe5\x93\x93\xe8\xb6\xb4\xe8\xb9\xbc\xe5\x9f\x95\xe5\x9a\xa3\xe9\xaa\x9b\xe5\xae\x8f\xe6\xb7\x84\xe6\x96\x91\xe5\x99\x9c\xe4\xb8\xa5\xe7\x91\x9b\xe5\x9e\x83\xe6\xa4\x8e\xe8\xaf\xb1\xe5\x8e\x8b\xe5\xba\xbe\xe7\xbb\x9e\xe7\x84\x98\xe5\xbb\xbf\xe6\x8a\xa1\xe8\xbf\x84\xe6\xa3\x98\xe5\xa4\xab\xe7\xba\xac\xe9\x94\xb9\xe7\x9c\xa8\xe7\x9e\x8c\xe4\xbe\xa0\xe8\x84\x90\xe7\xab\x9e\xe7\x80\x91\xe5\xad\xb3\xe9\xaa\xa7\xe9\x81\x81\xe5\xa7\x9c\xe9\xa2\xa6\xe8\x8d\xaa\xe6\xbb\x9a\xe8\x90\xa6\xe4\xbc\xaa\xe9\x80\xb8\xe7\xb2\xb3\xe7\x88\xac\xe9\x94\x81\xe7\x9f\xa3\xe5\xbd\xb9\xe8\xb6\xa3\xe6\xb4\x92\xe9\xa2\x94\xe8\xaf\x8f\xe9\x80\x90\xe5\xa5\xb8\xe7\x94\xad\xe6\x83\xa0\xe6\x94\x80\xe8\xb9\x84\xe6\xb3\x9b\xe5\xb0\xbc\xe6\x8b\xbc\xe9\x98\xae\xe9\xb9\xb0\xe4\xba\x9a\xe9\xa2\x88\xe6\x83\x91\xe5\x8b\x92\xe3\x80\x89\xe9\x99\x85\xe8\x82\x9b\xe7\x88\xb7\xe5\x88\x9a\xe9\x92\xa8\xe4\xb8\xb0\xe5\x85\xbb\xe5\x86\xb6\xe9\xb2\xbd\xe8\xbe\x89\xe8\x94\xbb\xe7\x94\xbb\xe8\xa6\x86\xe7\x9a\xb4\xe5\xa6\x8a\xe9\xba\xa6\xe8\xbf\x94\xe9\x86\x89\xe7\x9a\x82\xe6\x93\x80\xe3\x80\x97\xe9\x85\xb6\xe5\x87\x91\xe7\xb2\xb9\xe6\x82\x9f\xe8\xaf\x80\xe7\xa1\x96\xe6\xb8\xaf\xe5\x8d\x9cz\xe6\x9d\x80\xe6\xb6\x95\xc2\xb1\xe8\x88\x8d\xe9\x93\xa0\xe6\x8a\xb5\xe5\xbc\x9b\xe6\xae\xb5\xe6\x95\x9d\xe9\x95\x90\xe5\xa5\xa0\xe6\x8b\x82\xe8\xbd\xb4\xe8\xb7\x9b\xe8\xa2\xb1et\xe6\xb2\x89\xe8\x8f\x87\xe4\xbf\x8e\xe8\x96\xaa\xe5\xb3\xa6\xe7\xa7\xad\xe8\x9f\xb9\xe5\x8e\x86\xe7\x9b\x9f\xe8\x8f\xa0\xe5\xaf\xa1\xe6\xb6\xb2\xe8\x82\xa2\xe5\x96\xbb\xe6\x9f\x93\xe8\xa3\xb1\xe6\x82\xb1\xe6\x8a\xb1\xe6\xb0\x99\xe8\xb5\xa4\xe6\x8d\x85\xe7\x8c\x9b\xe8\xb7\x91\xe6\xb0\xae\xe8\xb0\xa3\xe4\xbb\x81\xe5\xb0\xba\xe8\xbe\x8a\xe7\xaa\x8d\xe7\x83\x99\xe8\xa1\x8d\xe6\x9e\xb6\xe6\x93\xa6\xe5\x80\x8f\xe7\x92\x90\xe7\x91\x81\xe5\xb8\x81\xe6\xa5\x9e\xe8\x83\x96\xe5\xa4\x94\xe8\xb6\xb8\xe9\x82\x9b\xe6\x83\xb4\xe9\xa5\x95\xe8\x99\x94\xe8\x9d\x8e\xc2\xa7\xe5\x93\x89\xe8\xb4\x9d\xe5\xae\xbd\xe8\xbe\xab\xe7\x82\xae\xe6\x89\xa9\xe9\xa5\xb2\xe7\xb1\xbd\xe9\xad\x8f\xe8\x8f\x9f\xe9\x94\xb0\xe4\xbc\x8d\xe7\x8c\x9d\xe6\x9c\xab\xe7\x90\xb3\xe5\x93\x9a\xe8\x9b\x8e\xe9\x82\x82\xe5\x91\x80\xe5\xa7\xbf\xe9\x84\x9e\xe5\x8d\xb4\xe6\xad\xa7\xe4\xbb\x99\xe6\x81\xb8\xe6\xa4\x90\xe6\xa3\xae\xe7\x89\x92\xe5\xaf\xa4\xe8\xa2\x92\xe5\xa9\x86\xe8\x99\xa2\xe9\x9b\x85\xe9\x92\x89\xe6\x9c\xb5\xe8\xb4\xbc\xe6\xac\xb2\xe8\x8b\x9e\xe5\xaf\xb0\xe6\x95\x85\xe9\xbe\x9a\xe5\x9d\xad\xe5\x98\x98\xe5\x92\xab\xe7\xa4\xbc\xe7\xa1\xb7\xe5\x85\x80\xe7\x9d\xa2\xe6\xb1\xb6\xe2\x80\x99\xe9\x93\xb2\xe7\x83\xa7\xe7\xbb\x95\xe8\xaf\x83\xe6\xb5\x83\xe9\x92\xbf\xe5\x93\xba\xe6\x9f\x9c\xe8\xae\xbc\xe9\xa2\x8a\xe7\x92\x81\xe8\x85\x94\xe6\xb4\xbd\xe5\x92\x90\xe8\x84\xb2\xe7\xb0\x8c\xe7\xad\xa0\xe9\x95\xa3\xe7\x8e\xae\xe9\x9e\xa0\xe8\xb0\x81\xe5\x85\xbc\xe5\xa7\x86\xe6\x8c\xa5\xe6\xa2\xaf\xe8\x9d\xb4\xe8\xb0\x98\xe6\xbc\x95\xe5\x88\xb7\xe8\xba\x8f\xe5\xae\xa6\xe5\xbc\xbcb\xe5\x9e\x8c\xe5\x8a\x88\xe9\xba\x9f\xe8\x8e\x89\xe6\x8f\xad\xe7\xac\x99\xe6\xb8\x8e\xe4\xbb\x95\xe5\x97\xa4\xe4\xbb\x93\xe9\x85\x8d\xe6\x80\x8f\xe6\x8a\xac\xe9\x94\x99\xe6\xb3\xaf\xe9\x95\x8a\xe5\xad\xb0\xe7\x8c\xbf\xe9\x82\xaa\xe4\xbb\x8d\xe7\xa7\x8b\xe9\xbc\xac\xe5\xa3\xb9\xe6\xad\x87\xe5\x90\xb5\xe7\x82\xbc<\xe5\xb0\xa7\xe5\xb0\x84\xe6\x9f\xac\xe5\xbb\xb7\xe8\x83\xa7\xe9\x9c\xbe\xe5\x87\xb3\xe9\x9a\x8b\xe8\x82\x9a\xe6\xb5\xae\xe6\xa2\xa6\xe7\xa5\xa5\xe6\xa0\xaa\xe5\xa0\xb5\xe9\x80\x80L\xe9\xb9\xab\xe8\xb7\x8e\xe5\x87\xb6\xe6\xaf\xbd\xe8\x8d\x9f\xe7\x82\xab\xe6\xa0\xa9\xe7\x8e\xb3\xe7\x94\x9c\xe6\xb2\x82\xe9\xb9\xbf\xe9\xa1\xbd\xe4\xbc\xaf\xe7\x88\xb9\xe8\xb5\x94\xe8\x9b\xb4\xe5\xbe\x90\xe5\x8c\xa1\xe6\xac\xa3\xe7\x8b\xb0\xe7\xbc\xb8\xe9\x9b\xb9\xe8\x9f\x86\xe7\x96\xa4\xe9\xbb\x98\xe6\xb2\xa4\xe5\x95\x9c\xe7\x97\x82\xe8\xa1\xa3\xe7\xa6\x85wih\xe8\xbe\xbd\xe8\x91\xb3\xe9\xbb\x9d\xe9\x92\x97\xe5\x81\x9c\xe6\xb2\xbd\xe6\xa3\x92\xe9\xa6\xa8\xe9\xa2\x8c\xe8\x82\x89\xe5\x90\xb4\xe7\xa1\xab\xe6\x82\xaf\xe5\x8a\xbe\xe5\xa8\x88\xe9\xa9\xac\xe5\x95\xa7\xe5\x90\x8a\xe6\x82\x8c\xe9\x95\x91\xe5\xb3\xad\xe5\xb8\x86\xe7\x80\xa3\xe6\xb6\x89\xe5\x92\xb8\xe7\x96\xb8\xe6\xbb\x8b\xe6\xb3\xa3\xe7\xbf\xa6\xe6\x8b\x99\xe7\x99\xb8\xe9\x92\xa5\xe8\x9c\x92+\xe5\xb0\xbe\xe5\xba\x84\xe5\x87\x9d\xe6\xb3\x89\xe5\xa9\xa2\xe6\xb8\xb4\xe8\xb0\x8a\xe4\xb9\x9e\xe9\x99\x86\xe9\x94\x89\xe7\xb3\x8a\xe9\xb8\xa6\xe6\xb7\xaeIBN\xe6\x99\xa6\xe5\xbc\x97\xe4\xb9\x94\xe5\xba\xa5\xe8\x91\xa1\xe5\xb0\xbb\xe5\xb8\xad\xe6\xa9\xa1\xe5\x82\xa3\xe6\xb8\xa3\xe6\x8b\xbf\xe6\x83\xa9\xe9\xba\x8b\xe6\x96\x9b\xe7\xbc\x83\xe7\x9f\xae\xe8\x9b\x8f\xe5\xb2\x98\xe9\xb8\xbd\xe5\xa7\x90\xe8\x86\x8f\xe5\x82\xac\xe5\xa5\x94\xe9\x95\x92\xe5\x96\xb1\xe8\xa0\xa1\xe6\x91\xa7\xe9\x92\xaf\xe8\x83\xa4\xe6\x9f\xa0\xe6\x8b\x90\xe7\x92\x8b\xe9\xb8\xa5\xe5\x8d\xa2\xe8\x8d\xa1\xe5\x80\xbe^_\xe7\x8f\x80\xe9\x80\x84\xe8\x90\xa7\xe5\xa1\xbe\xe6\x8e\x87\xe8\xb4\xae\xe7\xac\x86\xe8\x81\x82\xe5\x9c\x83\xe5\x86\xb2\xe5\xb5\xacM\xe6\xbb\x94\xe7\xac\x95\xe5\x80\xbc\xe7\x82\x99\xe5\x81\xb6\xe8\x9c\xb1\xe6\x90\x90\xe6\xa2\x86\xe6\xb1\xaa\xe8\x94\xac\xe8\x85\x91\xe9\xb8\xaf\xe8\xb9\x87\xe6\x95\x9e\xe7\xbb\xaf\xe4\xbb\xa8\xe7\xa5\xaf\xe8\xb0\x86\xe6\xa2\xa7\xe7\xb3\x97\xe9\x91\xab\xe5\x95\xb8\xe8\xb1\xba\xe5\x9b\xb9\xe7\x8c\xbe\xe5\xb7\xa2\xe6\x9f\x84\xe7\x80\x9b\xe7\xad\x91\xe8\xb8\x8c\xe6\xb2\xad\xe6\x9a\x97\xe8\x8b\x81\xe9\xb1\xbf\xe8\xb9\x89\xe8\x84\x82\xe8\x98\x96\xe7\x89\xa2\xe7\x83\xad\xe6\x9c\xa8\xe5\x90\xb8\xe6\xba\x83\xe5\xae\xa0\xe5\xba\x8f\xe6\xb3\x9e\xe5\x81\xbf\xe6\x8b\x9c\xe6\xaa\xa9\xe5\x8e\x9a\xe6\x9c\x90\xe6\xaf\x97\xe8\x9e\xb3\xe5\x90\x9e\xe5\xaa\x9a\xe6\x9c\xbd\xe6\x8b\x85\xe8\x9d\x97\xe6\xa9\x98\xe7\x95\xb4\xe7\xa5\x88\xe7\xb3\x9f\xe7\x9b\xb1\xe9\x9a\xbc\xe9\x83\x9c\xe6\x83\x9c\xe7\x8f\xa0\xe8\xa3\xa8\xe9\x93\xb5\xe7\x84\x99\xe7\x90\x9a\xe5\x94\xaf\xe5\x92\x9a\xe5\x99\xaa\xe9\xaa\x8a\xe4\xb8\xab\xe6\xbb\xa2\xe5\x8b\xa4\xe6\xa3\x89\xe5\x91\xb8\xe5\x92\xa3\xe6\xb7\x80\xe9\x9a\x94\xe8\x95\xbe\xe7\xaa\x88\xe9\xa5\xa8\xe6\x8c\xa8\xe7\x85\x85\xe7\x9f\xad\xe5\x8c\x99\xe7\xb2\x95\xe9\x95\x9c\xe8\xb5\xa3\xe6\x92\x95\xe5\xa2\xa9\xe9\x85\xac\xe9\xa6\x81\xe8\xb1\x8c\xe9\xa2\x90\xe6\x8a\x97\xe9\x85\xa3\xe6\xb0\x93\xe4\xbd\x91\xe6\x90\x81\xe5\x93\xad\xe9\x80\x92\xe8\x80\xb7\xe6\xb6\xa1\xe6\xa1\x83\xe8\xb4\xbb\xe7\xa2\xa3\xe6\x88\xaa\xe7\x98\xa6\xe6\x98\xad\xe9\x95\x8c\xe8\x94\x93\xe6\xb0\x9a\xe7\x94\xb2\xe7\x8c\x95\xe8\x95\xb4\xe8\x93\xac\xe6\x95\xa3\xe6\x8b\xbe\xe7\xba\x9b\xe7\x8b\xbc\xe7\x8c\xb7\xe9\x93\x8e\xe5\x9f\x8b\xe6\x97\x96\xe7\x9f\xbe\xe8\xae\xb3\xe5\x9b\x8a\xe7\xb3\x9c\xe8\xbf\x88\xe7\xb2\x9f\xe8\x9a\x82\xe7\xb4\xa7\xe9\xb2\xb3\xe7\x98\xa2\xe6\xa0\xbd\xe7\xa8\xbc\xe7\xbe\x8a\xe9\x94\x84\xe6\x96\x9f\xe7\x9d\x81\xe6\xa1\xa5\xe7\x93\xae\xe8\xb9\x99\xe7\xa5\x89\xe9\x86\xba\xe9\xbc\xbb\xe6\x98\xb1\xe5\x89\x83\xe8\xb7\xb3\xe7\xaf\xb1\xe8\xb7\xb7\xe8\x92\x9c\xe7\xbf\x8e\xe5\xae\x85\xe6\x99\x96\xe5\x97\x91\xe5\xa3\x91\xe5\xb3\xbb\xe7\x99\xab\xe5\xb1\x8f\xe7\x8b\xa0\xe9\x99\x8b\xe8\xa2\x9c\xe9\x80\x94\xe6\x86\x8e\xe7\xa5\x80\xe8\x8e\xb9\xe6\xbb\x9f\xe4\xbd\xb6\xe6\xba\xa5\xe8\x87\xa3\xe7\xba\xa6\xe7\x9b\x9b\xe5\xb3\xb0\xe7\xa3\x81\xe6\x85\xb5\xe5\xa9\xaa\xe6\x8b\xa6\xe8\x8e\x85\xe6\x9c\x95\xe9\xb9\xa6\xe7\xb2\xb2\xe8\xa3\xa4\xe5\x93\x8e\xe7\x96\xa1\xe5\xab\x96\xe7\x90\xb5\xe7\xaa\x9f\xe5\xa0\xaa\xe8\xb0\x9b\xe5\x98\x89\xe5\x84\xa1\xe9\xb3\x9d\xe6\x96\xa9\xe9\x83\xbe\xe9\xa9\xb8\xe9\x85\x8a\xe5\xa6\x84\xe8\x83\x9c\xe8\xb4\xba\xe5\xbe\x99\xe5\x82\x85\xe5\x99\x8c\xe9\x92\xa2\xe6\xa0\x85\xe5\xba\x87\xe6\x81\x8b\xe5\x8c\x9d\xe5\xb7\xaf\xe9\x82\x88\xe5\xb0\xb8\xe9\x94\x9a\xe7\xb2\x97\xe4\xbd\x9f\xe8\x9b\x9f\xe8\x96\xb9\xe7\xba\xb5\xe8\x9a\x8a\xe9\x83\x85\xe7\xbb\xa2\xe9\x94\x90\xe8\x8b\x97\xe4\xbf\x9e\xe7\xaf\x86\xe6\xb7\x86\xe8\x86\x80\xe9\xb2\x9c\xe7\x85\x8e\xe8\xaf\xb6\xe7\xa7\xbd\xe5\xaf\xbb\xe6\xb6\xae\xe5\x88\xba\xe6\x80\x80\xe5\x99\xb6\xe5\xb7\xa8\xe8\xa4\xb0\xe9\xad\x85\xe7\x81\xb6\xe7\x81\x8c\xe6\xa1\x89\xe8\x97\x95\xe8\xb0\x9c\xe8\x88\xb8\xe8\x96\x84\xe6\x90\x80\xe6\x81\xbd\xe5\x80\x9f\xe7\x89\xaf\xe7\x97\x89\xe6\xb8\xa5\xe6\x84\xbf\xe4\xba\x93\xe8\x80\x98\xe6\x9d\xa0\xe6\x9f\xa9\xe9\x94\x94\xe8\x9a\xb6\xe9\x92\xa3\xe7\x8f\x88\xe5\x96\x98\xe8\xb9\x92\xe5\xb9\xbd\xe8\xb5\x90\xe7\xa8\x97\xe6\x99\xa4\xe8\x8e\xb1\xe6\xb3\x94\xe6\x89\xaf\xe8\x82\xaf\xe8\x8f\xaa\xe8\xa3\x86\xe8\x85\xa9\xe8\xb1\x89\xe7\x96\x86\xe9\xaa\x9c\xe8\x85\x90\xe5\x80\xad\xe7\x8f\x8f\xe5\x94\x94\xe7\xb2\xae\xe4\xba\xa1\xe6\xb6\xa6\xe6\x85\xb0\xe4\xbc\xbd\xe6\xa9\x84\xe7\x8e\x84\xe8\xaa\x89\xe9\x86\x90\xe8\x83\x86\xe9\xbe\x8a\xe7\xb2\xbc\xe5\xa1\xac\xe9\x99\x87\xe5\xbd\xbc\xe5\x89\x8a\xe5\x97\xa3\xe7\xbb\xbe\xe8\x8a\xbd\xe5\xa6\x97\xe5\x9e\xad\xe7\x98\xb4\xe7\x88\xbd\xe8\x96\x8f\xe5\xaf\xa8\xe9\xbe\x88\xe6\xb3\xa0\xe5\xbc\xb9\xe8\xb5\xa2\xe6\xbc\xaa\xe7\x8c\xab\xe5\x98\xa7\xe6\xb6\x82\xe6\x81\xa4\xe5\x9c\xad\xe8\x8c\xa7\xe7\x83\xbd\xe5\xb1\x91\xe7\x97\x95\xe5\xb7\xbe\xe8\xb5\x96\xe8\x8d\xb8\xe5\x87\xb0\xe8\x85\xae\xe7\x95\x88\xe4\xba\xb5\xe8\xb9\xb2\xe5\x81\x83\xe8\x8b\x87\xe6\xbe\x9c\xe8\x89\xae\xe6\x8d\xa2\xe9\xaa\xba\xe7\x83\x98\xe8\x8b\x95\xe6\xa2\x93\xe9\xa2\x89\xe8\x82\x87\xe5\x93\x97\xe6\x82\x84\xe6\xb0\xa4\xe6\xb6\xa0\xe8\x91\xac\xe5\xb1\xa0\xe9\xb9\xad\xe6\xa4\x8d\xe7\xab\xba\xe4\xbd\xaf\xe8\xaf\xa3\xe9\xb2\x87\xe7\x98\x80\xe9\xb2\x85\xe9\x82\xa6\xe7\xa7\xbb\xe6\xbb\x81\xe5\x86\xaf\xe8\x80\x95\xe7\x99\x94\xe6\x88\x8c\xe8\x8c\xac\xe6\xb2\x81\xe5\xb7\xa9\xe6\x82\xa0\xe6\xb9\x98\xe6\xb4\xaa\xe7\x97\xb9\xe9\x94\x9f\xe5\xbe\xaa\xe8\xb0\x8b\xe8\x85\x95\xe9\xb3\x83\xe9\x92\xa0\xe6\x8d\x9e\xe7\x84\x89\xe8\xbf\x8e\xe7\xa2\xb1\xe4\xbc\xab\xe6\x80\xa5\xe6\xa6\xb7\xe5\xa5\x88\xe9\x82\x9d\xe5\x8d\xaf\xe8\xbe\x84\xe7\x9a\xb2\xe5\x8d\x9f\xe9\x86\x9b\xe7\x95\xb9\xe5\xbf\xa7\xe7\xa8\xb3\xe9\x9b\x84\xe6\x98\xbc\xe7\xbc\xa9\xe9\x98\x88\xe7\x9d\x91\xe6\x89\x8c\xe8\x80\x97\xe6\x9b\xa6\xe6\xb6\x85\xe6\x8d\x8f\xe7\x9e\xa7\xe9\x82\x95\xe6\xb7\x96\xe6\xbc\x89\xe9\x93\x9d\xe8\x80\xa6\xe7\xa6\xb9\xe6\xb9\x9b\xe5\x96\xbd\xe8\x8e\xbc\xe7\x90\x85\xe8\xaf\xb8\xe8\x8b\x8e\xe7\xba\x82\xe7\xa1\x85\xe5\xa7\x8b\xe5\x97\xa8\xe5\x82\xa5\xe7\x87\x83\xe8\x87\x82\xe8\xb5\x85\xe5\x98\x88\xe5\x91\x86\xe8\xb4\xb5\xe5\xb1\xb9\xe5\xa3\xae\xe8\x82\x8b\xe4\xba\x8d\xe8\x9a\x80\xe5\x8d\x85\xe8\xb1\xb9\xe8\x85\x86\xe9\x82\xac\xe8\xbf\xad\xe6\xb5\x8a}\xe7\xab\xa5\xe8\x9e\x82\xe6\x8d\x90\xe5\x9c\xa9\xe5\x8b\x90\xe8\xa7\xa6\xe5\xaf\x9e\xe6\xb1\x8a\xe5\xa3\xa4\xe8\x8d\xab\xe8\x86\xba\xe6\xb8\x8c\xe8\x8a\xb3\xe6\x87\xbf\xe9\x81\xb4\xe8\x9e\x88\xe6\xb3\xb0\xe8\x93\xbc\xe8\x9b\xa4\xe8\x8c\x9c\xe8\x88\x85\xe6\x9e\xab\xe6\x9c\x94\xe8\x86\x9d\xe7\x9c\x99\xe9\x81\xbf\xe6\xa2\x85\xe5\x88\xa4\xe9\xb9\x9c\xe7\x92\x9c\xe7\x89\x8d\xe7\xbc\x85\xe5\x9e\xab\xe8\x97\xbb\xe9\xbb\x94\xe4\xbe\xa5\xe6\x83\x9a\xe6\x87\x82\xe8\xb8\xa9\xe8\x85\xb0\xe8\x85\x88\xe6\x9c\xad\xe4\xb8\x9e\xe5\x94\xbe\xe6\x85\x88\xe9\xa1\xbf\xe6\x91\xb9\xe8\x8d\xbb\xe7\x90\xac~\xe6\x96\xa7\xe6\xb2\x88\xe6\xbb\x82\xe8\x83\x81\xe8\x83\x80\xe5\xb9\x84\xe8\x8e\x9cZ\xe5\x8c\x80\xe9\x84\x84\xe6\x8e\x8c\xe7\xbb\xb0\xe8\x8c\x8e\xe7\x84\x9a\xe8\xb5\x8b\xe8\x90\xb1\xe8\xb0\x91\xe6\xb1\x81\xe9\x93\x92\xe7\x9e\x8e\xe5\xa4\xba\xe8\x9c\x97\xe9\x87\x8e\xe5\xa8\x86\xe5\x86\x80\xe5\xbc\xaf\xe7\xaf\x81\xe6\x87\xb5\xe7\x81\x9e\xe9\x9a\xbd\xe8\x8a\xa1\xe8\x84\x98\xe4\xbf\x90\xe8\xbe\xa9\xe8\x8a\xaf\xe6\x8e\xba\xe5\x96\x8f\xe8\x86\x88\xe8\x9d\x88\xe8\xa7\x90\xe6\x82\x9a\xe8\xb8\xb9\xe8\x94\x97\xe7\x86\xa0\xe9\xbc\xa0\xe5\x91\xb5\xe6\x8a\x93\xe6\xa9\xbc\xe5\xb3\xa8\xe7\x95\x9c\xe7\xbc\x94\xe7\xa6\xbe\xe5\xb4\xad\xe5\xbc\x83\xe7\x86\x8a\xe6\x91\x92\xe5\x87\xb8\xe6\x8b\x97\xe7\xa9\xb9\xe8\x92\x99\xe6\x8a\x92\xe7\xa5\x9b\xe5\x8a\x9d\xe9\x97\xab\xe6\x89\xb3\xe9\x98\xb5\xe9\x86\x8c\xe8\xb8\xaa\xe5\x96\xb5\xe4\xbe\xa3\xe6\x90\xac\xe4\xbb\x85\xe8\x8d\xa7\xe8\xb5\x8e\xe8\x9d\xbe\xe7\x90\xa6\xe4\xb9\xb0\xe5\xa9\xa7\xe7\x9e\x84\xe5\xaf\x93\xe7\x9a\x8e\xe5\x86\xbb\xe8\xb5\x9d\xe7\xae\xa9\xe8\x8e\xab\xe7\x9e\xb0\xe9\x83\x8a\xe7\xac\xab\xe5\xa7\x9d\xe7\xad\x92\xe6\x9e\xaa\xe9\x81\xa3\xe7\x85\xb8\xe8\xa2\x8b\xe8\x88\x86\xe7\x97\xb1\xe6\xb6\x9b\xe6\xaf\x8d\xe3\x80\x87\xe5\x90\xaf\xe8\xb7\xb5\xe8\x80\x99\xe7\xbb\xb2\xe7\x9b\x98\xe9\x81\x82\xe6\x98\x8a\xe6\x90\x9e\xe6\xa7\xbf\xe8\xaf\xac\xe7\xba\xb0\xe6\xb3\x93\xe6\x83\xa8\xe6\xaa\xac\xe4\xba\xbb\xe8\xb6\x8aCo\xe6\x86\xa9\xe7\x86\xb5\xe7\xa5\xb7\xe9\x92\x92\xe6\x9a\xa7\xe5\xa1\x94\xe9\x98\x97\xe8\x83\xb0\xe5\x92\x84\xe5\xa8\xb6\xe9\xad\x94\xe7\x90\xb6\xe9\x92\x9e\xe9\x82\xbb\xe6\x89\xac\xe6\x9d\x89\xe6\xae\xb4\xe5\x92\xbd\xe5\xbc\x93\xe3\x80\x86\xe9\xab\xbb\xe3\x80\x91\xe5\x90\xad\xe6\x8f\xbd\xe9\x9c\x86\xe6\x8b\x84\xe6\xae\x96\xe8\x84\x86\xe5\xbd\xbb\xe5\xb2\xa9\xe8\x8a\x9d\xe5\x8b\x83\xe8\xbe\xa3\xe5\x89\x8c\xe9\x92\x9d\xe5\x98\x8e\xe7\x94\x84\xe4\xbd\x98\xe7\x9a\x96\xe4\xbc\xa6\xe6\x8e\x88\xe5\xbe\x95\xe6\x86\x94\xe6\x8c\xaa\xe7\x9a\x87\xe5\xba\x9e\xe7\xa8\x94\xe8\x8a\x9c\xe8\xb8\x8f\xe6\xba\xb4\xe5\x85\x96\xe5\x8d\x92\xe6\x93\xa2\xe9\xa5\xa5\xe9\xb3\x9e\xe7\x85\xb2\xe2\x80\xb0\xe8\xb4\xa6\xe9\xa2\x97\xe5\x8f\xbb\xe6\x96\xaf\xe6\x8d\xa7\xe9\xb3\x8d\xe7\x90\xae\xe8\xae\xb9\xe8\x9b\x99\xe7\xba\xbd\xe8\xb0\xad\xe9\x85\xb8\xe5\x85\x94\xe8\x8e\x92\xe7\x9d\x87\xe4\xbc\x9f\xe8\xa7\x91\xe7\xbe\xb2\xe5\x97\x9c\xe5\xae\x9c\xe8\xa4\x90\xe6\x97\x8e\xe8\xbe\x9b\xe5\x8d\xa6\xe8\xaf\x98\xe7\xad\x8b\xe9\x8e\x8f\xe6\xba\xaa\xe6\x8c\x9b\xe7\x86\x94\xe9\x98\x9c\xe6\x99\xb0\xe9\xb3\x85\xe4\xb8\xa2\xe5\xa5\x9a\xe7\x81\xb8\xe5\x91\xb1\xe7\x8c\xae\xe9\x99\x89\xe9\xbb\x9b\xe9\xb8\xaa\xe7\x94\xbe\xe8\x90\xa8\xe7\x96\xae\xe6\x8b\xaf\xe6\xb4\xb2\xe7\x96\xb9\xe8\xbe\x91\xe5\x8f\x99\xe6\x81\xbb\xe8\xb0\x92\xe5\x85\x81\xe6\x9f\x94\xe7\x83\x82\xe6\xb0\x8f\xe9\x80\x85\xe6\xbc\x86\xe6\x8b\x8e\xe6\x83\x8b\xe6\x89\x88\xe6\xb9\x9f\xe7\xba\xad\xe5\x95\x95\xe6\x8e\xac\xe6\x93\x9e\xe5\x93\xa5\xe5\xbf\xbd\xe6\xb6\xa4\xe9\xb8\xb5\xe9\x9d\xa1\xe9\x83\x97\xe7\x93\xb7\xe6\x89\x81\xe5\xbb\x8a\xe6\x80\xa8\xe9\x9b\x8f\xe9\x92\xae\xe6\x95\xa6E\xe6\x87\xa6\xe6\x86\x8b\xe6\xb1\x80\xe6\x8b\x9a\xe5\x95\x89\xe8\x85\x8c\xe5\xb2\xb8f\xe7\x97\xbc\xe7\x9e\x85\xe5\xb0\x8a\xe5\x92\x80\xe7\x9c\xa9\xe9\xa3\x99\xe5\xbf\x8c\xe4\xbb\x9d\xe8\xbf\xa6\xe7\x86\xac\xe6\xaf\xab\xe8\x83\xaf\xe7\xaf\x91\xe8\x8c\x84\xe8\x85\xba\xe5\x87\x84\xe8\x88\x9b\xe7\xa2\xb4\xe9\x94\xb5\xe8\xaf\xa7\xe7\xbe\xaf\xe5\xbe\x8c\xe6\xbc\x8f\xe6\xb1\xa4\xe5\xae\x93\xe4\xbb\x9e\xe8\x9a\x81\xe5\xa3\xb6\xe8\xb0\xb0\xe7\x9a\x91\xe9\x93\x84\xe6\xa3\xb0\xe7\xbd\x94\xe8\xbe\x85\xe6\x99\xb6\xe8\x8b\xa6\xe7\x89\x9f\xe9\x97\xbd\\\xe7\x83\x83\xe9\xa5\xae\xe8\x81\xbf\xe4\xb8\x99\xe8\x9b\xb3\xe6\x9c\xb1\xe7\x85\xa4\xe6\xb6\x94\xe9\xb3\x96\xe7\x8a\x81\xe7\xbd\x90\xe8\x8d\xbc\xe7\xa0\x92\xe6\xb7\xa6\xe5\xa6\xa4\xe9\xbb\x8f\xe6\x88\x8e\xe5\xad\x91\xe5\xa9\x95\xe7\x91\xbe\xe6\x88\xa2\xe9\x92\xb5\xe6\x9e\xa3\xe6\x8d\x8b\xe7\xa0\xa5\xe8\xa1\xa9\xe7\x8b\x99\xe6\xa1\xa0\xe7\xa8\xa3\xe9\x98\x8e\xe8\x82\x83\xe6\xa2\x8f\xe8\xaf\xab\xe5\xad\xaa\xe6\x98\xb6\xe5\xa9\x8a\xe8\xa1\xab\xe5\x97\x94\xe4\xbe\x83\xe5\xa1\x9e\xe8\x9c\x83\xe6\xa8\xb5\xe5\xb3\x92\xe8\xb2\x8c\xe5\xb1\xbf\xe6\xac\xba\xe7\xbc\xab\xe9\x98\x90\xe6\xa0\x96\xe8\xaf\x9f\xe7\x8f\x9e\xe8\x8d\xad\xe5\x90\x9d\xe8\x90\x8d\xe5\x97\xbd\xe6\x81\x82\xe5\x95\xbb\xe8\x9c\xb4\xe7\xa3\xac\xe5\xb3\x8b\xe4\xbf\xb8\xe8\xb1\xab\xe8\xb0\x8e\xe5\xbe\x8a\xe9\x95\x8d\xe9\x9f\xac\xe9\xad\x87\xe6\x99\xb4U\xe5\x9b\x9f\xe7\x8c\x9c\xe8\x9b\xae\xe5\x9d\x90\xe5\x9b\xbf\xe4\xbc\xb4\xe4\xba\xad\xe8\x82\x9d\xe4\xbd\x97\xe8\x9d\xa0\xe5\xa6\x83\xe8\x83\x9e\xe6\xbb\xa9\xe6\xa6\xb4\xe6\xb0\x96\xe5\x9e\xa9\xe8\x8b\x8b\xe7\xa0\xa3\xe6\x89\xaa\xe9\xa6\x8f\xe5\xa7\x93\xe8\xbd\xa9\xe5\x8e\x89\xe5\xa4\xa5\xe4\xbe\x88\xe7\xa6\x80\xe5\x9e\x92\xe5\xb2\x91\xe8\xb5\x8f\xe9\x92\x9b\xe8\xbe\x90\xe7\x97\x94\xe6\x8a\xab\xe7\xba\xb8\xe7\xa2\xb3\xe2\x80\x9c\xe5\x9d\x9e\xe8\xa0\x93\xe6\x8c\xa4\xe8\x8d\xa5\xe6\xb2\x85\xe6\x82\x94\xe9\x93\xa7\xe5\xb8\xbc\xe8\x92\x8c\xe8\x9d\x87apyng\xe5\x93\x80\xe6\xb5\x86\xe7\x91\xb6\xe5\x87\xbf\xe6\xa1\xb6\xe9\xa6\x88\xe7\x9a\xae\xe5\xa5\xb4\xe8\x8b\x9c\xe4\xbd\xa4\xe4\xbc\xb6\xe6\x99\x97\xe9\x93\xb1\xe7\x82\xac\xe4\xbc\x98\xe5\xbc\x8a\xe6\xb0\xa2\xe6\x81\x83\xe7\x94\xab\xe6\x94\xa5\xe7\xab\xaf\xe9\x94\x8c\xe7\x81\xb0\xe7\xa8\xb9\xe7\x82\x9d\xe6\x9b\x99\xe9\x82\x8b\xe4\xba\xa5\xe7\x9c\xb6\xe7\xa2\xbe\xe6\x8b\x89\xe8\x90\x9d\xe7\xbb\x94\xe6\x8d\xb7\xe6\xb5\x8d\xe8\x85\x8b\xe5\xa7\x91\xe8\x8f\x96\xe5\x87\x8c\xe6\xb6\x9e\xe9\xba\xbd\xe9\x94\xa2\xe6\xa1\xa8\xe6\xbd\xa2\xe7\xbb\x8e\xe9\x95\xb0\xe6\xae\x86\xe9\x94\x91\xe6\xb8\x9d\xe9\x93\xac\xe5\x9b\xb0\xe7\xbb\xbd\xe8\xa7\x8e\xe5\x8c\x88\xe7\xb3\x99\xe6\x9a\x91\xe8\xa3\xb9\xe9\xb8\x9f\xe7\x9b\x94\xe8\x82\xbd\xe8\xbf\xb7\xe7\xb6\xa6\xe3\x80\x8e\xe4\xba\xb3\xe4\xbd\x9d\xe4\xbf\x98\xe9\x92\xb4\xe8\xa7\x87\xe9\xaa\xa5\xe4\xbb\x86\xe7\x96\x9d\xe8\xb7\xaa\xe5\xa9\xb6\xe9\x83\xaf\xe7\x80\xb9\xe5\x94\x89\xe8\x84\x96\xe8\xb8\x9e\xe9\x92\x88\xe6\x99\xbe\xe5\xbf\x92\xe6\x89\xbc\xe7\x9e\xa9\xe5\x8f\x9b\xe6\xa4\x92\xe7\x96\x9f\xe5\x97\xa1\xe9\x82\x97\xe8\x82\x86\xe8\xb7\x86\xe7\x8e\xab\xe5\xbf\xa1\xe6\x8d\xa3\xe5\x92\xa7\xe5\x94\x86\xe8\x89\x84\xe8\x98\x91\xe6\xbd\xa6\xe7\xac\x9b\xe9\x98\x9a\xe6\xb2\xb8\xe6\xb3\xbb\xe6\x8e\x8a\xe8\x8f\xbd\xe8\xb4\xab\xe6\x96\xa5\xe9\xab\x82\xe5\xad\xa2\xe9\x95\x82\xe8\xb5\x82\xe9\xba\x9d\xe9\xb8\xbe\xe5\xb1\xa1\xe8\xa1\xac\xe8\x8b\xb7\xe6\x81\xaa\xe5\x8f\xa0\xe5\xb8\x8c\xe7\xb2\xa4\xe7\x88\xbb\xe5\x96\x9d\xe8\x8c\xab\xe6\x83\xac\xe9\x83\xb8\xe7\xbb\xbb\xe5\xba\xb8\xe6\x92\x85\xe7\xa2\x9f\xe5\xae\x84\xe5\xa6\xb9\xe8\x86\x9b\xe5\x8f\xae\xe9\xa5\xb5\xe5\xb4\x9b\xe5\x97\xb2\xe6\xa4\x85\xe5\x86\xa4\xe6\x90\x85\xe5\x92\x95\xe6\x95\x9b\xe5\xb0\xb9\xe5\x9e\xa6\xe9\x97\xb7\xe8\x9d\x89\xe9\x9c\x8e\xe5\x8b\xb0\xe8\xb4\xa5\xe8\x93\x91\xe6\xb3\xb8\xe8\x82\xa4\xe9\xb9\x8c\xe5\xb9\x8c\xe7\x84\xa6\xe6\xb5\xa0\xe9\x9e\x8d\xe5\x88\x81\xe8\x88\xb0\xe4\xb9\x99\xe7\xab\xbf\xe8\xa3\x94\xe3\x80\x82\xe8\x8c\xb5\xe5\x87\xbd\xe4\xbc\x8a\xe5\x85\x84\xe4\xb8\xa8\xe5\xa8\x9c\xe5\x8c\x8d\xe8\xac\x87\xe8\x8e\xaa\xe5\xae\xa5\xe4\xbc\xbc\xe8\x9d\xbd\xe7\xbf\xb3\xe9\x85\xaa\xe7\xbf\xa0\xe7\xb2\x91\xe8\x96\x87\xe7\xa5\xa2\xe9\xaa\x8f\xe8\xb5\xa0\xe5\x8f\xabQ\xe5\x99\xa4\xe5\x99\xbb\xe7\xab\x96\xe8\x8a\x97\xe8\x8e\xa0\xe6\xbd\xad\xe4\xbf\x8a\xe7\xbe\xbf\xe8\x80\x9cO\xe9\x83\xab\xe8\xb6\x81\xe5\x97\xaa\xe5\x9b\x9a\xe8\xb9\xb6\xe8\x8a\x92\xe6\xb4\x81\xe7\xac\x8b\xe9\xb9\x91\xe6\x95\xb2\xe7\xa1\x9d\xe5\x95\xb6\xe5\xa0\xa1\xe6\xb8\xb2\xe6\x8f\xa9\xe3\x80\x8f\xe6\x90\xba\xe5\xae\xbf\xe9\x81\x92\xe9\xa2\x8d\xe6\x89\xad\xe6\xa3\xb1\xe5\x89\xb2\xe8\x90\x9c\xe8\x94\xb8\xe8\x91\xb5\xe7\x90\xb4\xe6\x8d\x82\xe9\xa5\xb0\xe8\xa1\x99\xe8\x80\xbf\xe6\x8e\xa0\xe5\x8b\x9f\xe5\xb2\x82\xe7\xaa\x96\xe6\xb6\x9f\xe8\x94\xba\xe7\x98\xa4\xe6\x9f\x9e\xe7\x9e\xaa\xe6\x80\x9c\xe5\x8c\xb9\xe8\xb7\x9d\xe6\xa5\x94\xe7\x82\x9c\xe5\x93\x86\xe7\xa7\xa6\xe7\xbc\x8e\xe5\xb9\xbc\xe8\x8c\x81\xe7\xbb\xaa\xe7\x97\xa8\xe6\x81\xa8\xe6\xa5\xb8\xe5\xa8\x85\xe7\x93\xa6\xe6\xa1\xa9\xe9\x9b\xaa\xe5\xac\xb4\xe4\xbc\x8f\xe6\xa6\x94\xe5\xa6\xa5\xe9\x93\xbf\xe6\x8b\x8c\xe7\x9c\xa0\xe9\x9b\x8d\xe7\xbc\x87\xe2\x80\x98\xe5\x8d\x93\xe6\x90\x93\xe5\x93\x8c\xe8\xa7\x9e\xe5\x99\xa9\xe5\xb1\x88\xe5\x93\xa7\xe9\xab\x93\xe5\x92\xa6\xe5\xb7\x85\xe5\xa8\x91\xe4\xbe\x91\xe6\xb7\xab\xe8\x86\xb3\xe7\xa5\x9d\xe5\x8b\xbe\xe5\xa7\x8a\xe8\x8e\xb4\xe8\x83\x84\xe7\x96\x83\xe8\x96\x9b\xe8\x9c\xb7\xe8\x83\x9b\xe5\xb7\xb7\xe8\x8a\x99\xe8\x8a\x8b\xe7\x86\x99\xe9\x97\xb0\xe5\x8b\xbf\xe7\xaa\x83\xe7\x8b\xb1\xe5\x89\xa9\xe9\x92\x8f\xe5\xb9\xa2\xe9\x99\x9f\xe9\x93\x9b\xe6\x85\xa7\xe9\x9d\xb4\xe8\x80\x8dk\xe6\xb5\x99\xe6\xb5\x87\xe9\xa3\xa8\xe6\x83\x9f\xe7\xbb\x97\xe7\xa5\x9c\xe6\xbe\x88\xe5\x95\xbc\xe5\x92\xaa\xe7\xa3\xb7\xe6\x91\x9e\xe8\xaf\x85\xe9\x83\xa6\xe6\x8a\xb9\xe8\xb7\x83\xe5\xa3\xac\xe5\x90\x95\xe8\x82\x96\xe7\x90\x8f\xe9\xa2\xa4\xe5\xb0\xb4\xe5\x89\xa1\xe6\x8a\xa0\xe5\x87\x8b\xe8\xb5\x9a\xe6\xb3\x8a\xe6\xb4\xa5\xe5\xae\x95\xe6\xae\xb7\xe5\x80\x94\xe6\xb0\xb2\xe6\xbc\xab\xe9\x82\xba\xe6\xb6\x8e\xe6\x80\xa0$\xe5\x9e\xae\xe8\x8d\xac\xe9\x81\xb5\xe4\xbf\x8f\xe5\x8f\xb9\xe5\x99\xa2\xe9\xa5\xbd\xe8\x9c\x98\xe5\xad\x99\xe7\xad\xb5\xe7\x96\xbc\xe9\x9e\xad\xe7\xbe\xa7\xe7\x89\xa6\xe7\xae\xad\xe6\xbd\xb4c\xe7\x9c\xb8\xe7\xa5\xad\xe9\xab\xaf\xe5\x95\x96\xe5\x9d\xb3\xe6\x84\x81\xe8\x8a\xa9\xe9\xa9\xae\xe5\x80\xa1\xe5\xb7\xbd\xe7\xa9\xb0\xe6\xb2\x83\xe8\x83\x9a\xe6\x80\x92\xe5\x87\xa4\xe6\xa7\x9b\xe5\x89\x82\xe8\xb6\xb5\xe5\xab\x81v\xe9\x82\xa2\xe7\x81\xaf\xe9\x84\xa2\xe6\xa1\x90\xe7\x9d\xbd\xe6\xaa\x97\xe9\x94\xaf\xe6\xa7\x9f\xe5\xa9\xb7\xe5\xb5\x8b\xe5\x9c\xbb\xe8\xaf\x97\xe8\x95\x88\xe9\xa2\xa0\xe9\x81\xad\xe7\x97\xa2\xe8\x8a\xb8\xe6\x80\xaf\xe9\xa6\xa5\xe7\xab\xad\xe9\x94\x97\xe5\xbe\x9c\xe6\x81\xad\xe9\x81\x8d\xe7\xb1\x81\xe5\x89\x91\xe5\x98\xb1\xe8\x8b\xa1\xe9\xbe\x84\xe5\x83\xa7\xe6\xa1\x91\xe6\xbd\xb8\xe5\xbc\x98\xe6\xbe\xb6\xe6\xa5\xb9\xe6\x82\xb2\xe8\xae\xab\xe6\x84\xa4\xe8\x85\xa5\xe6\x82\xb8\xe8\xb0\x8d\xe6\xa4\xb9\xe5\x91\xa2\xe6\xa1\x93\xe8\x91\xad\xe6\x94\xab\xe9\x98\x80\xe7\xbf\xb0\xe8\xba\xb2\xe6\x95\x96\xe6\x9f\x91\xe9\x83\x8e\xe7\xac\xa8\xe6\xa9\x87\xe5\x91\x83\xe9\xad\x81\xe7\x87\x8e\xe8\x84\x93\xe8\x91\xa9\xe7\xa3\x8b\xe5\x9e\x9b\xe7\x8e\xba\xe7\x8b\xae\xe6\xb2\x93\xe7\xa0\x9c\xe8\x95\x8a\xe9\x94\xba\xe7\xbd\xb9\xe8\x95\x89\xe7\xbf\xb1\xe8\x99\x90\xe9\x97\xbe\xe5\xb7\xab\xe6\x97\xa6\xe8\x8c\xb1\xe5\xac\xb7\xe6\x9e\xaf\xe9\xb9\x8f\xe8\xb4\xa1\xe8\x8a\xb9\xe6\xb1\x9b\xe7\x9f\xab\xe7\xbb\x81\xe6\x8b\xa3\xe7\xa6\xba\xe4\xbd\x83\xe8\xae\xa3\xe8\x88\xab\xe6\x83\xaf\xe4\xb9\xb3\xe8\xb6\x8b\xe7\x96\xb2\xe6\x8c\xbd\xe5\xb2\x9a\xe8\x99\xbe\xe8\xa1\xbe\xe8\xa0\xb9\xe8\xb9\x82\xe9\xa3\x93\xe6\xb0\xa6\xe9\x93\x96\xe5\xad\xa9\xe7\xa8\x9e\xe7\x91\x9c\xe5\xa3\x85\xe6\x8e\x80\xe5\x8b\x98\xe5\xa6\x93\xe7\x95\x85\xe9\xab\x8bW\xe5\xba\x90\xe7\x89\xb2\xe8\x93\xbf\xe6\xa6\x95\xe7\xbb\x83\xe5\x9e\xa3\xe5\x94\xb1\xe9\x82\xb8\xe8\x8f\xb2\xe6\x98\x86\xe5\xa9\xba\xe7\xa9\xbf\xe7\xbb\xa1\xe9\xba\x92\xe8\x9a\xb1\xe6\x8e\x82\xe6\x84\x9a\xe6\xb3\xb7\xe6\xb6\xaa\xe6\xbc\xb3\xe5\xa6\xa9\xe5\xa8\x89\xe6\xa6\x84\xe8\xae\xb7\xe8\xa7\x85\xe6\x97\xa7\xe8\x97\xa4\xe7\x85\xae\xe5\x91\x9b\xe6\x9f\xb3\xe8\x85\x93\xe5\x8f\xad\xe5\xba\xb5\xe7\x83\xb7\xe9\x98\xa1\xe7\xbd\x82\xe8\x9c\x95\xe6\x93\x82\xe7\x8c\x96\xe5\x92\xbf\xe5\xaa\xb2\xe8\x84\x89\xe3\x80\x90\xe6\xb2\x8f\xe8\xb2\x85\xe9\xbb\xa0\xe7\x86\x8f\xe5\x93\xb2\xe7\x83\x81\xe5\x9d\xa6\xe9\x85\xb5\xe5\x85\x9c\xc3\x97\xe6\xbd\x87\xe6\x92\x92\xe5\x89\xbd\xe7\x8f\xa9\xe5\x9c\xb9\xe4\xb9\xbe\xe6\x91\xb8\xe6\xa8\x9f\xe5\xb8\xbd\xe5\x97\x92\xe8\xa5\x84\xe9\xad\x82\xe8\xbd\xbf\xe6\x86\xac\xe9\x94\xa1\xe3\x80\x95\xe5\x96\x83\xe7\x9a\x86\xe5\x92\x96\xe9\x9a\x85\xe8\x84\xb8\xe6\xae\x8b\xe6\xb3\xae\xe8\xa2\x82\xe9\xb9\x82\xe7\x8f\x8a\xe5\x9b\xa4\xe6\x8d\x86\xe5\x92\xa4\xe8\xaf\xaf\xe5\xbe\xa8\xe9\x97\xb9\xe6\xb7\x99\xe8\x8a\x8a\xe6\xb7\x8b\xe6\x80\x86\xe5\x9b\x97\xe6\x8b\xa8\xe6\xa2\xb3\xe6\xb8\xa4RG\xe7\xbb\xa8\xe8\x9a\x93\xe5\xa9\x80\xe5\xb9\xa1\xe7\x8b\xa9\xe9\xba\xbe\xe8\xb0\xa2\xe5\x94\xa2\xe8\xa3\xb8\xe6\x97\x8c\xe4\xbc\x89\xe7\xba\xb6\xe8\xa3\x82\xe9\xa9\xb3\xe7\xa0\xbc\xe5\x92\x9b\xe6\xbe\x84\xe6\xa8\xa8\xe8\xb9\x88\xe5\xae\x99\xe6\xbe\x8d\xe5\x80\x8d\xe8\xb2\x94\xe6\x93\x8d\xe5\x8b\x87\xe8\x9f\xa0\xe6\x91\x88\xe7\xa0\xa7\xe8\x99\xac\xe5\xa4\x9f\xe7\xbc\x81\xe6\x82\xa6\xe8\x97\xbf\xe6\x92\xb8\xe8\x89\xb9\xe6\x91\x81\xe6\xb7\xb9\xe8\xb1\x87\xe8\x99\x8e\xe6\xa6\xad\xcb\x89\xe5\x90\xb1d\xc2\xb0\xe5\x96\xa7\xe8\x8d\x80\xe8\xb8\xb1\xe4\xbe\xae\xe5\xa5\x8b\xe5\x81\x95\xe9\xa5\xb7\xe7\x8a\x8d\xe6\x83\xae\xe5\x9d\x91\xe7\x92\x8e\xe5\xbe\x98\xe5\xae\x9b\xe5\xa6\x86\xe8\xa2\x88\xe5\x80\xa9\xe7\xaa\xa6\xe6\x98\x82\xe8\x8d\x8f\xe4\xb9\x96K\xe6\x80\x85\xe6\x92\xb0\xe9\xb3\x99\xe7\x89\x99\xe8\xa2\x81\xe9\x85\x9eX\xe7\x97\xbf\xe7\x90\xbc\xe9\x97\xb8\xe9\x9b\x81\xe8\xb6\xbe\xe8\x8d\x9a\xe8\x99\xbb\xe6\xb6\x9d\xe3\x80\x8a\xe6\x9d\x8f\xe9\x9f\xad\xe5\x81\x88\xe7\x83\xa4\xe7\xbb\xab\xe9\x9e\x98\xe5\x8d\x89\xe7\x97\x87\xe9\x81\xa2\xe8\x93\xa5\xe8\xaf\x8b\xe6\x9d\xad\xe8\x8d\xa8\xe5\x8c\x86\xe7\xab\xa3\xe7\xb0\xaa\xe8\xbe\x99\xe6\x95\x95\xe8\x99\x9e\xe4\xb8\xb9\xe7\xbc\xad\xe5\x92\xa9\xe9\xbb\x9fm\xe6\xb7\xa4\xe7\x91\x95\xe5\x92\x82\xe9\x93\x89\xe7\xa1\xbc\xe8\x8c\xa8\xe5\xb6\x82\xe7\x97\x92\xe7\x95\xb8\xe6\x95\xac\xe6\xb6\xbf\xe7\xb2\xaa\xe7\xaa\x98\xe7\x86\x9f\xe5\x8f\x94\xe5\xab\x94\xe7\x9b\xbe\xe5\xbf\xb1\xe8\xa3\x98\xe6\x86\xbe\xe6\xa2\xb5\xe8\xb5\xa1\xe7\x8f\x99\xe5\x92\xaf\xe5\xa8\x98\xe5\xba\x99\xe6\xba\xaf\xe8\x83\xba\xe8\x91\xb1\xe7\x97\xaa\xe6\x91\x8a\xe8\x8d\xb7\xe5\x8d\x9e\xe4\xb9\x92\xe9\xab\xa6\xe5\xaf\x90\xe9\x93\xad\xe5\x9d\xa9\xe8\x83\x97\xe6\x9e\xb7\xe7\x88\x86\xe6\xba\x9f\xe5\x9a\xbc\xe7\xbe\x9a\xe7\xa0\xac\xe8\xbd\xa8\xe6\x83\x8a\xe6\x8c\xa0\xe7\xbd\x84\xe7\xab\xbd\xe8\x8f\x8f\xe6\xb0\xa7\xe6\xb5\x85\xe6\xa5\xa3\xe7\x9b\xbc\xe6\x9e\xa2\xe7\x82\xb8\xe9\x98\x86\xe6\x9d\xaf\xe8\xb0\x8f\xe5\x99\xac\xe6\xb7\x87\xe6\xb8\xba\xe4\xbf\xaa\xe7\xa7\x86\xe5\xa2\x93\xe6\xb3\xaa\xe8\xb7\xbb\xe7\xa0\x8c\xe7\x97\xb0\xe5\x9e\xa1\xe6\xb8\xa1\xe8\x80\xbd\xe9\x87\x9c\xe8\xae\xb6\xe9\xb3\x8e\xe7\x85\x9e\xe5\x91\x97\xe9\x9f\xb6\xe8\x88\xb6\xe7\xbb\xb7\xe9\xb9\xb3\xe7\xbc\x9c\xe6\x97\xb7\xe9\x93\x8a\xe7\x9a\xb1\xe9\xbe\x8c\xe6\xaa\x80\xe9\x9c\x96\xe5\xa5\x84\xe6\xa7\x90\xe8\x89\xb3\xe8\x9d\xb6\xe6\x97\x8b\xe5\x93\x9d\xe8\xb5\xb6\xe9\xaa\x9e\xe8\x9a\xa7\xe8\x85\x8a\xe7\x9b\x88\xe4\xb8\x81`\xe8\x9c\x9a\xe7\x9f\xb8\xe8\x9d\x99\xe7\x9d\xa8\xe5\x9a\x93\xe5\x83\xbb\xe9\xac\xbc\xe9\x86\xb4\xe5\xa4\x9c\xe5\xbd\x9d\xe7\xa3\x8a\xe7\xac\x94\xe6\x8b\x94\xe6\xa0\x80\xe7\xb3\x95\xe5\x8e\xa6\xe9\x82\xb0\xe7\xba\xab\xe9\x80\xad\xe7\xba\xa4\xe7\x9c\xa6\xe8\x86\x8a\xe9\xa6\x8d\xe8\xba\x87\xe7\x83\xaf\xe8\x98\xbc\xe5\x86\xac\xe8\xaf\xa4\xe6\x9a\x84\xe9\xaa\xb6\xe5\x93\x91\xe7\x98\xa0\xe3\x80\x8d\xe8\x87\x8a\xe4\xb8\x95\xe6\x84\x88\xe5\x92\xb1\xe8\x9e\xba\xe6\x93\x85\xe8\xb7\x8b\xe6\x90\x8f\xe7\xa1\xaa\xe8\xb0\x84\xe7\xac\xa0\xe6\xb7\xa1\xe5\x98\xbf\xe9\xaa\x85\xe8\xb0\xa7\xe9\xbc\x8e\xe7\x9a\x8b\xe5\xa7\x9a\xe6\xad\xbc\xe8\xa0\xa2\xe9\xa9\xbc\xe8\x80\xb3\xe8\x83\xac\xe6\x8c\x9d\xe6\xb6\xaf\xe7\x8b\x97\xe8\x92\xbd\xe5\xad\x93\xe7\x8a\xb7\xe5\x87\x89\xe8\x8a\xa6\xe7\xae\xb4\xe9\x93\xa4\xe5\xad\xa4\xe5\x98\x9b\xe5\x9d\xa4V\xe8\x8c\xb4\xe6\x9c\xa6\xe6\x8c\x9e\xe5\xb0\x96\xe6\xa9\x99\xe8\xaf\x9e\xe6\x90\xb4\xe7\xa2\x87\xe6\xb4\xb5\xe6\xb5\x9a\xe5\xb8\x9a\xe8\x9c\x8d\xe6\xbc\xaf\xe6\x9f\x98\xe5\x9a\x8e\xe8\xae\xbd\xe8\x8a\xad\xe8\x8d\xa4\xe5\x92\xbb\xe7\xa5\xa0\xe7\xa7\x89\xe8\xb7\x96\xe5\x9f\x83\xe5\x90\x93\xe7\xb3\xaf\xe7\x9c\xb7\xe9\xa6\x92\xe6\x83\xb9\xe5\xa8\xbc\xe9\xb2\x91\xe5\xab\xa9\xe8\xae\xb4\xe8\xbd\xae\xe7\x9e\xa5\xe9\x9d\xb6\xe8\xa4\x9a\xe4\xb9\x8f\xe7\xbc\xa4\xe5\xae\x8b\xe5\xb8\xa7\xe5\x88\xa0\xe9\xa9\xb1\xe7\xa2\x8e\xe6\x89\x91\xe4\xbf\xa9\xe4\xbf\x84\xe5\x81\x8f\xe6\xb6\xa3\xe7\xab\xb9\xe5\x99\xb1\xe7\x9a\x99\xe4\xbd\xb0\xe6\xb8\x9a\xe5\x94\xa7\xe6\x96\xa1#\xe9\x95\x89\xe5\x88\x80\xe5\xb4\x8e\xe7\xad\x90\xe4\xbd\xa3\xe5\xa4\xad\xe8\xb4\xb0\xe8\x82\xb4\xe5\xb3\x99\xe5\x93\x94\xe8\x89\xbf\xe5\x8c\x90\xe7\x89\xba\xe9\x95\x9b\xe7\xbc\x98\xe4\xbb\xa1\xe5\xab\xa1\xe5\x8a\xa3\xe6\x9e\xb8\xe5\xa0\x80\xe6\xa2\xa8\xe7\xb0\xbf\xe9\xb8\xad\xe8\x92\xb8\xe4\xba\xa6\xe7\xa8\xbd\xe6\xb5\xb4{\xe8\xa1\xa2\xe6\x9d\x9f\xe6\xa7\xb2j\xe9\x98\x81\xe6\x8f\x8d\xe7\x96\xa5\xe6\xa3\x8b\xe6\xbd\x8b\xe8\x81\xaa\xe7\xaa\x9c\xe4\xb9\x93\xe7\x9d\x9b\xe6\x8f\x92\xe5\x86\x89\xe9\x98\xaa\xe8\x8b\x8d\xe6\x90\xbd\xe3\x80\x8c\xe8\x9f\xbe\xe8\x9e\x9f\xe5\xb9\xb8\xe4\xbb\x87\xe6\xa8\xbd\xe6\x92\x82\xe6\x85\xa2\xe8\xb7\xa4\xe5\xb9\x94\xe4\xbf\x9a\xe6\xb7\x85\xe8\xa6\x83\xe8\xa7\x8a\xe6\xba\xb6\xe5\xa6\x96\xe5\xb8\x9b\xe4\xbe\xa8\xe6\x9b\xb0\xe5\xa6\xbe\xe6\xb3\x97 """"""\n    charact = alphabet[:]\n    textLen = len(charact) - 11\n    for i in range(100):\n        ss = random.randint(0, textLen)\n        genImage(alphabet[ss:ss + 10], 20)\n        genImage(alphabet[ss:ss + 10], 15)\n'"
train/create_dataset/viewlmdb.py,0,"b'# coding: utf-8\n\nimport lmdb  # install lmdb by ""pip install lmdb""\n\noutputPath = \'../data/lmdb/train\'\nenv = lmdb.open(outputPath)\ntxn = env.begin(write=False)\nfor key, value in txn.cursor():\n    print(key, value)\n\nenv.close()\n'"
train/keras-train/allinonetrain.py,0,"b'# -*- coding: utf-8 -*-\nimport random\nimport sys\n\nimport lmdb\nimport numpy as np\nimport six\nimport torch\nimport torchvision.transforms as transforms\nfrom PIL import Image\nfrom keras.layers import Flatten, BatchNormalization, Permute, TimeDistributed, Dense, Bidirectional, GRU\nfrom keras.layers import Input, Conv2D, MaxPooling2D, ZeroPadding2D\nfrom keras.models import Model\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import sampler\n\nrnnunit = 256\nfrom keras import backend as K\n\nfrom keras.layers import Lambda\nfrom keras.optimizers import SGD\n\n\nclass lmdbDataset(Dataset):\n    def __init__(self, root=None, transform=None, target_transform=None):\n        self.env = lmdb.open(\n            root,\n            max_readers=1,\n            readonly=True,\n            lock=False,\n            readahead=False,\n            meminit=False)\n\n        if not self.env:\n            print(\'cannot creat lmdb from %s\' % (root))\n            sys.exit(0)\n\n        with self.env.begin(write=False) as txn:\n            nSamples = int(txn.get(\'num-samples\'.encode()))\n            print(""nSamples:{}"".format(nSamples))\n            self.nSamples = nSamples\n\n        self.transform = transform\n        self.target_transform = target_transform\n\n    def __len__(self):\n        return self.nSamples\n\n    def __getitem__(self, index):\n        assert index <= len(self), \'index range error\'\n        index += 1\n        with self.env.begin(write=False) as txn:\n            img_key = \'image-%09d\' % index\n            imgbuf = txn.get(img_key.encode())\n\n            buf = six.BytesIO()\n            buf.write(imgbuf)\n            buf.seek(0)\n            try:\n                img = Image.open(buf).convert(\'L\')\n                # img.save(""1111111111.jpg"")\n            except IOError:\n                print(\'Corrupted image for %d\' % index)\n                if index > self.nSamples - 1:\n                    index = 0\n                return self[index + 1]\n\n            if self.transform is not None:\n                img = self.transform(img)\n\n            label_key = \'label-%09d\' % index\n            label = str(txn.get(label_key.encode()), \'utf-8\')\n\n            if self.target_transform is not None:\n                label = self.target_transform(label)\n        # print(img,label)\n        return (img, label)\n\n\nclass resizeNormalize(object):\n    def __init__(self, size, interpolation=Image.BILINEAR):\n        self.size = size\n        self.interpolation = interpolation\n        self.toTensor = transforms.ToTensor()\n\n    def __call__(self, img):\n        img = img.resize(self.size, self.interpolation)\n        img = self.toTensor(img)\n        img.sub_(0.5).div_(0.5)\n        return img\n\n\nclass randomSequentialSampler(sampler.Sampler):\n    def __init__(self, data_source, batch_size):\n        self.num_samples = len(data_source)\n        self.batch_size = batch_size\n\n    def __iter__(self):\n        n_batch = len(self) // self.batch_size\n        tail = len(self) % self.batch_size\n        index = torch.LongTensor(len(self)).fill_(0)\n        for i in range(n_batch):\n            random_start = random.randint(0, len(self) - self.batch_size)\n            batch_index = random_start + torch.range(0, self.batch_size - 1)\n            index[i * self.batch_size:(i + 1) * self.batch_size] = batch_index\n        # deal with tail\n        if tail:\n            random_start = random.randint(0, len(self) - self.batch_size)\n            tail_index = random_start + torch.range(0, tail - 1)\n            index[(i + 1) * self.batch_size:] = tail_index\n\n        return iter(index)\n\n    def __len__(self):\n        return self.num_samples\n\n\nclass alignCollate(object):\n    def __init__(self, imgH=32, imgW=100, keep_ratio=False, min_ratio=1):\n        self.imgH = imgH\n        self.imgW = imgW\n        self.keep_ratio = keep_ratio\n        self.min_ratio = min_ratio\n\n    def __call__(self, batch):\n        images, labels = zip(*batch)\n\n        imgH = self.imgH\n        imgW = self.imgW\n        if self.keep_ratio:\n            ratios = []\n            for image in images:\n                w, h = image.size\n                ratios.append(w / float(h))\n            ratios.sort()\n            max_ratio = ratios[-1]\n            imgW = int(np.floor(max_ratio * imgH))\n            imgW = max(imgH * self.min_ratio, imgW)  # assure imgH >= imgW\n\n        transform = resizeNormalize((imgW, imgH))\n        images = [transform(image) for image in images]\n        images = torch.cat([t.unsqueeze(0) for t in images], 0)\n\n        return images, labels\n\n\ndef ctc_lambda_func(args):\n    y_pred, labels, input_length, label_length = args\n    # print(""cccccccccc:"",y_pred,labels,input_length,label_length)\n    y_pred = y_pred[:, 2:, :]\n\n    return K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\n\ndef get_model(height, nclass):\n    input = Input(shape=(height, None, 1), name=\'the_input\')\n    m = Conv2D(64, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv1\')(input)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=\'pool1\')(m)\n    m = Conv2D(128, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv2\')(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=\'pool2\')(m)\n    m = Conv2D(256, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv3\')(m)\n    m = Conv2D(256, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv4\')(m)\n\n    m = ZeroPadding2D(padding=(0, 1))(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 1), padding=\'valid\', name=\'pool3\')(m)\n\n    m = Conv2D(512, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv5\')(m)\n    m = BatchNormalization(axis=1)(m)\n    m = Conv2D(512, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv6\')(m)\n    m = BatchNormalization(axis=1)(m)\n    m = ZeroPadding2D(padding=(0, 1))(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 1), padding=\'valid\', name=\'pool4\')(m)\n    m = Conv2D(512, kernel_size=(2, 2), activation=\'relu\', padding=\'valid\', name=\'conv7\')(m)\n\n    m = Permute((2, 1, 3), name=\'permute\')(m)\n    m = TimeDistributed(Flatten(), name=\'timedistrib\')(m)\n\n    m = Bidirectional(GRU(rnnunit, return_sequences=True), name=\'blstm1\')(m)\n    m = Dense(rnnunit, name=\'blstm1_out\', activation=\'linear\')(m)\n    m = Bidirectional(GRU(rnnunit, return_sequences=True), name=\'blstm2\')(m)\n    y_pred = Dense(nclass, name=\'blstm2_out\', activation=\'softmax\')(m)\n\n    basemodel = Model(inputs=input, outputs=y_pred)\n\n    labels = Input(name=\'the_labels\', shape=[None, ], dtype=\'float32\')\n    input_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n    label_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\n    loss_out = Lambda(ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n    model = Model(inputs=[input, labels, input_length, label_length], outputs=[loss_out])\n    sgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n    # model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=\'adadelta\')\n    model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n    model.summary()\n    return model, basemodel\n\n\nalphabet = """"""\'\xe7\x96\x97\xe7\xbb\x9a\xe8\xaf\x9a\xe5\xa8\x87\xe6\xba\x9c\xe9\xa2\x98\xe8\xb4\xbf\xe8\x80\x85\xe5\xbb\x96\xe6\x9b\xb4\xe7\xba\xb3\xe5\x8a\xa0\xe5\xa5\x89\xe5\x85\xac\xe4\xb8\x80\xe5\xb0\xb1\xe6\xb1\xb4\xe8\xae\xa1\xe4\xb8\x8e\xe8\xb7\xaf\xe6\x88\xbf\xe5\x8e\x9f\xe5\xa6\x87208-7\xe5\x85\xb6>:],\xef\xbc\x8c\xe9\xaa\x91\xe5\x88\x88\xe5\x85\xa8\xe6\xb6\x88\xe6\x98\x8f\xe5\x82\x88\xe5\xae\x89\xe4\xb9\x85\xe9\x92\x9f\xe5\x97\x85\xe4\xb8\x8d\xe5\xbd\xb1\xe5\xa4\x84\xe9\xa9\xbd\xe8\x9c\xbf\xe8\xb5\x84\xe5\x85\xb3\xe6\xa4\xa4\xe5\x9c\xb0\xe7\x98\xb8\xe4\xb8\x93\xe9\x97\xae\xe5\xbf\x96\xe7\xa5\xa8\xe5\xab\x89\xe7\x82\x8e\xe9\x9f\xb5\xe8\xa6\x81\xe6\x9c\x88\xe7\x94\xb0\xe8\x8a\x82\xe9\x99\x82\xe9\x84\x99\xe6\x8d\x8c\xe5\xa4\x87\xe6\x8b\xb3\xe4\xbc\xba\xe7\x9c\xbc\xe7\xbd\x91\xe7\x9b\x8e\xe5\xa4\xa7\xe5\x82\x8d\xe5\xbf\x83\xe4\xb8\x9c\xe6\x84\x89\xe6\xb1\x87\xe8\xb9\xbf\xe7\xa7\x91\xe6\xaf\x8f\xe4\xb8\x9a\xe9\x87\x8c\xe8\x88\xaa\xe6\x99\x8f\xe5\xad\x97\xe5\xb9\xb3\xe5\xbd\x95\xe5\x85\x8813\xe5\xbd\xa4\xe9\xb2\xb6\xe4\xba\xa7\xe7\xa8\x8d\xe7\x9d\xa3\xe8\x85\xb4\xe6\x9c\x89\xe8\xb1\xa1\xe5\xb2\xb3\xe6\xb3\xa8\xe7\xbb\x8d\xe5\x9c\xa8\xe6\xb3\xba\xe6\x96\x87\xe5\xae\x9a\xe6\xa0\xb8\xe5\x90\x8d\xe6\xb0\xb4\xe8\xbf\x87\xe7\x90\x86\xe8\xae\xa9\xe5\x81\xb7\xe7\x8e\x87\xe7\xad\x89\xe8\xbf\x99\xe5\x8f\x91\xe2\x80\x9d\xe4\xb8\xba\xe5\x90\xab\xe8\x82\xa5\xe9\x85\x89\xe7\x9b\xb8\xe9\x84\xb1\xe4\xb8\x83\xe7\xbc\x96\xe7\x8c\xa5\xe9\x94\x9b\xe6\x97\xa5\xe9\x95\x80\xe8\x92\x82\xe6\x8e\xb0\xe5\x80\x92\xe8\xbe\x86\xe6\xa0\xbe\xe6\xa0\x97\xe7\xbb\xbc\xe6\xb6\xa9\xe5\xb7\x9e\xe9\x9b\x8c\xe6\xbb\x91\xe9\xa6\x80\xe4\xba\x86\xe6\x9c\xba\xe5\x9d\x97\xe5\x8f\xb8\xe5\xae\xb0\xe7\x94\x99\xe5\x85\xb4\xe7\x9f\xbd\xe6\x8a\x9a\xe4\xbf\x9d\xe7\x94\xa8\xe6\xb2\xa7\xe7\xa7\xa9\xe5\xa6\x82\xe6\x94\xb6\xe6\x81\xaf\xe6\xbb\xa5\xe9\xa1\xb5\xe7\x96\x91\xe5\x9f\xa0!\xef\xbc\x81\xe5\xa7\xa5\xe5\xbc\x82\xe6\xa9\xb9\xe9\x92\x87\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\x84\xe7\x9a\x84\xe6\xa4\xb4\xe6\xb2\xab\xe5\x9b\xbd\xe7\xbb\xa5\xe7\x8d\xa0\xe6\x8a\xa5\xe5\xbc\x80\xe6\xb0\x91\xe8\x9c\x87\xe4\xbd\x95\xe5\x88\x86\xe5\x87\x87\xe9\x95\xbf\xe8\xae\xa5\xe8\x97\x8f\xe6\x8e\x8f\xe6\x96\xbd\xe7\xbe\xbd\xe4\xb8\xad\xe8\xae\xb2\xe6\xb4\xbe\xe5\x98\x9f\xe4\xba\xba\xe6\x8f\x90\xe6\xb5\xbc\xe9\x97\xb4\xe4\xb8\x96\xe8\x80\x8c\xe5\x8f\xa4\xe5\xa4\x9a\xe5\x80\xaa\xe5\x94\x87\xe9\xa5\xaf\xe6\x8e\xa7\xe5\xba\x9a\xe9\xa6\x96\xe8\xb5\x9b\xe8\x9c\x93\xe5\x91\xb3\xe6\x96\xad\xe5\x88\xb6\xe8\xa7\x89\xe6\x8a\x80\xe6\x9b\xbf\xe8\x89\xb0\xe6\xba\xa2\xe6\xbd\xae\xe5\xa4\x95\xe9\x92\xba\xe5\xa4\x96\xe6\x91\x98\xe6\x9e\x8b\xe5\x8a\xa8\xe5\x8f\x8c\xe5\x8d\x95\xe5\x95\xae\xe6\x88\xb7\xe6\x9e\x87\xe7\xa1\xae\xe9\x94\xa6\xe6\x9b\x9c\xe6\x9d\x9c\xe6\x88\x96\xe8\x83\xbd\xe6\x95\x88\xe9\x9c\x9c\xe7\x9b\x92\xe7\x84\xb6\xe4\xbe\x97\xe7\x94\xb5\xe6\x99\x81\xe6\x94\xbe\xe6\xad\xa5\xe9\xb9\x83\xe6\x96\xb0\xe6\x9d\x96\xe8\x9c\x82\xe5\x90\x92\xe6\xbf\x82\xe7\x9e\xac\xe8\xaf\x84\xe6\x80\xbb\xe9\x9a\x8d\xe5\xaf\xb9\xe7\x8b\xac\xe5\x90\x88\xe4\xb9\x9f\xe6\x98\xaf\xe5\xba\x9c\xe9\x9d\x92\xe5\xa4\xa9\xe8\xaf\xb2\xe5\xa2\x99\xe7\xbb\x84\xe6\xbb\xb4\xe7\xba\xa7\xe9\x82\x80\xe5\xb8\x98\xe7\xa4\xba\xe5\xb7\xb2\xe6\x97\xb6\xe9\xaa\xb8\xe4\xbb\x84\xe6\xb3\x85\xe5\x92\x8c\xe9\x81\xa8\xe5\xba\x97\xe9\x9b\x87\xe7\x96\xab\xe6\x8c\x81\xe5\xb7\x8d\xe8\xb8\xae\xe5\xa2\x83\xe5\x8f\xaa\xe4\xba\xa8\xe7\x9b\xae\xe9\x89\xb4\xe5\xb4\xa4\xe9\x97\xb2\xe4\xbd\x93\xe6\xb3\x84\xe6\x9d\x82\xe4\xbd\x9c\xe8\x88\xac\xe8\xbd\xb0\xe5\x8c\x96\xe8\xa7\xa3\xe8\xbf\x82\xe8\xaf\xbf\xe8\x9b\xad\xe7\x92\x80\xe8\x85\xbe\xe5\x91\x8a\xe7\x89\x88\xe6\x9c\x8d\xe7\x9c\x81\xe5\xb8\x88\xe5\xb0\x8f\xe8\xa7\x84\xe7\xa8\x8b\xe7\xba\xbf\xe6\xb5\xb7\xe5\x8a\x9e\xe5\xbc\x95\xe4\xba\x8c\xe6\xa1\xa7\xe7\x89\x8c\xe7\xa0\xba\xe6\xb4\x84\xe8\xa3\xb4\xe4\xbf\xae\xe5\x9b\xbe\xe7\x97\xab\xe8\x83\xa1\xe8\xae\xb8\xe7\x8a\x8a\xe4\xba\x8b\xe9\x83\x9b\xe5\x9f\xba\xe6\x9f\xb4\xe5\x91\xbc\xe9\xa3\x9f\xe7\xa0\x94\xe5\xa5\xb6\xe5\xbe\x8b\xe8\x9b\x8b\xe5\x9b\xa0\xe8\x91\x86\xe5\xaf\x9f\xe6\x88\x8f\xe8\xa4\x92\xe6\x88\x92\xe5\x86\x8d\xe6\x9d\x8e\xe9\xaa\x81\xe5\xb7\xa5\xe8\xb2\x82\xe6\xb2\xb9\xe9\xb9\x85\xe7\xab\xa0\xe5\x95\x84\xe4\xbc\x91\xe5\x9c\xba\xe7\xbb\x99\xe7\x9d\xa1\xe7\xba\xb7\xe8\xb1\x86\xe5\x99\xa8\xe6\x8d\x8e\xe8\xaf\xb4\xe6\x95\x8f\xe5\xad\xa6\xe4\xbc\x9a\xe6\xb5\x92\xe8\xae\xbe\xe8\xaf\x8a\xe6\xa0\xbc\xe5\xbb\x93\xe6\x9f\xa5\xe6\x9d\xa5\xe9\x9c\x93\xe5\xae\xa4\xe6\xba\x86\xef\xbf\xa0\xe8\xaf\xa1\xe5\xaf\xa5\xe7\x84\x95\xe8\x88\x9c\xe6\x9f\x92\xe7\x8b\x90\xe5\x9b\x9e\xe6\x88\x9f\xe7\xa0\xbe\xe5\x8e\x84\xe5\xae\x9e\xe7\xbf\xa9\xe5\xb0\xbf\xe4\xba\x94\xe5\x85\xa5\xe5\xbe\x84\xe6\x83\xad\xe5\x96\xb9\xe8\x82\xa1\xe5\xae\x87\xe7\xaf\x9d|;\xe7\xbe\x8e\xe6\x9c\x9f\xe4\xba\x91\xe4\xb9\x9d\xe7\xa5\xba\xe6\x89\xae\xe9\x9d\xa0\xe9\x94\x9d\xe6\xa7\x8c\xe7\xb3\xbb\xe4\xbc\x81\xe9\x85\xb0\xe9\x98\x8a\xe6\x9a\x82\xe8\x9a\x95\xe5\xbf\xbb\xe8\xb1\x81\xe6\x9c\xac\xe7\xbe\xb9\xe6\x89\xa7\xe6\x9d\xa1\xe9\x92\xa6H\xe7\x8d\x92\xe9\x99\x90\xe8\xbf\x9b\xe5\xad\xa3\xe6\xa5\xa6\xe4\xba\x8e\xe8\x8a\x98\xe7\x8e\x96\xe9\x93\x8b\xe8\x8c\xaf\xe6\x9c\xaa\xe7\xad\x94\xe7\xb2\x98\xe6\x8b\xac\xe6\xa0\xb7\xe7\xb2\xbe\xe6\xac\xa0\xe7\x9f\xa2\xe7\x94\xa5\xe5\xb8\xb7\xe5\xb5\xa9\xe6\x89\xa3\xe4\xbb\xa4\xe4\xbb\x94\xe9\xa3\x8e\xe7\x9a\x88\xe8\xa1\x8c\xe6\x94\xaf\xe9\x83\xa8\xe8\x93\x89\xe5\x88\xae\xe7\xab\x99\xe8\x9c\xa1\xe6\x95\x91\xe9\x92\x8a\xe6\xb1\x97\xe6\x9d\xbe\xe5\xab\x8c\xe6\x88\x90\xe5\x8f\xaf.\xe9\xb9\xa4\xe9\x99\xa2\xe4\xbb\x8e\xe4\xba\xa4\xe6\x94\xbf\xe6\x80\x95\xe6\xb4\xbb\xe8\xb0\x83\xe7\x90\x83\xe5\xb1\x80\xe9\xaa\x8c\xe9\xab\x8c\xe7\xac\xac\xe9\x9f\xab\xe8\xb0\x97\xe4\xb8\xb2\xe5\x88\xb0\xe5\x9c\x86\xe5\xb9\xb4\xe7\xb1\xb3/*\xe5\x8f\x8b\xe5\xbf\xbf\xe6\xa3\x80\xe5\x8c\xba\xe7\x9c\x8b\xe8\x87\xaa\xe6\x95\xa2\xe5\x88\x83\xe4\xb8\xaa\xe5\x85\xb9\xe5\xbc\x84\xe6\xb5\x81\xe7\x95\x99\xe5\x90\x8c\xe6\xb2\xa1\xe9\xbd\xbf\xe6\x98\x9f\xe8\x81\x86\xe8\xbd\xbc\xe6\xb9\x96\xe4\xbb\x80\xe4\xb8\x89\xe5\xbb\xba\xe8\x9b\x94\xe5\x84\xbf\xe6\xa4\x8b\xe6\xb1\x95\xe9\x9c\x87\xe9\xa2\xa7\xe9\xb2\xa4\xe8\xb7\x9f\xe5\x8a\x9b\xe6\x83\x85\xe7\x92\xba\xe9\x93\xa8\xe9\x99\xaa\xe5\x8a\xa1\xe6\x8c\x87\xe6\x97\x8f\xe8\xae\xad\xe6\xbb\xa6\xe9\x84\xa3\xe6\xbf\xae\xe6\x89\x92\xe5\x95\x86\xe7\xae\xb1\xe5\x8d\x81\xe5\x8f\xac\xe6\x85\xb7\xe8\xbe\x97\xe6\x89\x80\xe8\x8e\x9e\xe7\xae\xa1\xe6\x8a\xa4\xe8\x87\xad\xe6\xa8\xaa\xe7\xa1\x92\xe5\x97\x93\xe6\x8e\xa5\xe4\xbe\xa6\xe5\x85\xad\xe9\x9c\xb2\xe5\x85\x9a\xe9\xa6\x8b\xe9\xa9\xbe\xe5\x89\x96\xe9\xab\x98\xe4\xbe\xac\xe5\xa6\xaa\xe5\xb9\x82\xe7\x8c\x97\xe7\xbb\xba\xe9\xaa\x90\xe5\xa4\xae\xe9\x85\x90\xe5\xad\x9d\xe7\xad\x9d\xe8\xaf\xbe\xe5\xbe\x87\xe7\xbc\xb0\xe9\x97\xa8\xe7\x94\xb7\xe8\xa5\xbf\xe9\xa1\xb9\xe5\x8f\xa5\xe8\xb0\x99\xe7\x9e\x92\xe7\xa7\x83\xe7\xaf\x87\xe6\x95\x99\xe7\xa2\xb2\xe7\xbd\x9a\xe5\xa3\xb0\xe5\x91\x90\xe6\x99\xaf\xe5\x89\x8d\xe5\xaf\x8c\xe5\x98\xb4\xe9\xb3\x8c\xe7\xa8\x80\xe5\x85\x8d\xe6\x9c\x8b\xe5\x95\xac\xe7\x9d\x90\xe5\x8e\xbb\xe8\xb5\x88\xe9\xb1\xbc\xe4\xbd\x8f\xe8\x82\xa9\xe6\x84\x95\xe9\x80\x9f\xe6\x97\x81\xe6\xb3\xa2\xe5\x8e\x85\xe5\x81\xa5\xe8\x8c\xbc\xe5\x8e\xa5\xe9\xb2\x9f\xe8\xb0\x85\xe6\x8a\x95\xe6\x94\xb8\xe7\x82\x94\xe6\x95\xb0\xe6\x96\xb9\xe5\x87\xbb\xe5\x91\x8b\xe8\xb0\x88\xe7\xbb\xa9\xe5\x88\xab\xe6\x84\xab\xe5\x83\x9a\xe8\xba\xac\xe9\xb9\xa7\xe8\x83\xaa\xe7\x82\xb3\xe6\x8b\x9b\xe5\x96\x87\xe8\x86\xa8\xe6\xb3\xb5\xe8\xb9\xa6\xe6\xaf\x9b\xe7\xbb\x9354\xe8\xb0\xb1\xe8\xaf\x86\xe9\x99\x95\xe7\xb2\xbd\xe5\xa9\x9a\xe6\x8b\x9f\xe6\x9e\x84\xe4\xb8\x94\xe6\x90\x9c\xe4\xbb\xbb\xe6\xbd\x98\xe6\xaf\x94\xe9\x83\xa2\xe5\xa6\xa8\xe9\x86\xaa\xe9\x99\x80\xe6\xa1\x94\xe7\xa2\x98\xe6\x89\x8e\xe9\x80\x89\xe5\x93\x88\xe9\xaa\xb7\xe6\xa5\xb7\xe4\xba\xbf\xe6\x98\x8e\xe7\xbc\x86\xe8\x84\xaf\xe7\x9b\x91\xe7\x9d\xab\xe9\x80\xbb\xe5\xa9\xb5\xe5\x85\xb1\xe8\xb5\xb4\xe6\xb7\x9d\xe5\x87\xa1\xe6\x83\xa6\xe5\x8f\x8a\xe8\xbe\xbe\xe6\x8f\x96\xe8\xb0\xa9\xe6\xbe\xb9\xe5\x87\x8f\xe7\x84\xb0\xe8\x9b\xb9\xe7\x95\xaa\xe7\xa5\x81\xe6\x9f\x8f\xe5\x91\x98\xe7\xa6\x84\xe6\x80\xa1\xe5\xb3\xa4\xe9\xbe\x99\xe7\x99\xbd\xe5\x8f\xbd\xe7\x94\x9f\xe9\x97\xaf\xe8\xb5\xb7\xe7\xbb\x86\xe8\xa3\x85\xe8\xb0\x95\xe7\xab\x9f\xe8\x81\x9a\xe9\x92\x99\xe4\xb8\x8a\xe5\xaf\xbc\xe6\xb8\x8a\xe6\x8c\x89\xe8\x89\xbe\xe8\xbe\x98\xe6\x8c\xa1\xe8\x80\x92\xe7\x9b\xb9\xe9\xa5\xaa\xe8\x87\x80\xe8\xae\xb0\xe9\x82\xae\xe8\x95\x99\xe5\x8f\x97\xe5\x90\x84\xe5\x8c\xbb\xe6\x90\x82\xe6\x99\xae\xe6\xbb\x87\xe6\x9c\x97\xe8\x8c\xb8\xe5\xb8\xa6\xe7\xbf\xbb\xe9\x85\x9a(\xe5\x85\x89\xe5\xa0\xa4\xe5\xa2\x9f\xe8\x94\xb7\xe4\xb8\x87\xe5\xb9\xbb\xe3\x80\x93\xe7\x91\x99\xe8\xbe\x88\xe6\x98\xa7\xe7\x9b\x8f\xe4\xba\x98\xe8\x9b\x80\xe5\x90\x89\xe9\x93\xb0\xe8\xaf\xb7\xe5\xad\x90\xe5\x81\x87\xe9\x97\xbb\xe7\xa8\x8e\xe4\xba\x95\xe8\xaf\xa9\xe5\x93\xa8\xe5\xab\x82\xe5\xa5\xbd\xe9\x9d\xa2\xe7\x90\x90\xe6\xa0\xa1\xe9\xa6\x8a\xe9\xac\xa3\xe7\xbc\x82\xe8\x90\xa5\xe8\xae\xbf\xe7\x82\x96\xe5\x8d\xa0\xe5\x86\x9c\xe7\xbc\x80\xe5\x90\xa6\xe7\xbb\x8f\xe9\x92\x9a\xe6\xa3\xb5\xe8\xb6\x9f\xe5\xbc\xa0\xe4\xba\x9f\xe5\x90\x8f\xe8\x8c\xb6\xe8\xb0\xa8\xe6\x8d\xbb\xe8\xae\xba\xe8\xbf\xb8\xe5\xa0\x82\xe7\x8e\x89\xe4\xbf\xa1\xe5\x90\xa7\xe7\x9e\xa0\xe4\xb9\xa1\xe5\xa7\xac\xe5\xaf\xba\xe5\x92\xac\xe6\xba\x8f\xe8\x8b\x84\xe7\x9a\xbf\xe6\x84\x8f\xe8\xb5\x89\xe5\xae\x9d\xe5\xb0\x94\xe9\x92\xb0\xe8\x89\xba\xe7\x89\xb9\xe5\x94\xb3\xe8\xb8\x89\xe9\x83\xbd\xe8\x8d\xa3\xe5\x80\x9a\xe7\x99\xbb\xe8\x8d\x90\xe4\xb8\xa7\xe5\xa5\x87\xe6\xb6\xb5\xe6\x89\xb9\xe7\x82\xad\xe8\xbf\x91\xe7\xac\xa6\xe5\x82\xa9\xe6\x84\x9f\xe9\x81\x93\xe7\x9d\x80\xe8\x8f\x8a\xe8\x99\xb9\xe4\xbb\xb2\xe4\xbc\x97\xe6\x87\x88\xe6\xbf\xaf\xe9\xa2\x9e\xe7\x9c\xba\xe5\x8d\x97\xe9\x87\x8a\xe5\x8c\x97\xe7\xbc\x9d\xe6\xa0\x87\xe6\x97\xa2\xe8\x8c\x97\xe6\x95\xb4\xe6\x92\xbc\xe8\xbf\xa4\xe8\xb4\xb2\xe6\x8c\x8e\xe8\x80\xb1\xe6\x8b\x92\xe6\x9f\x90\xe5\xa6\x8d\xe5\x8d\xab\xe5\x93\x87\xe8\x8b\xb1\xe7\x9f\xb6\xe8\x97\xa9\xe6\xb2\xbb\xe4\xbb\x96\xe5\x85\x83\xe9\xa2\x86\xe8\x86\x9c\xe9\x81\xae\xe7\xa9\x97\xe8\x9b\xbe\xe9\xa3\x9e\xe8\x8d\x92\xe6\xa3\xba\xe5\x8a\xab\xe4\xb9\x88\xe5\xb8\x82\xe7\x81\xab\xe6\xb8\xa9\xe6\x8b\x88\xe6\xa3\x9a\xe6\xb4\xbc\xe8\xbd\xac\xe6\x9e\x9c\xe5\xa5\x95\xe5\x8d\xb8\xe8\xbf\xaa\xe4\xbc\xb8\xe6\xb3\xb3\xe6\x96\x97\xe9\x82\xa1\xe4\xbe\x84\xe6\xb6\xa8\xe5\xb1\xaf\xe8\x90\x8b\xe8\x83\xad\xe6\xb0\xa1\xe5\xb4\xae\xe6\x9e\x9e\xe6\x83\xa7\xe5\x86\x92\xe5\xbd\xa9\xe6\x96\x9c\xe6\x89\x8b\xe8\xb1\x9a\xe9\x9a\x8f\xe6\x97\xad\xe6\xb7\x91\xe5\xa6\x9e\xe5\xbd\xa2\xe8\x8f\x8c\xe5\x90\xb2\xe6\xb2\xb1\xe4\xba\x89\xe9\xa9\xaf\xe6\xad\xb9\xe6\x8c\x9f\xe5\x85\x86\xe6\x9f\xb1\xe4\xbc\xa0\xe8\x87\xb3\xe5\x8c\x85\xe5\x86\x85\xe5\x93\x8d\xe4\xb8\xb4\xe7\xba\xa2\xe5\x8a\x9f\xe5\xbc\xa9\xe8\xa1\xa1\xe5\xaf\x82\xe7\xa6\x81\xe8\x80\x81\xe6\xa3\x8d\xe8\x80\x86\xe6\xb8\x8d\xe7\xbb\x87\xe5\xae\xb3\xe6\xb0\xb5\xe6\xb8\x91\xe5\xb8\x83\xe8\xbd\xbd\xe9\x9d\xa5\xe5\x97\xac\xe8\x99\xbd\xe8\x8b\xb9\xe5\x92\xa8\xe5\xa8\x84\xe5\xba\x93\xe9\x9b\x89\xe6\xa6\x9c\xe5\xb8\x9c\xe5\x98\xb2\xe5\xa5\x97\xe7\x91\x9a\xe4\xba\xb2\xe7\xb0\xb8\xe6\xac\xa7\xe8\xbe\xb96\xe8\x85\xbf\xe6\x97\xae\xe6\x8a\x9b\xe5\x90\xb9\xe7\x9e\xb3\xe5\xbe\x97\xe9\x95\x93\xe6\xa2\x97\xe5\x8e\xa8\xe7\xbb\xa7\xe6\xbc\xbe\xe6\x84\xa3\xe6\x86\xa8\xe5\xa3\xab\xe7\xad\x96\xe7\xaa\x91\xe6\x8a\x91\xe8\xba\xaf\xe8\xa5\x9f\xe8\x84\x8f\xe5\x8f\x82\xe8\xb4\xb8\xe8\xa8\x80\xe5\xb9\xb2\xe7\xbb\xb8\xe9\xb3\x84\xe7\xa9\xb7\xe8\x97\x9c\xe9\x9f\xb3\xe6\x8a\x98\xe8\xaf\xa6)\xe4\xb8\xbe\xe6\x82\x8d\xe7\x94\xb8\xe7\x99\x8c\xe9\xbb\x8e\xe8\xb0\xb4\xe6\xad\xbb\xe7\xbd\xa9\xe8\xbf\x81\xe5\xaf\x92\xe9\xa9\xb7\xe8\xa2\x96\xe5\xaa\x92\xe8\x92\x8b\xe6\x8e\x98\xe6\xa8\xa1\xe7\xba\xa0\xe6\x81\xa3\xe8\xa7\x82\xe7\xa5\x96\xe8\x9b\x86\xe7\xa2\x8d\xe4\xbd\x8d\xe7\xa8\xbf\xe4\xb8\xbb\xe6\xbe\xa7\xe8\xb7\x8c\xe7\xad\x8f\xe4\xba\xac\xe9\x94\x8f\xe5\xb8\x9d\xe8\xb4\xb4\xe8\xaf\x81\xe7\xb3\xa0\xe6\x89\x8d\xe9\xbb\x84\xe9\xb2\xb8\xe7\x95\xa5\xe7\x82\xaf\xe9\xa5\xb1\xe5\x9b\x9b\xe5\x87\xba\xe5\x9b\xad\xe7\x8a\x80\xe7\x89\xa7\xe5\xae\xb9\xe6\xb1\x89\xe6\x9d\x86\xe6\xb5\x88\xe6\xb1\xb0\xe7\x91\xb7\xe9\x80\xa0\xe8\x99\xab\xe7\x98\xa9\xe6\x80\xaa\xe9\xa9\xb4\xe6\xb5\x8e\xe5\xba\x94\xe8\x8a\xb1\xe6\xb2\xa3\xe8\xb0\x94\xe5\xa4\x99\xe6\x97\x85\xe4\xbb\xb7\xe7\x9f\xbf\xe4\xbb\xa5\xe8\x80\x83su\xe5\x91\xa6\xe6\x99\x92\xe5\xb7\xa1\xe8\x8c\x85\xe5\x87\x86\xe8\x82\x9f\xe7\x93\xb4\xe8\xa9\xb9\xe4\xbb\x9f\xe8\xa4\x82\xe8\xaf\x91\xe6\xa1\x8c\xe6\xb7\xb7\xe5\xae\x81\xe6\x80\xa6\xe9\x83\x91\xe6\x8a\xbf\xe4\xba\x9b\xe4\xbd\x99\xe9\x84\x82\xe9\xa5\xb4\xe6\x94\x92\xe7\x8f\x91\xe7\xbe\xa4\xe9\x98\x96\xe5\xb2\x94\xe7\x90\xa8\xe8\x97\x93\xe9\xa2\x84\xe7\x8e\xaf\xe6\xb4\xae\xe5\xb2\x8c\xe5\xae\x80\xe6\x9d\xb2\xe7\x80\xb5\xe6\x9c\x80\xe5\xb8\xb8\xe5\x9b\xa1\xe5\x91\xa8\xe8\xb8\x8a\xe5\xa5\xb3\xe9\xbc\x93\xe8\xa2\xad\xe5\x96\x89\xe7\xae\x80\xe8\x8c\x83\xe8\x96\xaf\xe9\x81\x90\xe7\x96\x8f\xe7\xb2\xb1\xe9\xbb\x9c\xe7\xa6\xa7\xe6\xb3\x95\xe7\xae\x94\xe6\x96\xa4\xe9\x81\xa5\xe6\xb1\x9d\xe5\xa5\xa5\xe7\x9b\xb4\xe8\xb4\x9e\xe6\x92\x91\xe7\xbd\xae\xe7\xbb\xb1\xe9\x9b\x86\xe5\xa5\xb9\xe9\xa6\x85\xe9\x80\x97\xe9\x92\xa7\xe6\xa9\xb1\xe9\xad\x89[\xe6\x81\x99\xe8\xba\x81\xe5\x94\xa49\xe6\x97\xba\xe8\x86\x98\xe5\xbe\x85\xe8\x84\xbe\xe6\x83\xab\xe8\xb4\xad\xe5\x90\x97\xe4\xbe\x9d\xe7\x9b\xb2\xe5\xba\xa6\xe7\x98\xbf\xe8\xa0\x96\xe4\xbf\xbe\xe4\xb9\x8b\xe9\x95\x97\xe6\x8b\x87\xe9\xb2\xb5\xe5\x8e\x9d\xe7\xb0\xa7\xe7\xbb\xad\xe6\xac\xbe\xe5\xb1\x95\xe5\x95\x83\xe8\xa1\xa8\xe5\x89\x94\xe5\x93\x81\xe9\x92\xbb\xe8\x85\xad\xe6\x8d\x9f\xe6\xb8\x85\xe9\x94\xb6\xe7\xbb\x9f\xe6\xb6\x8c\xe5\xaf\xb8\xe6\xbb\xa8\xe8\xb4\xaa\xe9\x93\xbe\xe5\x90\xa0\xe5\x86\x88\xe4\xbc\x8e\xe8\xbf\xa5\xe5\x92\x8f\xe5\x90\x81\xe8\xa7\x88\xe9\x98\xb2\xe8\xbf\x85\xe5\xa4\xb1\xe6\xb1\xbe\xe9\x98\x94\xe9\x80\xb5\xe7\xbb\x80\xe8\x94\x91\xe5\x88\x97\xe5\xb7\x9d\xe5\x87\xad\xe5\x8a\xaa\xe7\x86\xa8\xe6\x8f\xaa\xe5\x88\xa9\xe4\xbf\xb1\xe7\xbb\x89\xe6\x8a\xa2\xe9\xb8\xa8\xe6\x88\x91\xe5\x8d\xb3\xe8\xb4\xa3\xe8\x86\xa6\xe6\x98\x93\xe6\xaf\x93\xe9\xb9\x8a\xe5\x88\xb9\xe7\x8e\xb7\xe5\xb2\xbf\xe7\xa9\xba\xe5\x98\x9e\xe7\xbb\x8a\xe6\x8e\x92\xe6\x9c\xaf\xe4\xbc\xb0\xe9\x94\xb7\xe8\xbf\x9d\xe4\xbb\xac\xe8\x8b\x9f\xe9\x93\x9c\xe6\x92\xad\xe8\x82\x98\xe4\xbb\xb6\xe7\x83\xab\xe5\xae\xa1\xe9\xb2\x82\xe5\xb9\xbf\xe5\x83\x8f\xe9\x93\x8c\xe6\x83\xb0\xe9\x93\x9f\xe5\xb7\xb3\xe8\x83\x8d\xe9\xb2\x8d\xe5\xba\xb7\xe6\x86\xa7\xe8\x89\xb2\xe6\x81\xa2\xe6\x83\xb3\xe6\x8b\xb7\xe5\xb0\xa4\xe7\x96\xb3\xe7\x9f\xa5SYFDA\xe5\xb3\x84\xe8\xa3\x95\xe5\xb8\xae\xe6\x8f\xa1\xe6\x90\x94\xe6\xb0\x90\xe6\xb0\x98\xe9\x9a\xbe\xe5\xa2\x92\xe6\xb2\xae\xe9\x9b\xa8\xe5\x8f\x81\xe7\xbc\xa5\xe6\x82\xb4\xe8\x97\x90\xe6\xb9\xab\xe5\xa8\x9f\xe8\x8b\x91\xe7\xa8\xa0\xe9\xa2\x9b\xe7\xb0\x87\xe5\x90\x8e\xe9\x98\x95\xe9\x97\xad\xe8\x95\xa4\xe7\xbc\x9a\xe6\x80\x8e\xe4\xbd\x9e\xe7\xa0\x81\xe5\x98\xa4\xe8\x94\xa1\xe7\x97\x8a\xe8\x88\xb1\xe8\x9e\xaf\xe5\xb8\x95\xe8\xb5\xab\xe6\x98\xb5\xe5\x8d\x87\xe7\x83\xac\xe5\xb2\xab\xe3\x80\x81\xe7\x96\xb5\xe8\x9c\xbb\xe9\xab\x81\xe8\x95\xa8\xe9\x9a\xb6\xe7\x83\x9b\xe6\xa2\xb0\xe4\xb8\x91\xe7\x9b\x82\xe6\xa2\x81\xe5\xbc\xba\xe9\xb2\x9b\xe7\x94\xb1\xe6\x8b\x98\xe6\x8f\x89\xe5\x8a\xad\xe9\xbe\x9f\xe6\x92\xa4\xe9\x92\xa9\xe5\x91\x95\xe5\xad\x9b\xe8\xb4\xb9\xe5\xa6\xbb\xe6\xbc\x82\xe6\xb1\x82\xe9\x98\x91\xe5\xb4\x96\xe7\xa7\xa4\xe7\x94\x98\xe9\x80\x9a\xe6\xb7\xb1\xe8\xa1\xa5\xe8\xb5\x83\xe5\x9d\x8e\xe5\xba\x8a\xe5\x95\xaa\xe6\x89\xbf\xe5\x90\xbc\xe9\x87\x8f\xe6\x9a\x87\xe9\x92\xbc\xe7\x83\xa8\xe9\x98\x82\xe6\x93\x8e\xe8\x84\xb1\xe9\x80\xae\xe7\xa7\xb0P\xe7\xa5\x9e\xe5\xb1\x9e\xe7\x9f\x97\xe5\x8d\x8e\xe5\xb1\x8a\xe7\x8b\x8d\xe8\x91\x91\xe6\xb1\xb9\xe8\x82\xb2\xe6\x82\xa3\xe7\xaa\x92\xe8\x9b\xb0\xe4\xbd\xbc\xe9\x9d\x99\xe6\xa7\x8e\xe8\xbf\x90\xe9\xb3\x97\xe5\xba\x86\xe9\x80\x9d\xe6\x9b\xbc\xe7\x96\xb1\xe5\x85\x8b\xe4\xbb\xa3\xe5\xae\x98\xe6\xad\xa4\xe9\xba\xb8\xe8\x80\xa7\xe8\x9a\x8c\xe6\x99\x9f\xe4\xbe\x8b\xe7\xa1\x80\xe6\xa6\x9b\xe5\x89\xaf\xe6\xb5\x8b\xe5\x94\xb0\xe7\xbc\xa2\xe8\xbf\xb9\xe7\x81\xac\xe9\x9c\x81\xe8\xba\xab\xe5\xb2\x81\xe8\xb5\xad\xe6\x89\x9b\xe5\x8f\x88\xe8\x8f\xa1\xe4\xb9\x9c\xe9\x9b\xbe\xe6\x9d\xbf\xe8\xaf\xbb\xe9\x99\xb7\xe5\xbe\x89\xe8\xb4\xaf\xe9\x83\x81\xe8\x99\x91\xe5\x8f\x98\xe9\x92\x93\xe8\x8f\x9c\xe5\x9c\xbe\xe7\x8e\xb0\xe7\x90\xa2\xe5\xbc\x8f\xe4\xb9\x90\xe7\xbb\xb4\xe6\xb8\x94\xe6\xb5\x9c\xe5\xb7\xa6\xe5\x90\xbe\xe8\x84\x91\xe9\x92\xa1\xe8\xad\xa6T\xe5\x95\xb5\xe6\x8b\xb4\xe5\x81\x8c\xe6\xbc\xb1\xe6\xb9\xbf\xe7\xa1\x95\xe6\xad\xa2\xe9\xaa\xbc\xe9\xad\x84\xe7\xa7\xaf\xe7\x87\xa5\xe8\x81\x94\xe8\xb8\xa2\xe7\x8e\x9b|\xe5\x88\x99\xe7\xaa\xbf\xe8\xa7\x81\xe6\x8c\xaf\xe7\x95\xbf\xe9\x80\x81\xe7\x8f\xad\xe9\x92\xbd\xe6\x82\xa8\xe8\xb5\xb5\xe5\x88\xa8\xe5\x8d\xb0\xe8\xae\xa8\xe8\xb8\x9d\xe7\xb1\x8d\xe8\xb0\xa1\xe8\x88\x8c\xe5\xb4\xa7\xe6\xb1\xbd\xe8\x94\xbd\xe6\xb2\xaa\xe9\x85\xa5\xe7\xbb\x92\xe6\x80\x96\xe8\xb4\xa2\xe5\xb8\x96\xe8\x82\xb1\xe7\xa7\x81\xe8\x8e\x8e\xe5\x8b\x8b\xe7\xbe\x94\xe9\x9c\xb8\xe5\x8a\xb1\xe5\x93\xbc\xe5\xb8\x90\xe5\xb0\x86\xe5\xb8\x85\xe6\xb8\xa0\xe7\xba\xaa\xe5\xa9\xb4\xe5\xa8\xa9\xe5\xb2\xad\xe5\x8e\x98\xe6\xbb\x95\xe5\x90\xbb\xe4\xbc\xa4\xe5\x9d\x9d\xe5\x86\xa0\xe6\x88\x8a\xe9\x9a\x86\xe7\x98\x81\xe4\xbb\x8b\xe6\xb6\xa7\xe7\x89\xa9\xe9\xbb\x8d\xe5\xb9\xb6\xe5\xa7\x97\xe5\xa5\xa2\xe8\xb9\x91\xe6\x8e\xa3\xe5\x9e\xb8\xe9\x94\xb4\xe5\x91\xbd\xe7\xae\x8d\xe6\x8d\x89\xe7\x97\x85\xe8\xbe\x96\xe7\x90\xb0\xe7\x9c\xad\xe8\xbf\xa9\xe8\x89\x98\xe7\xbb\x8c\xe7\xb9\x81\xe5\xaf\x85\xe8\x8b\xa5\xe6\xaf\x8b\xe6\x80\x9d\xe8\xaf\x89\xe7\xb1\xbb\xe8\xaf\x88\xe7\x87\xae\xe8\xbd\xb2\xe9\x85\xae\xe7\x8b\x82\xe9\x87\x8d\xe5\x8f\x8d\xe8\x81\x8c\xe7\xad\xb1\xe5\x8e\xbf\xe5\xa7\x94\xe7\xa3\x95\xe7\xbb\xa3\xe5\xa5\x96\xe6\x99\x8b\xe6\xbf\x89\xe5\xbf\x97\xe5\xbe\xbd\xe8\x82\xa0\xe5\x91\x88\xe7\x8d\x90\xe5\x9d\xbb\xe5\x8f\xa3\xe7\x89\x87\xe7\xa2\xb0\xe5\x87\xa0\xe6\x9d\x91\xe6\x9f\xbf\xe5\x8a\xb3\xe6\x96\x99\xe8\x8e\xb7\xe4\xba\xa9\xe6\x83\x95\xe6\x99\x95\xe5\x8e\x8c\xe5\x8f\xb7\xe7\xbd\xa2\xe6\xb1\xa0\xe6\xad\xa3\xe9\x8f\x96\xe7\x85\xa8\xe5\xae\xb6\xe6\xa3\x95\xe5\xa4\x8d\xe5\xb0\x9d\xe6\x87\x8b\xe8\x9c\xa5\xe9\x94\x85\xe5\xb2\x9b\xe6\x89\xb0\xe9\x98\x9f\xe5\x9d\xa0\xe7\x98\xbe\xe9\x92\xac@\xe5\x8d\xa7\xe7\x96\xa3\xe9\x95\x87\xe8\xad\xac\xe5\x86\xb0\xe5\xbd\xb7\xe9\xa2\x91\xe9\xbb\xaf\xe6\x8d\xae\xe5\x9e\x84\xe9\x87\x87\xe5\x85\xab\xe7\xbc\xaa\xe7\x98\xab\xe5\x9e\x8b\xe7\x86\xb9\xe7\xa0\xb0\xe6\xa5\xa0\xe8\xa5\x81\xe7\xae\x90\xe4\xbd\x86\xe5\x98\xb6\xe7\xbb\xb3\xe5\x95\xa4\xe6\x8b\x8d\xe7\x9b\xa5\xe7\xa9\x86\xe5\x82\xb2\xe6\xb4\x97\xe7\x9b\xaf\xe5\xa1\x98\xe6\x80\x94\xe7\xad\x9b\xe4\xb8\xbf\xe5\x8f\xb0\xe6\x81\x92\xe5\x96\x82\xe8\x91\x9b\xe6\xb0\xb8\xef\xbf\xa5\xe7\x83\x9f\xe9\x85\x92\xe6\xa1\xa6\xe4\xb9\xa6\xe7\xa0\x82\xe8\x9a\x9d\xe7\xbc\x89\xe6\x80\x81\xe7\x80\x9a\xe8\xa2\x84\xe5\x9c\xb3\xe8\xbd\xbb\xe8\x9b\x9b\xe8\xb6\x85\xe6\xa6\xa7\xe9\x81\x9b\xe5\xa7\x92\xe5\xa5\x98\xe9\x93\xae\xe5\x8f\xb3\xe8\x8d\xbd\xe6\x9c\x9b\xe5\x81\xbb\xe5\x8d\xa1\xe4\xb8\xb6\xe6\xb0\xb0\xe9\x99\x84\xe5\x81\x9a\xe9\x9d\xa9\xe7\xb4\xa2\xe6\x88\x9a\xe5\x9d\xa8\xe6\xa1\xb7\xe5\x94\x81\xe5\x9e\x85\xe6\xa6\xbb\xe5\xb2\x90\xe5\x81\x8e\xe5\x9d\x9b\xe8\x8e\xa8\xe5\xb1\xb1\xe6\xae\x8a\xe5\xbe\xae\xe9\xaa\x87\xe9\x99\x88\xe7\x88\xa8\xe6\x8e\xa8\xe5\x97\x9d\xe9\xa9\xb9\xe6\xbe\xa1\xe8\x97\x81\xe5\x91\xa4\xe5\x8d\xa4\xe5\x98\xbb\xe7\xb3\x85\xe9\x80\x9b\xe4\xbe\xb5\xe9\x83\x93\xe9\x85\x8c\xe5\xbe\xb7\xe6\x91\x87\xe2\x80\xbb\xe9\xac\x83\xe8\xa2\xab\xe6\x85\xa8\xe6\xae\xa1\xe7\xbe\xb8\xe6\x98\x8c\xe6\xb3\xa1\xe6\x88\x9b\xe9\x9e\x8b\xe6\xb2\xb3\xe5\xae\xaa\xe6\xb2\xbf\xe7\x8e\xb2\xe9\xb2\xa8\xe7\xbf\x85\xe5\x93\xbd\xe6\xba\x90\xe9\x93\x85\xe8\xaf\xad\xe7\x85\xa7\xe9\x82\xaf\xe5\x9d\x80\xe8\x8d\x83\xe4\xbd\xac\xe9\xa1\xba\xe9\xb8\xb3\xe7\x94\xba\xe9\x9c\xad\xe7\x9d\xbe\xe7\x93\xa2\xe5\xa4\xb8\xe6\xa4\x81\xe6\x99\x93\xe9\x85\xbf\xe7\x97\x88\xe5\x92\x94\xe4\xbe\x8f\xe5\x88\xb8\xe5\x99\x8e\xe6\xb9\x8d\xe7\xad\xbe\xe5\x9a\xb7\xe7\xa6\xbb\xe5\x8d\x88\xe5\xb0\x9a\xe7\xa4\xbe\xe9\x94\xa4\xe8\x83\x8c\xe5\xad\x9f\xe4\xbd\xbf\xe6\xb5\xaa\xe7\xbc\xa6\xe6\xbd\x8d\xe9\x9e\x85\xe5\x86\x9b\xe5\xa7\xb9\xe9\xa9\xb6\xe7\xac\x91\xe9\xb3\x9f\xe9\xb2\x81\xe3\x80\x8b\xe5\xad\xbd\xe9\x92\x9c\xe7\xbb\xbf\xe6\xb4\xb1\xe7\xa4\xb4\xe7\x84\xaf\xe6\xa4\xb0\xe9\xa2\x96\xe5\x9b\x94\xe4\xb9\x8c\xe5\xad\x94\xe5\xb7\xb4\xe4\xba\x92\xe6\x80\xa7\xe6\xa4\xbd\xe5\x93\x9e\xe8\x81\x98\xe6\x98\xa8\xe6\x97\xa9\xe6\x9a\xae\xe8\x83\xb6\xe7\x82\x80\xe9\x9a\xa7\xe4\xbd\x8e\xe5\xbd\x97\xe6\x98\x9d\xe9\x93\x81\xe5\x91\x93\xe6\xb0\xbd\xe8\x97\x89\xe5\x96\x94\xe7\x99\x96\xe7\x91\x97\xe5\xa7\xa8\xe6\x9d\x83\xe8\x83\xb1\xe9\x9f\xa6\xe5\xa0\x91\xe8\x9c\x9c\xe9\x85\x8b\xe6\xa5\x9d\xe7\xa0\x9d\xe6\xaf\x81\xe9\x9d\x93\xe6\xad\x99\xe9\x94\xb2\xe7\xa9\xb6\xe5\xb1\x8b\xe5\x96\xb3\xe9\xaa\xa8\xe8\xbe\xa8\xe7\xa2\x91\xe6\xad\xa6\xe9\xb8\xa0\xe5\xae\xab\xe8\xbe\x9c\xe7\x83\x8a\xe9\x80\x82\xe5\x9d\xa1\xe6\xae\x83\xe5\x9f\xb9\xe4\xbd\xa9\xe4\xbe\x9b\xe8\xb5\xb0\xe8\x9c\x88\xe8\xbf\x9f\xe7\xbf\xbc\xe5\x86\xb5\xe5\xa7\xa3\xe5\x87\x9b\xe6\xb5\x94\xe5\x90\x83\xe9\xa3\x98\xe5\x80\xba\xe7\x8a\x9f\xe9\x87\x91\xe4\xbf\x83\xe8\x8b\x9b\xe5\xb4\x87\xe5\x9d\x82\xe8\x8e\xb3\xe7\x95\x94\xe7\xbb\x82\xe5\x85\xb5\xe8\xa0\x95\xe6\x96\x8b\xe6\xa0\xb9\xe7\xa0\x8d\xe4\xba\xa2\xe6\xac\xa2\xe6\x81\xac\xe5\xb4\x94\xe5\x89\x81\xe9\xa4\x90\xe6\xa6\xab\xe5\xbf\xab\xe6\x89\xb6\xe2\x80\x96\xe6\xbf\x92\xe7\xbc\xa0\xe9\xb3\x9c\xe5\xbd\x93\xe5\xbd\xad\xe9\xa9\xad\xe6\xb5\xa6\xe7\xaf\xae\xe6\x98\x80\xe9\x94\x86\xe7\xa7\xb8\xe9\x92\xb3\xe5\xbc\x8b\xe5\xa8\xa3\xe7\x9e\x91\xe5\xa4\xb7\xe9\xbe\x9b\xe8\x8b\xab\xe6\x8b\xb1\xe8\x87\xb4%\xe5\xb5\x8a\xe9\x9a\x9c\xe9\x9a\x90\xe5\xbc\x91\xe5\x88\x9d\xe5\xa8\x93\xe6\x8a\x89\xe6\xb1\xa9\xe7\xb4\xaf\xe8\x93\x96""\xe5\x94\xac\xe5\x8a\xa9\xe8\x8b\x93\xe6\x98\x99\xe6\x8a\xbc\xe6\xaf\x99\xe7\xa0\xb4\xe5\x9f\x8e\xe9\x83\xa7\xe9\x80\xa2\xe5\x9a\x8f\xe7\x8d\xad\xe7\x9e\xbb\xe6\xba\xb1\xe5\xa9\xbf\xe8\xb5\x8a\xe8\xb7\xa8\xe6\x81\xbc\xe7\x92\xa7\xe8\x90\x83\xe5\xa7\xbb\xe8\xb2\x89\xe7\x81\xb5\xe7\x82\x89\xe5\xaf\x86\xe6\xb0\x9b\xe9\x99\xb6\xe7\xa0\xb8\xe8\xb0\xac\xe8\xa1\x94\xe7\x82\xb9\xe7\x90\x9b\xe6\xb2\x9b\xe6\x9e\xb3\xe5\xb1\x82\xe5\xb2\xb1\xe8\xaf\xba\xe8\x84\x8d\xe6\xa6\x88\xe5\x9f\x82\xe5\xbe\x81\xe5\x86\xb7\xe8\xa3\x81\xe6\x89\x93\xe8\xb9\xb4\xe7\xb4\xa0\xe7\x98\x98\xe9\x80\x9e\xe8\x9b\x90\xe8\x81\x8a\xe6\xbf\x80\xe8\x85\xb1\xe8\x90\x98\xe8\xb8\xb5\xe9\xa3\x92\xe8\x93\x9f\xe5\x90\x86\xe5\x8f\x96\xe5\x92\x99\xe7\xb0\x8b\xe6\xb6\x93\xe7\x9f\xa9\xe6\x9b\x9d\xe6\x8c\xba\xe6\x8f\xa3\xe5\xba\xa7\xe4\xbd\xa0\xe5\x8f\xb2\xe8\x88\xb5\xe7\x84\xb1\xe5\xb0\x98\xe8\x8b\x8f\xe7\xac\x88\xe8\x84\x9a\xe6\xba\x89\xe6\xa6\xa8\xe8\xaf\xb5\xe6\xa8\x8a\xe9\x82\x93\xe7\x84\x8a\xe4\xb9\x89\xe5\xba\xb6\xe5\x84\x8b\xe8\x9f\x8b\xe8\x92\xb2\xe8\xb5\xa6\xe5\x91\xb7\xe6\x9d\x9e\xe8\xaf\xa0\xe8\xb1\xaa\xe8\xbf\x98\xe8\xaf\x95\xe9\xa2\x93\xe8\x8c\x89\xe5\xa4\xaa\xe9\x99\xa4\xe7\xb4\xab\xe9\x80\x83\xe7\x97\xb4\xe8\x8d\x89\xe5\x85\x85\xe9\xb3\x95\xe7\x8f\x89\xe7\xa5\x97\xe5\xa2\xa8\xe6\xb8\xad\xe7\x83\xa9\xe8\x98\xb8\xe6\x85\x95\xe7\x92\x87\xe9\x95\xb6\xe7\xa9\xb4\xe5\xb5\x98\xe6\x81\xb6\xe9\xaa\x82\xe9\x99\xa9\xe7\xbb\x8b\xe5\xb9\x95\xe7\xa2\x89\xe8\x82\xba\xe6\x88\xb3\xe5\x88\x98\xe6\xbd\x9e\xe7\xa7\xa3\xe7\xba\xbe\xe6\xbd\x9c\xe9\x8a\xae\xe6\xb4\x9b\xe9\xa1\xbb\xe7\xbd\x98\xe9\x94\x80\xe7\x98\xaa\xe6\xb1\x9e\xe5\x85\xae\xe5\xb1\x89r\xe6\x9e\x97\xe5\x8e\x95\xe8\xb4\xa8\xe6\x8e\xa2\xe5\x88\x92\xe7\x8b\xb8\xe6\xae\x9a\xe5\x96\x84\xe7\x85\x8a\xe7\x83\xb9\xe3\x80\x92\xe9\x94\x88\xe9\x80\xaf\xe5\xae\xb8\xe8\xbe\x8d\xe6\xb3\xb1\xe6\x9f\x9a\xe8\xa2\x8d\xe8\xbf\x9c\xe8\xb9\x8b\xe5\xb6\x99\xe7\xbb\x9d\xe5\xb3\xa5\xe5\xa8\xa5\xe7\xbc\x8d\xe9\x9b\x80\xe5\xbe\xb5\xe8\xae\xa4\xe9\x95\xb1\xe8\xb0\xb7=\xe8\xb4\xa9\xe5\x8b\x89\xe6\x92\xa9\xe9\x84\xaf\xe6\x96\x90\xe6\xb4\x8b\xe9\x9d\x9e\xe7\xa5\x9a\xe6\xb3\xbe\xe8\xaf\x92\xe9\xa5\xbf\xe6\x92\xac\xe5\xa8\x81\xe6\x99\xb7\xe6\x90\xad\xe8\x8a\x8d\xe9\x94\xa5\xe7\xac\xba\xe8\x93\xa6\xe5\x80\x99\xe7\x90\x8a\xe6\xa1\xa3\xe7\xa4\x81\xe6\xb2\xbc\xe5\x8d\xb5\xe8\x8d\xa0\xe5\xbf\x91\xe6\x9c\x9d\xe5\x87\xb9\xe7\x91\x9e\xe5\xa4\xb4\xe4\xbb\xaa\xe5\xbc\xa7\xe5\xad\xb5\xe7\x95\x8f\xe9\x93\x86\xe7\xaa\x81\xe8\xa1\xb2\xe8\xbd\xa6\xe6\xb5\xa9\xe6\xb0\x94\xe8\x8c\x82\xe6\x82\x96\xe5\x8e\xa2\xe6\x9e\x95\xe9\x85\x9d\xe6\x88\xb4\xe6\xb9\xbe\xe9\x82\xb9\xe9\xa3\x9a\xe6\x94\x98\xe9\x94\x82\xe5\x86\x99\xe5\xae\xb5\xe7\xbf\x81\xe5\xb2\xb7\xe6\x97\xa0\xe5\x96\x9c\xe4\xb8\x88\xe6\x8c\x91\xe5\x97\x9f\xe7\xbb\x9b\xe6\xae\x89\xe8\xae\xae\xe6\xa7\xbd\xe5\x85\xb7\xe9\x86\x87\xe6\xb7\x9e\xe7\xac\x83\xe9\x83\xb4\xe9\x98\x85\xe9\xa5\xbc\xe5\xba\x95\xe5\xa3\x95\xe7\xa0\x9a\xe5\xbc\x88\xe8\xaf\xa2\xe7\xbc\x95\xe5\xba\xb9\xe7\xbf\x9f\xe9\x9b\xb6\xe7\xad\xb7\xe6\x9a\xa8\xe8\x88\x9f\xe9\x97\xba\xe7\x94\xaf\xe6\x92\x9e\xe9\xba\x82\xe8\x8c\x8c\xe8\x94\xbc\xe5\xbe\x88\xe7\x8f\xb2\xe6\x8d\x95\xe6\xa3\xa0\xe8\xa7\x92\xe9\x98\x89\xe5\xaa\x9b\xe5\xa8\xb2\xe8\xaf\xbd\xe5\x89\xbf\xe5\xb0\x89\xe7\x88\xb5\xe7\x9d\xac\xe9\x9f\xa9\xe8\xaf\xb0\xe5\x8c\xa3\xe5\x8d\xb1\xe7\xb3\x8d\xe9\x95\xaf\xe7\xab\x8b\xe6\xb5\x8f\xe9\x98\xb3\xe5\xb0\x91\xe7\x9b\x86\xe8\x88\x94\xe6\x93\x98\xe5\x8c\xaa\xe7\x94\xb3\xe5\xb0\xac\xe9\x93\xa3\xe6\x97\xaf\xe6\x8a\x96\xe8\xb5\x98\xe7\x93\xaf\xe5\xb1\x85\xcb\x87\xe5\x93\xae\xe6\xb8\xb8\xe9\x94\xad\xe8\x8c\x8f\xe6\xad\x8c\xe5\x9d\x8f\xe7\x94\x9a\xe7\xa7\x92\xe8\x88\x9e\xe6\xb2\x99\xe4\xbb\x97\xe5\x8a\xb2\xe6\xbd\xba\xe9\x98\xbf\xe7\x87\xa7\xe9\x83\xad\xe5\x97\x96\xe9\x9c\x8f\xe5\xbf\xa0\xe6\x9d\x90\xe5\xa5\x82\xe8\x80\x90\xe8\xb7\xba\xe7\xa0\x80\xe8\xbe\x93\xe5\xb2\x96\xe5\xaa\xb3\xe6\xb0\x9f\xe6\x9e\x81\xe6\x91\x86\xe7\x81\xbf\xe4\xbb\x8a\xe6\x89\x94\xe8\x85\xbb\xe6\x9e\x9d\xe5\xa5\x8e\xe8\x8d\xaf\xe7\x86\x84\xe5\x90\xa8\xe8\xaf\x9dq\xe9\xa2\x9d\xe6\x85\x91\xe5\x98\x8c\xe5\x8d\x8f\xe5\x96\x80\xe5\xa3\xb3\xe5\x9f\xad\xe8\xa7\x86\xe8\x91\x97\xe6\x96\xbc\xe6\x84\xa7\xe9\x99\xb2\xe7\xbf\x8c\xe5\xb3\x81\xe9\xa2\x85\xe4\xbd\x9b\xe8\x85\xb9\xe8\x81\x8b\xe4\xbe\xaf\xe5\x92\x8e\xe5\x8f\x9f\xe7\xa7\x80\xe9\xa2\x87\xe5\xad\x98\xe8\xbe\x83\xe7\xbd\xaa\xe5\x93\x84\xe5\xb2\x97\xe6\x89\xab\xe6\xa0\x8f\xe9\x92\xbe\xe7\xbe\x8c\xe5\xb7\xb1\xe7\x92\xa8\xe6\x9e\xad\xe9\x9c\x89\xe7\x85\x8c\xe6\xb6\xb8\xe8\xa1\xbf\xe9\x94\xae\xe9\x95\x9d\xe7\x9b\x8a\xe5\xb2\xa2\xe5\xa5\x8f\xe8\xbf\x9e\xe5\xa4\xaf\xe7\x9d\xbf\xe5\x86\xa5\xe5\x9d\x87\xe7\xb3\x96\xe7\x8b\x9e\xe8\xb9\x8a\xe7\xa8\xbb\xe7\x88\xb8\xe5\x88\xbf\xe8\x83\xa5\xe7\x85\x9c\xe4\xb8\xbd\xe8\x82\xbf\xe7\x92\x83\xe6\x8e\xb8\xe8\xb7\x9a\xe7\x81\xbe\xe5\x9e\x82\xe6\xa8\xbe\xe6\xbf\x91\xe4\xb9\x8e\xe8\x8e\xb2\xe7\xaa\x84\xe7\x8a\xb9\xe6\x92\xae\xe6\x88\x98\xe9\xa6\x84\xe8\xbd\xaf\xe7\xbb\x9c\xe6\x98\xbe\xe9\xb8\xa2\xe8\x83\xb8\xe5\xae\xbe\xe5\xa6\xb2\xe6\x81\x95\xe5\x9f\x94\xe8\x9d\x8c\xe4\xbb\xbd\xe9\x81\x87\xe5\xb7\xa7\xe7\x9e\x9f\xe7\xb2\x92\xe6\x81\xb0\xe5\x89\xa5\xe6\xa1\xa1\xe5\x8d\x9a\xe8\xae\xaf\xe5\x87\xaf\xe5\xa0\x87\xe9\x98\xb6\xe6\xbb\xa4\xe5\x8d\x96\xe6\x96\x8c\xe9\xaa\x9a\xe5\xbd\xac\xe5\x85\x91\xe7\xa3\xba\xe6\xa8\xb1\xe8\x88\xb7\xe4\xb8\xa4\xe5\xa8\xb1\xe7\xa6\x8f\xe4\xbb\x83\xe5\xb7\xae\xe6\x89\xbe\xe6\xa1\x81\xc3\xb7\xe5\x87\x80\xe6\x8a\x8a\xe9\x98\xb4\xe6\xb1\xa1\xe6\x88\xac\xe9\x9b\xb7\xe7\xa2\x93\xe8\x95\xb2\xe6\xa5\x9a\xe7\xbd\xa1\xe7\x84\x96\xe6\x8a\xbd\xe5\xa6\xab\xe5\x92\x92\xe4\xbb\x91\xe9\x97\xb1\xe5\xb0\xbd\xe9\x82\x91\xe8\x8f\x81\xe7\x88\xb1\xe8\xb4\xb7\xe6\xb2\xa5\xe9\x9e\x91\xe7\x89\xa1\xe5\x97\x89\xe5\xb4\xb4\xe9\xaa\xa4\xe5\xa1\x8c\xe5\x97\xa6\xe8\xae\xa2\xe6\x8b\xae\xe6\xbb\x93\xe6\x8d\xa1\xe9\x94\xbb\xe6\xac\xa1\xe5\x9d\xaa\xe6\x9d\xa9\xe8\x87\x83\xe7\xae\xac\xe8\x9e\x8d\xe7\x8f\x82\xe9\xb9\x97\xe5\xae\x97\xe6\x9e\x9a\xe9\x99\x8d\xe9\xb8\xac\xe5\xa6\xaf\xe9\x98\x84\xe5\xa0\xb0\xe7\x9b\x90\xe6\xaf\x85\xe5\xbf\x85\xe6\x9d\xa8\xe5\xb4\x83\xe4\xbf\xba\xe7\x94\xac\xe7\x8a\xb6\xe8\x8e\x98\xe8\xb4\xa7\xe8\x80\xb8\xe8\x8f\xb1\xe8\x85\xbc\xe9\x93\xb8\xe5\x94\x8f\xe7\x97\xa4\xe5\xad\x9a\xe6\xbe\xb3\xe6\x87\x92\xe6\xba\x85\xe7\xbf\x98\xe7\x96\x99\xe6\x9d\xb7\xe6\xb7\xbc\xe7\xbc\x99\xe9\xaa\xb0\xe5\x96\x8a\xe6\x82\x89\xe7\xa0\xbb\xe5\x9d\xb7\xe8\x89\x87\xe8\xb5\x81\xe7\x95\x8c\xe8\xb0\xa4\xe7\xba\xa3\xe5\xae\xb4\xe6\x99\x83\xe8\x8c\xb9\xe5\xbd\x92\xe9\xa5\xad\xe6\xa2\xa2\xe9\x93\xa1\xe8\xa1\x97\xe6\x8a\x84\xe8\x82\xbc\xe9\xac\x9f\xe8\x8b\xaf\xe9\xa2\x82\xe6\x92\xb7\xe6\x88\x88\xe7\x82\x92\xe5\x92\x86\xe8\x8c\xad\xe7\x98\x99\xe8\xb4\x9f\xe4\xbb\xb0\xe5\xae\xa2\xe7\x90\x89\xe9\x93\xa2\xe5\xb0\x81\xe5\x8d\x91\xe7\x8f\xa5\xe6\xa4\xbf\xe9\x95\xa7\xe7\xaa\xa8\xe9\xac\xb2\xe5\xaf\xbf\xe5\xbe\xa1\xe8\xa2\xa4\xe9\x93\x83\xe8\x90\x8e\xe7\xa0\x96\xe9\xa4\xae\xe8\x84\x92\xe8\xa3\xb3\xe8\x82\xaa\xe5\xad\x95\xe5\xab\xa3\xe9\xa6\x97\xe5\xb5\x87\xe6\x81\xb3\xe6\xb0\xaf\xe6\xb1\x9f\xe7\x9f\xb3\xe8\xa4\xb6\xe5\x86\xa2\xe7\xa5\xb8\xe9\x98\xbb\xe7\x8b\x88\xe7\xbe\x9e\xe9\x93\xb6\xe9\x9d\xb3\xe9\x80\x8f\xe5\x92\xb3\xe5\x8f\xbc\xe6\x95\xb7\xe8\x8a\xb7\xe5\x95\xa5\xe5\xae\x83\xe7\x93\xa4\xe5\x85\xb0\xe7\x97\x98\xe6\x87\x8a\xe9\x80\x91\xe8\x82\x8c\xe5\xbe\x80\xe6\x8d\xba\xe5\x9d\x8a\xe7\x94\xa9\xe5\x91\xbb\xe3\x80\x83\xe6\xb2\xa6\xe5\xbf\x98\xe8\x86\xbb\xe7\xa5\x9f\xe8\x8f\x85\xe5\x89\xa7\xe5\xb4\x86\xe6\x99\xba\xe5\x9d\xaf\xe8\x87\xa7\xe9\x9c\x8d\xe5\xa2\x85\xe6\x94\xbb\xe7\x9c\xaf\xe5\x80\x98\xe6\x8b\xa2\xe9\xaa\xa0\xe9\x93\x90\xe5\xba\xad\xe5\xb2\x99\xe7\x93\xa0\xe2\x80\xb2\xe7\xbc\xba\xe6\xb3\xa5\xe8\xbf\xa2\xe6\x8d\xb6?\xef\xbc\x9f\xe9\x83\x8f\xe5\x96\x99\xe6\x8e\xb7\xe6\xb2\x8c\xe7\xba\xaf\xe7\xa7\x98\xe7\xa7\x8d\xe5\x90\xac\xe7\xbb\x98\xe5\x9b\xba\xe8\x9e\xa8\xe5\x9b\xa2\xe9\xa6\x99\xe7\x9b\x97\xe5\xa6\x92\xe5\x9f\x9a\xe8\x93\x9d\xe6\x8b\x96\xe6\x97\xb1\xe8\x8d\x9e\xe9\x93\x80\xe8\xa1\x80\xe9\x81\x8f\xe6\xb1\xb2\xe8\xbe\xb0\xe5\x8f\xa9\xe6\x8b\xbd\xe5\xb9\x85\xe7\xa1\xac\xe6\x83\xb6\xe6\xa1\x80\xe6\xbc\xa0\xe6\x8e\xaa\xe6\xb3\xbc\xe5\x94\x91\xe9\xbd\x90\xe8\x82\xbe\xe5\xbf\xb5\xe9\x85\xb1\xe8\x99\x9a\xe5\xb1\x81\xe8\x80\xb6\xe6\x97\x97\xe7\xa0\xa6\xe9\x97\xb5\xe5\xa9\x89\xe9\xa6\x86\xe6\x8b\xad\xe7\xbb\x85\xe9\x9f\xa7\xe5\xbf\x8f\xe7\xaa\x9d\xe9\x86\x8b\xe8\x91\xba\xe9\xa1\xbe\xe8\xbe\x9e\xe5\x80\x9c\xe5\xa0\x86\xe8\xbe\x8b\xe9\x80\x86\xe7\x8e\x9f\xe8\xb4\xb1\xe7\x96\xbe\xe8\x91\xa3\xe6\x83\x98\xe5\x80\x8c\xe9\x94\x95\xe6\xb7\x98\xe5\x98\x80\xe8\x8e\xbd\xe4\xbf\xad\xe7\xac\x8f\xe7\xbb\x91\xe9\xb2\xb7\xe6\x9d\x88\xe6\x8b\xa9\xe8\x9f\x80\xe7\xb2\xa5\xe5\x97\xaf\xe9\xa9\xb0\xe9\x80\xbe\xe6\xa1\x88\xe8\xb0\xaa\xe8\xa4\x93\xe8\x83\xab\xe5\x93\xa9\xe6\x98\x95\xe9\xa2\x9a\xe9\xb2\xa2\xe7\xbb\xa0\xe8\xba\xba\xe9\xb9\x84\xe5\xb4\x82\xe5\x84\x92\xe4\xbf\xa8\xe4\xb8\x9d\xe5\xb0\x95\xe6\xb3\x8c\xe5\x95\x8a\xe8\x90\xb8\xe5\xbd\xb0\xe5\xb9\xba\xe5\x90\x9f\xe9\xaa\x84\xe8\x8b\xa3\xe5\xbc\xa6\xe8\x84\x8a\xe7\x91\xb0\xe3\x80\x88\xe8\xaf\x9b\xe9\x95\x81\xe6\x9e\x90\xe9\x97\xaa\xe5\x89\xaa\xe4\xbe\xa7\xe5\x93\x9f\xe6\xa1\x86\xe8\x9e\x83\xe5\xae\x88\xe5\xac\x97\xe7\x87\x95\xe7\x8b\xad\xe9\x93\x88\xe7\xbc\xae\xe6\xa6\x82\xe8\xbf\xb3\xe7\x97\xa7\xe9\xb2\xb2\xe4\xbf\xaf\xe5\x94\xae\xe7\xac\xbc\xe7\x97\xa3\xe6\x89\x89\xe6\x8c\x96\xe6\xbb\xa1\xe5\x92\x8b\xe6\x8f\xb4\xe9\x82\xb1\xe6\x89\x87\xe6\xad\xaa\xe4\xbe\xbf\xe7\x8e\x91\xe7\xbb\xa6\xe5\xb3\xa1\xe8\x9b\x87\xe5\x8f\xa8\xe3\x80\x96\xe6\xb3\xbd\xe8\x83\x83\xe6\x96\x93\xe5\x96\x8b\xe6\x80\x82\xe5\x9d\x9f\xe7\x8c\xaa\xe8\xaf\xa5\xe8\x9a\xac\xe7\x82\x95\xe5\xbc\xa5\xe8\xb5\x9e\xe6\xa3\xa3\xe6\x99\x94\xe5\xa8\xa0\xe6\x8c\xb2\xe7\x8b\xa1\xe5\x88\x9b\xe7\x96\x96\xe9\x93\x95\xe9\x95\xad\xe7\xa8\xb7\xe6\x8c\xab\xe5\xbc\xad\xe5\x95\xbe\xe7\xbf\x94\xe7\xb2\x89\xe5\xb1\xa5\xe8\x8b\x98\xe5\x93\xa6\xe6\xa5\xbc\xe7\xa7\x95\xe9\x93\x82\xe5\x9c\x9f\xe9\x94\xa3\xe7\x98\x9f\xe6\x8c\xa3\xe6\xa0\x89\xe4\xb9\xa0\xe4\xba\xab\xe6\xa1\xa2\xe8\xa2\x85\xe7\xa3\xa8\xe6\xa1\x82\xe8\xb0\xa6\xe5\xbb\xb6\xe5\x9d\x9a\xe8\x94\x9a\xe5\x99\x97\xe7\xbd\xb2\xe8\xb0\x9f\xe7\x8c\xac\xe9\x92\x8e\xe6\x81\x90\xe5\xac\x89\xe9\x9b\x92\xe5\x80\xa6\xe8\xa1\x85\xe4\xba\x8f\xe7\x92\xa9\xe7\x9d\xb9\xe5\x88\xbb\xe6\xae\xbf\xe7\x8e\x8b\xe7\xae\x97\xe9\x9b\x95\xe9\xba\xbb\xe4\xb8\x98\xe6\x9f\xaf\xe9\xaa\x86\xe4\xb8\xb8\xe5\xa1\x8d\xe8\xb0\x9a\xe6\xb7\xbb\xe9\xb2\x88\xe5\x9e\x93\xe6\xa1\x8e\xe8\x9a\xaf\xe8\x8a\xa5\xe4\xba\x88\xe9\xa3\x95\xe9\x95\xa6\xe8\xb0\x8c\xe7\xaa\x97\xe9\x86\x9a\xe8\x8f\x80\xe4\xba\xae\xe6\x90\xaa\xe8\x8e\xba\xe8\x92\xbf\xe7\xbe\x81\xe8\xb6\xb3J\xe7\x9c\x9f\xe8\xbd\xb6\xe6\x82\xac\xe8\xa1\xb7\xe9\x9d\x9b\xe7\xbf\x8a\xe6\x8e\xa9\xe5\x93\x92\xe7\x82\x85\xe6\x8e\x90\xe5\x86\xbc\xe5\xa6\xael\xe8\xb0\x90\xe7\xa8\x9a\xe8\x8d\x86\xe6\x93\x92\xe7\x8a\xaf\xe9\x99\xb5\xe8\x99\x8f\xe6\xb5\x93\xe5\xb4\xbd\xe5\x88\x8d\xe9\x99\x8c\xe5\x82\xbb\xe5\xad\x9c\xe5\x8d\x83\xe9\x9d\x96\xe6\xbc\x94\xe7\x9f\x9c\xe9\x92\x95\xe7\x85\xbd\xe6\x9d\xb0\xe9\x85\x97\xe6\xb8\x97\xe4\xbc\x9e\xe6\xa0\x8b\xe4\xbf\x97\xe6\xb3\xab\xe6\x88\x8d\xe7\xbd\x95\xe6\xb2\xbe\xe7\x96\xbd\xe7\x81\x8f\xe7\x85\xa6\xe8\x8a\xac\xe7\xa3\xb4\xe5\x8f\xb1\xe9\x98\xb1\xe6\xa6\x89\xe6\xb9\x83\xe8\x9c\x80\xe5\x8f\x89\xe9\x86\x92\xe5\xbd\xaa\xe7\xa7\x9f\xe9\x83\xa1\xe7\xaf\xb7\xe5\xb1\x8e\xe8\x89\xaf\xe5\x9e\xa2\xe9\x9a\x97\xe5\xbc\xb1\xe9\x99\xa8\xe5\xb3\xaa\xe7\xa0\xb7\xe6\x8e\xb4\xe9\xa2\x81\xe8\x83\x8e\xe9\x9b\xaf\xe7\xbb\xb5\xe8\xb4\xac\xe6\xb2\x90\xe6\x92\xb5\xe9\x9a\x98\xe7\xaf\x99\xe6\x9a\x96\xe6\x9b\xb9\xe9\x99\xa1\xe6\xa0\x93\xe5\xa1\xab\xe8\x87\xbc\xe5\xbd\xa6\xe7\x93\xb6\xe7\x90\xaa\xe6\xbd\xbc\xe5\x93\xaa\xe9\xb8\xa1\xe6\x91\xa9\xe5\x95\xa6\xe4\xbf\x9f\xe9\x94\x8b\xe5\x9f\x9f\xe8\x80\xbb\xe8\x94\xab\xe7\x96\xaf\xe7\xba\xb9\xe6\x92\x87\xe6\xaf\x92\xe7\xbb\xb6\xe7\x97\x9b\xe9\x85\xaf\xe5\xbf\x8d\xe7\x88\xaa\xe8\xb5\xb3\xe6\xad\x86\xe5\x98\xb9\xe8\xbe\x95\xe7\x83\x88\xe5\x86\x8c\xe6\x9c\xb4\xe9\x92\xb1\xe5\x90\xae\xe6\xaf\xaf\xe7\x99\x9c\xe5\xa8\x83\xe8\xb0\x80\xe9\x82\xb5\xe5\x8e\xae\xe7\x82\xbd\xe7\x92\x9e\xe9\x82\x83\xe4\xb8\x90\xe8\xbf\xbd\xe8\xaf\x8d\xe7\x93\x92\xe5\xbf\x86\xe8\xbd\xa7\xe8\x8a\xab\xe8\xb0\xaf\xe5\x96\xb7\xe5\xbc\x9f\xe5\x8d\x8a\xe5\x86\x95\xe8\xa3\x99\xe6\x8e\x96\xe5\xa2\x89\xe7\xbb\xae\xe5\xaf\x9d\xe8\x8b\x94\xe5\x8a\xbf\xe9\xa1\xb7\xe8\xa4\xa5\xe5\x88\x87\xe8\xa1\xae\xe5\x90\x9b\xe4\xbd\xb3\xe5\xab\x92\xe8\x9a\xa9\xe9\x9c\x9e\xe4\xbd\x9a\xe6\xb4\x99\xe9\x80\x8a\xe9\x95\x96\xe6\x9a\xb9\xe5\x94\x9b&\xe6\xae\x92\xe9\xa1\xb6\xe7\xa2\x97\xe7\x8d\x97\xe8\xbd\xad\xe9\x93\xba\xe8\x9b\x8a\xe5\xba\x9f\xe6\x81\xb9\xe6\xb1\xa8\xe5\xb4\xa9\xe7\x8f\x8d\xe9\x82\xa3\xe6\x9d\xb5\xe6\x9b\xb2\xe7\xba\xba\xe5\xa4\x8f\xe8\x96\xb0\xe5\x82\x80\xe9\x97\xb3\xe6\xb7\xac\xe5\xa7\x98\xe8\x88\x80\xe6\x8b\xa7\xe5\x8d\xb7\xe6\xa5\x82\xe6\x81\x8d\xe8\xae\xaa\xe5\x8e\xa9\xe5\xaf\xae\xe7\xaf\xaa\xe8\xb5\x93\xe4\xb9\x98\xe7\x81\xad\xe7\x9b\x85\xe9\x9e\xa3\xe6\xb2\x9f\xe6\x85\x8e\xe6\x8c\x82\xe9\xa5\xba\xe9\xbc\xbe\xe6\x9d\xb3\xe6\xa0\x91\xe7\xbc\xa8\xe4\xb8\x9b\xe7\xb5\xae\xe5\xa8\x8c\xe8\x87\xbb\xe5\x97\xb3\xe7\xaf\xa1\xe4\xbe\xa9\xe8\xbf\xb0\xe8\xa1\xb0\xe7\x9f\x9b\xe5\x9c\x88\xe8\x9a\x9c\xe5\x8c\x95\xe7\xad\xb9\xe5\x8c\xbf\xe6\xbf\x9e\xe6\x99\xa8\xe5\x8f\xb6\xe9\xaa\x8b\xe9\x83\x9d\xe6\x8c\x9a\xe8\x9a\xb4\xe6\xbb\x9e\xe5\xa2\x9e\xe4\xbe\x8d\xe6\x8f\x8f\xe7\x93\xa3\xe5\x90\x96\xe5\xab\xa6\xe8\x9f\x92\xe5\x8c\xbe\xe5\x9c\xa3\xe8\xb5\x8c\xe6\xaf\xa1\xe7\x99\x9e\xe6\x81\xba\xe7\x99\xbe\xe6\x9b\xb3\xe9\x9c\x80\xe7\xaf\x93\xe8\x82\xae\xe5\xba\x96\xe5\xb8\x8f\xe5\x8d\xbf\xe9\xa9\xbf\xe9\x81\x97\xe8\xb9\xac\xe9\xac\x93\xe9\xaa\xa1\xe6\xad\x89\xe8\x8a\x8e\xe8\x83\xb3\xe5\xb1\x90\xe7\xa6\xbd\xe7\x83\xa6\xe6\x99\x8c\xe5\xaf\x84\xe5\xaa\xbe\xe7\x8b\x84\xe7\xbf\xa1\xe8\x8b\x92\xe8\x88\xb9\xe5\xbb\x89\xe7\xbb\x88\xe7\x97\x9e\xe6\xae\x87\xe3\x80\x85\xe7\x95\xa6\xe9\xa5\xb6\xe6\x94\xb9\xe6\x8b\x86\xe6\x82\xbb\xe8\x90\x84\xef\xbf\xa1\xe7\x93\xbf\xe4\xb9\x83\xe8\xa8\xbe\xe6\xa1\x85\xe5\x8c\xae\xe6\xba\xa7\xe6\x8b\xa5\xe7\xba\xb1\xe9\x93\x8d\xe9\xaa\x97\xe8\x95\x83\xe9\xbe\x8b\xe7\xbc\xac\xe7\x88\xb6\xe4\xbd\x90\xe7\x96\x9a\xe6\xa0\x8e\xe9\x86\x8d\xe6\x8e\xb3\xe8\x93\x84x\xe6\x83\x86\xe9\xa2\x9c\xe9\xb2\x86\xe6\xa6\x86\xe3\x80\x94\xe7\x8c\x8e\xe6\x95\x8c\xe6\x9a\xb4\xe8\xb0\xa5\xe9\xb2\xab\xe8\xb4\xbe\xe7\xbd\x97\xe7\x8e\xbb\xe7\xbc\x84\xe6\x89\xa6\xe8\x8a\xaa\xe7\x99\xa3\xe8\x90\xbd\xe5\xbe\x92\xe8\x87\xbe\xe6\x81\xbf\xe7\x8c\xa9\xe6\x89\x98\xe9\x82\xb4\xe8\x82\x84\xe7\x89\xb5\xe6\x98\xa5\xe9\x99\x9b\xe8\x80\x80\xe5\x88\x8a\xe6\x8b\x93\xe8\x93\x93\xe9\x82\xb3\xe5\xa0\x95\xe5\xaf\x87\xe6\x9e\x89\xe6\xb7\x8c\xe5\x95\xa1\xe6\xb9\x84\xe5\x85\xbd\xe9\x85\xb7\xe8\x90\xbc\xe7\xa2\x9a\xe6\xbf\xa0\xe8\x90\xa4\xe5\xa4\xb9\xe6\x97\xac\xe6\x88\xae\xe6\xa2\xad\xe7\x90\xa5\xe6\xa4\xad\xe6\x98\x94\xe5\x8b\xba\xe8\x9c\x8a\xe7\xbb\x90\xe6\x99\x9a\xe5\xad\xba\xe5\x83\xb5\xe5\xae\xa3\xe6\x91\x84\xe5\x86\xbd\xe6\x97\xa8\xe8\x90\x8c\xe5\xbf\x99\xe8\x9a\xa4\xe7\x9c\x89\xe5\x99\xbc\xe8\x9f\x91\xe4\xbb\x98\xe5\xa5\x91\xe7\x93\x9c\xe6\x82\xbc\xe9\xa2\xa1\xe5\xa3\x81\xe6\x9b\xbe\xe7\xaa\x95\xe9\xa2\xa2\xe6\xbe\x8e\xe4\xbb\xbf\xe4\xbf\x91\xe6\xb5\x91\xe5\xb5\x8c\xe6\xb5\xa3\xe4\xb9\x8d\xe7\xa2\x8c\xe8\xa4\xaa\xe4\xb9\xb1\xe8\x94\x9f\xe9\x9a\x99\xe7\x8e\xa9\xe5\x89\x90\xe8\x91\xab\xe7\xae\xab\xe7\xba\xb2\xe5\x9b\xb4\xe4\xbc\x90\xe5\x86\xb3\xe4\xbc\x99\xe6\xbc\xa9\xe7\x91\x9f\xe5\x88\x91\xe8\x82\x93\xe9\x95\xb3\xe7\xbc\x93\xe8\xb9\xad\xe6\xb0\xa8\xe7\x9a\x93\xe5\x85\xb8\xe7\x95\xb2\xe5\x9d\x8d\xe9\x93\x91\xe6\xaa\x90\xe5\xa1\x91\xe6\xb4\x9e\xe5\x80\xac\xe5\x82\xa8\xe8\x83\xb4\xe6\xb7\xb3\xe6\x88\xbe\xe5\x90\x90\xe7\x81\xbc\xe6\x83\xba\xe5\xa6\x99\xe6\xaf\x95\xe7\x8f\x90\xe7\xbc\x88\xe8\x99\xb1\xe7\x9b\x96\xe7\xbe\xb0\xe9\xb8\xbf\xe7\xa3\x85\xe8\xb0\x93\xe9\xab\x85\xe5\xa8\xb4\xe8\x8b\xb4\xe5\x94\xb7\xe8\x9a\xa3\xe9\x9c\xb9\xe6\x8a\xa8\xe8\xb4\xa4\xe5\x94\xa0\xe7\x8a\xac\xe8\xaa\x93\xe9\x80\x8d\xe5\xba\xa0\xe9\x80\xbc\xe9\xba\x93\xe7\xb1\xbc\xe9\x87\x89\xe5\x91\x9c\xe7\xa2\xa7\xe7\xa7\xa7\xe6\xb0\xa9\xe6\x91\x94\xe9\x9c\x84\xe7\xa9\xb8\xe7\xba\xa8\xe8\xbe\x9f\xe5\xa6\x88\xe6\x98\xa0\xe5\xae\x8c\xe7\x89\x9b\xe7\xbc\xb4\xe5\x97\xb7\xe7\x82\x8a\xe6\x81\xa9\xe8\x8d\x94\xe8\x8c\x86\xe6\x8e\x89\xe7\xb4\x8a\xe6\x85\x8c\xe8\x8e\x93\xe7\xbe\x9f\xe9\x98\x99\xe8\x90\x81\xe7\xa3\x90\xe5\x8f\xa6\xe8\x95\xb9\xe8\xbe\xb1\xe9\xb3\x90\xe6\xb9\xae\xe5\x90\xa1\xe5\x90\xa9\xe5\x94\x90\xe7\x9d\xa6\xe5\x9e\xa0\xe8\x88\x92\xe5\x9c\x9c\xe5\x86\x97\xe7\x9e\xbf\xe6\xba\xba\xe8\x8a\xbe\xe5\x9b\xb1\xe5\x8c\xa0\xe5\x83\xb3\xe6\xb1\x90\xe8\x8f\xa9\xe9\xa5\xac\xe6\xbc\x93\xe9\xbb\x91\xe9\x9c\xb0\xe6\xb5\xb8\xe6\xbf\xa1\xe7\xaa\xa5\xe6\xaf\x82\xe8\x92\xa1\xe5\x85\xa2\xe9\xa9\xbb\xe9\xb9\x89\xe8\x8a\xae\xe8\xaf\x99\xe8\xbf\xab\xe9\x9b\xb3\xe5\x8e\x82\xe5\xbf\x90\xe8\x87\x86\xe7\x8c\xb4\xe9\xb8\xa3\xe8\x9a\xaa\xe6\xa0\x88\xe7\xae\x95\xe7\xbe\xa1\xe6\xb8\x90\xe8\x8e\x86\xe6\x8d\x8d\xe7\x9c\x88\xe5\x93\x93\xe8\xb6\xb4\xe8\xb9\xbc\xe5\x9f\x95\xe5\x9a\xa3\xe9\xaa\x9b\xe5\xae\x8f\xe6\xb7\x84\xe6\x96\x91\xe5\x99\x9c\xe4\xb8\xa5\xe7\x91\x9b\xe5\x9e\x83\xe6\xa4\x8e\xe8\xaf\xb1\xe5\x8e\x8b\xe5\xba\xbe\xe7\xbb\x9e\xe7\x84\x98\xe5\xbb\xbf\xe6\x8a\xa1\xe8\xbf\x84\xe6\xa3\x98\xe5\xa4\xab\xe7\xba\xac\xe9\x94\xb9\xe7\x9c\xa8\xe7\x9e\x8c\xe4\xbe\xa0\xe8\x84\x90\xe7\xab\x9e\xe7\x80\x91\xe5\xad\xb3\xe9\xaa\xa7\xe9\x81\x81\xe5\xa7\x9c\xe9\xa2\xa6\xe8\x8d\xaa\xe6\xbb\x9a\xe8\x90\xa6\xe4\xbc\xaa\xe9\x80\xb8\xe7\xb2\xb3\xe7\x88\xac\xe9\x94\x81\xe7\x9f\xa3\xe5\xbd\xb9\xe8\xb6\xa3\xe6\xb4\x92\xe9\xa2\x94\xe8\xaf\x8f\xe9\x80\x90\xe5\xa5\xb8\xe7\x94\xad\xe6\x83\xa0\xe6\x94\x80\xe8\xb9\x84\xe6\xb3\x9b\xe5\xb0\xbc\xe6\x8b\xbc\xe9\x98\xae\xe9\xb9\xb0\xe4\xba\x9a\xe9\xa2\x88\xe6\x83\x91\xe5\x8b\x92\xe3\x80\x89\xe9\x99\x85\xe8\x82\x9b\xe7\x88\xb7\xe5\x88\x9a\xe9\x92\xa8\xe4\xb8\xb0\xe5\x85\xbb\xe5\x86\xb6\xe9\xb2\xbd\xe8\xbe\x89\xe8\x94\xbb\xe7\x94\xbb\xe8\xa6\x86\xe7\x9a\xb4\xe5\xa6\x8a\xe9\xba\xa6\xe8\xbf\x94\xe9\x86\x89\xe7\x9a\x82\xe6\x93\x80\xe3\x80\x97\xe9\x85\xb6\xe5\x87\x91\xe7\xb2\xb9\xe6\x82\x9f\xe8\xaf\x80\xe7\xa1\x96\xe6\xb8\xaf\xe5\x8d\x9cz\xe6\x9d\x80\xe6\xb6\x95\xc2\xb1\xe8\x88\x8d\xe9\x93\xa0\xe6\x8a\xb5\xe5\xbc\x9b\xe6\xae\xb5\xe6\x95\x9d\xe9\x95\x90\xe5\xa5\xa0\xe6\x8b\x82\xe8\xbd\xb4\xe8\xb7\x9b\xe8\xa2\xb1et\xe6\xb2\x89\xe8\x8f\x87\xe4\xbf\x8e\xe8\x96\xaa\xe5\xb3\xa6\xe7\xa7\xad\xe8\x9f\xb9\xe5\x8e\x86\xe7\x9b\x9f\xe8\x8f\xa0\xe5\xaf\xa1\xe6\xb6\xb2\xe8\x82\xa2\xe5\x96\xbb\xe6\x9f\x93\xe8\xa3\xb1\xe6\x82\xb1\xe6\x8a\xb1\xe6\xb0\x99\xe8\xb5\xa4\xe6\x8d\x85\xe7\x8c\x9b\xe8\xb7\x91\xe6\xb0\xae\xe8\xb0\xa3\xe4\xbb\x81\xe5\xb0\xba\xe8\xbe\x8a\xe7\xaa\x8d\xe7\x83\x99\xe8\xa1\x8d\xe6\x9e\xb6\xe6\x93\xa6\xe5\x80\x8f\xe7\x92\x90\xe7\x91\x81\xe5\xb8\x81\xe6\xa5\x9e\xe8\x83\x96\xe5\xa4\x94\xe8\xb6\xb8\xe9\x82\x9b\xe6\x83\xb4\xe9\xa5\x95\xe8\x99\x94\xe8\x9d\x8e\xc2\xa7\xe5\x93\x89\xe8\xb4\x9d\xe5\xae\xbd\xe8\xbe\xab\xe7\x82\xae\xe6\x89\xa9\xe9\xa5\xb2\xe7\xb1\xbd\xe9\xad\x8f\xe8\x8f\x9f\xe9\x94\xb0\xe4\xbc\x8d\xe7\x8c\x9d\xe6\x9c\xab\xe7\x90\xb3\xe5\x93\x9a\xe8\x9b\x8e\xe9\x82\x82\xe5\x91\x80\xe5\xa7\xbf\xe9\x84\x9e\xe5\x8d\xb4\xe6\xad\xa7\xe4\xbb\x99\xe6\x81\xb8\xe6\xa4\x90\xe6\xa3\xae\xe7\x89\x92\xe5\xaf\xa4\xe8\xa2\x92\xe5\xa9\x86\xe8\x99\xa2\xe9\x9b\x85\xe9\x92\x89\xe6\x9c\xb5\xe8\xb4\xbc\xe6\xac\xb2\xe8\x8b\x9e\xe5\xaf\xb0\xe6\x95\x85\xe9\xbe\x9a\xe5\x9d\xad\xe5\x98\x98\xe5\x92\xab\xe7\xa4\xbc\xe7\xa1\xb7\xe5\x85\x80\xe7\x9d\xa2\xe6\xb1\xb6\xe2\x80\x99\xe9\x93\xb2\xe7\x83\xa7\xe7\xbb\x95\xe8\xaf\x83\xe6\xb5\x83\xe9\x92\xbf\xe5\x93\xba\xe6\x9f\x9c\xe8\xae\xbc\xe9\xa2\x8a\xe7\x92\x81\xe8\x85\x94\xe6\xb4\xbd\xe5\x92\x90\xe8\x84\xb2\xe7\xb0\x8c\xe7\xad\xa0\xe9\x95\xa3\xe7\x8e\xae\xe9\x9e\xa0\xe8\xb0\x81\xe5\x85\xbc\xe5\xa7\x86\xe6\x8c\xa5\xe6\xa2\xaf\xe8\x9d\xb4\xe8\xb0\x98\xe6\xbc\x95\xe5\x88\xb7\xe8\xba\x8f\xe5\xae\xa6\xe5\xbc\xbcb\xe5\x9e\x8c\xe5\x8a\x88\xe9\xba\x9f\xe8\x8e\x89\xe6\x8f\xad\xe7\xac\x99\xe6\xb8\x8e\xe4\xbb\x95\xe5\x97\xa4\xe4\xbb\x93\xe9\x85\x8d\xe6\x80\x8f\xe6\x8a\xac\xe9\x94\x99\xe6\xb3\xaf\xe9\x95\x8a\xe5\xad\xb0\xe7\x8c\xbf\xe9\x82\xaa\xe4\xbb\x8d\xe7\xa7\x8b\xe9\xbc\xac\xe5\xa3\xb9\xe6\xad\x87\xe5\x90\xb5\xe7\x82\xbc<\xe5\xb0\xa7\xe5\xb0\x84\xe6\x9f\xac\xe5\xbb\xb7\xe8\x83\xa7\xe9\x9c\xbe\xe5\x87\xb3\xe9\x9a\x8b\xe8\x82\x9a\xe6\xb5\xae\xe6\xa2\xa6\xe7\xa5\xa5\xe6\xa0\xaa\xe5\xa0\xb5\xe9\x80\x80L\xe9\xb9\xab\xe8\xb7\x8e\xe5\x87\xb6\xe6\xaf\xbd\xe8\x8d\x9f\xe7\x82\xab\xe6\xa0\xa9\xe7\x8e\xb3\xe7\x94\x9c\xe6\xb2\x82\xe9\xb9\xbf\xe9\xa1\xbd\xe4\xbc\xaf\xe7\x88\xb9\xe8\xb5\x94\xe8\x9b\xb4\xe5\xbe\x90\xe5\x8c\xa1\xe6\xac\xa3\xe7\x8b\xb0\xe7\xbc\xb8\xe9\x9b\xb9\xe8\x9f\x86\xe7\x96\xa4\xe9\xbb\x98\xe6\xb2\xa4\xe5\x95\x9c\xe7\x97\x82\xe8\xa1\xa3\xe7\xa6\x85wih\xe8\xbe\xbd\xe8\x91\xb3\xe9\xbb\x9d\xe9\x92\x97\xe5\x81\x9c\xe6\xb2\xbd\xe6\xa3\x92\xe9\xa6\xa8\xe9\xa2\x8c\xe8\x82\x89\xe5\x90\xb4\xe7\xa1\xab\xe6\x82\xaf\xe5\x8a\xbe\xe5\xa8\x88\xe9\xa9\xac\xe5\x95\xa7\xe5\x90\x8a\xe6\x82\x8c\xe9\x95\x91\xe5\xb3\xad\xe5\xb8\x86\xe7\x80\xa3\xe6\xb6\x89\xe5\x92\xb8\xe7\x96\xb8\xe6\xbb\x8b\xe6\xb3\xa3\xe7\xbf\xa6\xe6\x8b\x99\xe7\x99\xb8\xe9\x92\xa5\xe8\x9c\x92+\xe5\xb0\xbe\xe5\xba\x84\xe5\x87\x9d\xe6\xb3\x89\xe5\xa9\xa2\xe6\xb8\xb4\xe8\xb0\x8a\xe4\xb9\x9e\xe9\x99\x86\xe9\x94\x89\xe7\xb3\x8a\xe9\xb8\xa6\xe6\xb7\xaeIBN\xe6\x99\xa6\xe5\xbc\x97\xe4\xb9\x94\xe5\xba\xa5\xe8\x91\xa1\xe5\xb0\xbb\xe5\xb8\xad\xe6\xa9\xa1\xe5\x82\xa3\xe6\xb8\xa3\xe6\x8b\xbf\xe6\x83\xa9\xe9\xba\x8b\xe6\x96\x9b\xe7\xbc\x83\xe7\x9f\xae\xe8\x9b\x8f\xe5\xb2\x98\xe9\xb8\xbd\xe5\xa7\x90\xe8\x86\x8f\xe5\x82\xac\xe5\xa5\x94\xe9\x95\x92\xe5\x96\xb1\xe8\xa0\xa1\xe6\x91\xa7\xe9\x92\xaf\xe8\x83\xa4\xe6\x9f\xa0\xe6\x8b\x90\xe7\x92\x8b\xe9\xb8\xa5\xe5\x8d\xa2\xe8\x8d\xa1\xe5\x80\xbe^_\xe7\x8f\x80\xe9\x80\x84\xe8\x90\xa7\xe5\xa1\xbe\xe6\x8e\x87\xe8\xb4\xae\xe7\xac\x86\xe8\x81\x82\xe5\x9c\x83\xe5\x86\xb2\xe5\xb5\xacM\xe6\xbb\x94\xe7\xac\x95\xe5\x80\xbc\xe7\x82\x99\xe5\x81\xb6\xe8\x9c\xb1\xe6\x90\x90\xe6\xa2\x86\xe6\xb1\xaa\xe8\x94\xac\xe8\x85\x91\xe9\xb8\xaf\xe8\xb9\x87\xe6\x95\x9e\xe7\xbb\xaf\xe4\xbb\xa8\xe7\xa5\xaf\xe8\xb0\x86\xe6\xa2\xa7\xe7\xb3\x97\xe9\x91\xab\xe5\x95\xb8\xe8\xb1\xba\xe5\x9b\xb9\xe7\x8c\xbe\xe5\xb7\xa2\xe6\x9f\x84\xe7\x80\x9b\xe7\xad\x91\xe8\xb8\x8c\xe6\xb2\xad\xe6\x9a\x97\xe8\x8b\x81\xe9\xb1\xbf\xe8\xb9\x89\xe8\x84\x82\xe8\x98\x96\xe7\x89\xa2\xe7\x83\xad\xe6\x9c\xa8\xe5\x90\xb8\xe6\xba\x83\xe5\xae\xa0\xe5\xba\x8f\xe6\xb3\x9e\xe5\x81\xbf\xe6\x8b\x9c\xe6\xaa\xa9\xe5\x8e\x9a\xe6\x9c\x90\xe6\xaf\x97\xe8\x9e\xb3\xe5\x90\x9e\xe5\xaa\x9a\xe6\x9c\xbd\xe6\x8b\x85\xe8\x9d\x97\xe6\xa9\x98\xe7\x95\xb4\xe7\xa5\x88\xe7\xb3\x9f\xe7\x9b\xb1\xe9\x9a\xbc\xe9\x83\x9c\xe6\x83\x9c\xe7\x8f\xa0\xe8\xa3\xa8\xe9\x93\xb5\xe7\x84\x99\xe7\x90\x9a\xe5\x94\xaf\xe5\x92\x9a\xe5\x99\xaa\xe9\xaa\x8a\xe4\xb8\xab\xe6\xbb\xa2\xe5\x8b\xa4\xe6\xa3\x89\xe5\x91\xb8\xe5\x92\xa3\xe6\xb7\x80\xe9\x9a\x94\xe8\x95\xbe\xe7\xaa\x88\xe9\xa5\xa8\xe6\x8c\xa8\xe7\x85\x85\xe7\x9f\xad\xe5\x8c\x99\xe7\xb2\x95\xe9\x95\x9c\xe8\xb5\xa3\xe6\x92\x95\xe5\xa2\xa9\xe9\x85\xac\xe9\xa6\x81\xe8\xb1\x8c\xe9\xa2\x90\xe6\x8a\x97\xe9\x85\xa3\xe6\xb0\x93\xe4\xbd\x91\xe6\x90\x81\xe5\x93\xad\xe9\x80\x92\xe8\x80\xb7\xe6\xb6\xa1\xe6\xa1\x83\xe8\xb4\xbb\xe7\xa2\xa3\xe6\x88\xaa\xe7\x98\xa6\xe6\x98\xad\xe9\x95\x8c\xe8\x94\x93\xe6\xb0\x9a\xe7\x94\xb2\xe7\x8c\x95\xe8\x95\xb4\xe8\x93\xac\xe6\x95\xa3\xe6\x8b\xbe\xe7\xba\x9b\xe7\x8b\xbc\xe7\x8c\xb7\xe9\x93\x8e\xe5\x9f\x8b\xe6\x97\x96\xe7\x9f\xbe\xe8\xae\xb3\xe5\x9b\x8a\xe7\xb3\x9c\xe8\xbf\x88\xe7\xb2\x9f\xe8\x9a\x82\xe7\xb4\xa7\xe9\xb2\xb3\xe7\x98\xa2\xe6\xa0\xbd\xe7\xa8\xbc\xe7\xbe\x8a\xe9\x94\x84\xe6\x96\x9f\xe7\x9d\x81\xe6\xa1\xa5\xe7\x93\xae\xe8\xb9\x99\xe7\xa5\x89\xe9\x86\xba\xe9\xbc\xbb\xe6\x98\xb1\xe5\x89\x83\xe8\xb7\xb3\xe7\xaf\xb1\xe8\xb7\xb7\xe8\x92\x9c\xe7\xbf\x8e\xe5\xae\x85\xe6\x99\x96\xe5\x97\x91\xe5\xa3\x91\xe5\xb3\xbb\xe7\x99\xab\xe5\xb1\x8f\xe7\x8b\xa0\xe9\x99\x8b\xe8\xa2\x9c\xe9\x80\x94\xe6\x86\x8e\xe7\xa5\x80\xe8\x8e\xb9\xe6\xbb\x9f\xe4\xbd\xb6\xe6\xba\xa5\xe8\x87\xa3\xe7\xba\xa6\xe7\x9b\x9b\xe5\xb3\xb0\xe7\xa3\x81\xe6\x85\xb5\xe5\xa9\xaa\xe6\x8b\xa6\xe8\x8e\x85\xe6\x9c\x95\xe9\xb9\xa6\xe7\xb2\xb2\xe8\xa3\xa4\xe5\x93\x8e\xe7\x96\xa1\xe5\xab\x96\xe7\x90\xb5\xe7\xaa\x9f\xe5\xa0\xaa\xe8\xb0\x9b\xe5\x98\x89\xe5\x84\xa1\xe9\xb3\x9d\xe6\x96\xa9\xe9\x83\xbe\xe9\xa9\xb8\xe9\x85\x8a\xe5\xa6\x84\xe8\x83\x9c\xe8\xb4\xba\xe5\xbe\x99\xe5\x82\x85\xe5\x99\x8c\xe9\x92\xa2\xe6\xa0\x85\xe5\xba\x87\xe6\x81\x8b\xe5\x8c\x9d\xe5\xb7\xaf\xe9\x82\x88\xe5\xb0\xb8\xe9\x94\x9a\xe7\xb2\x97\xe4\xbd\x9f\xe8\x9b\x9f\xe8\x96\xb9\xe7\xba\xb5\xe8\x9a\x8a\xe9\x83\x85\xe7\xbb\xa2\xe9\x94\x90\xe8\x8b\x97\xe4\xbf\x9e\xe7\xaf\x86\xe6\xb7\x86\xe8\x86\x80\xe9\xb2\x9c\xe7\x85\x8e\xe8\xaf\xb6\xe7\xa7\xbd\xe5\xaf\xbb\xe6\xb6\xae\xe5\x88\xba\xe6\x80\x80\xe5\x99\xb6\xe5\xb7\xa8\xe8\xa4\xb0\xe9\xad\x85\xe7\x81\xb6\xe7\x81\x8c\xe6\xa1\x89\xe8\x97\x95\xe8\xb0\x9c\xe8\x88\xb8\xe8\x96\x84\xe6\x90\x80\xe6\x81\xbd\xe5\x80\x9f\xe7\x89\xaf\xe7\x97\x89\xe6\xb8\xa5\xe6\x84\xbf\xe4\xba\x93\xe8\x80\x98\xe6\x9d\xa0\xe6\x9f\xa9\xe9\x94\x94\xe8\x9a\xb6\xe9\x92\xa3\xe7\x8f\x88\xe5\x96\x98\xe8\xb9\x92\xe5\xb9\xbd\xe8\xb5\x90\xe7\xa8\x97\xe6\x99\xa4\xe8\x8e\xb1\xe6\xb3\x94\xe6\x89\xaf\xe8\x82\xaf\xe8\x8f\xaa\xe8\xa3\x86\xe8\x85\xa9\xe8\xb1\x89\xe7\x96\x86\xe9\xaa\x9c\xe8\x85\x90\xe5\x80\xad\xe7\x8f\x8f\xe5\x94\x94\xe7\xb2\xae\xe4\xba\xa1\xe6\xb6\xa6\xe6\x85\xb0\xe4\xbc\xbd\xe6\xa9\x84\xe7\x8e\x84\xe8\xaa\x89\xe9\x86\x90\xe8\x83\x86\xe9\xbe\x8a\xe7\xb2\xbc\xe5\xa1\xac\xe9\x99\x87\xe5\xbd\xbc\xe5\x89\x8a\xe5\x97\xa3\xe7\xbb\xbe\xe8\x8a\xbd\xe5\xa6\x97\xe5\x9e\xad\xe7\x98\xb4\xe7\x88\xbd\xe8\x96\x8f\xe5\xaf\xa8\xe9\xbe\x88\xe6\xb3\xa0\xe5\xbc\xb9\xe8\xb5\xa2\xe6\xbc\xaa\xe7\x8c\xab\xe5\x98\xa7\xe6\xb6\x82\xe6\x81\xa4\xe5\x9c\xad\xe8\x8c\xa7\xe7\x83\xbd\xe5\xb1\x91\xe7\x97\x95\xe5\xb7\xbe\xe8\xb5\x96\xe8\x8d\xb8\xe5\x87\xb0\xe8\x85\xae\xe7\x95\x88\xe4\xba\xb5\xe8\xb9\xb2\xe5\x81\x83\xe8\x8b\x87\xe6\xbe\x9c\xe8\x89\xae\xe6\x8d\xa2\xe9\xaa\xba\xe7\x83\x98\xe8\x8b\x95\xe6\xa2\x93\xe9\xa2\x89\xe8\x82\x87\xe5\x93\x97\xe6\x82\x84\xe6\xb0\xa4\xe6\xb6\xa0\xe8\x91\xac\xe5\xb1\xa0\xe9\xb9\xad\xe6\xa4\x8d\xe7\xab\xba\xe4\xbd\xaf\xe8\xaf\xa3\xe9\xb2\x87\xe7\x98\x80\xe9\xb2\x85\xe9\x82\xa6\xe7\xa7\xbb\xe6\xbb\x81\xe5\x86\xaf\xe8\x80\x95\xe7\x99\x94\xe6\x88\x8c\xe8\x8c\xac\xe6\xb2\x81\xe5\xb7\xa9\xe6\x82\xa0\xe6\xb9\x98\xe6\xb4\xaa\xe7\x97\xb9\xe9\x94\x9f\xe5\xbe\xaa\xe8\xb0\x8b\xe8\x85\x95\xe9\xb3\x83\xe9\x92\xa0\xe6\x8d\x9e\xe7\x84\x89\xe8\xbf\x8e\xe7\xa2\xb1\xe4\xbc\xab\xe6\x80\xa5\xe6\xa6\xb7\xe5\xa5\x88\xe9\x82\x9d\xe5\x8d\xaf\xe8\xbe\x84\xe7\x9a\xb2\xe5\x8d\x9f\xe9\x86\x9b\xe7\x95\xb9\xe5\xbf\xa7\xe7\xa8\xb3\xe9\x9b\x84\xe6\x98\xbc\xe7\xbc\xa9\xe9\x98\x88\xe7\x9d\x91\xe6\x89\x8c\xe8\x80\x97\xe6\x9b\xa6\xe6\xb6\x85\xe6\x8d\x8f\xe7\x9e\xa7\xe9\x82\x95\xe6\xb7\x96\xe6\xbc\x89\xe9\x93\x9d\xe8\x80\xa6\xe7\xa6\xb9\xe6\xb9\x9b\xe5\x96\xbd\xe8\x8e\xbc\xe7\x90\x85\xe8\xaf\xb8\xe8\x8b\x8e\xe7\xba\x82\xe7\xa1\x85\xe5\xa7\x8b\xe5\x97\xa8\xe5\x82\xa5\xe7\x87\x83\xe8\x87\x82\xe8\xb5\x85\xe5\x98\x88\xe5\x91\x86\xe8\xb4\xb5\xe5\xb1\xb9\xe5\xa3\xae\xe8\x82\x8b\xe4\xba\x8d\xe8\x9a\x80\xe5\x8d\x85\xe8\xb1\xb9\xe8\x85\x86\xe9\x82\xac\xe8\xbf\xad\xe6\xb5\x8a}\xe7\xab\xa5\xe8\x9e\x82\xe6\x8d\x90\xe5\x9c\xa9\xe5\x8b\x90\xe8\xa7\xa6\xe5\xaf\x9e\xe6\xb1\x8a\xe5\xa3\xa4\xe8\x8d\xab\xe8\x86\xba\xe6\xb8\x8c\xe8\x8a\xb3\xe6\x87\xbf\xe9\x81\xb4\xe8\x9e\x88\xe6\xb3\xb0\xe8\x93\xbc\xe8\x9b\xa4\xe8\x8c\x9c\xe8\x88\x85\xe6\x9e\xab\xe6\x9c\x94\xe8\x86\x9d\xe7\x9c\x99\xe9\x81\xbf\xe6\xa2\x85\xe5\x88\xa4\xe9\xb9\x9c\xe7\x92\x9c\xe7\x89\x8d\xe7\xbc\x85\xe5\x9e\xab\xe8\x97\xbb\xe9\xbb\x94\xe4\xbe\xa5\xe6\x83\x9a\xe6\x87\x82\xe8\xb8\xa9\xe8\x85\xb0\xe8\x85\x88\xe6\x9c\xad\xe4\xb8\x9e\xe5\x94\xbe\xe6\x85\x88\xe9\xa1\xbf\xe6\x91\xb9\xe8\x8d\xbb\xe7\x90\xac~\xe6\x96\xa7\xe6\xb2\x88\xe6\xbb\x82\xe8\x83\x81\xe8\x83\x80\xe5\xb9\x84\xe8\x8e\x9cZ\xe5\x8c\x80\xe9\x84\x84\xe6\x8e\x8c\xe7\xbb\xb0\xe8\x8c\x8e\xe7\x84\x9a\xe8\xb5\x8b\xe8\x90\xb1\xe8\xb0\x91\xe6\xb1\x81\xe9\x93\x92\xe7\x9e\x8e\xe5\xa4\xba\xe8\x9c\x97\xe9\x87\x8e\xe5\xa8\x86\xe5\x86\x80\xe5\xbc\xaf\xe7\xaf\x81\xe6\x87\xb5\xe7\x81\x9e\xe9\x9a\xbd\xe8\x8a\xa1\xe8\x84\x98\xe4\xbf\x90\xe8\xbe\xa9\xe8\x8a\xaf\xe6\x8e\xba\xe5\x96\x8f\xe8\x86\x88\xe8\x9d\x88\xe8\xa7\x90\xe6\x82\x9a\xe8\xb8\xb9\xe8\x94\x97\xe7\x86\xa0\xe9\xbc\xa0\xe5\x91\xb5\xe6\x8a\x93\xe6\xa9\xbc\xe5\xb3\xa8\xe7\x95\x9c\xe7\xbc\x94\xe7\xa6\xbe\xe5\xb4\xad\xe5\xbc\x83\xe7\x86\x8a\xe6\x91\x92\xe5\x87\xb8\xe6\x8b\x97\xe7\xa9\xb9\xe8\x92\x99\xe6\x8a\x92\xe7\xa5\x9b\xe5\x8a\x9d\xe9\x97\xab\xe6\x89\xb3\xe9\x98\xb5\xe9\x86\x8c\xe8\xb8\xaa\xe5\x96\xb5\xe4\xbe\xa3\xe6\x90\xac\xe4\xbb\x85\xe8\x8d\xa7\xe8\xb5\x8e\xe8\x9d\xbe\xe7\x90\xa6\xe4\xb9\xb0\xe5\xa9\xa7\xe7\x9e\x84\xe5\xaf\x93\xe7\x9a\x8e\xe5\x86\xbb\xe8\xb5\x9d\xe7\xae\xa9\xe8\x8e\xab\xe7\x9e\xb0\xe9\x83\x8a\xe7\xac\xab\xe5\xa7\x9d\xe7\xad\x92\xe6\x9e\xaa\xe9\x81\xa3\xe7\x85\xb8\xe8\xa2\x8b\xe8\x88\x86\xe7\x97\xb1\xe6\xb6\x9b\xe6\xaf\x8d\xe3\x80\x87\xe5\x90\xaf\xe8\xb7\xb5\xe8\x80\x99\xe7\xbb\xb2\xe7\x9b\x98\xe9\x81\x82\xe6\x98\x8a\xe6\x90\x9e\xe6\xa7\xbf\xe8\xaf\xac\xe7\xba\xb0\xe6\xb3\x93\xe6\x83\xa8\xe6\xaa\xac\xe4\xba\xbb\xe8\xb6\x8aCo\xe6\x86\xa9\xe7\x86\xb5\xe7\xa5\xb7\xe9\x92\x92\xe6\x9a\xa7\xe5\xa1\x94\xe9\x98\x97\xe8\x83\xb0\xe5\x92\x84\xe5\xa8\xb6\xe9\xad\x94\xe7\x90\xb6\xe9\x92\x9e\xe9\x82\xbb\xe6\x89\xac\xe6\x9d\x89\xe6\xae\xb4\xe5\x92\xbd\xe5\xbc\x93\xe3\x80\x86\xe9\xab\xbb\xe3\x80\x91\xe5\x90\xad\xe6\x8f\xbd\xe9\x9c\x86\xe6\x8b\x84\xe6\xae\x96\xe8\x84\x86\xe5\xbd\xbb\xe5\xb2\xa9\xe8\x8a\x9d\xe5\x8b\x83\xe8\xbe\xa3\xe5\x89\x8c\xe9\x92\x9d\xe5\x98\x8e\xe7\x94\x84\xe4\xbd\x98\xe7\x9a\x96\xe4\xbc\xa6\xe6\x8e\x88\xe5\xbe\x95\xe6\x86\x94\xe6\x8c\xaa\xe7\x9a\x87\xe5\xba\x9e\xe7\xa8\x94\xe8\x8a\x9c\xe8\xb8\x8f\xe6\xba\xb4\xe5\x85\x96\xe5\x8d\x92\xe6\x93\xa2\xe9\xa5\xa5\xe9\xb3\x9e\xe7\x85\xb2\xe2\x80\xb0\xe8\xb4\xa6\xe9\xa2\x97\xe5\x8f\xbb\xe6\x96\xaf\xe6\x8d\xa7\xe9\xb3\x8d\xe7\x90\xae\xe8\xae\xb9\xe8\x9b\x99\xe7\xba\xbd\xe8\xb0\xad\xe9\x85\xb8\xe5\x85\x94\xe8\x8e\x92\xe7\x9d\x87\xe4\xbc\x9f\xe8\xa7\x91\xe7\xbe\xb2\xe5\x97\x9c\xe5\xae\x9c\xe8\xa4\x90\xe6\x97\x8e\xe8\xbe\x9b\xe5\x8d\xa6\xe8\xaf\x98\xe7\xad\x8b\xe9\x8e\x8f\xe6\xba\xaa\xe6\x8c\x9b\xe7\x86\x94\xe9\x98\x9c\xe6\x99\xb0\xe9\xb3\x85\xe4\xb8\xa2\xe5\xa5\x9a\xe7\x81\xb8\xe5\x91\xb1\xe7\x8c\xae\xe9\x99\x89\xe9\xbb\x9b\xe9\xb8\xaa\xe7\x94\xbe\xe8\x90\xa8\xe7\x96\xae\xe6\x8b\xaf\xe6\xb4\xb2\xe7\x96\xb9\xe8\xbe\x91\xe5\x8f\x99\xe6\x81\xbb\xe8\xb0\x92\xe5\x85\x81\xe6\x9f\x94\xe7\x83\x82\xe6\xb0\x8f\xe9\x80\x85\xe6\xbc\x86\xe6\x8b\x8e\xe6\x83\x8b\xe6\x89\x88\xe6\xb9\x9f\xe7\xba\xad\xe5\x95\x95\xe6\x8e\xac\xe6\x93\x9e\xe5\x93\xa5\xe5\xbf\xbd\xe6\xb6\xa4\xe9\xb8\xb5\xe9\x9d\xa1\xe9\x83\x97\xe7\x93\xb7\xe6\x89\x81\xe5\xbb\x8a\xe6\x80\xa8\xe9\x9b\x8f\xe9\x92\xae\xe6\x95\xa6E\xe6\x87\xa6\xe6\x86\x8b\xe6\xb1\x80\xe6\x8b\x9a\xe5\x95\x89\xe8\x85\x8c\xe5\xb2\xb8f\xe7\x97\xbc\xe7\x9e\x85\xe5\xb0\x8a\xe5\x92\x80\xe7\x9c\xa9\xe9\xa3\x99\xe5\xbf\x8c\xe4\xbb\x9d\xe8\xbf\xa6\xe7\x86\xac\xe6\xaf\xab\xe8\x83\xaf\xe7\xaf\x91\xe8\x8c\x84\xe8\x85\xba\xe5\x87\x84\xe8\x88\x9b\xe7\xa2\xb4\xe9\x94\xb5\xe8\xaf\xa7\xe7\xbe\xaf\xe5\xbe\x8c\xe6\xbc\x8f\xe6\xb1\xa4\xe5\xae\x93\xe4\xbb\x9e\xe8\x9a\x81\xe5\xa3\xb6\xe8\xb0\xb0\xe7\x9a\x91\xe9\x93\x84\xe6\xa3\xb0\xe7\xbd\x94\xe8\xbe\x85\xe6\x99\xb6\xe8\x8b\xa6\xe7\x89\x9f\xe9\x97\xbd\\\xe7\x83\x83\xe9\xa5\xae\xe8\x81\xbf\xe4\xb8\x99\xe8\x9b\xb3\xe6\x9c\xb1\xe7\x85\xa4\xe6\xb6\x94\xe9\xb3\x96\xe7\x8a\x81\xe7\xbd\x90\xe8\x8d\xbc\xe7\xa0\x92\xe6\xb7\xa6\xe5\xa6\xa4\xe9\xbb\x8f\xe6\x88\x8e\xe5\xad\x91\xe5\xa9\x95\xe7\x91\xbe\xe6\x88\xa2\xe9\x92\xb5\xe6\x9e\xa3\xe6\x8d\x8b\xe7\xa0\xa5\xe8\xa1\xa9\xe7\x8b\x99\xe6\xa1\xa0\xe7\xa8\xa3\xe9\x98\x8e\xe8\x82\x83\xe6\xa2\x8f\xe8\xaf\xab\xe5\xad\xaa\xe6\x98\xb6\xe5\xa9\x8a\xe8\xa1\xab\xe5\x97\x94\xe4\xbe\x83\xe5\xa1\x9e\xe8\x9c\x83\xe6\xa8\xb5\xe5\xb3\x92\xe8\xb2\x8c\xe5\xb1\xbf\xe6\xac\xba\xe7\xbc\xab\xe9\x98\x90\xe6\xa0\x96\xe8\xaf\x9f\xe7\x8f\x9e\xe8\x8d\xad\xe5\x90\x9d\xe8\x90\x8d\xe5\x97\xbd\xe6\x81\x82\xe5\x95\xbb\xe8\x9c\xb4\xe7\xa3\xac\xe5\xb3\x8b\xe4\xbf\xb8\xe8\xb1\xab\xe8\xb0\x8e\xe5\xbe\x8a\xe9\x95\x8d\xe9\x9f\xac\xe9\xad\x87\xe6\x99\xb4U\xe5\x9b\x9f\xe7\x8c\x9c\xe8\x9b\xae\xe5\x9d\x90\xe5\x9b\xbf\xe4\xbc\xb4\xe4\xba\xad\xe8\x82\x9d\xe4\xbd\x97\xe8\x9d\xa0\xe5\xa6\x83\xe8\x83\x9e\xe6\xbb\xa9\xe6\xa6\xb4\xe6\xb0\x96\xe5\x9e\xa9\xe8\x8b\x8b\xe7\xa0\xa3\xe6\x89\xaa\xe9\xa6\x8f\xe5\xa7\x93\xe8\xbd\xa9\xe5\x8e\x89\xe5\xa4\xa5\xe4\xbe\x88\xe7\xa6\x80\xe5\x9e\x92\xe5\xb2\x91\xe8\xb5\x8f\xe9\x92\x9b\xe8\xbe\x90\xe7\x97\x94\xe6\x8a\xab\xe7\xba\xb8\xe7\xa2\xb3\xe2\x80\x9c\xe5\x9d\x9e\xe8\xa0\x93\xe6\x8c\xa4\xe8\x8d\xa5\xe6\xb2\x85\xe6\x82\x94\xe9\x93\xa7\xe5\xb8\xbc\xe8\x92\x8c\xe8\x9d\x87apyng\xe5\x93\x80\xe6\xb5\x86\xe7\x91\xb6\xe5\x87\xbf\xe6\xa1\xb6\xe9\xa6\x88\xe7\x9a\xae\xe5\xa5\xb4\xe8\x8b\x9c\xe4\xbd\xa4\xe4\xbc\xb6\xe6\x99\x97\xe9\x93\xb1\xe7\x82\xac\xe4\xbc\x98\xe5\xbc\x8a\xe6\xb0\xa2\xe6\x81\x83\xe7\x94\xab\xe6\x94\xa5\xe7\xab\xaf\xe9\x94\x8c\xe7\x81\xb0\xe7\xa8\xb9\xe7\x82\x9d\xe6\x9b\x99\xe9\x82\x8b\xe4\xba\xa5\xe7\x9c\xb6\xe7\xa2\xbe\xe6\x8b\x89\xe8\x90\x9d\xe7\xbb\x94\xe6\x8d\xb7\xe6\xb5\x8d\xe8\x85\x8b\xe5\xa7\x91\xe8\x8f\x96\xe5\x87\x8c\xe6\xb6\x9e\xe9\xba\xbd\xe9\x94\xa2\xe6\xa1\xa8\xe6\xbd\xa2\xe7\xbb\x8e\xe9\x95\xb0\xe6\xae\x86\xe9\x94\x91\xe6\xb8\x9d\xe9\x93\xac\xe5\x9b\xb0\xe7\xbb\xbd\xe8\xa7\x8e\xe5\x8c\x88\xe7\xb3\x99\xe6\x9a\x91\xe8\xa3\xb9\xe9\xb8\x9f\xe7\x9b\x94\xe8\x82\xbd\xe8\xbf\xb7\xe7\xb6\xa6\xe3\x80\x8e\xe4\xba\xb3\xe4\xbd\x9d\xe4\xbf\x98\xe9\x92\xb4\xe8\xa7\x87\xe9\xaa\xa5\xe4\xbb\x86\xe7\x96\x9d\xe8\xb7\xaa\xe5\xa9\xb6\xe9\x83\xaf\xe7\x80\xb9\xe5\x94\x89\xe8\x84\x96\xe8\xb8\x9e\xe9\x92\x88\xe6\x99\xbe\xe5\xbf\x92\xe6\x89\xbc\xe7\x9e\xa9\xe5\x8f\x9b\xe6\xa4\x92\xe7\x96\x9f\xe5\x97\xa1\xe9\x82\x97\xe8\x82\x86\xe8\xb7\x86\xe7\x8e\xab\xe5\xbf\xa1\xe6\x8d\xa3\xe5\x92\xa7\xe5\x94\x86\xe8\x89\x84\xe8\x98\x91\xe6\xbd\xa6\xe7\xac\x9b\xe9\x98\x9a\xe6\xb2\xb8\xe6\xb3\xbb\xe6\x8e\x8a\xe8\x8f\xbd\xe8\xb4\xab\xe6\x96\xa5\xe9\xab\x82\xe5\xad\xa2\xe9\x95\x82\xe8\xb5\x82\xe9\xba\x9d\xe9\xb8\xbe\xe5\xb1\xa1\xe8\xa1\xac\xe8\x8b\xb7\xe6\x81\xaa\xe5\x8f\xa0\xe5\xb8\x8c\xe7\xb2\xa4\xe7\x88\xbb\xe5\x96\x9d\xe8\x8c\xab\xe6\x83\xac\xe9\x83\xb8\xe7\xbb\xbb\xe5\xba\xb8\xe6\x92\x85\xe7\xa2\x9f\xe5\xae\x84\xe5\xa6\xb9\xe8\x86\x9b\xe5\x8f\xae\xe9\xa5\xb5\xe5\xb4\x9b\xe5\x97\xb2\xe6\xa4\x85\xe5\x86\xa4\xe6\x90\x85\xe5\x92\x95\xe6\x95\x9b\xe5\xb0\xb9\xe5\x9e\xa6\xe9\x97\xb7\xe8\x9d\x89\xe9\x9c\x8e\xe5\x8b\xb0\xe8\xb4\xa5\xe8\x93\x91\xe6\xb3\xb8\xe8\x82\xa4\xe9\xb9\x8c\xe5\xb9\x8c\xe7\x84\xa6\xe6\xb5\xa0\xe9\x9e\x8d\xe5\x88\x81\xe8\x88\xb0\xe4\xb9\x99\xe7\xab\xbf\xe8\xa3\x94\xe3\x80\x82\xe8\x8c\xb5\xe5\x87\xbd\xe4\xbc\x8a\xe5\x85\x84\xe4\xb8\xa8\xe5\xa8\x9c\xe5\x8c\x8d\xe8\xac\x87\xe8\x8e\xaa\xe5\xae\xa5\xe4\xbc\xbc\xe8\x9d\xbd\xe7\xbf\xb3\xe9\x85\xaa\xe7\xbf\xa0\xe7\xb2\x91\xe8\x96\x87\xe7\xa5\xa2\xe9\xaa\x8f\xe8\xb5\xa0\xe5\x8f\xabQ\xe5\x99\xa4\xe5\x99\xbb\xe7\xab\x96\xe8\x8a\x97\xe8\x8e\xa0\xe6\xbd\xad\xe4\xbf\x8a\xe7\xbe\xbf\xe8\x80\x9cO\xe9\x83\xab\xe8\xb6\x81\xe5\x97\xaa\xe5\x9b\x9a\xe8\xb9\xb6\xe8\x8a\x92\xe6\xb4\x81\xe7\xac\x8b\xe9\xb9\x91\xe6\x95\xb2\xe7\xa1\x9d\xe5\x95\xb6\xe5\xa0\xa1\xe6\xb8\xb2\xe6\x8f\xa9\xe3\x80\x8f\xe6\x90\xba\xe5\xae\xbf\xe9\x81\x92\xe9\xa2\x8d\xe6\x89\xad\xe6\xa3\xb1\xe5\x89\xb2\xe8\x90\x9c\xe8\x94\xb8\xe8\x91\xb5\xe7\x90\xb4\xe6\x8d\x82\xe9\xa5\xb0\xe8\xa1\x99\xe8\x80\xbf\xe6\x8e\xa0\xe5\x8b\x9f\xe5\xb2\x82\xe7\xaa\x96\xe6\xb6\x9f\xe8\x94\xba\xe7\x98\xa4\xe6\x9f\x9e\xe7\x9e\xaa\xe6\x80\x9c\xe5\x8c\xb9\xe8\xb7\x9d\xe6\xa5\x94\xe7\x82\x9c\xe5\x93\x86\xe7\xa7\xa6\xe7\xbc\x8e\xe5\xb9\xbc\xe8\x8c\x81\xe7\xbb\xaa\xe7\x97\xa8\xe6\x81\xa8\xe6\xa5\xb8\xe5\xa8\x85\xe7\x93\xa6\xe6\xa1\xa9\xe9\x9b\xaa\xe5\xac\xb4\xe4\xbc\x8f\xe6\xa6\x94\xe5\xa6\xa5\xe9\x93\xbf\xe6\x8b\x8c\xe7\x9c\xa0\xe9\x9b\x8d\xe7\xbc\x87\xe2\x80\x98\xe5\x8d\x93\xe6\x90\x93\xe5\x93\x8c\xe8\xa7\x9e\xe5\x99\xa9\xe5\xb1\x88\xe5\x93\xa7\xe9\xab\x93\xe5\x92\xa6\xe5\xb7\x85\xe5\xa8\x91\xe4\xbe\x91\xe6\xb7\xab\xe8\x86\xb3\xe7\xa5\x9d\xe5\x8b\xbe\xe5\xa7\x8a\xe8\x8e\xb4\xe8\x83\x84\xe7\x96\x83\xe8\x96\x9b\xe8\x9c\xb7\xe8\x83\x9b\xe5\xb7\xb7\xe8\x8a\x99\xe8\x8a\x8b\xe7\x86\x99\xe9\x97\xb0\xe5\x8b\xbf\xe7\xaa\x83\xe7\x8b\xb1\xe5\x89\xa9\xe9\x92\x8f\xe5\xb9\xa2\xe9\x99\x9f\xe9\x93\x9b\xe6\x85\xa7\xe9\x9d\xb4\xe8\x80\x8dk\xe6\xb5\x99\xe6\xb5\x87\xe9\xa3\xa8\xe6\x83\x9f\xe7\xbb\x97\xe7\xa5\x9c\xe6\xbe\x88\xe5\x95\xbc\xe5\x92\xaa\xe7\xa3\xb7\xe6\x91\x9e\xe8\xaf\x85\xe9\x83\xa6\xe6\x8a\xb9\xe8\xb7\x83\xe5\xa3\xac\xe5\x90\x95\xe8\x82\x96\xe7\x90\x8f\xe9\xa2\xa4\xe5\xb0\xb4\xe5\x89\xa1\xe6\x8a\xa0\xe5\x87\x8b\xe8\xb5\x9a\xe6\xb3\x8a\xe6\xb4\xa5\xe5\xae\x95\xe6\xae\xb7\xe5\x80\x94\xe6\xb0\xb2\xe6\xbc\xab\xe9\x82\xba\xe6\xb6\x8e\xe6\x80\xa0$\xe5\x9e\xae\xe8\x8d\xac\xe9\x81\xb5\xe4\xbf\x8f\xe5\x8f\xb9\xe5\x99\xa2\xe9\xa5\xbd\xe8\x9c\x98\xe5\xad\x99\xe7\xad\xb5\xe7\x96\xbc\xe9\x9e\xad\xe7\xbe\xa7\xe7\x89\xa6\xe7\xae\xad\xe6\xbd\xb4c\xe7\x9c\xb8\xe7\xa5\xad\xe9\xab\xaf\xe5\x95\x96\xe5\x9d\xb3\xe6\x84\x81\xe8\x8a\xa9\xe9\xa9\xae\xe5\x80\xa1\xe5\xb7\xbd\xe7\xa9\xb0\xe6\xb2\x83\xe8\x83\x9a\xe6\x80\x92\xe5\x87\xa4\xe6\xa7\x9b\xe5\x89\x82\xe8\xb6\xb5\xe5\xab\x81v\xe9\x82\xa2\xe7\x81\xaf\xe9\x84\xa2\xe6\xa1\x90\xe7\x9d\xbd\xe6\xaa\x97\xe9\x94\xaf\xe6\xa7\x9f\xe5\xa9\xb7\xe5\xb5\x8b\xe5\x9c\xbb\xe8\xaf\x97\xe8\x95\x88\xe9\xa2\xa0\xe9\x81\xad\xe7\x97\xa2\xe8\x8a\xb8\xe6\x80\xaf\xe9\xa6\xa5\xe7\xab\xad\xe9\x94\x97\xe5\xbe\x9c\xe6\x81\xad\xe9\x81\x8d\xe7\xb1\x81\xe5\x89\x91\xe5\x98\xb1\xe8\x8b\xa1\xe9\xbe\x84\xe5\x83\xa7\xe6\xa1\x91\xe6\xbd\xb8\xe5\xbc\x98\xe6\xbe\xb6\xe6\xa5\xb9\xe6\x82\xb2\xe8\xae\xab\xe6\x84\xa4\xe8\x85\xa5\xe6\x82\xb8\xe8\xb0\x8d\xe6\xa4\xb9\xe5\x91\xa2\xe6\xa1\x93\xe8\x91\xad\xe6\x94\xab\xe9\x98\x80\xe7\xbf\xb0\xe8\xba\xb2\xe6\x95\x96\xe6\x9f\x91\xe9\x83\x8e\xe7\xac\xa8\xe6\xa9\x87\xe5\x91\x83\xe9\xad\x81\xe7\x87\x8e\xe8\x84\x93\xe8\x91\xa9\xe7\xa3\x8b\xe5\x9e\x9b\xe7\x8e\xba\xe7\x8b\xae\xe6\xb2\x93\xe7\xa0\x9c\xe8\x95\x8a\xe9\x94\xba\xe7\xbd\xb9\xe8\x95\x89\xe7\xbf\xb1\xe8\x99\x90\xe9\x97\xbe\xe5\xb7\xab\xe6\x97\xa6\xe8\x8c\xb1\xe5\xac\xb7\xe6\x9e\xaf\xe9\xb9\x8f\xe8\xb4\xa1\xe8\x8a\xb9\xe6\xb1\x9b\xe7\x9f\xab\xe7\xbb\x81\xe6\x8b\xa3\xe7\xa6\xba\xe4\xbd\x83\xe8\xae\xa3\xe8\x88\xab\xe6\x83\xaf\xe4\xb9\xb3\xe8\xb6\x8b\xe7\x96\xb2\xe6\x8c\xbd\xe5\xb2\x9a\xe8\x99\xbe\xe8\xa1\xbe\xe8\xa0\xb9\xe8\xb9\x82\xe9\xa3\x93\xe6\xb0\xa6\xe9\x93\x96\xe5\xad\xa9\xe7\xa8\x9e\xe7\x91\x9c\xe5\xa3\x85\xe6\x8e\x80\xe5\x8b\x98\xe5\xa6\x93\xe7\x95\x85\xe9\xab\x8bW\xe5\xba\x90\xe7\x89\xb2\xe8\x93\xbf\xe6\xa6\x95\xe7\xbb\x83\xe5\x9e\xa3\xe5\x94\xb1\xe9\x82\xb8\xe8\x8f\xb2\xe6\x98\x86\xe5\xa9\xba\xe7\xa9\xbf\xe7\xbb\xa1\xe9\xba\x92\xe8\x9a\xb1\xe6\x8e\x82\xe6\x84\x9a\xe6\xb3\xb7\xe6\xb6\xaa\xe6\xbc\xb3\xe5\xa6\xa9\xe5\xa8\x89\xe6\xa6\x84\xe8\xae\xb7\xe8\xa7\x85\xe6\x97\xa7\xe8\x97\xa4\xe7\x85\xae\xe5\x91\x9b\xe6\x9f\xb3\xe8\x85\x93\xe5\x8f\xad\xe5\xba\xb5\xe7\x83\xb7\xe9\x98\xa1\xe7\xbd\x82\xe8\x9c\x95\xe6\x93\x82\xe7\x8c\x96\xe5\x92\xbf\xe5\xaa\xb2\xe8\x84\x89\xe3\x80\x90\xe6\xb2\x8f\xe8\xb2\x85\xe9\xbb\xa0\xe7\x86\x8f\xe5\x93\xb2\xe7\x83\x81\xe5\x9d\xa6\xe9\x85\xb5\xe5\x85\x9c\xc3\x97\xe6\xbd\x87\xe6\x92\x92\xe5\x89\xbd\xe7\x8f\xa9\xe5\x9c\xb9\xe4\xb9\xbe\xe6\x91\xb8\xe6\xa8\x9f\xe5\xb8\xbd\xe5\x97\x92\xe8\xa5\x84\xe9\xad\x82\xe8\xbd\xbf\xe6\x86\xac\xe9\x94\xa1\xe3\x80\x95\xe5\x96\x83\xe7\x9a\x86\xe5\x92\x96\xe9\x9a\x85\xe8\x84\xb8\xe6\xae\x8b\xe6\xb3\xae\xe8\xa2\x82\xe9\xb9\x82\xe7\x8f\x8a\xe5\x9b\xa4\xe6\x8d\x86\xe5\x92\xa4\xe8\xaf\xaf\xe5\xbe\xa8\xe9\x97\xb9\xe6\xb7\x99\xe8\x8a\x8a\xe6\xb7\x8b\xe6\x80\x86\xe5\x9b\x97\xe6\x8b\xa8\xe6\xa2\xb3\xe6\xb8\xa4RG\xe7\xbb\xa8\xe8\x9a\x93\xe5\xa9\x80\xe5\xb9\xa1\xe7\x8b\xa9\xe9\xba\xbe\xe8\xb0\xa2\xe5\x94\xa2\xe8\xa3\xb8\xe6\x97\x8c\xe4\xbc\x89\xe7\xba\xb6\xe8\xa3\x82\xe9\xa9\xb3\xe7\xa0\xbc\xe5\x92\x9b\xe6\xbe\x84\xe6\xa8\xa8\xe8\xb9\x88\xe5\xae\x99\xe6\xbe\x8d\xe5\x80\x8d\xe8\xb2\x94\xe6\x93\x8d\xe5\x8b\x87\xe8\x9f\xa0\xe6\x91\x88\xe7\xa0\xa7\xe8\x99\xac\xe5\xa4\x9f\xe7\xbc\x81\xe6\x82\xa6\xe8\x97\xbf\xe6\x92\xb8\xe8\x89\xb9\xe6\x91\x81\xe6\xb7\xb9\xe8\xb1\x87\xe8\x99\x8e\xe6\xa6\xad\xcb\x89\xe5\x90\xb1d\xc2\xb0\xe5\x96\xa7\xe8\x8d\x80\xe8\xb8\xb1\xe4\xbe\xae\xe5\xa5\x8b\xe5\x81\x95\xe9\xa5\xb7\xe7\x8a\x8d\xe6\x83\xae\xe5\x9d\x91\xe7\x92\x8e\xe5\xbe\x98\xe5\xae\x9b\xe5\xa6\x86\xe8\xa2\x88\xe5\x80\xa9\xe7\xaa\xa6\xe6\x98\x82\xe8\x8d\x8f\xe4\xb9\x96K\xe6\x80\x85\xe6\x92\xb0\xe9\xb3\x99\xe7\x89\x99\xe8\xa2\x81\xe9\x85\x9eX\xe7\x97\xbf\xe7\x90\xbc\xe9\x97\xb8\xe9\x9b\x81\xe8\xb6\xbe\xe8\x8d\x9a\xe8\x99\xbb\xe6\xb6\x9d\xe3\x80\x8a\xe6\x9d\x8f\xe9\x9f\xad\xe5\x81\x88\xe7\x83\xa4\xe7\xbb\xab\xe9\x9e\x98\xe5\x8d\x89\xe7\x97\x87\xe9\x81\xa2\xe8\x93\xa5\xe8\xaf\x8b\xe6\x9d\xad\xe8\x8d\xa8\xe5\x8c\x86\xe7\xab\xa3\xe7\xb0\xaa\xe8\xbe\x99\xe6\x95\x95\xe8\x99\x9e\xe4\xb8\xb9\xe7\xbc\xad\xe5\x92\xa9\xe9\xbb\x9fm\xe6\xb7\xa4\xe7\x91\x95\xe5\x92\x82\xe9\x93\x89\xe7\xa1\xbc\xe8\x8c\xa8\xe5\xb6\x82\xe7\x97\x92\xe7\x95\xb8\xe6\x95\xac\xe6\xb6\xbf\xe7\xb2\xaa\xe7\xaa\x98\xe7\x86\x9f\xe5\x8f\x94\xe5\xab\x94\xe7\x9b\xbe\xe5\xbf\xb1\xe8\xa3\x98\xe6\x86\xbe\xe6\xa2\xb5\xe8\xb5\xa1\xe7\x8f\x99\xe5\x92\xaf\xe5\xa8\x98\xe5\xba\x99\xe6\xba\xaf\xe8\x83\xba\xe8\x91\xb1\xe7\x97\xaa\xe6\x91\x8a\xe8\x8d\xb7\xe5\x8d\x9e\xe4\xb9\x92\xe9\xab\xa6\xe5\xaf\x90\xe9\x93\xad\xe5\x9d\xa9\xe8\x83\x97\xe6\x9e\xb7\xe7\x88\x86\xe6\xba\x9f\xe5\x9a\xbc\xe7\xbe\x9a\xe7\xa0\xac\xe8\xbd\xa8\xe6\x83\x8a\xe6\x8c\xa0\xe7\xbd\x84\xe7\xab\xbd\xe8\x8f\x8f\xe6\xb0\xa7\xe6\xb5\x85\xe6\xa5\xa3\xe7\x9b\xbc\xe6\x9e\xa2\xe7\x82\xb8\xe9\x98\x86\xe6\x9d\xaf\xe8\xb0\x8f\xe5\x99\xac\xe6\xb7\x87\xe6\xb8\xba\xe4\xbf\xaa\xe7\xa7\x86\xe5\xa2\x93\xe6\xb3\xaa\xe8\xb7\xbb\xe7\xa0\x8c\xe7\x97\xb0\xe5\x9e\xa1\xe6\xb8\xa1\xe8\x80\xbd\xe9\x87\x9c\xe8\xae\xb6\xe9\xb3\x8e\xe7\x85\x9e\xe5\x91\x97\xe9\x9f\xb6\xe8\x88\xb6\xe7\xbb\xb7\xe9\xb9\xb3\xe7\xbc\x9c\xe6\x97\xb7\xe9\x93\x8a\xe7\x9a\xb1\xe9\xbe\x8c\xe6\xaa\x80\xe9\x9c\x96\xe5\xa5\x84\xe6\xa7\x90\xe8\x89\xb3\xe8\x9d\xb6\xe6\x97\x8b\xe5\x93\x9d\xe8\xb5\xb6\xe9\xaa\x9e\xe8\x9a\xa7\xe8\x85\x8a\xe7\x9b\x88\xe4\xb8\x81`\xe8\x9c\x9a\xe7\x9f\xb8\xe8\x9d\x99\xe7\x9d\xa8\xe5\x9a\x93\xe5\x83\xbb\xe9\xac\xbc\xe9\x86\xb4\xe5\xa4\x9c\xe5\xbd\x9d\xe7\xa3\x8a\xe7\xac\x94\xe6\x8b\x94\xe6\xa0\x80\xe7\xb3\x95\xe5\x8e\xa6\xe9\x82\xb0\xe7\xba\xab\xe9\x80\xad\xe7\xba\xa4\xe7\x9c\xa6\xe8\x86\x8a\xe9\xa6\x8d\xe8\xba\x87\xe7\x83\xaf\xe8\x98\xbc\xe5\x86\xac\xe8\xaf\xa4\xe6\x9a\x84\xe9\xaa\xb6\xe5\x93\x91\xe7\x98\xa0\xe3\x80\x8d\xe8\x87\x8a\xe4\xb8\x95\xe6\x84\x88\xe5\x92\xb1\xe8\x9e\xba\xe6\x93\x85\xe8\xb7\x8b\xe6\x90\x8f\xe7\xa1\xaa\xe8\xb0\x84\xe7\xac\xa0\xe6\xb7\xa1\xe5\x98\xbf\xe9\xaa\x85\xe8\xb0\xa7\xe9\xbc\x8e\xe7\x9a\x8b\xe5\xa7\x9a\xe6\xad\xbc\xe8\xa0\xa2\xe9\xa9\xbc\xe8\x80\xb3\xe8\x83\xac\xe6\x8c\x9d\xe6\xb6\xaf\xe7\x8b\x97\xe8\x92\xbd\xe5\xad\x93\xe7\x8a\xb7\xe5\x87\x89\xe8\x8a\xa6\xe7\xae\xb4\xe9\x93\xa4\xe5\xad\xa4\xe5\x98\x9b\xe5\x9d\xa4V\xe8\x8c\xb4\xe6\x9c\xa6\xe6\x8c\x9e\xe5\xb0\x96\xe6\xa9\x99\xe8\xaf\x9e\xe6\x90\xb4\xe7\xa2\x87\xe6\xb4\xb5\xe6\xb5\x9a\xe5\xb8\x9a\xe8\x9c\x8d\xe6\xbc\xaf\xe6\x9f\x98\xe5\x9a\x8e\xe8\xae\xbd\xe8\x8a\xad\xe8\x8d\xa4\xe5\x92\xbb\xe7\xa5\xa0\xe7\xa7\x89\xe8\xb7\x96\xe5\x9f\x83\xe5\x90\x93\xe7\xb3\xaf\xe7\x9c\xb7\xe9\xa6\x92\xe6\x83\xb9\xe5\xa8\xbc\xe9\xb2\x91\xe5\xab\xa9\xe8\xae\xb4\xe8\xbd\xae\xe7\x9e\xa5\xe9\x9d\xb6\xe8\xa4\x9a\xe4\xb9\x8f\xe7\xbc\xa4\xe5\xae\x8b\xe5\xb8\xa7\xe5\x88\xa0\xe9\xa9\xb1\xe7\xa2\x8e\xe6\x89\x91\xe4\xbf\xa9\xe4\xbf\x84\xe5\x81\x8f\xe6\xb6\xa3\xe7\xab\xb9\xe5\x99\xb1\xe7\x9a\x99\xe4\xbd\xb0\xe6\xb8\x9a\xe5\x94\xa7\xe6\x96\xa1#\xe9\x95\x89\xe5\x88\x80\xe5\xb4\x8e\xe7\xad\x90\xe4\xbd\xa3\xe5\xa4\xad\xe8\xb4\xb0\xe8\x82\xb4\xe5\xb3\x99\xe5\x93\x94\xe8\x89\xbf\xe5\x8c\x90\xe7\x89\xba\xe9\x95\x9b\xe7\xbc\x98\xe4\xbb\xa1\xe5\xab\xa1\xe5\x8a\xa3\xe6\x9e\xb8\xe5\xa0\x80\xe6\xa2\xa8\xe7\xb0\xbf\xe9\xb8\xad\xe8\x92\xb8\xe4\xba\xa6\xe7\xa8\xbd\xe6\xb5\xb4{\xe8\xa1\xa2\xe6\x9d\x9f\xe6\xa7\xb2j\xe9\x98\x81\xe6\x8f\x8d\xe7\x96\xa5\xe6\xa3\x8b\xe6\xbd\x8b\xe8\x81\xaa\xe7\xaa\x9c\xe4\xb9\x93\xe7\x9d\x9b\xe6\x8f\x92\xe5\x86\x89\xe9\x98\xaa\xe8\x8b\x8d\xe6\x90\xbd\xe3\x80\x8c\xe8\x9f\xbe\xe8\x9e\x9f\xe5\xb9\xb8\xe4\xbb\x87\xe6\xa8\xbd\xe6\x92\x82\xe6\x85\xa2\xe8\xb7\xa4\xe5\xb9\x94\xe4\xbf\x9a\xe6\xb7\x85\xe8\xa6\x83\xe8\xa7\x8a\xe6\xba\xb6\xe5\xa6\x96\xe5\xb8\x9b\xe4\xbe\xa8\xe6\x9b\xb0\xe5\xa6\xbe\xe6\xb3\x97 """"""\ncharacters = alphabet[:]\n\nnclass = len(characters) + 1\n\ntrainroot = \'../data/lmdb/train\'\nvalroot = \'../data/lmdb/val\'\nbatchSize = 32\nworkers = 4\nimgH = 32\nimgW = 256\nkeep_ratio = False\nrandom_sample = False\n\n\ndef one_hot(text, length=10, characters=characters):\n    label = np.zeros(length)\n    # print(type(text))\n    for i, char in enumerate(text):\n        index = characters.find(char)\n        if index == -1:\n            index = characters.find(u\' \')\n        # print(i,char,length)\n        # if i < length:\n        label[i] = index\n    return label\n\n\nn_len = 10\n\n\ndef gen(loader, flag=\'train\'):\n    while True:\n        i = 0\n        n = len(loader)\n        for X, Y in loader:\n            X = X.numpy()\n            X = X.reshape((-1, imgH, imgW, 1))\n            if flag == \'test\':\n                Y = Y.numpy()\n\n            Y = np.array(Y)\n            Length = int(imgW / 4) - 1\n            batchs = X.shape[0]\n            # Y = Y.numpy()\n            if i > n - 1:\n                i = 0\n                break\n\n            yield [X, Y, np.ones(batchs) * int(Length), np.ones(batchs) * n_len], np.ones(batchs)\n\n\nsampler = None\ntrain_dataset = lmdbDataset(root=trainroot, target_transform=one_hot)\n\ntrain_loader = torch.utils.data.DataLoader(\n    train_dataset, batch_size=batchSize,\n    shuffle=True, sampler=sampler,\n    num_workers=int(workers),\n    collate_fn=alignCollate(imgH=imgH, imgW=imgW, keep_ratio=keep_ratio))\n\ntest_dataset = lmdbDataset(\n    root=valroot, transform=resizeNormalize((imgW, imgH)), target_transform=one_hot)\n\ntest_loader = torch.utils.data.DataLoader(\n    test_dataset, shuffle=True, batch_size=batchSize, num_workers=int(workers))\n\nif __name__ == \'__main__\':\n    from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\n\n    model, basemodel = get_model(height=imgH, nclass=nclass)\n    import os\n\n    if os.path.exists(\'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/crnn_ocr/pretrain-models/keras.hdf5\'):\n        basemodel.load_weights(\'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/crnn_ocr/pretrain-models/keras.hdf5\')\n\n    ##\xe6\xb3\xa8\xe6\x84\x8f\xe6\xad\xa4\xe5\xa4\x84\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x98\xafmodel\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\n    checkpointer = ModelCheckpoint(filepath=""save_model/model{epoch:02d}-{val_loss:.4f}.hdf5"", monitor=\'val_loss\',\n                                   verbose=0, save_weights_only=False, save_best_only=True)\n    rlu = ReduceLROnPlateau(monitor=\'val_loss\', factor=0.1, patience=1, verbose=0, mode=\'auto\', epsilon=0.0001,\n                            cooldown=0, min_lr=0)\n\n    model.fit_generator(gen(train_loader, flag=\'train\'),\n                        steps_per_epoch=102400,\n                        epochs=200,\n                        validation_data=gen(test_loader, flag=\'test\'),\n                        callbacks=[checkpointer, rlu],\n                        validation_steps=1024)\n'"
train/keras-train/dataset.py,0,"b'# -*- coding: utf-8 -*-\n# !/usr/bin/python\n\nimport random\nimport sys\n\nimport lmdb\nimport numpy as np\nimport six\nimport torch\nimport torchvision.transforms as transforms\nfrom PIL import Image\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import sampler\n\n\n\nclass lmdbDataset(Dataset):\n    def __init__(self, root=None, transform=None, target_transform=None):\n        self.env = lmdb.open(\n            root,\n            max_readers=1,\n            readonly=True,\n            lock=False,\n            readahead=False,\n            meminit=False)\n\n        if not self.env:\n            print(\'cannot creat lmdb from %s\' % (root))\n            sys.exit(0)\n\n        with self.env.begin(write=False) as txn:\n            nSamples = int(txn.get(\'num-samples\'.encode()))\n            print(""nSamples:{}"".format(nSamples))\n            self.nSamples = nSamples\n\n        self.transform = transform\n        self.target_transform = target_transform\n\n    def __len__(self):\n        return self.nSamples\n\n    def __getitem__(self, index):\n        assert index <= len(self), \'index range error\'\n        index += 1\n        with self.env.begin(write=False) as txn:\n            img_key = \'image-%09d\' % index\n            imgbuf = txn.get(img_key.encode())\n\n            buf = six.BytesIO()\n            buf.write(imgbuf)\n            buf.seek(0)\n            try:\n                img = Image.open(buf).convert(\'L\')\n                # img.save(""1111111111.jpg"")\n            except IOError:\n                print(\'Corrupted image for %d\' % index)\n                if index > self.nSamples - 1:\n                    index = 0\n                return self[index + 1]\n\n            if self.transform is not None:\n                img = self.transform(img)\n\n            label_key = \'label-%09d\' % index\n            label = str(txn.get(label_key.encode()), \'utf-8\')\n\n            if self.target_transform is not None:\n                label = self.target_transform(label)\n        # print(img,label)\n        return (img, label)\n\n\nclass resizeNormalize(object):\n    def __init__(self, size, interpolation=Image.BILINEAR):\n        self.size = size\n        self.interpolation = interpolation\n        self.toTensor = transforms.ToTensor()\n\n    def __call__(self, img):\n        img = img.resize(self.size, self.interpolation)\n        img = self.toTensor(img)\n        img.sub_(0.5).div_(0.5)\n        return img\n\n\nclass randomSequentialSampler(sampler.Sampler):\n    def __init__(self, data_source, batch_size):\n        self.num_samples = len(data_source)\n        self.batch_size = batch_size\n\n    def __iter__(self):\n        n_batch = len(self) // self.batch_size\n        tail = len(self) % self.batch_size\n        index = torch.LongTensor(len(self)).fill_(0)\n        for i in range(n_batch):\n            random_start = random.randint(0, len(self) - self.batch_size)\n            batch_index = random_start + torch.range(0, self.batch_size - 1)\n            index[i * self.batch_size:(i + 1) * self.batch_size] = batch_index\n        # deal with tail\n        if tail:\n            random_start = random.randint(0, len(self) - self.batch_size)\n            tail_index = random_start + torch.range(0, tail - 1)\n            index[(i + 1) * self.batch_size:] = tail_index\n\n        return iter(index)\n\n    def __len__(self):\n        return self.num_samples\n\n\nclass alignCollate(object):\n    def __init__(self, imgH=32, imgW=100, keep_ratio=False, min_ratio=1):\n        self.imgH = imgH\n        self.imgW = imgW\n        self.keep_ratio = keep_ratio\n        self.min_ratio = min_ratio\n\n    def __call__(self, batch):\n        images, labels = zip(*batch)\n\n        imgH = self.imgH\n        imgW = self.imgW\n        if self.keep_ratio:\n            ratios = []\n            for image in images:\n                w, h = image.size\n                ratios.append(w / float(h))\n            ratios.sort()\n            max_ratio = ratios[-1]\n            imgW = int(np.floor(max_ratio * imgH))\n            imgW = max(imgH * self.min_ratio, imgW)  # assure imgH >= imgW\n\n        transform = resizeNormalize((imgW, imgH))\n        images = [transform(image) for image in images]\n        images = torch.cat([t.unsqueeze(0) for t in images], 0)\n\n        return images, labels\n'"
train/keras-train/hhh.py,0,b''
train/keras-train/keys_keras.py,0,"b'# coding:UTF-8\nalphabet = u""""""\'\xe7\x96\x97\xe7\xbb\x9a\xe8\xaf\x9a\xe5\xa8\x87\xe6\xba\x9c\xe9\xa2\x98\xe8\xb4\xbf\xe8\x80\x85\xe5\xbb\x96\xe6\x9b\xb4\xe7\xba\xb3\xe5\x8a\xa0\xe5\xa5\x89\xe5\x85\xac\xe4\xb8\x80\xe5\xb0\xb1\xe6\xb1\xb4\xe8\xae\xa1\xe4\xb8\x8e\xe8\xb7\xaf\xe6\x88\xbf\xe5\x8e\x9f\xe5\xa6\x87208-7\xe5\x85\xb6>:],\xef\xbc\x8c\xe9\xaa\x91\xe5\x88\x88\xe5\x85\xa8\xe6\xb6\x88\xe6\x98\x8f\xe5\x82\x88\xe5\xae\x89\xe4\xb9\x85\xe9\x92\x9f\xe5\x97\x85\xe4\xb8\x8d\xe5\xbd\xb1\xe5\xa4\x84\xe9\xa9\xbd\xe8\x9c\xbf\xe8\xb5\x84\xe5\x85\xb3\xe6\xa4\xa4\xe5\x9c\xb0\xe7\x98\xb8\xe4\xb8\x93\xe9\x97\xae\xe5\xbf\x96\xe7\xa5\xa8\xe5\xab\x89\xe7\x82\x8e\xe9\x9f\xb5\xe8\xa6\x81\xe6\x9c\x88\xe7\x94\xb0\xe8\x8a\x82\xe9\x99\x82\xe9\x84\x99\xe6\x8d\x8c\xe5\xa4\x87\xe6\x8b\xb3\xe4\xbc\xba\xe7\x9c\xbc\xe7\xbd\x91\xe7\x9b\x8e\xe5\xa4\xa7\xe5\x82\x8d\xe5\xbf\x83\xe4\xb8\x9c\xe6\x84\x89\xe6\xb1\x87\xe8\xb9\xbf\xe7\xa7\x91\xe6\xaf\x8f\xe4\xb8\x9a\xe9\x87\x8c\xe8\x88\xaa\xe6\x99\x8f\xe5\xad\x97\xe5\xb9\xb3\xe5\xbd\x95\xe5\x85\x8813\xe5\xbd\xa4\xe9\xb2\xb6\xe4\xba\xa7\xe7\xa8\x8d\xe7\x9d\xa3\xe8\x85\xb4\xe6\x9c\x89\xe8\xb1\xa1\xe5\xb2\xb3\xe6\xb3\xa8\xe7\xbb\x8d\xe5\x9c\xa8\xe6\xb3\xba\xe6\x96\x87\xe5\xae\x9a\xe6\xa0\xb8\xe5\x90\x8d\xe6\xb0\xb4\xe8\xbf\x87\xe7\x90\x86\xe8\xae\xa9\xe5\x81\xb7\xe7\x8e\x87\xe7\xad\x89\xe8\xbf\x99\xe5\x8f\x91\xe2\x80\x9d\xe4\xb8\xba\xe5\x90\xab\xe8\x82\xa5\xe9\x85\x89\xe7\x9b\xb8\xe9\x84\xb1\xe4\xb8\x83\xe7\xbc\x96\xe7\x8c\xa5\xe9\x94\x9b\xe6\x97\xa5\xe9\x95\x80\xe8\x92\x82\xe6\x8e\xb0\xe5\x80\x92\xe8\xbe\x86\xe6\xa0\xbe\xe6\xa0\x97\xe7\xbb\xbc\xe6\xb6\xa9\xe5\xb7\x9e\xe9\x9b\x8c\xe6\xbb\x91\xe9\xa6\x80\xe4\xba\x86\xe6\x9c\xba\xe5\x9d\x97\xe5\x8f\xb8\xe5\xae\xb0\xe7\x94\x99\xe5\x85\xb4\xe7\x9f\xbd\xe6\x8a\x9a\xe4\xbf\x9d\xe7\x94\xa8\xe6\xb2\xa7\xe7\xa7\xa9\xe5\xa6\x82\xe6\x94\xb6\xe6\x81\xaf\xe6\xbb\xa5\xe9\xa1\xb5\xe7\x96\x91\xe5\x9f\xa0!\xef\xbc\x81\xe5\xa7\xa5\xe5\xbc\x82\xe6\xa9\xb9\xe9\x92\x87\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\x84\xe7\x9a\x84\xe6\xa4\xb4\xe6\xb2\xab\xe5\x9b\xbd\xe7\xbb\xa5\xe7\x8d\xa0\xe6\x8a\xa5\xe5\xbc\x80\xe6\xb0\x91\xe8\x9c\x87\xe4\xbd\x95\xe5\x88\x86\xe5\x87\x87\xe9\x95\xbf\xe8\xae\xa5\xe8\x97\x8f\xe6\x8e\x8f\xe6\x96\xbd\xe7\xbe\xbd\xe4\xb8\xad\xe8\xae\xb2\xe6\xb4\xbe\xe5\x98\x9f\xe4\xba\xba\xe6\x8f\x90\xe6\xb5\xbc\xe9\x97\xb4\xe4\xb8\x96\xe8\x80\x8c\xe5\x8f\xa4\xe5\xa4\x9a\xe5\x80\xaa\xe5\x94\x87\xe9\xa5\xaf\xe6\x8e\xa7\xe5\xba\x9a\xe9\xa6\x96\xe8\xb5\x9b\xe8\x9c\x93\xe5\x91\xb3\xe6\x96\xad\xe5\x88\xb6\xe8\xa7\x89\xe6\x8a\x80\xe6\x9b\xbf\xe8\x89\xb0\xe6\xba\xa2\xe6\xbd\xae\xe5\xa4\x95\xe9\x92\xba\xe5\xa4\x96\xe6\x91\x98\xe6\x9e\x8b\xe5\x8a\xa8\xe5\x8f\x8c\xe5\x8d\x95\xe5\x95\xae\xe6\x88\xb7\xe6\x9e\x87\xe7\xa1\xae\xe9\x94\xa6\xe6\x9b\x9c\xe6\x9d\x9c\xe6\x88\x96\xe8\x83\xbd\xe6\x95\x88\xe9\x9c\x9c\xe7\x9b\x92\xe7\x84\xb6\xe4\xbe\x97\xe7\x94\xb5\xe6\x99\x81\xe6\x94\xbe\xe6\xad\xa5\xe9\xb9\x83\xe6\x96\xb0\xe6\x9d\x96\xe8\x9c\x82\xe5\x90\x92\xe6\xbf\x82\xe7\x9e\xac\xe8\xaf\x84\xe6\x80\xbb\xe9\x9a\x8d\xe5\xaf\xb9\xe7\x8b\xac\xe5\x90\x88\xe4\xb9\x9f\xe6\x98\xaf\xe5\xba\x9c\xe9\x9d\x92\xe5\xa4\xa9\xe8\xaf\xb2\xe5\xa2\x99\xe7\xbb\x84\xe6\xbb\xb4\xe7\xba\xa7\xe9\x82\x80\xe5\xb8\x98\xe7\xa4\xba\xe5\xb7\xb2\xe6\x97\xb6\xe9\xaa\xb8\xe4\xbb\x84\xe6\xb3\x85\xe5\x92\x8c\xe9\x81\xa8\xe5\xba\x97\xe9\x9b\x87\xe7\x96\xab\xe6\x8c\x81\xe5\xb7\x8d\xe8\xb8\xae\xe5\xa2\x83\xe5\x8f\xaa\xe4\xba\xa8\xe7\x9b\xae\xe9\x89\xb4\xe5\xb4\xa4\xe9\x97\xb2\xe4\xbd\x93\xe6\xb3\x84\xe6\x9d\x82\xe4\xbd\x9c\xe8\x88\xac\xe8\xbd\xb0\xe5\x8c\x96\xe8\xa7\xa3\xe8\xbf\x82\xe8\xaf\xbf\xe8\x9b\xad\xe7\x92\x80\xe8\x85\xbe\xe5\x91\x8a\xe7\x89\x88\xe6\x9c\x8d\xe7\x9c\x81\xe5\xb8\x88\xe5\xb0\x8f\xe8\xa7\x84\xe7\xa8\x8b\xe7\xba\xbf\xe6\xb5\xb7\xe5\x8a\x9e\xe5\xbc\x95\xe4\xba\x8c\xe6\xa1\xa7\xe7\x89\x8c\xe7\xa0\xba\xe6\xb4\x84\xe8\xa3\xb4\xe4\xbf\xae\xe5\x9b\xbe\xe7\x97\xab\xe8\x83\xa1\xe8\xae\xb8\xe7\x8a\x8a\xe4\xba\x8b\xe9\x83\x9b\xe5\x9f\xba\xe6\x9f\xb4\xe5\x91\xbc\xe9\xa3\x9f\xe7\xa0\x94\xe5\xa5\xb6\xe5\xbe\x8b\xe8\x9b\x8b\xe5\x9b\xa0\xe8\x91\x86\xe5\xaf\x9f\xe6\x88\x8f\xe8\xa4\x92\xe6\x88\x92\xe5\x86\x8d\xe6\x9d\x8e\xe9\xaa\x81\xe5\xb7\xa5\xe8\xb2\x82\xe6\xb2\xb9\xe9\xb9\x85\xe7\xab\xa0\xe5\x95\x84\xe4\xbc\x91\xe5\x9c\xba\xe7\xbb\x99\xe7\x9d\xa1\xe7\xba\xb7\xe8\xb1\x86\xe5\x99\xa8\xe6\x8d\x8e\xe8\xaf\xb4\xe6\x95\x8f\xe5\xad\xa6\xe4\xbc\x9a\xe6\xb5\x92\xe8\xae\xbe\xe8\xaf\x8a\xe6\xa0\xbc\xe5\xbb\x93\xe6\x9f\xa5\xe6\x9d\xa5\xe9\x9c\x93\xe5\xae\xa4\xe6\xba\x86\xef\xbf\xa0\xe8\xaf\xa1\xe5\xaf\xa5\xe7\x84\x95\xe8\x88\x9c\xe6\x9f\x92\xe7\x8b\x90\xe5\x9b\x9e\xe6\x88\x9f\xe7\xa0\xbe\xe5\x8e\x84\xe5\xae\x9e\xe7\xbf\xa9\xe5\xb0\xbf\xe4\xba\x94\xe5\x85\xa5\xe5\xbe\x84\xe6\x83\xad\xe5\x96\xb9\xe8\x82\xa1\xe5\xae\x87\xe7\xaf\x9d|;\xe7\xbe\x8e\xe6\x9c\x9f\xe4\xba\x91\xe4\xb9\x9d\xe7\xa5\xba\xe6\x89\xae\xe9\x9d\xa0\xe9\x94\x9d\xe6\xa7\x8c\xe7\xb3\xbb\xe4\xbc\x81\xe9\x85\xb0\xe9\x98\x8a\xe6\x9a\x82\xe8\x9a\x95\xe5\xbf\xbb\xe8\xb1\x81\xe6\x9c\xac\xe7\xbe\xb9\xe6\x89\xa7\xe6\x9d\xa1\xe9\x92\xa6H\xe7\x8d\x92\xe9\x99\x90\xe8\xbf\x9b\xe5\xad\xa3\xe6\xa5\xa6\xe4\xba\x8e\xe8\x8a\x98\xe7\x8e\x96\xe9\x93\x8b\xe8\x8c\xaf\xe6\x9c\xaa\xe7\xad\x94\xe7\xb2\x98\xe6\x8b\xac\xe6\xa0\xb7\xe7\xb2\xbe\xe6\xac\xa0\xe7\x9f\xa2\xe7\x94\xa5\xe5\xb8\xb7\xe5\xb5\xa9\xe6\x89\xa3\xe4\xbb\xa4\xe4\xbb\x94\xe9\xa3\x8e\xe7\x9a\x88\xe8\xa1\x8c\xe6\x94\xaf\xe9\x83\xa8\xe8\x93\x89\xe5\x88\xae\xe7\xab\x99\xe8\x9c\xa1\xe6\x95\x91\xe9\x92\x8a\xe6\xb1\x97\xe6\x9d\xbe\xe5\xab\x8c\xe6\x88\x90\xe5\x8f\xaf.\xe9\xb9\xa4\xe9\x99\xa2\xe4\xbb\x8e\xe4\xba\xa4\xe6\x94\xbf\xe6\x80\x95\xe6\xb4\xbb\xe8\xb0\x83\xe7\x90\x83\xe5\xb1\x80\xe9\xaa\x8c\xe9\xab\x8c\xe7\xac\xac\xe9\x9f\xab\xe8\xb0\x97\xe4\xb8\xb2\xe5\x88\xb0\xe5\x9c\x86\xe5\xb9\xb4\xe7\xb1\xb3/*\xe5\x8f\x8b\xe5\xbf\xbf\xe6\xa3\x80\xe5\x8c\xba\xe7\x9c\x8b\xe8\x87\xaa\xe6\x95\xa2\xe5\x88\x83\xe4\xb8\xaa\xe5\x85\xb9\xe5\xbc\x84\xe6\xb5\x81\xe7\x95\x99\xe5\x90\x8c\xe6\xb2\xa1\xe9\xbd\xbf\xe6\x98\x9f\xe8\x81\x86\xe8\xbd\xbc\xe6\xb9\x96\xe4\xbb\x80\xe4\xb8\x89\xe5\xbb\xba\xe8\x9b\x94\xe5\x84\xbf\xe6\xa4\x8b\xe6\xb1\x95\xe9\x9c\x87\xe9\xa2\xa7\xe9\xb2\xa4\xe8\xb7\x9f\xe5\x8a\x9b\xe6\x83\x85\xe7\x92\xba\xe9\x93\xa8\xe9\x99\xaa\xe5\x8a\xa1\xe6\x8c\x87\xe6\x97\x8f\xe8\xae\xad\xe6\xbb\xa6\xe9\x84\xa3\xe6\xbf\xae\xe6\x89\x92\xe5\x95\x86\xe7\xae\xb1\xe5\x8d\x81\xe5\x8f\xac\xe6\x85\xb7\xe8\xbe\x97\xe6\x89\x80\xe8\x8e\x9e\xe7\xae\xa1\xe6\x8a\xa4\xe8\x87\xad\xe6\xa8\xaa\xe7\xa1\x92\xe5\x97\x93\xe6\x8e\xa5\xe4\xbe\xa6\xe5\x85\xad\xe9\x9c\xb2\xe5\x85\x9a\xe9\xa6\x8b\xe9\xa9\xbe\xe5\x89\x96\xe9\xab\x98\xe4\xbe\xac\xe5\xa6\xaa\xe5\xb9\x82\xe7\x8c\x97\xe7\xbb\xba\xe9\xaa\x90\xe5\xa4\xae\xe9\x85\x90\xe5\xad\x9d\xe7\xad\x9d\xe8\xaf\xbe\xe5\xbe\x87\xe7\xbc\xb0\xe9\x97\xa8\xe7\x94\xb7\xe8\xa5\xbf\xe9\xa1\xb9\xe5\x8f\xa5\xe8\xb0\x99\xe7\x9e\x92\xe7\xa7\x83\xe7\xaf\x87\xe6\x95\x99\xe7\xa2\xb2\xe7\xbd\x9a\xe5\xa3\xb0\xe5\x91\x90\xe6\x99\xaf\xe5\x89\x8d\xe5\xaf\x8c\xe5\x98\xb4\xe9\xb3\x8c\xe7\xa8\x80\xe5\x85\x8d\xe6\x9c\x8b\xe5\x95\xac\xe7\x9d\x90\xe5\x8e\xbb\xe8\xb5\x88\xe9\xb1\xbc\xe4\xbd\x8f\xe8\x82\xa9\xe6\x84\x95\xe9\x80\x9f\xe6\x97\x81\xe6\xb3\xa2\xe5\x8e\x85\xe5\x81\xa5\xe8\x8c\xbc\xe5\x8e\xa5\xe9\xb2\x9f\xe8\xb0\x85\xe6\x8a\x95\xe6\x94\xb8\xe7\x82\x94\xe6\x95\xb0\xe6\x96\xb9\xe5\x87\xbb\xe5\x91\x8b\xe8\xb0\x88\xe7\xbb\xa9\xe5\x88\xab\xe6\x84\xab\xe5\x83\x9a\xe8\xba\xac\xe9\xb9\xa7\xe8\x83\xaa\xe7\x82\xb3\xe6\x8b\x9b\xe5\x96\x87\xe8\x86\xa8\xe6\xb3\xb5\xe8\xb9\xa6\xe6\xaf\x9b\xe7\xbb\x9354\xe8\xb0\xb1\xe8\xaf\x86\xe9\x99\x95\xe7\xb2\xbd\xe5\xa9\x9a\xe6\x8b\x9f\xe6\x9e\x84\xe4\xb8\x94\xe6\x90\x9c\xe4\xbb\xbb\xe6\xbd\x98\xe6\xaf\x94\xe9\x83\xa2\xe5\xa6\xa8\xe9\x86\xaa\xe9\x99\x80\xe6\xa1\x94\xe7\xa2\x98\xe6\x89\x8e\xe9\x80\x89\xe5\x93\x88\xe9\xaa\xb7\xe6\xa5\xb7\xe4\xba\xbf\xe6\x98\x8e\xe7\xbc\x86\xe8\x84\xaf\xe7\x9b\x91\xe7\x9d\xab\xe9\x80\xbb\xe5\xa9\xb5\xe5\x85\xb1\xe8\xb5\xb4\xe6\xb7\x9d\xe5\x87\xa1\xe6\x83\xa6\xe5\x8f\x8a\xe8\xbe\xbe\xe6\x8f\x96\xe8\xb0\xa9\xe6\xbe\xb9\xe5\x87\x8f\xe7\x84\xb0\xe8\x9b\xb9\xe7\x95\xaa\xe7\xa5\x81\xe6\x9f\x8f\xe5\x91\x98\xe7\xa6\x84\xe6\x80\xa1\xe5\xb3\xa4\xe9\xbe\x99\xe7\x99\xbd\xe5\x8f\xbd\xe7\x94\x9f\xe9\x97\xaf\xe8\xb5\xb7\xe7\xbb\x86\xe8\xa3\x85\xe8\xb0\x95\xe7\xab\x9f\xe8\x81\x9a\xe9\x92\x99\xe4\xb8\x8a\xe5\xaf\xbc\xe6\xb8\x8a\xe6\x8c\x89\xe8\x89\xbe\xe8\xbe\x98\xe6\x8c\xa1\xe8\x80\x92\xe7\x9b\xb9\xe9\xa5\xaa\xe8\x87\x80\xe8\xae\xb0\xe9\x82\xae\xe8\x95\x99\xe5\x8f\x97\xe5\x90\x84\xe5\x8c\xbb\xe6\x90\x82\xe6\x99\xae\xe6\xbb\x87\xe6\x9c\x97\xe8\x8c\xb8\xe5\xb8\xa6\xe7\xbf\xbb\xe9\x85\x9a(\xe5\x85\x89\xe5\xa0\xa4\xe5\xa2\x9f\xe8\x94\xb7\xe4\xb8\x87\xe5\xb9\xbb\xe3\x80\x93\xe7\x91\x99\xe8\xbe\x88\xe6\x98\xa7\xe7\x9b\x8f\xe4\xba\x98\xe8\x9b\x80\xe5\x90\x89\xe9\x93\xb0\xe8\xaf\xb7\xe5\xad\x90\xe5\x81\x87\xe9\x97\xbb\xe7\xa8\x8e\xe4\xba\x95\xe8\xaf\xa9\xe5\x93\xa8\xe5\xab\x82\xe5\xa5\xbd\xe9\x9d\xa2\xe7\x90\x90\xe6\xa0\xa1\xe9\xa6\x8a\xe9\xac\xa3\xe7\xbc\x82\xe8\x90\xa5\xe8\xae\xbf\xe7\x82\x96\xe5\x8d\xa0\xe5\x86\x9c\xe7\xbc\x80\xe5\x90\xa6\xe7\xbb\x8f\xe9\x92\x9a\xe6\xa3\xb5\xe8\xb6\x9f\xe5\xbc\xa0\xe4\xba\x9f\xe5\x90\x8f\xe8\x8c\xb6\xe8\xb0\xa8\xe6\x8d\xbb\xe8\xae\xba\xe8\xbf\xb8\xe5\xa0\x82\xe7\x8e\x89\xe4\xbf\xa1\xe5\x90\xa7\xe7\x9e\xa0\xe4\xb9\xa1\xe5\xa7\xac\xe5\xaf\xba\xe5\x92\xac\xe6\xba\x8f\xe8\x8b\x84\xe7\x9a\xbf\xe6\x84\x8f\xe8\xb5\x89\xe5\xae\x9d\xe5\xb0\x94\xe9\x92\xb0\xe8\x89\xba\xe7\x89\xb9\xe5\x94\xb3\xe8\xb8\x89\xe9\x83\xbd\xe8\x8d\xa3\xe5\x80\x9a\xe7\x99\xbb\xe8\x8d\x90\xe4\xb8\xa7\xe5\xa5\x87\xe6\xb6\xb5\xe6\x89\xb9\xe7\x82\xad\xe8\xbf\x91\xe7\xac\xa6\xe5\x82\xa9\xe6\x84\x9f\xe9\x81\x93\xe7\x9d\x80\xe8\x8f\x8a\xe8\x99\xb9\xe4\xbb\xb2\xe4\xbc\x97\xe6\x87\x88\xe6\xbf\xaf\xe9\xa2\x9e\xe7\x9c\xba\xe5\x8d\x97\xe9\x87\x8a\xe5\x8c\x97\xe7\xbc\x9d\xe6\xa0\x87\xe6\x97\xa2\xe8\x8c\x97\xe6\x95\xb4\xe6\x92\xbc\xe8\xbf\xa4\xe8\xb4\xb2\xe6\x8c\x8e\xe8\x80\xb1\xe6\x8b\x92\xe6\x9f\x90\xe5\xa6\x8d\xe5\x8d\xab\xe5\x93\x87\xe8\x8b\xb1\xe7\x9f\xb6\xe8\x97\xa9\xe6\xb2\xbb\xe4\xbb\x96\xe5\x85\x83\xe9\xa2\x86\xe8\x86\x9c\xe9\x81\xae\xe7\xa9\x97\xe8\x9b\xbe\xe9\xa3\x9e\xe8\x8d\x92\xe6\xa3\xba\xe5\x8a\xab\xe4\xb9\x88\xe5\xb8\x82\xe7\x81\xab\xe6\xb8\xa9\xe6\x8b\x88\xe6\xa3\x9a\xe6\xb4\xbc\xe8\xbd\xac\xe6\x9e\x9c\xe5\xa5\x95\xe5\x8d\xb8\xe8\xbf\xaa\xe4\xbc\xb8\xe6\xb3\xb3\xe6\x96\x97\xe9\x82\xa1\xe4\xbe\x84\xe6\xb6\xa8\xe5\xb1\xaf\xe8\x90\x8b\xe8\x83\xad\xe6\xb0\xa1\xe5\xb4\xae\xe6\x9e\x9e\xe6\x83\xa7\xe5\x86\x92\xe5\xbd\xa9\xe6\x96\x9c\xe6\x89\x8b\xe8\xb1\x9a\xe9\x9a\x8f\xe6\x97\xad\xe6\xb7\x91\xe5\xa6\x9e\xe5\xbd\xa2\xe8\x8f\x8c\xe5\x90\xb2\xe6\xb2\xb1\xe4\xba\x89\xe9\xa9\xaf\xe6\xad\xb9\xe6\x8c\x9f\xe5\x85\x86\xe6\x9f\xb1\xe4\xbc\xa0\xe8\x87\xb3\xe5\x8c\x85\xe5\x86\x85\xe5\x93\x8d\xe4\xb8\xb4\xe7\xba\xa2\xe5\x8a\x9f\xe5\xbc\xa9\xe8\xa1\xa1\xe5\xaf\x82\xe7\xa6\x81\xe8\x80\x81\xe6\xa3\x8d\xe8\x80\x86\xe6\xb8\x8d\xe7\xbb\x87\xe5\xae\xb3\xe6\xb0\xb5\xe6\xb8\x91\xe5\xb8\x83\xe8\xbd\xbd\xe9\x9d\xa5\xe5\x97\xac\xe8\x99\xbd\xe8\x8b\xb9\xe5\x92\xa8\xe5\xa8\x84\xe5\xba\x93\xe9\x9b\x89\xe6\xa6\x9c\xe5\xb8\x9c\xe5\x98\xb2\xe5\xa5\x97\xe7\x91\x9a\xe4\xba\xb2\xe7\xb0\xb8\xe6\xac\xa7\xe8\xbe\xb96\xe8\x85\xbf\xe6\x97\xae\xe6\x8a\x9b\xe5\x90\xb9\xe7\x9e\xb3\xe5\xbe\x97\xe9\x95\x93\xe6\xa2\x97\xe5\x8e\xa8\xe7\xbb\xa7\xe6\xbc\xbe\xe6\x84\xa3\xe6\x86\xa8\xe5\xa3\xab\xe7\xad\x96\xe7\xaa\x91\xe6\x8a\x91\xe8\xba\xaf\xe8\xa5\x9f\xe8\x84\x8f\xe5\x8f\x82\xe8\xb4\xb8\xe8\xa8\x80\xe5\xb9\xb2\xe7\xbb\xb8\xe9\xb3\x84\xe7\xa9\xb7\xe8\x97\x9c\xe9\x9f\xb3\xe6\x8a\x98\xe8\xaf\xa6)\xe4\xb8\xbe\xe6\x82\x8d\xe7\x94\xb8\xe7\x99\x8c\xe9\xbb\x8e\xe8\xb0\xb4\xe6\xad\xbb\xe7\xbd\xa9\xe8\xbf\x81\xe5\xaf\x92\xe9\xa9\xb7\xe8\xa2\x96\xe5\xaa\x92\xe8\x92\x8b\xe6\x8e\x98\xe6\xa8\xa1\xe7\xba\xa0\xe6\x81\xa3\xe8\xa7\x82\xe7\xa5\x96\xe8\x9b\x86\xe7\xa2\x8d\xe4\xbd\x8d\xe7\xa8\xbf\xe4\xb8\xbb\xe6\xbe\xa7\xe8\xb7\x8c\xe7\xad\x8f\xe4\xba\xac\xe9\x94\x8f\xe5\xb8\x9d\xe8\xb4\xb4\xe8\xaf\x81\xe7\xb3\xa0\xe6\x89\x8d\xe9\xbb\x84\xe9\xb2\xb8\xe7\x95\xa5\xe7\x82\xaf\xe9\xa5\xb1\xe5\x9b\x9b\xe5\x87\xba\xe5\x9b\xad\xe7\x8a\x80\xe7\x89\xa7\xe5\xae\xb9\xe6\xb1\x89\xe6\x9d\x86\xe6\xb5\x88\xe6\xb1\xb0\xe7\x91\xb7\xe9\x80\xa0\xe8\x99\xab\xe7\x98\xa9\xe6\x80\xaa\xe9\xa9\xb4\xe6\xb5\x8e\xe5\xba\x94\xe8\x8a\xb1\xe6\xb2\xa3\xe8\xb0\x94\xe5\xa4\x99\xe6\x97\x85\xe4\xbb\xb7\xe7\x9f\xbf\xe4\xbb\xa5\xe8\x80\x83su\xe5\x91\xa6\xe6\x99\x92\xe5\xb7\xa1\xe8\x8c\x85\xe5\x87\x86\xe8\x82\x9f\xe7\x93\xb4\xe8\xa9\xb9\xe4\xbb\x9f\xe8\xa4\x82\xe8\xaf\x91\xe6\xa1\x8c\xe6\xb7\xb7\xe5\xae\x81\xe6\x80\xa6\xe9\x83\x91\xe6\x8a\xbf\xe4\xba\x9b\xe4\xbd\x99\xe9\x84\x82\xe9\xa5\xb4\xe6\x94\x92\xe7\x8f\x91\xe7\xbe\xa4\xe9\x98\x96\xe5\xb2\x94\xe7\x90\xa8\xe8\x97\x93\xe9\xa2\x84\xe7\x8e\xaf\xe6\xb4\xae\xe5\xb2\x8c\xe5\xae\x80\xe6\x9d\xb2\xe7\x80\xb5\xe6\x9c\x80\xe5\xb8\xb8\xe5\x9b\xa1\xe5\x91\xa8\xe8\xb8\x8a\xe5\xa5\xb3\xe9\xbc\x93\xe8\xa2\xad\xe5\x96\x89\xe7\xae\x80\xe8\x8c\x83\xe8\x96\xaf\xe9\x81\x90\xe7\x96\x8f\xe7\xb2\xb1\xe9\xbb\x9c\xe7\xa6\xa7\xe6\xb3\x95\xe7\xae\x94\xe6\x96\xa4\xe9\x81\xa5\xe6\xb1\x9d\xe5\xa5\xa5\xe7\x9b\xb4\xe8\xb4\x9e\xe6\x92\x91\xe7\xbd\xae\xe7\xbb\xb1\xe9\x9b\x86\xe5\xa5\xb9\xe9\xa6\x85\xe9\x80\x97\xe9\x92\xa7\xe6\xa9\xb1\xe9\xad\x89[\xe6\x81\x99\xe8\xba\x81\xe5\x94\xa49\xe6\x97\xba\xe8\x86\x98\xe5\xbe\x85\xe8\x84\xbe\xe6\x83\xab\xe8\xb4\xad\xe5\x90\x97\xe4\xbe\x9d\xe7\x9b\xb2\xe5\xba\xa6\xe7\x98\xbf\xe8\xa0\x96\xe4\xbf\xbe\xe4\xb9\x8b\xe9\x95\x97\xe6\x8b\x87\xe9\xb2\xb5\xe5\x8e\x9d\xe7\xb0\xa7\xe7\xbb\xad\xe6\xac\xbe\xe5\xb1\x95\xe5\x95\x83\xe8\xa1\xa8\xe5\x89\x94\xe5\x93\x81\xe9\x92\xbb\xe8\x85\xad\xe6\x8d\x9f\xe6\xb8\x85\xe9\x94\xb6\xe7\xbb\x9f\xe6\xb6\x8c\xe5\xaf\xb8\xe6\xbb\xa8\xe8\xb4\xaa\xe9\x93\xbe\xe5\x90\xa0\xe5\x86\x88\xe4\xbc\x8e\xe8\xbf\xa5\xe5\x92\x8f\xe5\x90\x81\xe8\xa7\x88\xe9\x98\xb2\xe8\xbf\x85\xe5\xa4\xb1\xe6\xb1\xbe\xe9\x98\x94\xe9\x80\xb5\xe7\xbb\x80\xe8\x94\x91\xe5\x88\x97\xe5\xb7\x9d\xe5\x87\xad\xe5\x8a\xaa\xe7\x86\xa8\xe6\x8f\xaa\xe5\x88\xa9\xe4\xbf\xb1\xe7\xbb\x89\xe6\x8a\xa2\xe9\xb8\xa8\xe6\x88\x91\xe5\x8d\xb3\xe8\xb4\xa3\xe8\x86\xa6\xe6\x98\x93\xe6\xaf\x93\xe9\xb9\x8a\xe5\x88\xb9\xe7\x8e\xb7\xe5\xb2\xbf\xe7\xa9\xba\xe5\x98\x9e\xe7\xbb\x8a\xe6\x8e\x92\xe6\x9c\xaf\xe4\xbc\xb0\xe9\x94\xb7\xe8\xbf\x9d\xe4\xbb\xac\xe8\x8b\x9f\xe9\x93\x9c\xe6\x92\xad\xe8\x82\x98\xe4\xbb\xb6\xe7\x83\xab\xe5\xae\xa1\xe9\xb2\x82\xe5\xb9\xbf\xe5\x83\x8f\xe9\x93\x8c\xe6\x83\xb0\xe9\x93\x9f\xe5\xb7\xb3\xe8\x83\x8d\xe9\xb2\x8d\xe5\xba\xb7\xe6\x86\xa7\xe8\x89\xb2\xe6\x81\xa2\xe6\x83\xb3\xe6\x8b\xb7\xe5\xb0\xa4\xe7\x96\xb3\xe7\x9f\xa5SYFDA\xe5\xb3\x84\xe8\xa3\x95\xe5\xb8\xae\xe6\x8f\xa1\xe6\x90\x94\xe6\xb0\x90\xe6\xb0\x98\xe9\x9a\xbe\xe5\xa2\x92\xe6\xb2\xae\xe9\x9b\xa8\xe5\x8f\x81\xe7\xbc\xa5\xe6\x82\xb4\xe8\x97\x90\xe6\xb9\xab\xe5\xa8\x9f\xe8\x8b\x91\xe7\xa8\xa0\xe9\xa2\x9b\xe7\xb0\x87\xe5\x90\x8e\xe9\x98\x95\xe9\x97\xad\xe8\x95\xa4\xe7\xbc\x9a\xe6\x80\x8e\xe4\xbd\x9e\xe7\xa0\x81\xe5\x98\xa4\xe8\x94\xa1\xe7\x97\x8a\xe8\x88\xb1\xe8\x9e\xaf\xe5\xb8\x95\xe8\xb5\xab\xe6\x98\xb5\xe5\x8d\x87\xe7\x83\xac\xe5\xb2\xab\xe3\x80\x81\xe7\x96\xb5\xe8\x9c\xbb\xe9\xab\x81\xe8\x95\xa8\xe9\x9a\xb6\xe7\x83\x9b\xe6\xa2\xb0\xe4\xb8\x91\xe7\x9b\x82\xe6\xa2\x81\xe5\xbc\xba\xe9\xb2\x9b\xe7\x94\xb1\xe6\x8b\x98\xe6\x8f\x89\xe5\x8a\xad\xe9\xbe\x9f\xe6\x92\xa4\xe9\x92\xa9\xe5\x91\x95\xe5\xad\x9b\xe8\xb4\xb9\xe5\xa6\xbb\xe6\xbc\x82\xe6\xb1\x82\xe9\x98\x91\xe5\xb4\x96\xe7\xa7\xa4\xe7\x94\x98\xe9\x80\x9a\xe6\xb7\xb1\xe8\xa1\xa5\xe8\xb5\x83\xe5\x9d\x8e\xe5\xba\x8a\xe5\x95\xaa\xe6\x89\xbf\xe5\x90\xbc\xe9\x87\x8f\xe6\x9a\x87\xe9\x92\xbc\xe7\x83\xa8\xe9\x98\x82\xe6\x93\x8e\xe8\x84\xb1\xe9\x80\xae\xe7\xa7\xb0P\xe7\xa5\x9e\xe5\xb1\x9e\xe7\x9f\x97\xe5\x8d\x8e\xe5\xb1\x8a\xe7\x8b\x8d\xe8\x91\x91\xe6\xb1\xb9\xe8\x82\xb2\xe6\x82\xa3\xe7\xaa\x92\xe8\x9b\xb0\xe4\xbd\xbc\xe9\x9d\x99\xe6\xa7\x8e\xe8\xbf\x90\xe9\xb3\x97\xe5\xba\x86\xe9\x80\x9d\xe6\x9b\xbc\xe7\x96\xb1\xe5\x85\x8b\xe4\xbb\xa3\xe5\xae\x98\xe6\xad\xa4\xe9\xba\xb8\xe8\x80\xa7\xe8\x9a\x8c\xe6\x99\x9f\xe4\xbe\x8b\xe7\xa1\x80\xe6\xa6\x9b\xe5\x89\xaf\xe6\xb5\x8b\xe5\x94\xb0\xe7\xbc\xa2\xe8\xbf\xb9\xe7\x81\xac\xe9\x9c\x81\xe8\xba\xab\xe5\xb2\x81\xe8\xb5\xad\xe6\x89\x9b\xe5\x8f\x88\xe8\x8f\xa1\xe4\xb9\x9c\xe9\x9b\xbe\xe6\x9d\xbf\xe8\xaf\xbb\xe9\x99\xb7\xe5\xbe\x89\xe8\xb4\xaf\xe9\x83\x81\xe8\x99\x91\xe5\x8f\x98\xe9\x92\x93\xe8\x8f\x9c\xe5\x9c\xbe\xe7\x8e\xb0\xe7\x90\xa2\xe5\xbc\x8f\xe4\xb9\x90\xe7\xbb\xb4\xe6\xb8\x94\xe6\xb5\x9c\xe5\xb7\xa6\xe5\x90\xbe\xe8\x84\x91\xe9\x92\xa1\xe8\xad\xa6T\xe5\x95\xb5\xe6\x8b\xb4\xe5\x81\x8c\xe6\xbc\xb1\xe6\xb9\xbf\xe7\xa1\x95\xe6\xad\xa2\xe9\xaa\xbc\xe9\xad\x84\xe7\xa7\xaf\xe7\x87\xa5\xe8\x81\x94\xe8\xb8\xa2\xe7\x8e\x9b|\xe5\x88\x99\xe7\xaa\xbf\xe8\xa7\x81\xe6\x8c\xaf\xe7\x95\xbf\xe9\x80\x81\xe7\x8f\xad\xe9\x92\xbd\xe6\x82\xa8\xe8\xb5\xb5\xe5\x88\xa8\xe5\x8d\xb0\xe8\xae\xa8\xe8\xb8\x9d\xe7\xb1\x8d\xe8\xb0\xa1\xe8\x88\x8c\xe5\xb4\xa7\xe6\xb1\xbd\xe8\x94\xbd\xe6\xb2\xaa\xe9\x85\xa5\xe7\xbb\x92\xe6\x80\x96\xe8\xb4\xa2\xe5\xb8\x96\xe8\x82\xb1\xe7\xa7\x81\xe8\x8e\x8e\xe5\x8b\x8b\xe7\xbe\x94\xe9\x9c\xb8\xe5\x8a\xb1\xe5\x93\xbc\xe5\xb8\x90\xe5\xb0\x86\xe5\xb8\x85\xe6\xb8\xa0\xe7\xba\xaa\xe5\xa9\xb4\xe5\xa8\xa9\xe5\xb2\xad\xe5\x8e\x98\xe6\xbb\x95\xe5\x90\xbb\xe4\xbc\xa4\xe5\x9d\x9d\xe5\x86\xa0\xe6\x88\x8a\xe9\x9a\x86\xe7\x98\x81\xe4\xbb\x8b\xe6\xb6\xa7\xe7\x89\xa9\xe9\xbb\x8d\xe5\xb9\xb6\xe5\xa7\x97\xe5\xa5\xa2\xe8\xb9\x91\xe6\x8e\xa3\xe5\x9e\xb8\xe9\x94\xb4\xe5\x91\xbd\xe7\xae\x8d\xe6\x8d\x89\xe7\x97\x85\xe8\xbe\x96\xe7\x90\xb0\xe7\x9c\xad\xe8\xbf\xa9\xe8\x89\x98\xe7\xbb\x8c\xe7\xb9\x81\xe5\xaf\x85\xe8\x8b\xa5\xe6\xaf\x8b\xe6\x80\x9d\xe8\xaf\x89\xe7\xb1\xbb\xe8\xaf\x88\xe7\x87\xae\xe8\xbd\xb2\xe9\x85\xae\xe7\x8b\x82\xe9\x87\x8d\xe5\x8f\x8d\xe8\x81\x8c\xe7\xad\xb1\xe5\x8e\xbf\xe5\xa7\x94\xe7\xa3\x95\xe7\xbb\xa3\xe5\xa5\x96\xe6\x99\x8b\xe6\xbf\x89\xe5\xbf\x97\xe5\xbe\xbd\xe8\x82\xa0\xe5\x91\x88\xe7\x8d\x90\xe5\x9d\xbb\xe5\x8f\xa3\xe7\x89\x87\xe7\xa2\xb0\xe5\x87\xa0\xe6\x9d\x91\xe6\x9f\xbf\xe5\x8a\xb3\xe6\x96\x99\xe8\x8e\xb7\xe4\xba\xa9\xe6\x83\x95\xe6\x99\x95\xe5\x8e\x8c\xe5\x8f\xb7\xe7\xbd\xa2\xe6\xb1\xa0\xe6\xad\xa3\xe9\x8f\x96\xe7\x85\xa8\xe5\xae\xb6\xe6\xa3\x95\xe5\xa4\x8d\xe5\xb0\x9d\xe6\x87\x8b\xe8\x9c\xa5\xe9\x94\x85\xe5\xb2\x9b\xe6\x89\xb0\xe9\x98\x9f\xe5\x9d\xa0\xe7\x98\xbe\xe9\x92\xac@\xe5\x8d\xa7\xe7\x96\xa3\xe9\x95\x87\xe8\xad\xac\xe5\x86\xb0\xe5\xbd\xb7\xe9\xa2\x91\xe9\xbb\xaf\xe6\x8d\xae\xe5\x9e\x84\xe9\x87\x87\xe5\x85\xab\xe7\xbc\xaa\xe7\x98\xab\xe5\x9e\x8b\xe7\x86\xb9\xe7\xa0\xb0\xe6\xa5\xa0\xe8\xa5\x81\xe7\xae\x90\xe4\xbd\x86\xe5\x98\xb6\xe7\xbb\xb3\xe5\x95\xa4\xe6\x8b\x8d\xe7\x9b\xa5\xe7\xa9\x86\xe5\x82\xb2\xe6\xb4\x97\xe7\x9b\xaf\xe5\xa1\x98\xe6\x80\x94\xe7\xad\x9b\xe4\xb8\xbf\xe5\x8f\xb0\xe6\x81\x92\xe5\x96\x82\xe8\x91\x9b\xe6\xb0\xb8\xef\xbf\xa5\xe7\x83\x9f\xe9\x85\x92\xe6\xa1\xa6\xe4\xb9\xa6\xe7\xa0\x82\xe8\x9a\x9d\xe7\xbc\x89\xe6\x80\x81\xe7\x80\x9a\xe8\xa2\x84\xe5\x9c\xb3\xe8\xbd\xbb\xe8\x9b\x9b\xe8\xb6\x85\xe6\xa6\xa7\xe9\x81\x9b\xe5\xa7\x92\xe5\xa5\x98\xe9\x93\xae\xe5\x8f\xb3\xe8\x8d\xbd\xe6\x9c\x9b\xe5\x81\xbb\xe5\x8d\xa1\xe4\xb8\xb6\xe6\xb0\xb0\xe9\x99\x84\xe5\x81\x9a\xe9\x9d\xa9\xe7\xb4\xa2\xe6\x88\x9a\xe5\x9d\xa8\xe6\xa1\xb7\xe5\x94\x81\xe5\x9e\x85\xe6\xa6\xbb\xe5\xb2\x90\xe5\x81\x8e\xe5\x9d\x9b\xe8\x8e\xa8\xe5\xb1\xb1\xe6\xae\x8a\xe5\xbe\xae\xe9\xaa\x87\xe9\x99\x88\xe7\x88\xa8\xe6\x8e\xa8\xe5\x97\x9d\xe9\xa9\xb9\xe6\xbe\xa1\xe8\x97\x81\xe5\x91\xa4\xe5\x8d\xa4\xe5\x98\xbb\xe7\xb3\x85\xe9\x80\x9b\xe4\xbe\xb5\xe9\x83\x93\xe9\x85\x8c\xe5\xbe\xb7\xe6\x91\x87\xe2\x80\xbb\xe9\xac\x83\xe8\xa2\xab\xe6\x85\xa8\xe6\xae\xa1\xe7\xbe\xb8\xe6\x98\x8c\xe6\xb3\xa1\xe6\x88\x9b\xe9\x9e\x8b\xe6\xb2\xb3\xe5\xae\xaa\xe6\xb2\xbf\xe7\x8e\xb2\xe9\xb2\xa8\xe7\xbf\x85\xe5\x93\xbd\xe6\xba\x90\xe9\x93\x85\xe8\xaf\xad\xe7\x85\xa7\xe9\x82\xaf\xe5\x9d\x80\xe8\x8d\x83\xe4\xbd\xac\xe9\xa1\xba\xe9\xb8\xb3\xe7\x94\xba\xe9\x9c\xad\xe7\x9d\xbe\xe7\x93\xa2\xe5\xa4\xb8\xe6\xa4\x81\xe6\x99\x93\xe9\x85\xbf\xe7\x97\x88\xe5\x92\x94\xe4\xbe\x8f\xe5\x88\xb8\xe5\x99\x8e\xe6\xb9\x8d\xe7\xad\xbe\xe5\x9a\xb7\xe7\xa6\xbb\xe5\x8d\x88\xe5\xb0\x9a\xe7\xa4\xbe\xe9\x94\xa4\xe8\x83\x8c\xe5\xad\x9f\xe4\xbd\xbf\xe6\xb5\xaa\xe7\xbc\xa6\xe6\xbd\x8d\xe9\x9e\x85\xe5\x86\x9b\xe5\xa7\xb9\xe9\xa9\xb6\xe7\xac\x91\xe9\xb3\x9f\xe9\xb2\x81\xe3\x80\x8b\xe5\xad\xbd\xe9\x92\x9c\xe7\xbb\xbf\xe6\xb4\xb1\xe7\xa4\xb4\xe7\x84\xaf\xe6\xa4\xb0\xe9\xa2\x96\xe5\x9b\x94\xe4\xb9\x8c\xe5\xad\x94\xe5\xb7\xb4\xe4\xba\x92\xe6\x80\xa7\xe6\xa4\xbd\xe5\x93\x9e\xe8\x81\x98\xe6\x98\xa8\xe6\x97\xa9\xe6\x9a\xae\xe8\x83\xb6\xe7\x82\x80\xe9\x9a\xa7\xe4\xbd\x8e\xe5\xbd\x97\xe6\x98\x9d\xe9\x93\x81\xe5\x91\x93\xe6\xb0\xbd\xe8\x97\x89\xe5\x96\x94\xe7\x99\x96\xe7\x91\x97\xe5\xa7\xa8\xe6\x9d\x83\xe8\x83\xb1\xe9\x9f\xa6\xe5\xa0\x91\xe8\x9c\x9c\xe9\x85\x8b\xe6\xa5\x9d\xe7\xa0\x9d\xe6\xaf\x81\xe9\x9d\x93\xe6\xad\x99\xe9\x94\xb2\xe7\xa9\xb6\xe5\xb1\x8b\xe5\x96\xb3\xe9\xaa\xa8\xe8\xbe\xa8\xe7\xa2\x91\xe6\xad\xa6\xe9\xb8\xa0\xe5\xae\xab\xe8\xbe\x9c\xe7\x83\x8a\xe9\x80\x82\xe5\x9d\xa1\xe6\xae\x83\xe5\x9f\xb9\xe4\xbd\xa9\xe4\xbe\x9b\xe8\xb5\xb0\xe8\x9c\x88\xe8\xbf\x9f\xe7\xbf\xbc\xe5\x86\xb5\xe5\xa7\xa3\xe5\x87\x9b\xe6\xb5\x94\xe5\x90\x83\xe9\xa3\x98\xe5\x80\xba\xe7\x8a\x9f\xe9\x87\x91\xe4\xbf\x83\xe8\x8b\x9b\xe5\xb4\x87\xe5\x9d\x82\xe8\x8e\xb3\xe7\x95\x94\xe7\xbb\x82\xe5\x85\xb5\xe8\xa0\x95\xe6\x96\x8b\xe6\xa0\xb9\xe7\xa0\x8d\xe4\xba\xa2\xe6\xac\xa2\xe6\x81\xac\xe5\xb4\x94\xe5\x89\x81\xe9\xa4\x90\xe6\xa6\xab\xe5\xbf\xab\xe6\x89\xb6\xe2\x80\x96\xe6\xbf\x92\xe7\xbc\xa0\xe9\xb3\x9c\xe5\xbd\x93\xe5\xbd\xad\xe9\xa9\xad\xe6\xb5\xa6\xe7\xaf\xae\xe6\x98\x80\xe9\x94\x86\xe7\xa7\xb8\xe9\x92\xb3\xe5\xbc\x8b\xe5\xa8\xa3\xe7\x9e\x91\xe5\xa4\xb7\xe9\xbe\x9b\xe8\x8b\xab\xe6\x8b\xb1\xe8\x87\xb4%\xe5\xb5\x8a\xe9\x9a\x9c\xe9\x9a\x90\xe5\xbc\x91\xe5\x88\x9d\xe5\xa8\x93\xe6\x8a\x89\xe6\xb1\xa9\xe7\xb4\xaf\xe8\x93\x96""\xe5\x94\xac\xe5\x8a\xa9\xe8\x8b\x93\xe6\x98\x99\xe6\x8a\xbc\xe6\xaf\x99\xe7\xa0\xb4\xe5\x9f\x8e\xe9\x83\xa7\xe9\x80\xa2\xe5\x9a\x8f\xe7\x8d\xad\xe7\x9e\xbb\xe6\xba\xb1\xe5\xa9\xbf\xe8\xb5\x8a\xe8\xb7\xa8\xe6\x81\xbc\xe7\x92\xa7\xe8\x90\x83\xe5\xa7\xbb\xe8\xb2\x89\xe7\x81\xb5\xe7\x82\x89\xe5\xaf\x86\xe6\xb0\x9b\xe9\x99\xb6\xe7\xa0\xb8\xe8\xb0\xac\xe8\xa1\x94\xe7\x82\xb9\xe7\x90\x9b\xe6\xb2\x9b\xe6\x9e\xb3\xe5\xb1\x82\xe5\xb2\xb1\xe8\xaf\xba\xe8\x84\x8d\xe6\xa6\x88\xe5\x9f\x82\xe5\xbe\x81\xe5\x86\xb7\xe8\xa3\x81\xe6\x89\x93\xe8\xb9\xb4\xe7\xb4\xa0\xe7\x98\x98\xe9\x80\x9e\xe8\x9b\x90\xe8\x81\x8a\xe6\xbf\x80\xe8\x85\xb1\xe8\x90\x98\xe8\xb8\xb5\xe9\xa3\x92\xe8\x93\x9f\xe5\x90\x86\xe5\x8f\x96\xe5\x92\x99\xe7\xb0\x8b\xe6\xb6\x93\xe7\x9f\xa9\xe6\x9b\x9d\xe6\x8c\xba\xe6\x8f\xa3\xe5\xba\xa7\xe4\xbd\xa0\xe5\x8f\xb2\xe8\x88\xb5\xe7\x84\xb1\xe5\xb0\x98\xe8\x8b\x8f\xe7\xac\x88\xe8\x84\x9a\xe6\xba\x89\xe6\xa6\xa8\xe8\xaf\xb5\xe6\xa8\x8a\xe9\x82\x93\xe7\x84\x8a\xe4\xb9\x89\xe5\xba\xb6\xe5\x84\x8b\xe8\x9f\x8b\xe8\x92\xb2\xe8\xb5\xa6\xe5\x91\xb7\xe6\x9d\x9e\xe8\xaf\xa0\xe8\xb1\xaa\xe8\xbf\x98\xe8\xaf\x95\xe9\xa2\x93\xe8\x8c\x89\xe5\xa4\xaa\xe9\x99\xa4\xe7\xb4\xab\xe9\x80\x83\xe7\x97\xb4\xe8\x8d\x89\xe5\x85\x85\xe9\xb3\x95\xe7\x8f\x89\xe7\xa5\x97\xe5\xa2\xa8\xe6\xb8\xad\xe7\x83\xa9\xe8\x98\xb8\xe6\x85\x95\xe7\x92\x87\xe9\x95\xb6\xe7\xa9\xb4\xe5\xb5\x98\xe6\x81\xb6\xe9\xaa\x82\xe9\x99\xa9\xe7\xbb\x8b\xe5\xb9\x95\xe7\xa2\x89\xe8\x82\xba\xe6\x88\xb3\xe5\x88\x98\xe6\xbd\x9e\xe7\xa7\xa3\xe7\xba\xbe\xe6\xbd\x9c\xe9\x8a\xae\xe6\xb4\x9b\xe9\xa1\xbb\xe7\xbd\x98\xe9\x94\x80\xe7\x98\xaa\xe6\xb1\x9e\xe5\x85\xae\xe5\xb1\x89r\xe6\x9e\x97\xe5\x8e\x95\xe8\xb4\xa8\xe6\x8e\xa2\xe5\x88\x92\xe7\x8b\xb8\xe6\xae\x9a\xe5\x96\x84\xe7\x85\x8a\xe7\x83\xb9\xe3\x80\x92\xe9\x94\x88\xe9\x80\xaf\xe5\xae\xb8\xe8\xbe\x8d\xe6\xb3\xb1\xe6\x9f\x9a\xe8\xa2\x8d\xe8\xbf\x9c\xe8\xb9\x8b\xe5\xb6\x99\xe7\xbb\x9d\xe5\xb3\xa5\xe5\xa8\xa5\xe7\xbc\x8d\xe9\x9b\x80\xe5\xbe\xb5\xe8\xae\xa4\xe9\x95\xb1\xe8\xb0\xb7=\xe8\xb4\xa9\xe5\x8b\x89\xe6\x92\xa9\xe9\x84\xaf\xe6\x96\x90\xe6\xb4\x8b\xe9\x9d\x9e\xe7\xa5\x9a\xe6\xb3\xbe\xe8\xaf\x92\xe9\xa5\xbf\xe6\x92\xac\xe5\xa8\x81\xe6\x99\xb7\xe6\x90\xad\xe8\x8a\x8d\xe9\x94\xa5\xe7\xac\xba\xe8\x93\xa6\xe5\x80\x99\xe7\x90\x8a\xe6\xa1\xa3\xe7\xa4\x81\xe6\xb2\xbc\xe5\x8d\xb5\xe8\x8d\xa0\xe5\xbf\x91\xe6\x9c\x9d\xe5\x87\xb9\xe7\x91\x9e\xe5\xa4\xb4\xe4\xbb\xaa\xe5\xbc\xa7\xe5\xad\xb5\xe7\x95\x8f\xe9\x93\x86\xe7\xaa\x81\xe8\xa1\xb2\xe8\xbd\xa6\xe6\xb5\xa9\xe6\xb0\x94\xe8\x8c\x82\xe6\x82\x96\xe5\x8e\xa2\xe6\x9e\x95\xe9\x85\x9d\xe6\x88\xb4\xe6\xb9\xbe\xe9\x82\xb9\xe9\xa3\x9a\xe6\x94\x98\xe9\x94\x82\xe5\x86\x99\xe5\xae\xb5\xe7\xbf\x81\xe5\xb2\xb7\xe6\x97\xa0\xe5\x96\x9c\xe4\xb8\x88\xe6\x8c\x91\xe5\x97\x9f\xe7\xbb\x9b\xe6\xae\x89\xe8\xae\xae\xe6\xa7\xbd\xe5\x85\xb7\xe9\x86\x87\xe6\xb7\x9e\xe7\xac\x83\xe9\x83\xb4\xe9\x98\x85\xe9\xa5\xbc\xe5\xba\x95\xe5\xa3\x95\xe7\xa0\x9a\xe5\xbc\x88\xe8\xaf\xa2\xe7\xbc\x95\xe5\xba\xb9\xe7\xbf\x9f\xe9\x9b\xb6\xe7\xad\xb7\xe6\x9a\xa8\xe8\x88\x9f\xe9\x97\xba\xe7\x94\xaf\xe6\x92\x9e\xe9\xba\x82\xe8\x8c\x8c\xe8\x94\xbc\xe5\xbe\x88\xe7\x8f\xb2\xe6\x8d\x95\xe6\xa3\xa0\xe8\xa7\x92\xe9\x98\x89\xe5\xaa\x9b\xe5\xa8\xb2\xe8\xaf\xbd\xe5\x89\xbf\xe5\xb0\x89\xe7\x88\xb5\xe7\x9d\xac\xe9\x9f\xa9\xe8\xaf\xb0\xe5\x8c\xa3\xe5\x8d\xb1\xe7\xb3\x8d\xe9\x95\xaf\xe7\xab\x8b\xe6\xb5\x8f\xe9\x98\xb3\xe5\xb0\x91\xe7\x9b\x86\xe8\x88\x94\xe6\x93\x98\xe5\x8c\xaa\xe7\x94\xb3\xe5\xb0\xac\xe9\x93\xa3\xe6\x97\xaf\xe6\x8a\x96\xe8\xb5\x98\xe7\x93\xaf\xe5\xb1\x85\xcb\x87\xe5\x93\xae\xe6\xb8\xb8\xe9\x94\xad\xe8\x8c\x8f\xe6\xad\x8c\xe5\x9d\x8f\xe7\x94\x9a\xe7\xa7\x92\xe8\x88\x9e\xe6\xb2\x99\xe4\xbb\x97\xe5\x8a\xb2\xe6\xbd\xba\xe9\x98\xbf\xe7\x87\xa7\xe9\x83\xad\xe5\x97\x96\xe9\x9c\x8f\xe5\xbf\xa0\xe6\x9d\x90\xe5\xa5\x82\xe8\x80\x90\xe8\xb7\xba\xe7\xa0\x80\xe8\xbe\x93\xe5\xb2\x96\xe5\xaa\xb3\xe6\xb0\x9f\xe6\x9e\x81\xe6\x91\x86\xe7\x81\xbf\xe4\xbb\x8a\xe6\x89\x94\xe8\x85\xbb\xe6\x9e\x9d\xe5\xa5\x8e\xe8\x8d\xaf\xe7\x86\x84\xe5\x90\xa8\xe8\xaf\x9dq\xe9\xa2\x9d\xe6\x85\x91\xe5\x98\x8c\xe5\x8d\x8f\xe5\x96\x80\xe5\xa3\xb3\xe5\x9f\xad\xe8\xa7\x86\xe8\x91\x97\xe6\x96\xbc\xe6\x84\xa7\xe9\x99\xb2\xe7\xbf\x8c\xe5\xb3\x81\xe9\xa2\x85\xe4\xbd\x9b\xe8\x85\xb9\xe8\x81\x8b\xe4\xbe\xaf\xe5\x92\x8e\xe5\x8f\x9f\xe7\xa7\x80\xe9\xa2\x87\xe5\xad\x98\xe8\xbe\x83\xe7\xbd\xaa\xe5\x93\x84\xe5\xb2\x97\xe6\x89\xab\xe6\xa0\x8f\xe9\x92\xbe\xe7\xbe\x8c\xe5\xb7\xb1\xe7\x92\xa8\xe6\x9e\xad\xe9\x9c\x89\xe7\x85\x8c\xe6\xb6\xb8\xe8\xa1\xbf\xe9\x94\xae\xe9\x95\x9d\xe7\x9b\x8a\xe5\xb2\xa2\xe5\xa5\x8f\xe8\xbf\x9e\xe5\xa4\xaf\xe7\x9d\xbf\xe5\x86\xa5\xe5\x9d\x87\xe7\xb3\x96\xe7\x8b\x9e\xe8\xb9\x8a\xe7\xa8\xbb\xe7\x88\xb8\xe5\x88\xbf\xe8\x83\xa5\xe7\x85\x9c\xe4\xb8\xbd\xe8\x82\xbf\xe7\x92\x83\xe6\x8e\xb8\xe8\xb7\x9a\xe7\x81\xbe\xe5\x9e\x82\xe6\xa8\xbe\xe6\xbf\x91\xe4\xb9\x8e\xe8\x8e\xb2\xe7\xaa\x84\xe7\x8a\xb9\xe6\x92\xae\xe6\x88\x98\xe9\xa6\x84\xe8\xbd\xaf\xe7\xbb\x9c\xe6\x98\xbe\xe9\xb8\xa2\xe8\x83\xb8\xe5\xae\xbe\xe5\xa6\xb2\xe6\x81\x95\xe5\x9f\x94\xe8\x9d\x8c\xe4\xbb\xbd\xe9\x81\x87\xe5\xb7\xa7\xe7\x9e\x9f\xe7\xb2\x92\xe6\x81\xb0\xe5\x89\xa5\xe6\xa1\xa1\xe5\x8d\x9a\xe8\xae\xaf\xe5\x87\xaf\xe5\xa0\x87\xe9\x98\xb6\xe6\xbb\xa4\xe5\x8d\x96\xe6\x96\x8c\xe9\xaa\x9a\xe5\xbd\xac\xe5\x85\x91\xe7\xa3\xba\xe6\xa8\xb1\xe8\x88\xb7\xe4\xb8\xa4\xe5\xa8\xb1\xe7\xa6\x8f\xe4\xbb\x83\xe5\xb7\xae\xe6\x89\xbe\xe6\xa1\x81\xc3\xb7\xe5\x87\x80\xe6\x8a\x8a\xe9\x98\xb4\xe6\xb1\xa1\xe6\x88\xac\xe9\x9b\xb7\xe7\xa2\x93\xe8\x95\xb2\xe6\xa5\x9a\xe7\xbd\xa1\xe7\x84\x96\xe6\x8a\xbd\xe5\xa6\xab\xe5\x92\x92\xe4\xbb\x91\xe9\x97\xb1\xe5\xb0\xbd\xe9\x82\x91\xe8\x8f\x81\xe7\x88\xb1\xe8\xb4\xb7\xe6\xb2\xa5\xe9\x9e\x91\xe7\x89\xa1\xe5\x97\x89\xe5\xb4\xb4\xe9\xaa\xa4\xe5\xa1\x8c\xe5\x97\xa6\xe8\xae\xa2\xe6\x8b\xae\xe6\xbb\x93\xe6\x8d\xa1\xe9\x94\xbb\xe6\xac\xa1\xe5\x9d\xaa\xe6\x9d\xa9\xe8\x87\x83\xe7\xae\xac\xe8\x9e\x8d\xe7\x8f\x82\xe9\xb9\x97\xe5\xae\x97\xe6\x9e\x9a\xe9\x99\x8d\xe9\xb8\xac\xe5\xa6\xaf\xe9\x98\x84\xe5\xa0\xb0\xe7\x9b\x90\xe6\xaf\x85\xe5\xbf\x85\xe6\x9d\xa8\xe5\xb4\x83\xe4\xbf\xba\xe7\x94\xac\xe7\x8a\xb6\xe8\x8e\x98\xe8\xb4\xa7\xe8\x80\xb8\xe8\x8f\xb1\xe8\x85\xbc\xe9\x93\xb8\xe5\x94\x8f\xe7\x97\xa4\xe5\xad\x9a\xe6\xbe\xb3\xe6\x87\x92\xe6\xba\x85\xe7\xbf\x98\xe7\x96\x99\xe6\x9d\xb7\xe6\xb7\xbc\xe7\xbc\x99\xe9\xaa\xb0\xe5\x96\x8a\xe6\x82\x89\xe7\xa0\xbb\xe5\x9d\xb7\xe8\x89\x87\xe8\xb5\x81\xe7\x95\x8c\xe8\xb0\xa4\xe7\xba\xa3\xe5\xae\xb4\xe6\x99\x83\xe8\x8c\xb9\xe5\xbd\x92\xe9\xa5\xad\xe6\xa2\xa2\xe9\x93\xa1\xe8\xa1\x97\xe6\x8a\x84\xe8\x82\xbc\xe9\xac\x9f\xe8\x8b\xaf\xe9\xa2\x82\xe6\x92\xb7\xe6\x88\x88\xe7\x82\x92\xe5\x92\x86\xe8\x8c\xad\xe7\x98\x99\xe8\xb4\x9f\xe4\xbb\xb0\xe5\xae\xa2\xe7\x90\x89\xe9\x93\xa2\xe5\xb0\x81\xe5\x8d\x91\xe7\x8f\xa5\xe6\xa4\xbf\xe9\x95\xa7\xe7\xaa\xa8\xe9\xac\xb2\xe5\xaf\xbf\xe5\xbe\xa1\xe8\xa2\xa4\xe9\x93\x83\xe8\x90\x8e\xe7\xa0\x96\xe9\xa4\xae\xe8\x84\x92\xe8\xa3\xb3\xe8\x82\xaa\xe5\xad\x95\xe5\xab\xa3\xe9\xa6\x97\xe5\xb5\x87\xe6\x81\xb3\xe6\xb0\xaf\xe6\xb1\x9f\xe7\x9f\xb3\xe8\xa4\xb6\xe5\x86\xa2\xe7\xa5\xb8\xe9\x98\xbb\xe7\x8b\x88\xe7\xbe\x9e\xe9\x93\xb6\xe9\x9d\xb3\xe9\x80\x8f\xe5\x92\xb3\xe5\x8f\xbc\xe6\x95\xb7\xe8\x8a\xb7\xe5\x95\xa5\xe5\xae\x83\xe7\x93\xa4\xe5\x85\xb0\xe7\x97\x98\xe6\x87\x8a\xe9\x80\x91\xe8\x82\x8c\xe5\xbe\x80\xe6\x8d\xba\xe5\x9d\x8a\xe7\x94\xa9\xe5\x91\xbb\xe3\x80\x83\xe6\xb2\xa6\xe5\xbf\x98\xe8\x86\xbb\xe7\xa5\x9f\xe8\x8f\x85\xe5\x89\xa7\xe5\xb4\x86\xe6\x99\xba\xe5\x9d\xaf\xe8\x87\xa7\xe9\x9c\x8d\xe5\xa2\x85\xe6\x94\xbb\xe7\x9c\xaf\xe5\x80\x98\xe6\x8b\xa2\xe9\xaa\xa0\xe9\x93\x90\xe5\xba\xad\xe5\xb2\x99\xe7\x93\xa0\xe2\x80\xb2\xe7\xbc\xba\xe6\xb3\xa5\xe8\xbf\xa2\xe6\x8d\xb6?\xef\xbc\x9f\xe9\x83\x8f\xe5\x96\x99\xe6\x8e\xb7\xe6\xb2\x8c\xe7\xba\xaf\xe7\xa7\x98\xe7\xa7\x8d\xe5\x90\xac\xe7\xbb\x98\xe5\x9b\xba\xe8\x9e\xa8\xe5\x9b\xa2\xe9\xa6\x99\xe7\x9b\x97\xe5\xa6\x92\xe5\x9f\x9a\xe8\x93\x9d\xe6\x8b\x96\xe6\x97\xb1\xe8\x8d\x9e\xe9\x93\x80\xe8\xa1\x80\xe9\x81\x8f\xe6\xb1\xb2\xe8\xbe\xb0\xe5\x8f\xa9\xe6\x8b\xbd\xe5\xb9\x85\xe7\xa1\xac\xe6\x83\xb6\xe6\xa1\x80\xe6\xbc\xa0\xe6\x8e\xaa\xe6\xb3\xbc\xe5\x94\x91\xe9\xbd\x90\xe8\x82\xbe\xe5\xbf\xb5\xe9\x85\xb1\xe8\x99\x9a\xe5\xb1\x81\xe8\x80\xb6\xe6\x97\x97\xe7\xa0\xa6\xe9\x97\xb5\xe5\xa9\x89\xe9\xa6\x86\xe6\x8b\xad\xe7\xbb\x85\xe9\x9f\xa7\xe5\xbf\x8f\xe7\xaa\x9d\xe9\x86\x8b\xe8\x91\xba\xe9\xa1\xbe\xe8\xbe\x9e\xe5\x80\x9c\xe5\xa0\x86\xe8\xbe\x8b\xe9\x80\x86\xe7\x8e\x9f\xe8\xb4\xb1\xe7\x96\xbe\xe8\x91\xa3\xe6\x83\x98\xe5\x80\x8c\xe9\x94\x95\xe6\xb7\x98\xe5\x98\x80\xe8\x8e\xbd\xe4\xbf\xad\xe7\xac\x8f\xe7\xbb\x91\xe9\xb2\xb7\xe6\x9d\x88\xe6\x8b\xa9\xe8\x9f\x80\xe7\xb2\xa5\xe5\x97\xaf\xe9\xa9\xb0\xe9\x80\xbe\xe6\xa1\x88\xe8\xb0\xaa\xe8\xa4\x93\xe8\x83\xab\xe5\x93\xa9\xe6\x98\x95\xe9\xa2\x9a\xe9\xb2\xa2\xe7\xbb\xa0\xe8\xba\xba\xe9\xb9\x84\xe5\xb4\x82\xe5\x84\x92\xe4\xbf\xa8\xe4\xb8\x9d\xe5\xb0\x95\xe6\xb3\x8c\xe5\x95\x8a\xe8\x90\xb8\xe5\xbd\xb0\xe5\xb9\xba\xe5\x90\x9f\xe9\xaa\x84\xe8\x8b\xa3\xe5\xbc\xa6\xe8\x84\x8a\xe7\x91\xb0\xe3\x80\x88\xe8\xaf\x9b\xe9\x95\x81\xe6\x9e\x90\xe9\x97\xaa\xe5\x89\xaa\xe4\xbe\xa7\xe5\x93\x9f\xe6\xa1\x86\xe8\x9e\x83\xe5\xae\x88\xe5\xac\x97\xe7\x87\x95\xe7\x8b\xad\xe9\x93\x88\xe7\xbc\xae\xe6\xa6\x82\xe8\xbf\xb3\xe7\x97\xa7\xe9\xb2\xb2\xe4\xbf\xaf\xe5\x94\xae\xe7\xac\xbc\xe7\x97\xa3\xe6\x89\x89\xe6\x8c\x96\xe6\xbb\xa1\xe5\x92\x8b\xe6\x8f\xb4\xe9\x82\xb1\xe6\x89\x87\xe6\xad\xaa\xe4\xbe\xbf\xe7\x8e\x91\xe7\xbb\xa6\xe5\xb3\xa1\xe8\x9b\x87\xe5\x8f\xa8\xe3\x80\x96\xe6\xb3\xbd\xe8\x83\x83\xe6\x96\x93\xe5\x96\x8b\xe6\x80\x82\xe5\x9d\x9f\xe7\x8c\xaa\xe8\xaf\xa5\xe8\x9a\xac\xe7\x82\x95\xe5\xbc\xa5\xe8\xb5\x9e\xe6\xa3\xa3\xe6\x99\x94\xe5\xa8\xa0\xe6\x8c\xb2\xe7\x8b\xa1\xe5\x88\x9b\xe7\x96\x96\xe9\x93\x95\xe9\x95\xad\xe7\xa8\xb7\xe6\x8c\xab\xe5\xbc\xad\xe5\x95\xbe\xe7\xbf\x94\xe7\xb2\x89\xe5\xb1\xa5\xe8\x8b\x98\xe5\x93\xa6\xe6\xa5\xbc\xe7\xa7\x95\xe9\x93\x82\xe5\x9c\x9f\xe9\x94\xa3\xe7\x98\x9f\xe6\x8c\xa3\xe6\xa0\x89\xe4\xb9\xa0\xe4\xba\xab\xe6\xa1\xa2\xe8\xa2\x85\xe7\xa3\xa8\xe6\xa1\x82\xe8\xb0\xa6\xe5\xbb\xb6\xe5\x9d\x9a\xe8\x94\x9a\xe5\x99\x97\xe7\xbd\xb2\xe8\xb0\x9f\xe7\x8c\xac\xe9\x92\x8e\xe6\x81\x90\xe5\xac\x89\xe9\x9b\x92\xe5\x80\xa6\xe8\xa1\x85\xe4\xba\x8f\xe7\x92\xa9\xe7\x9d\xb9\xe5\x88\xbb\xe6\xae\xbf\xe7\x8e\x8b\xe7\xae\x97\xe9\x9b\x95\xe9\xba\xbb\xe4\xb8\x98\xe6\x9f\xaf\xe9\xaa\x86\xe4\xb8\xb8\xe5\xa1\x8d\xe8\xb0\x9a\xe6\xb7\xbb\xe9\xb2\x88\xe5\x9e\x93\xe6\xa1\x8e\xe8\x9a\xaf\xe8\x8a\xa5\xe4\xba\x88\xe9\xa3\x95\xe9\x95\xa6\xe8\xb0\x8c\xe7\xaa\x97\xe9\x86\x9a\xe8\x8f\x80\xe4\xba\xae\xe6\x90\xaa\xe8\x8e\xba\xe8\x92\xbf\xe7\xbe\x81\xe8\xb6\xb3J\xe7\x9c\x9f\xe8\xbd\xb6\xe6\x82\xac\xe8\xa1\xb7\xe9\x9d\x9b\xe7\xbf\x8a\xe6\x8e\xa9\xe5\x93\x92\xe7\x82\x85\xe6\x8e\x90\xe5\x86\xbc\xe5\xa6\xael\xe8\xb0\x90\xe7\xa8\x9a\xe8\x8d\x86\xe6\x93\x92\xe7\x8a\xaf\xe9\x99\xb5\xe8\x99\x8f\xe6\xb5\x93\xe5\xb4\xbd\xe5\x88\x8d\xe9\x99\x8c\xe5\x82\xbb\xe5\xad\x9c\xe5\x8d\x83\xe9\x9d\x96\xe6\xbc\x94\xe7\x9f\x9c\xe9\x92\x95\xe7\x85\xbd\xe6\x9d\xb0\xe9\x85\x97\xe6\xb8\x97\xe4\xbc\x9e\xe6\xa0\x8b\xe4\xbf\x97\xe6\xb3\xab\xe6\x88\x8d\xe7\xbd\x95\xe6\xb2\xbe\xe7\x96\xbd\xe7\x81\x8f\xe7\x85\xa6\xe8\x8a\xac\xe7\xa3\xb4\xe5\x8f\xb1\xe9\x98\xb1\xe6\xa6\x89\xe6\xb9\x83\xe8\x9c\x80\xe5\x8f\x89\xe9\x86\x92\xe5\xbd\xaa\xe7\xa7\x9f\xe9\x83\xa1\xe7\xaf\xb7\xe5\xb1\x8e\xe8\x89\xaf\xe5\x9e\xa2\xe9\x9a\x97\xe5\xbc\xb1\xe9\x99\xa8\xe5\xb3\xaa\xe7\xa0\xb7\xe6\x8e\xb4\xe9\xa2\x81\xe8\x83\x8e\xe9\x9b\xaf\xe7\xbb\xb5\xe8\xb4\xac\xe6\xb2\x90\xe6\x92\xb5\xe9\x9a\x98\xe7\xaf\x99\xe6\x9a\x96\xe6\x9b\xb9\xe9\x99\xa1\xe6\xa0\x93\xe5\xa1\xab\xe8\x87\xbc\xe5\xbd\xa6\xe7\x93\xb6\xe7\x90\xaa\xe6\xbd\xbc\xe5\x93\xaa\xe9\xb8\xa1\xe6\x91\xa9\xe5\x95\xa6\xe4\xbf\x9f\xe9\x94\x8b\xe5\x9f\x9f\xe8\x80\xbb\xe8\x94\xab\xe7\x96\xaf\xe7\xba\xb9\xe6\x92\x87\xe6\xaf\x92\xe7\xbb\xb6\xe7\x97\x9b\xe9\x85\xaf\xe5\xbf\x8d\xe7\x88\xaa\xe8\xb5\xb3\xe6\xad\x86\xe5\x98\xb9\xe8\xbe\x95\xe7\x83\x88\xe5\x86\x8c\xe6\x9c\xb4\xe9\x92\xb1\xe5\x90\xae\xe6\xaf\xaf\xe7\x99\x9c\xe5\xa8\x83\xe8\xb0\x80\xe9\x82\xb5\xe5\x8e\xae\xe7\x82\xbd\xe7\x92\x9e\xe9\x82\x83\xe4\xb8\x90\xe8\xbf\xbd\xe8\xaf\x8d\xe7\x93\x92\xe5\xbf\x86\xe8\xbd\xa7\xe8\x8a\xab\xe8\xb0\xaf\xe5\x96\xb7\xe5\xbc\x9f\xe5\x8d\x8a\xe5\x86\x95\xe8\xa3\x99\xe6\x8e\x96\xe5\xa2\x89\xe7\xbb\xae\xe5\xaf\x9d\xe8\x8b\x94\xe5\x8a\xbf\xe9\xa1\xb7\xe8\xa4\xa5\xe5\x88\x87\xe8\xa1\xae\xe5\x90\x9b\xe4\xbd\xb3\xe5\xab\x92\xe8\x9a\xa9\xe9\x9c\x9e\xe4\xbd\x9a\xe6\xb4\x99\xe9\x80\x8a\xe9\x95\x96\xe6\x9a\xb9\xe5\x94\x9b&\xe6\xae\x92\xe9\xa1\xb6\xe7\xa2\x97\xe7\x8d\x97\xe8\xbd\xad\xe9\x93\xba\xe8\x9b\x8a\xe5\xba\x9f\xe6\x81\xb9\xe6\xb1\xa8\xe5\xb4\xa9\xe7\x8f\x8d\xe9\x82\xa3\xe6\x9d\xb5\xe6\x9b\xb2\xe7\xba\xba\xe5\xa4\x8f\xe8\x96\xb0\xe5\x82\x80\xe9\x97\xb3\xe6\xb7\xac\xe5\xa7\x98\xe8\x88\x80\xe6\x8b\xa7\xe5\x8d\xb7\xe6\xa5\x82\xe6\x81\x8d\xe8\xae\xaa\xe5\x8e\xa9\xe5\xaf\xae\xe7\xaf\xaa\xe8\xb5\x93\xe4\xb9\x98\xe7\x81\xad\xe7\x9b\x85\xe9\x9e\xa3\xe6\xb2\x9f\xe6\x85\x8e\xe6\x8c\x82\xe9\xa5\xba\xe9\xbc\xbe\xe6\x9d\xb3\xe6\xa0\x91\xe7\xbc\xa8\xe4\xb8\x9b\xe7\xb5\xae\xe5\xa8\x8c\xe8\x87\xbb\xe5\x97\xb3\xe7\xaf\xa1\xe4\xbe\xa9\xe8\xbf\xb0\xe8\xa1\xb0\xe7\x9f\x9b\xe5\x9c\x88\xe8\x9a\x9c\xe5\x8c\x95\xe7\xad\xb9\xe5\x8c\xbf\xe6\xbf\x9e\xe6\x99\xa8\xe5\x8f\xb6\xe9\xaa\x8b\xe9\x83\x9d\xe6\x8c\x9a\xe8\x9a\xb4\xe6\xbb\x9e\xe5\xa2\x9e\xe4\xbe\x8d\xe6\x8f\x8f\xe7\x93\xa3\xe5\x90\x96\xe5\xab\xa6\xe8\x9f\x92\xe5\x8c\xbe\xe5\x9c\xa3\xe8\xb5\x8c\xe6\xaf\xa1\xe7\x99\x9e\xe6\x81\xba\xe7\x99\xbe\xe6\x9b\xb3\xe9\x9c\x80\xe7\xaf\x93\xe8\x82\xae\xe5\xba\x96\xe5\xb8\x8f\xe5\x8d\xbf\xe9\xa9\xbf\xe9\x81\x97\xe8\xb9\xac\xe9\xac\x93\xe9\xaa\xa1\xe6\xad\x89\xe8\x8a\x8e\xe8\x83\xb3\xe5\xb1\x90\xe7\xa6\xbd\xe7\x83\xa6\xe6\x99\x8c\xe5\xaf\x84\xe5\xaa\xbe\xe7\x8b\x84\xe7\xbf\xa1\xe8\x8b\x92\xe8\x88\xb9\xe5\xbb\x89\xe7\xbb\x88\xe7\x97\x9e\xe6\xae\x87\xe3\x80\x85\xe7\x95\xa6\xe9\xa5\xb6\xe6\x94\xb9\xe6\x8b\x86\xe6\x82\xbb\xe8\x90\x84\xef\xbf\xa1\xe7\x93\xbf\xe4\xb9\x83\xe8\xa8\xbe\xe6\xa1\x85\xe5\x8c\xae\xe6\xba\xa7\xe6\x8b\xa5\xe7\xba\xb1\xe9\x93\x8d\xe9\xaa\x97\xe8\x95\x83\xe9\xbe\x8b\xe7\xbc\xac\xe7\x88\xb6\xe4\xbd\x90\xe7\x96\x9a\xe6\xa0\x8e\xe9\x86\x8d\xe6\x8e\xb3\xe8\x93\x84x\xe6\x83\x86\xe9\xa2\x9c\xe9\xb2\x86\xe6\xa6\x86\xe3\x80\x94\xe7\x8c\x8e\xe6\x95\x8c\xe6\x9a\xb4\xe8\xb0\xa5\xe9\xb2\xab\xe8\xb4\xbe\xe7\xbd\x97\xe7\x8e\xbb\xe7\xbc\x84\xe6\x89\xa6\xe8\x8a\xaa\xe7\x99\xa3\xe8\x90\xbd\xe5\xbe\x92\xe8\x87\xbe\xe6\x81\xbf\xe7\x8c\xa9\xe6\x89\x98\xe9\x82\xb4\xe8\x82\x84\xe7\x89\xb5\xe6\x98\xa5\xe9\x99\x9b\xe8\x80\x80\xe5\x88\x8a\xe6\x8b\x93\xe8\x93\x93\xe9\x82\xb3\xe5\xa0\x95\xe5\xaf\x87\xe6\x9e\x89\xe6\xb7\x8c\xe5\x95\xa1\xe6\xb9\x84\xe5\x85\xbd\xe9\x85\xb7\xe8\x90\xbc\xe7\xa2\x9a\xe6\xbf\xa0\xe8\x90\xa4\xe5\xa4\xb9\xe6\x97\xac\xe6\x88\xae\xe6\xa2\xad\xe7\x90\xa5\xe6\xa4\xad\xe6\x98\x94\xe5\x8b\xba\xe8\x9c\x8a\xe7\xbb\x90\xe6\x99\x9a\xe5\xad\xba\xe5\x83\xb5\xe5\xae\xa3\xe6\x91\x84\xe5\x86\xbd\xe6\x97\xa8\xe8\x90\x8c\xe5\xbf\x99\xe8\x9a\xa4\xe7\x9c\x89\xe5\x99\xbc\xe8\x9f\x91\xe4\xbb\x98\xe5\xa5\x91\xe7\x93\x9c\xe6\x82\xbc\xe9\xa2\xa1\xe5\xa3\x81\xe6\x9b\xbe\xe7\xaa\x95\xe9\xa2\xa2\xe6\xbe\x8e\xe4\xbb\xbf\xe4\xbf\x91\xe6\xb5\x91\xe5\xb5\x8c\xe6\xb5\xa3\xe4\xb9\x8d\xe7\xa2\x8c\xe8\xa4\xaa\xe4\xb9\xb1\xe8\x94\x9f\xe9\x9a\x99\xe7\x8e\xa9\xe5\x89\x90\xe8\x91\xab\xe7\xae\xab\xe7\xba\xb2\xe5\x9b\xb4\xe4\xbc\x90\xe5\x86\xb3\xe4\xbc\x99\xe6\xbc\xa9\xe7\x91\x9f\xe5\x88\x91\xe8\x82\x93\xe9\x95\xb3\xe7\xbc\x93\xe8\xb9\xad\xe6\xb0\xa8\xe7\x9a\x93\xe5\x85\xb8\xe7\x95\xb2\xe5\x9d\x8d\xe9\x93\x91\xe6\xaa\x90\xe5\xa1\x91\xe6\xb4\x9e\xe5\x80\xac\xe5\x82\xa8\xe8\x83\xb4\xe6\xb7\xb3\xe6\x88\xbe\xe5\x90\x90\xe7\x81\xbc\xe6\x83\xba\xe5\xa6\x99\xe6\xaf\x95\xe7\x8f\x90\xe7\xbc\x88\xe8\x99\xb1\xe7\x9b\x96\xe7\xbe\xb0\xe9\xb8\xbf\xe7\xa3\x85\xe8\xb0\x93\xe9\xab\x85\xe5\xa8\xb4\xe8\x8b\xb4\xe5\x94\xb7\xe8\x9a\xa3\xe9\x9c\xb9\xe6\x8a\xa8\xe8\xb4\xa4\xe5\x94\xa0\xe7\x8a\xac\xe8\xaa\x93\xe9\x80\x8d\xe5\xba\xa0\xe9\x80\xbc\xe9\xba\x93\xe7\xb1\xbc\xe9\x87\x89\xe5\x91\x9c\xe7\xa2\xa7\xe7\xa7\xa7\xe6\xb0\xa9\xe6\x91\x94\xe9\x9c\x84\xe7\xa9\xb8\xe7\xba\xa8\xe8\xbe\x9f\xe5\xa6\x88\xe6\x98\xa0\xe5\xae\x8c\xe7\x89\x9b\xe7\xbc\xb4\xe5\x97\xb7\xe7\x82\x8a\xe6\x81\xa9\xe8\x8d\x94\xe8\x8c\x86\xe6\x8e\x89\xe7\xb4\x8a\xe6\x85\x8c\xe8\x8e\x93\xe7\xbe\x9f\xe9\x98\x99\xe8\x90\x81\xe7\xa3\x90\xe5\x8f\xa6\xe8\x95\xb9\xe8\xbe\xb1\xe9\xb3\x90\xe6\xb9\xae\xe5\x90\xa1\xe5\x90\xa9\xe5\x94\x90\xe7\x9d\xa6\xe5\x9e\xa0\xe8\x88\x92\xe5\x9c\x9c\xe5\x86\x97\xe7\x9e\xbf\xe6\xba\xba\xe8\x8a\xbe\xe5\x9b\xb1\xe5\x8c\xa0\xe5\x83\xb3\xe6\xb1\x90\xe8\x8f\xa9\xe9\xa5\xac\xe6\xbc\x93\xe9\xbb\x91\xe9\x9c\xb0\xe6\xb5\xb8\xe6\xbf\xa1\xe7\xaa\xa5\xe6\xaf\x82\xe8\x92\xa1\xe5\x85\xa2\xe9\xa9\xbb\xe9\xb9\x89\xe8\x8a\xae\xe8\xaf\x99\xe8\xbf\xab\xe9\x9b\xb3\xe5\x8e\x82\xe5\xbf\x90\xe8\x87\x86\xe7\x8c\xb4\xe9\xb8\xa3\xe8\x9a\xaa\xe6\xa0\x88\xe7\xae\x95\xe7\xbe\xa1\xe6\xb8\x90\xe8\x8e\x86\xe6\x8d\x8d\xe7\x9c\x88\xe5\x93\x93\xe8\xb6\xb4\xe8\xb9\xbc\xe5\x9f\x95\xe5\x9a\xa3\xe9\xaa\x9b\xe5\xae\x8f\xe6\xb7\x84\xe6\x96\x91\xe5\x99\x9c\xe4\xb8\xa5\xe7\x91\x9b\xe5\x9e\x83\xe6\xa4\x8e\xe8\xaf\xb1\xe5\x8e\x8b\xe5\xba\xbe\xe7\xbb\x9e\xe7\x84\x98\xe5\xbb\xbf\xe6\x8a\xa1\xe8\xbf\x84\xe6\xa3\x98\xe5\xa4\xab\xe7\xba\xac\xe9\x94\xb9\xe7\x9c\xa8\xe7\x9e\x8c\xe4\xbe\xa0\xe8\x84\x90\xe7\xab\x9e\xe7\x80\x91\xe5\xad\xb3\xe9\xaa\xa7\xe9\x81\x81\xe5\xa7\x9c\xe9\xa2\xa6\xe8\x8d\xaa\xe6\xbb\x9a\xe8\x90\xa6\xe4\xbc\xaa\xe9\x80\xb8\xe7\xb2\xb3\xe7\x88\xac\xe9\x94\x81\xe7\x9f\xa3\xe5\xbd\xb9\xe8\xb6\xa3\xe6\xb4\x92\xe9\xa2\x94\xe8\xaf\x8f\xe9\x80\x90\xe5\xa5\xb8\xe7\x94\xad\xe6\x83\xa0\xe6\x94\x80\xe8\xb9\x84\xe6\xb3\x9b\xe5\xb0\xbc\xe6\x8b\xbc\xe9\x98\xae\xe9\xb9\xb0\xe4\xba\x9a\xe9\xa2\x88\xe6\x83\x91\xe5\x8b\x92\xe3\x80\x89\xe9\x99\x85\xe8\x82\x9b\xe7\x88\xb7\xe5\x88\x9a\xe9\x92\xa8\xe4\xb8\xb0\xe5\x85\xbb\xe5\x86\xb6\xe9\xb2\xbd\xe8\xbe\x89\xe8\x94\xbb\xe7\x94\xbb\xe8\xa6\x86\xe7\x9a\xb4\xe5\xa6\x8a\xe9\xba\xa6\xe8\xbf\x94\xe9\x86\x89\xe7\x9a\x82\xe6\x93\x80\xe3\x80\x97\xe9\x85\xb6\xe5\x87\x91\xe7\xb2\xb9\xe6\x82\x9f\xe8\xaf\x80\xe7\xa1\x96\xe6\xb8\xaf\xe5\x8d\x9cz\xe6\x9d\x80\xe6\xb6\x95\xc2\xb1\xe8\x88\x8d\xe9\x93\xa0\xe6\x8a\xb5\xe5\xbc\x9b\xe6\xae\xb5\xe6\x95\x9d\xe9\x95\x90\xe5\xa5\xa0\xe6\x8b\x82\xe8\xbd\xb4\xe8\xb7\x9b\xe8\xa2\xb1et\xe6\xb2\x89\xe8\x8f\x87\xe4\xbf\x8e\xe8\x96\xaa\xe5\xb3\xa6\xe7\xa7\xad\xe8\x9f\xb9\xe5\x8e\x86\xe7\x9b\x9f\xe8\x8f\xa0\xe5\xaf\xa1\xe6\xb6\xb2\xe8\x82\xa2\xe5\x96\xbb\xe6\x9f\x93\xe8\xa3\xb1\xe6\x82\xb1\xe6\x8a\xb1\xe6\xb0\x99\xe8\xb5\xa4\xe6\x8d\x85\xe7\x8c\x9b\xe8\xb7\x91\xe6\xb0\xae\xe8\xb0\xa3\xe4\xbb\x81\xe5\xb0\xba\xe8\xbe\x8a\xe7\xaa\x8d\xe7\x83\x99\xe8\xa1\x8d\xe6\x9e\xb6\xe6\x93\xa6\xe5\x80\x8f\xe7\x92\x90\xe7\x91\x81\xe5\xb8\x81\xe6\xa5\x9e\xe8\x83\x96\xe5\xa4\x94\xe8\xb6\xb8\xe9\x82\x9b\xe6\x83\xb4\xe9\xa5\x95\xe8\x99\x94\xe8\x9d\x8e\xc2\xa7\xe5\x93\x89\xe8\xb4\x9d\xe5\xae\xbd\xe8\xbe\xab\xe7\x82\xae\xe6\x89\xa9\xe9\xa5\xb2\xe7\xb1\xbd\xe9\xad\x8f\xe8\x8f\x9f\xe9\x94\xb0\xe4\xbc\x8d\xe7\x8c\x9d\xe6\x9c\xab\xe7\x90\xb3\xe5\x93\x9a\xe8\x9b\x8e\xe9\x82\x82\xe5\x91\x80\xe5\xa7\xbf\xe9\x84\x9e\xe5\x8d\xb4\xe6\xad\xa7\xe4\xbb\x99\xe6\x81\xb8\xe6\xa4\x90\xe6\xa3\xae\xe7\x89\x92\xe5\xaf\xa4\xe8\xa2\x92\xe5\xa9\x86\xe8\x99\xa2\xe9\x9b\x85\xe9\x92\x89\xe6\x9c\xb5\xe8\xb4\xbc\xe6\xac\xb2\xe8\x8b\x9e\xe5\xaf\xb0\xe6\x95\x85\xe9\xbe\x9a\xe5\x9d\xad\xe5\x98\x98\xe5\x92\xab\xe7\xa4\xbc\xe7\xa1\xb7\xe5\x85\x80\xe7\x9d\xa2\xe6\xb1\xb6\xe2\x80\x99\xe9\x93\xb2\xe7\x83\xa7\xe7\xbb\x95\xe8\xaf\x83\xe6\xb5\x83\xe9\x92\xbf\xe5\x93\xba\xe6\x9f\x9c\xe8\xae\xbc\xe9\xa2\x8a\xe7\x92\x81\xe8\x85\x94\xe6\xb4\xbd\xe5\x92\x90\xe8\x84\xb2\xe7\xb0\x8c\xe7\xad\xa0\xe9\x95\xa3\xe7\x8e\xae\xe9\x9e\xa0\xe8\xb0\x81\xe5\x85\xbc\xe5\xa7\x86\xe6\x8c\xa5\xe6\xa2\xaf\xe8\x9d\xb4\xe8\xb0\x98\xe6\xbc\x95\xe5\x88\xb7\xe8\xba\x8f\xe5\xae\xa6\xe5\xbc\xbcb\xe5\x9e\x8c\xe5\x8a\x88\xe9\xba\x9f\xe8\x8e\x89\xe6\x8f\xad\xe7\xac\x99\xe6\xb8\x8e\xe4\xbb\x95\xe5\x97\xa4\xe4\xbb\x93\xe9\x85\x8d\xe6\x80\x8f\xe6\x8a\xac\xe9\x94\x99\xe6\xb3\xaf\xe9\x95\x8a\xe5\xad\xb0\xe7\x8c\xbf\xe9\x82\xaa\xe4\xbb\x8d\xe7\xa7\x8b\xe9\xbc\xac\xe5\xa3\xb9\xe6\xad\x87\xe5\x90\xb5\xe7\x82\xbc<\xe5\xb0\xa7\xe5\xb0\x84\xe6\x9f\xac\xe5\xbb\xb7\xe8\x83\xa7\xe9\x9c\xbe\xe5\x87\xb3\xe9\x9a\x8b\xe8\x82\x9a\xe6\xb5\xae\xe6\xa2\xa6\xe7\xa5\xa5\xe6\xa0\xaa\xe5\xa0\xb5\xe9\x80\x80L\xe9\xb9\xab\xe8\xb7\x8e\xe5\x87\xb6\xe6\xaf\xbd\xe8\x8d\x9f\xe7\x82\xab\xe6\xa0\xa9\xe7\x8e\xb3\xe7\x94\x9c\xe6\xb2\x82\xe9\xb9\xbf\xe9\xa1\xbd\xe4\xbc\xaf\xe7\x88\xb9\xe8\xb5\x94\xe8\x9b\xb4\xe5\xbe\x90\xe5\x8c\xa1\xe6\xac\xa3\xe7\x8b\xb0\xe7\xbc\xb8\xe9\x9b\xb9\xe8\x9f\x86\xe7\x96\xa4\xe9\xbb\x98\xe6\xb2\xa4\xe5\x95\x9c\xe7\x97\x82\xe8\xa1\xa3\xe7\xa6\x85wih\xe8\xbe\xbd\xe8\x91\xb3\xe9\xbb\x9d\xe9\x92\x97\xe5\x81\x9c\xe6\xb2\xbd\xe6\xa3\x92\xe9\xa6\xa8\xe9\xa2\x8c\xe8\x82\x89\xe5\x90\xb4\xe7\xa1\xab\xe6\x82\xaf\xe5\x8a\xbe\xe5\xa8\x88\xe9\xa9\xac\xe5\x95\xa7\xe5\x90\x8a\xe6\x82\x8c\xe9\x95\x91\xe5\xb3\xad\xe5\xb8\x86\xe7\x80\xa3\xe6\xb6\x89\xe5\x92\xb8\xe7\x96\xb8\xe6\xbb\x8b\xe6\xb3\xa3\xe7\xbf\xa6\xe6\x8b\x99\xe7\x99\xb8\xe9\x92\xa5\xe8\x9c\x92+\xe5\xb0\xbe\xe5\xba\x84\xe5\x87\x9d\xe6\xb3\x89\xe5\xa9\xa2\xe6\xb8\xb4\xe8\xb0\x8a\xe4\xb9\x9e\xe9\x99\x86\xe9\x94\x89\xe7\xb3\x8a\xe9\xb8\xa6\xe6\xb7\xaeIBN\xe6\x99\xa6\xe5\xbc\x97\xe4\xb9\x94\xe5\xba\xa5\xe8\x91\xa1\xe5\xb0\xbb\xe5\xb8\xad\xe6\xa9\xa1\xe5\x82\xa3\xe6\xb8\xa3\xe6\x8b\xbf\xe6\x83\xa9\xe9\xba\x8b\xe6\x96\x9b\xe7\xbc\x83\xe7\x9f\xae\xe8\x9b\x8f\xe5\xb2\x98\xe9\xb8\xbd\xe5\xa7\x90\xe8\x86\x8f\xe5\x82\xac\xe5\xa5\x94\xe9\x95\x92\xe5\x96\xb1\xe8\xa0\xa1\xe6\x91\xa7\xe9\x92\xaf\xe8\x83\xa4\xe6\x9f\xa0\xe6\x8b\x90\xe7\x92\x8b\xe9\xb8\xa5\xe5\x8d\xa2\xe8\x8d\xa1\xe5\x80\xbe^_\xe7\x8f\x80\xe9\x80\x84\xe8\x90\xa7\xe5\xa1\xbe\xe6\x8e\x87\xe8\xb4\xae\xe7\xac\x86\xe8\x81\x82\xe5\x9c\x83\xe5\x86\xb2\xe5\xb5\xacM\xe6\xbb\x94\xe7\xac\x95\xe5\x80\xbc\xe7\x82\x99\xe5\x81\xb6\xe8\x9c\xb1\xe6\x90\x90\xe6\xa2\x86\xe6\xb1\xaa\xe8\x94\xac\xe8\x85\x91\xe9\xb8\xaf\xe8\xb9\x87\xe6\x95\x9e\xe7\xbb\xaf\xe4\xbb\xa8\xe7\xa5\xaf\xe8\xb0\x86\xe6\xa2\xa7\xe7\xb3\x97\xe9\x91\xab\xe5\x95\xb8\xe8\xb1\xba\xe5\x9b\xb9\xe7\x8c\xbe\xe5\xb7\xa2\xe6\x9f\x84\xe7\x80\x9b\xe7\xad\x91\xe8\xb8\x8c\xe6\xb2\xad\xe6\x9a\x97\xe8\x8b\x81\xe9\xb1\xbf\xe8\xb9\x89\xe8\x84\x82\xe8\x98\x96\xe7\x89\xa2\xe7\x83\xad\xe6\x9c\xa8\xe5\x90\xb8\xe6\xba\x83\xe5\xae\xa0\xe5\xba\x8f\xe6\xb3\x9e\xe5\x81\xbf\xe6\x8b\x9c\xe6\xaa\xa9\xe5\x8e\x9a\xe6\x9c\x90\xe6\xaf\x97\xe8\x9e\xb3\xe5\x90\x9e\xe5\xaa\x9a\xe6\x9c\xbd\xe6\x8b\x85\xe8\x9d\x97\xe6\xa9\x98\xe7\x95\xb4\xe7\xa5\x88\xe7\xb3\x9f\xe7\x9b\xb1\xe9\x9a\xbc\xe9\x83\x9c\xe6\x83\x9c\xe7\x8f\xa0\xe8\xa3\xa8\xe9\x93\xb5\xe7\x84\x99\xe7\x90\x9a\xe5\x94\xaf\xe5\x92\x9a\xe5\x99\xaa\xe9\xaa\x8a\xe4\xb8\xab\xe6\xbb\xa2\xe5\x8b\xa4\xe6\xa3\x89\xe5\x91\xb8\xe5\x92\xa3\xe6\xb7\x80\xe9\x9a\x94\xe8\x95\xbe\xe7\xaa\x88\xe9\xa5\xa8\xe6\x8c\xa8\xe7\x85\x85\xe7\x9f\xad\xe5\x8c\x99\xe7\xb2\x95\xe9\x95\x9c\xe8\xb5\xa3\xe6\x92\x95\xe5\xa2\xa9\xe9\x85\xac\xe9\xa6\x81\xe8\xb1\x8c\xe9\xa2\x90\xe6\x8a\x97\xe9\x85\xa3\xe6\xb0\x93\xe4\xbd\x91\xe6\x90\x81\xe5\x93\xad\xe9\x80\x92\xe8\x80\xb7\xe6\xb6\xa1\xe6\xa1\x83\xe8\xb4\xbb\xe7\xa2\xa3\xe6\x88\xaa\xe7\x98\xa6\xe6\x98\xad\xe9\x95\x8c\xe8\x94\x93\xe6\xb0\x9a\xe7\x94\xb2\xe7\x8c\x95\xe8\x95\xb4\xe8\x93\xac\xe6\x95\xa3\xe6\x8b\xbe\xe7\xba\x9b\xe7\x8b\xbc\xe7\x8c\xb7\xe9\x93\x8e\xe5\x9f\x8b\xe6\x97\x96\xe7\x9f\xbe\xe8\xae\xb3\xe5\x9b\x8a\xe7\xb3\x9c\xe8\xbf\x88\xe7\xb2\x9f\xe8\x9a\x82\xe7\xb4\xa7\xe9\xb2\xb3\xe7\x98\xa2\xe6\xa0\xbd\xe7\xa8\xbc\xe7\xbe\x8a\xe9\x94\x84\xe6\x96\x9f\xe7\x9d\x81\xe6\xa1\xa5\xe7\x93\xae\xe8\xb9\x99\xe7\xa5\x89\xe9\x86\xba\xe9\xbc\xbb\xe6\x98\xb1\xe5\x89\x83\xe8\xb7\xb3\xe7\xaf\xb1\xe8\xb7\xb7\xe8\x92\x9c\xe7\xbf\x8e\xe5\xae\x85\xe6\x99\x96\xe5\x97\x91\xe5\xa3\x91\xe5\xb3\xbb\xe7\x99\xab\xe5\xb1\x8f\xe7\x8b\xa0\xe9\x99\x8b\xe8\xa2\x9c\xe9\x80\x94\xe6\x86\x8e\xe7\xa5\x80\xe8\x8e\xb9\xe6\xbb\x9f\xe4\xbd\xb6\xe6\xba\xa5\xe8\x87\xa3\xe7\xba\xa6\xe7\x9b\x9b\xe5\xb3\xb0\xe7\xa3\x81\xe6\x85\xb5\xe5\xa9\xaa\xe6\x8b\xa6\xe8\x8e\x85\xe6\x9c\x95\xe9\xb9\xa6\xe7\xb2\xb2\xe8\xa3\xa4\xe5\x93\x8e\xe7\x96\xa1\xe5\xab\x96\xe7\x90\xb5\xe7\xaa\x9f\xe5\xa0\xaa\xe8\xb0\x9b\xe5\x98\x89\xe5\x84\xa1\xe9\xb3\x9d\xe6\x96\xa9\xe9\x83\xbe\xe9\xa9\xb8\xe9\x85\x8a\xe5\xa6\x84\xe8\x83\x9c\xe8\xb4\xba\xe5\xbe\x99\xe5\x82\x85\xe5\x99\x8c\xe9\x92\xa2\xe6\xa0\x85\xe5\xba\x87\xe6\x81\x8b\xe5\x8c\x9d\xe5\xb7\xaf\xe9\x82\x88\xe5\xb0\xb8\xe9\x94\x9a\xe7\xb2\x97\xe4\xbd\x9f\xe8\x9b\x9f\xe8\x96\xb9\xe7\xba\xb5\xe8\x9a\x8a\xe9\x83\x85\xe7\xbb\xa2\xe9\x94\x90\xe8\x8b\x97\xe4\xbf\x9e\xe7\xaf\x86\xe6\xb7\x86\xe8\x86\x80\xe9\xb2\x9c\xe7\x85\x8e\xe8\xaf\xb6\xe7\xa7\xbd\xe5\xaf\xbb\xe6\xb6\xae\xe5\x88\xba\xe6\x80\x80\xe5\x99\xb6\xe5\xb7\xa8\xe8\xa4\xb0\xe9\xad\x85\xe7\x81\xb6\xe7\x81\x8c\xe6\xa1\x89\xe8\x97\x95\xe8\xb0\x9c\xe8\x88\xb8\xe8\x96\x84\xe6\x90\x80\xe6\x81\xbd\xe5\x80\x9f\xe7\x89\xaf\xe7\x97\x89\xe6\xb8\xa5\xe6\x84\xbf\xe4\xba\x93\xe8\x80\x98\xe6\x9d\xa0\xe6\x9f\xa9\xe9\x94\x94\xe8\x9a\xb6\xe9\x92\xa3\xe7\x8f\x88\xe5\x96\x98\xe8\xb9\x92\xe5\xb9\xbd\xe8\xb5\x90\xe7\xa8\x97\xe6\x99\xa4\xe8\x8e\xb1\xe6\xb3\x94\xe6\x89\xaf\xe8\x82\xaf\xe8\x8f\xaa\xe8\xa3\x86\xe8\x85\xa9\xe8\xb1\x89\xe7\x96\x86\xe9\xaa\x9c\xe8\x85\x90\xe5\x80\xad\xe7\x8f\x8f\xe5\x94\x94\xe7\xb2\xae\xe4\xba\xa1\xe6\xb6\xa6\xe6\x85\xb0\xe4\xbc\xbd\xe6\xa9\x84\xe7\x8e\x84\xe8\xaa\x89\xe9\x86\x90\xe8\x83\x86\xe9\xbe\x8a\xe7\xb2\xbc\xe5\xa1\xac\xe9\x99\x87\xe5\xbd\xbc\xe5\x89\x8a\xe5\x97\xa3\xe7\xbb\xbe\xe8\x8a\xbd\xe5\xa6\x97\xe5\x9e\xad\xe7\x98\xb4\xe7\x88\xbd\xe8\x96\x8f\xe5\xaf\xa8\xe9\xbe\x88\xe6\xb3\xa0\xe5\xbc\xb9\xe8\xb5\xa2\xe6\xbc\xaa\xe7\x8c\xab\xe5\x98\xa7\xe6\xb6\x82\xe6\x81\xa4\xe5\x9c\xad\xe8\x8c\xa7\xe7\x83\xbd\xe5\xb1\x91\xe7\x97\x95\xe5\xb7\xbe\xe8\xb5\x96\xe8\x8d\xb8\xe5\x87\xb0\xe8\x85\xae\xe7\x95\x88\xe4\xba\xb5\xe8\xb9\xb2\xe5\x81\x83\xe8\x8b\x87\xe6\xbe\x9c\xe8\x89\xae\xe6\x8d\xa2\xe9\xaa\xba\xe7\x83\x98\xe8\x8b\x95\xe6\xa2\x93\xe9\xa2\x89\xe8\x82\x87\xe5\x93\x97\xe6\x82\x84\xe6\xb0\xa4\xe6\xb6\xa0\xe8\x91\xac\xe5\xb1\xa0\xe9\xb9\xad\xe6\xa4\x8d\xe7\xab\xba\xe4\xbd\xaf\xe8\xaf\xa3\xe9\xb2\x87\xe7\x98\x80\xe9\xb2\x85\xe9\x82\xa6\xe7\xa7\xbb\xe6\xbb\x81\xe5\x86\xaf\xe8\x80\x95\xe7\x99\x94\xe6\x88\x8c\xe8\x8c\xac\xe6\xb2\x81\xe5\xb7\xa9\xe6\x82\xa0\xe6\xb9\x98\xe6\xb4\xaa\xe7\x97\xb9\xe9\x94\x9f\xe5\xbe\xaa\xe8\xb0\x8b\xe8\x85\x95\xe9\xb3\x83\xe9\x92\xa0\xe6\x8d\x9e\xe7\x84\x89\xe8\xbf\x8e\xe7\xa2\xb1\xe4\xbc\xab\xe6\x80\xa5\xe6\xa6\xb7\xe5\xa5\x88\xe9\x82\x9d\xe5\x8d\xaf\xe8\xbe\x84\xe7\x9a\xb2\xe5\x8d\x9f\xe9\x86\x9b\xe7\x95\xb9\xe5\xbf\xa7\xe7\xa8\xb3\xe9\x9b\x84\xe6\x98\xbc\xe7\xbc\xa9\xe9\x98\x88\xe7\x9d\x91\xe6\x89\x8c\xe8\x80\x97\xe6\x9b\xa6\xe6\xb6\x85\xe6\x8d\x8f\xe7\x9e\xa7\xe9\x82\x95\xe6\xb7\x96\xe6\xbc\x89\xe9\x93\x9d\xe8\x80\xa6\xe7\xa6\xb9\xe6\xb9\x9b\xe5\x96\xbd\xe8\x8e\xbc\xe7\x90\x85\xe8\xaf\xb8\xe8\x8b\x8e\xe7\xba\x82\xe7\xa1\x85\xe5\xa7\x8b\xe5\x97\xa8\xe5\x82\xa5\xe7\x87\x83\xe8\x87\x82\xe8\xb5\x85\xe5\x98\x88\xe5\x91\x86\xe8\xb4\xb5\xe5\xb1\xb9\xe5\xa3\xae\xe8\x82\x8b\xe4\xba\x8d\xe8\x9a\x80\xe5\x8d\x85\xe8\xb1\xb9\xe8\x85\x86\xe9\x82\xac\xe8\xbf\xad\xe6\xb5\x8a}\xe7\xab\xa5\xe8\x9e\x82\xe6\x8d\x90\xe5\x9c\xa9\xe5\x8b\x90\xe8\xa7\xa6\xe5\xaf\x9e\xe6\xb1\x8a\xe5\xa3\xa4\xe8\x8d\xab\xe8\x86\xba\xe6\xb8\x8c\xe8\x8a\xb3\xe6\x87\xbf\xe9\x81\xb4\xe8\x9e\x88\xe6\xb3\xb0\xe8\x93\xbc\xe8\x9b\xa4\xe8\x8c\x9c\xe8\x88\x85\xe6\x9e\xab\xe6\x9c\x94\xe8\x86\x9d\xe7\x9c\x99\xe9\x81\xbf\xe6\xa2\x85\xe5\x88\xa4\xe9\xb9\x9c\xe7\x92\x9c\xe7\x89\x8d\xe7\xbc\x85\xe5\x9e\xab\xe8\x97\xbb\xe9\xbb\x94\xe4\xbe\xa5\xe6\x83\x9a\xe6\x87\x82\xe8\xb8\xa9\xe8\x85\xb0\xe8\x85\x88\xe6\x9c\xad\xe4\xb8\x9e\xe5\x94\xbe\xe6\x85\x88\xe9\xa1\xbf\xe6\x91\xb9\xe8\x8d\xbb\xe7\x90\xac~\xe6\x96\xa7\xe6\xb2\x88\xe6\xbb\x82\xe8\x83\x81\xe8\x83\x80\xe5\xb9\x84\xe8\x8e\x9cZ\xe5\x8c\x80\xe9\x84\x84\xe6\x8e\x8c\xe7\xbb\xb0\xe8\x8c\x8e\xe7\x84\x9a\xe8\xb5\x8b\xe8\x90\xb1\xe8\xb0\x91\xe6\xb1\x81\xe9\x93\x92\xe7\x9e\x8e\xe5\xa4\xba\xe8\x9c\x97\xe9\x87\x8e\xe5\xa8\x86\xe5\x86\x80\xe5\xbc\xaf\xe7\xaf\x81\xe6\x87\xb5\xe7\x81\x9e\xe9\x9a\xbd\xe8\x8a\xa1\xe8\x84\x98\xe4\xbf\x90\xe8\xbe\xa9\xe8\x8a\xaf\xe6\x8e\xba\xe5\x96\x8f\xe8\x86\x88\xe8\x9d\x88\xe8\xa7\x90\xe6\x82\x9a\xe8\xb8\xb9\xe8\x94\x97\xe7\x86\xa0\xe9\xbc\xa0\xe5\x91\xb5\xe6\x8a\x93\xe6\xa9\xbc\xe5\xb3\xa8\xe7\x95\x9c\xe7\xbc\x94\xe7\xa6\xbe\xe5\xb4\xad\xe5\xbc\x83\xe7\x86\x8a\xe6\x91\x92\xe5\x87\xb8\xe6\x8b\x97\xe7\xa9\xb9\xe8\x92\x99\xe6\x8a\x92\xe7\xa5\x9b\xe5\x8a\x9d\xe9\x97\xab\xe6\x89\xb3\xe9\x98\xb5\xe9\x86\x8c\xe8\xb8\xaa\xe5\x96\xb5\xe4\xbe\xa3\xe6\x90\xac\xe4\xbb\x85\xe8\x8d\xa7\xe8\xb5\x8e\xe8\x9d\xbe\xe7\x90\xa6\xe4\xb9\xb0\xe5\xa9\xa7\xe7\x9e\x84\xe5\xaf\x93\xe7\x9a\x8e\xe5\x86\xbb\xe8\xb5\x9d\xe7\xae\xa9\xe8\x8e\xab\xe7\x9e\xb0\xe9\x83\x8a\xe7\xac\xab\xe5\xa7\x9d\xe7\xad\x92\xe6\x9e\xaa\xe9\x81\xa3\xe7\x85\xb8\xe8\xa2\x8b\xe8\x88\x86\xe7\x97\xb1\xe6\xb6\x9b\xe6\xaf\x8d\xe3\x80\x87\xe5\x90\xaf\xe8\xb7\xb5\xe8\x80\x99\xe7\xbb\xb2\xe7\x9b\x98\xe9\x81\x82\xe6\x98\x8a\xe6\x90\x9e\xe6\xa7\xbf\xe8\xaf\xac\xe7\xba\xb0\xe6\xb3\x93\xe6\x83\xa8\xe6\xaa\xac\xe4\xba\xbb\xe8\xb6\x8aCo\xe6\x86\xa9\xe7\x86\xb5\xe7\xa5\xb7\xe9\x92\x92\xe6\x9a\xa7\xe5\xa1\x94\xe9\x98\x97\xe8\x83\xb0\xe5\x92\x84\xe5\xa8\xb6\xe9\xad\x94\xe7\x90\xb6\xe9\x92\x9e\xe9\x82\xbb\xe6\x89\xac\xe6\x9d\x89\xe6\xae\xb4\xe5\x92\xbd\xe5\xbc\x93\xe3\x80\x86\xe9\xab\xbb\xe3\x80\x91\xe5\x90\xad\xe6\x8f\xbd\xe9\x9c\x86\xe6\x8b\x84\xe6\xae\x96\xe8\x84\x86\xe5\xbd\xbb\xe5\xb2\xa9\xe8\x8a\x9d\xe5\x8b\x83\xe8\xbe\xa3\xe5\x89\x8c\xe9\x92\x9d\xe5\x98\x8e\xe7\x94\x84\xe4\xbd\x98\xe7\x9a\x96\xe4\xbc\xa6\xe6\x8e\x88\xe5\xbe\x95\xe6\x86\x94\xe6\x8c\xaa\xe7\x9a\x87\xe5\xba\x9e\xe7\xa8\x94\xe8\x8a\x9c\xe8\xb8\x8f\xe6\xba\xb4\xe5\x85\x96\xe5\x8d\x92\xe6\x93\xa2\xe9\xa5\xa5\xe9\xb3\x9e\xe7\x85\xb2\xe2\x80\xb0\xe8\xb4\xa6\xe9\xa2\x97\xe5\x8f\xbb\xe6\x96\xaf\xe6\x8d\xa7\xe9\xb3\x8d\xe7\x90\xae\xe8\xae\xb9\xe8\x9b\x99\xe7\xba\xbd\xe8\xb0\xad\xe9\x85\xb8\xe5\x85\x94\xe8\x8e\x92\xe7\x9d\x87\xe4\xbc\x9f\xe8\xa7\x91\xe7\xbe\xb2\xe5\x97\x9c\xe5\xae\x9c\xe8\xa4\x90\xe6\x97\x8e\xe8\xbe\x9b\xe5\x8d\xa6\xe8\xaf\x98\xe7\xad\x8b\xe9\x8e\x8f\xe6\xba\xaa\xe6\x8c\x9b\xe7\x86\x94\xe9\x98\x9c\xe6\x99\xb0\xe9\xb3\x85\xe4\xb8\xa2\xe5\xa5\x9a\xe7\x81\xb8\xe5\x91\xb1\xe7\x8c\xae\xe9\x99\x89\xe9\xbb\x9b\xe9\xb8\xaa\xe7\x94\xbe\xe8\x90\xa8\xe7\x96\xae\xe6\x8b\xaf\xe6\xb4\xb2\xe7\x96\xb9\xe8\xbe\x91\xe5\x8f\x99\xe6\x81\xbb\xe8\xb0\x92\xe5\x85\x81\xe6\x9f\x94\xe7\x83\x82\xe6\xb0\x8f\xe9\x80\x85\xe6\xbc\x86\xe6\x8b\x8e\xe6\x83\x8b\xe6\x89\x88\xe6\xb9\x9f\xe7\xba\xad\xe5\x95\x95\xe6\x8e\xac\xe6\x93\x9e\xe5\x93\xa5\xe5\xbf\xbd\xe6\xb6\xa4\xe9\xb8\xb5\xe9\x9d\xa1\xe9\x83\x97\xe7\x93\xb7\xe6\x89\x81\xe5\xbb\x8a\xe6\x80\xa8\xe9\x9b\x8f\xe9\x92\xae\xe6\x95\xa6E\xe6\x87\xa6\xe6\x86\x8b\xe6\xb1\x80\xe6\x8b\x9a\xe5\x95\x89\xe8\x85\x8c\xe5\xb2\xb8f\xe7\x97\xbc\xe7\x9e\x85\xe5\xb0\x8a\xe5\x92\x80\xe7\x9c\xa9\xe9\xa3\x99\xe5\xbf\x8c\xe4\xbb\x9d\xe8\xbf\xa6\xe7\x86\xac\xe6\xaf\xab\xe8\x83\xaf\xe7\xaf\x91\xe8\x8c\x84\xe8\x85\xba\xe5\x87\x84\xe8\x88\x9b\xe7\xa2\xb4\xe9\x94\xb5\xe8\xaf\xa7\xe7\xbe\xaf\xe5\xbe\x8c\xe6\xbc\x8f\xe6\xb1\xa4\xe5\xae\x93\xe4\xbb\x9e\xe8\x9a\x81\xe5\xa3\xb6\xe8\xb0\xb0\xe7\x9a\x91\xe9\x93\x84\xe6\xa3\xb0\xe7\xbd\x94\xe8\xbe\x85\xe6\x99\xb6\xe8\x8b\xa6\xe7\x89\x9f\xe9\x97\xbd\\\xe7\x83\x83\xe9\xa5\xae\xe8\x81\xbf\xe4\xb8\x99\xe8\x9b\xb3\xe6\x9c\xb1\xe7\x85\xa4\xe6\xb6\x94\xe9\xb3\x96\xe7\x8a\x81\xe7\xbd\x90\xe8\x8d\xbc\xe7\xa0\x92\xe6\xb7\xa6\xe5\xa6\xa4\xe9\xbb\x8f\xe6\x88\x8e\xe5\xad\x91\xe5\xa9\x95\xe7\x91\xbe\xe6\x88\xa2\xe9\x92\xb5\xe6\x9e\xa3\xe6\x8d\x8b\xe7\xa0\xa5\xe8\xa1\xa9\xe7\x8b\x99\xe6\xa1\xa0\xe7\xa8\xa3\xe9\x98\x8e\xe8\x82\x83\xe6\xa2\x8f\xe8\xaf\xab\xe5\xad\xaa\xe6\x98\xb6\xe5\xa9\x8a\xe8\xa1\xab\xe5\x97\x94\xe4\xbe\x83\xe5\xa1\x9e\xe8\x9c\x83\xe6\xa8\xb5\xe5\xb3\x92\xe8\xb2\x8c\xe5\xb1\xbf\xe6\xac\xba\xe7\xbc\xab\xe9\x98\x90\xe6\xa0\x96\xe8\xaf\x9f\xe7\x8f\x9e\xe8\x8d\xad\xe5\x90\x9d\xe8\x90\x8d\xe5\x97\xbd\xe6\x81\x82\xe5\x95\xbb\xe8\x9c\xb4\xe7\xa3\xac\xe5\xb3\x8b\xe4\xbf\xb8\xe8\xb1\xab\xe8\xb0\x8e\xe5\xbe\x8a\xe9\x95\x8d\xe9\x9f\xac\xe9\xad\x87\xe6\x99\xb4U\xe5\x9b\x9f\xe7\x8c\x9c\xe8\x9b\xae\xe5\x9d\x90\xe5\x9b\xbf\xe4\xbc\xb4\xe4\xba\xad\xe8\x82\x9d\xe4\xbd\x97\xe8\x9d\xa0\xe5\xa6\x83\xe8\x83\x9e\xe6\xbb\xa9\xe6\xa6\xb4\xe6\xb0\x96\xe5\x9e\xa9\xe8\x8b\x8b\xe7\xa0\xa3\xe6\x89\xaa\xe9\xa6\x8f\xe5\xa7\x93\xe8\xbd\xa9\xe5\x8e\x89\xe5\xa4\xa5\xe4\xbe\x88\xe7\xa6\x80\xe5\x9e\x92\xe5\xb2\x91\xe8\xb5\x8f\xe9\x92\x9b\xe8\xbe\x90\xe7\x97\x94\xe6\x8a\xab\xe7\xba\xb8\xe7\xa2\xb3\xe2\x80\x9c\xe5\x9d\x9e\xe8\xa0\x93\xe6\x8c\xa4\xe8\x8d\xa5\xe6\xb2\x85\xe6\x82\x94\xe9\x93\xa7\xe5\xb8\xbc\xe8\x92\x8c\xe8\x9d\x87apyng\xe5\x93\x80\xe6\xb5\x86\xe7\x91\xb6\xe5\x87\xbf\xe6\xa1\xb6\xe9\xa6\x88\xe7\x9a\xae\xe5\xa5\xb4\xe8\x8b\x9c\xe4\xbd\xa4\xe4\xbc\xb6\xe6\x99\x97\xe9\x93\xb1\xe7\x82\xac\xe4\xbc\x98\xe5\xbc\x8a\xe6\xb0\xa2\xe6\x81\x83\xe7\x94\xab\xe6\x94\xa5\xe7\xab\xaf\xe9\x94\x8c\xe7\x81\xb0\xe7\xa8\xb9\xe7\x82\x9d\xe6\x9b\x99\xe9\x82\x8b\xe4\xba\xa5\xe7\x9c\xb6\xe7\xa2\xbe\xe6\x8b\x89\xe8\x90\x9d\xe7\xbb\x94\xe6\x8d\xb7\xe6\xb5\x8d\xe8\x85\x8b\xe5\xa7\x91\xe8\x8f\x96\xe5\x87\x8c\xe6\xb6\x9e\xe9\xba\xbd\xe9\x94\xa2\xe6\xa1\xa8\xe6\xbd\xa2\xe7\xbb\x8e\xe9\x95\xb0\xe6\xae\x86\xe9\x94\x91\xe6\xb8\x9d\xe9\x93\xac\xe5\x9b\xb0\xe7\xbb\xbd\xe8\xa7\x8e\xe5\x8c\x88\xe7\xb3\x99\xe6\x9a\x91\xe8\xa3\xb9\xe9\xb8\x9f\xe7\x9b\x94\xe8\x82\xbd\xe8\xbf\xb7\xe7\xb6\xa6\xe3\x80\x8e\xe4\xba\xb3\xe4\xbd\x9d\xe4\xbf\x98\xe9\x92\xb4\xe8\xa7\x87\xe9\xaa\xa5\xe4\xbb\x86\xe7\x96\x9d\xe8\xb7\xaa\xe5\xa9\xb6\xe9\x83\xaf\xe7\x80\xb9\xe5\x94\x89\xe8\x84\x96\xe8\xb8\x9e\xe9\x92\x88\xe6\x99\xbe\xe5\xbf\x92\xe6\x89\xbc\xe7\x9e\xa9\xe5\x8f\x9b\xe6\xa4\x92\xe7\x96\x9f\xe5\x97\xa1\xe9\x82\x97\xe8\x82\x86\xe8\xb7\x86\xe7\x8e\xab\xe5\xbf\xa1\xe6\x8d\xa3\xe5\x92\xa7\xe5\x94\x86\xe8\x89\x84\xe8\x98\x91\xe6\xbd\xa6\xe7\xac\x9b\xe9\x98\x9a\xe6\xb2\xb8\xe6\xb3\xbb\xe6\x8e\x8a\xe8\x8f\xbd\xe8\xb4\xab\xe6\x96\xa5\xe9\xab\x82\xe5\xad\xa2\xe9\x95\x82\xe8\xb5\x82\xe9\xba\x9d\xe9\xb8\xbe\xe5\xb1\xa1\xe8\xa1\xac\xe8\x8b\xb7\xe6\x81\xaa\xe5\x8f\xa0\xe5\xb8\x8c\xe7\xb2\xa4\xe7\x88\xbb\xe5\x96\x9d\xe8\x8c\xab\xe6\x83\xac\xe9\x83\xb8\xe7\xbb\xbb\xe5\xba\xb8\xe6\x92\x85\xe7\xa2\x9f\xe5\xae\x84\xe5\xa6\xb9\xe8\x86\x9b\xe5\x8f\xae\xe9\xa5\xb5\xe5\xb4\x9b\xe5\x97\xb2\xe6\xa4\x85\xe5\x86\xa4\xe6\x90\x85\xe5\x92\x95\xe6\x95\x9b\xe5\xb0\xb9\xe5\x9e\xa6\xe9\x97\xb7\xe8\x9d\x89\xe9\x9c\x8e\xe5\x8b\xb0\xe8\xb4\xa5\xe8\x93\x91\xe6\xb3\xb8\xe8\x82\xa4\xe9\xb9\x8c\xe5\xb9\x8c\xe7\x84\xa6\xe6\xb5\xa0\xe9\x9e\x8d\xe5\x88\x81\xe8\x88\xb0\xe4\xb9\x99\xe7\xab\xbf\xe8\xa3\x94\xe3\x80\x82\xe8\x8c\xb5\xe5\x87\xbd\xe4\xbc\x8a\xe5\x85\x84\xe4\xb8\xa8\xe5\xa8\x9c\xe5\x8c\x8d\xe8\xac\x87\xe8\x8e\xaa\xe5\xae\xa5\xe4\xbc\xbc\xe8\x9d\xbd\xe7\xbf\xb3\xe9\x85\xaa\xe7\xbf\xa0\xe7\xb2\x91\xe8\x96\x87\xe7\xa5\xa2\xe9\xaa\x8f\xe8\xb5\xa0\xe5\x8f\xabQ\xe5\x99\xa4\xe5\x99\xbb\xe7\xab\x96\xe8\x8a\x97\xe8\x8e\xa0\xe6\xbd\xad\xe4\xbf\x8a\xe7\xbe\xbf\xe8\x80\x9cO\xe9\x83\xab\xe8\xb6\x81\xe5\x97\xaa\xe5\x9b\x9a\xe8\xb9\xb6\xe8\x8a\x92\xe6\xb4\x81\xe7\xac\x8b\xe9\xb9\x91\xe6\x95\xb2\xe7\xa1\x9d\xe5\x95\xb6\xe5\xa0\xa1\xe6\xb8\xb2\xe6\x8f\xa9\xe3\x80\x8f\xe6\x90\xba\xe5\xae\xbf\xe9\x81\x92\xe9\xa2\x8d\xe6\x89\xad\xe6\xa3\xb1\xe5\x89\xb2\xe8\x90\x9c\xe8\x94\xb8\xe8\x91\xb5\xe7\x90\xb4\xe6\x8d\x82\xe9\xa5\xb0\xe8\xa1\x99\xe8\x80\xbf\xe6\x8e\xa0\xe5\x8b\x9f\xe5\xb2\x82\xe7\xaa\x96\xe6\xb6\x9f\xe8\x94\xba\xe7\x98\xa4\xe6\x9f\x9e\xe7\x9e\xaa\xe6\x80\x9c\xe5\x8c\xb9\xe8\xb7\x9d\xe6\xa5\x94\xe7\x82\x9c\xe5\x93\x86\xe7\xa7\xa6\xe7\xbc\x8e\xe5\xb9\xbc\xe8\x8c\x81\xe7\xbb\xaa\xe7\x97\xa8\xe6\x81\xa8\xe6\xa5\xb8\xe5\xa8\x85\xe7\x93\xa6\xe6\xa1\xa9\xe9\x9b\xaa\xe5\xac\xb4\xe4\xbc\x8f\xe6\xa6\x94\xe5\xa6\xa5\xe9\x93\xbf\xe6\x8b\x8c\xe7\x9c\xa0\xe9\x9b\x8d\xe7\xbc\x87\xe2\x80\x98\xe5\x8d\x93\xe6\x90\x93\xe5\x93\x8c\xe8\xa7\x9e\xe5\x99\xa9\xe5\xb1\x88\xe5\x93\xa7\xe9\xab\x93\xe5\x92\xa6\xe5\xb7\x85\xe5\xa8\x91\xe4\xbe\x91\xe6\xb7\xab\xe8\x86\xb3\xe7\xa5\x9d\xe5\x8b\xbe\xe5\xa7\x8a\xe8\x8e\xb4\xe8\x83\x84\xe7\x96\x83\xe8\x96\x9b\xe8\x9c\xb7\xe8\x83\x9b\xe5\xb7\xb7\xe8\x8a\x99\xe8\x8a\x8b\xe7\x86\x99\xe9\x97\xb0\xe5\x8b\xbf\xe7\xaa\x83\xe7\x8b\xb1\xe5\x89\xa9\xe9\x92\x8f\xe5\xb9\xa2\xe9\x99\x9f\xe9\x93\x9b\xe6\x85\xa7\xe9\x9d\xb4\xe8\x80\x8dk\xe6\xb5\x99\xe6\xb5\x87\xe9\xa3\xa8\xe6\x83\x9f\xe7\xbb\x97\xe7\xa5\x9c\xe6\xbe\x88\xe5\x95\xbc\xe5\x92\xaa\xe7\xa3\xb7\xe6\x91\x9e\xe8\xaf\x85\xe9\x83\xa6\xe6\x8a\xb9\xe8\xb7\x83\xe5\xa3\xac\xe5\x90\x95\xe8\x82\x96\xe7\x90\x8f\xe9\xa2\xa4\xe5\xb0\xb4\xe5\x89\xa1\xe6\x8a\xa0\xe5\x87\x8b\xe8\xb5\x9a\xe6\xb3\x8a\xe6\xb4\xa5\xe5\xae\x95\xe6\xae\xb7\xe5\x80\x94\xe6\xb0\xb2\xe6\xbc\xab\xe9\x82\xba\xe6\xb6\x8e\xe6\x80\xa0$\xe5\x9e\xae\xe8\x8d\xac\xe9\x81\xb5\xe4\xbf\x8f\xe5\x8f\xb9\xe5\x99\xa2\xe9\xa5\xbd\xe8\x9c\x98\xe5\xad\x99\xe7\xad\xb5\xe7\x96\xbc\xe9\x9e\xad\xe7\xbe\xa7\xe7\x89\xa6\xe7\xae\xad\xe6\xbd\xb4c\xe7\x9c\xb8\xe7\xa5\xad\xe9\xab\xaf\xe5\x95\x96\xe5\x9d\xb3\xe6\x84\x81\xe8\x8a\xa9\xe9\xa9\xae\xe5\x80\xa1\xe5\xb7\xbd\xe7\xa9\xb0\xe6\xb2\x83\xe8\x83\x9a\xe6\x80\x92\xe5\x87\xa4\xe6\xa7\x9b\xe5\x89\x82\xe8\xb6\xb5\xe5\xab\x81v\xe9\x82\xa2\xe7\x81\xaf\xe9\x84\xa2\xe6\xa1\x90\xe7\x9d\xbd\xe6\xaa\x97\xe9\x94\xaf\xe6\xa7\x9f\xe5\xa9\xb7\xe5\xb5\x8b\xe5\x9c\xbb\xe8\xaf\x97\xe8\x95\x88\xe9\xa2\xa0\xe9\x81\xad\xe7\x97\xa2\xe8\x8a\xb8\xe6\x80\xaf\xe9\xa6\xa5\xe7\xab\xad\xe9\x94\x97\xe5\xbe\x9c\xe6\x81\xad\xe9\x81\x8d\xe7\xb1\x81\xe5\x89\x91\xe5\x98\xb1\xe8\x8b\xa1\xe9\xbe\x84\xe5\x83\xa7\xe6\xa1\x91\xe6\xbd\xb8\xe5\xbc\x98\xe6\xbe\xb6\xe6\xa5\xb9\xe6\x82\xb2\xe8\xae\xab\xe6\x84\xa4\xe8\x85\xa5\xe6\x82\xb8\xe8\xb0\x8d\xe6\xa4\xb9\xe5\x91\xa2\xe6\xa1\x93\xe8\x91\xad\xe6\x94\xab\xe9\x98\x80\xe7\xbf\xb0\xe8\xba\xb2\xe6\x95\x96\xe6\x9f\x91\xe9\x83\x8e\xe7\xac\xa8\xe6\xa9\x87\xe5\x91\x83\xe9\xad\x81\xe7\x87\x8e\xe8\x84\x93\xe8\x91\xa9\xe7\xa3\x8b\xe5\x9e\x9b\xe7\x8e\xba\xe7\x8b\xae\xe6\xb2\x93\xe7\xa0\x9c\xe8\x95\x8a\xe9\x94\xba\xe7\xbd\xb9\xe8\x95\x89\xe7\xbf\xb1\xe8\x99\x90\xe9\x97\xbe\xe5\xb7\xab\xe6\x97\xa6\xe8\x8c\xb1\xe5\xac\xb7\xe6\x9e\xaf\xe9\xb9\x8f\xe8\xb4\xa1\xe8\x8a\xb9\xe6\xb1\x9b\xe7\x9f\xab\xe7\xbb\x81\xe6\x8b\xa3\xe7\xa6\xba\xe4\xbd\x83\xe8\xae\xa3\xe8\x88\xab\xe6\x83\xaf\xe4\xb9\xb3\xe8\xb6\x8b\xe7\x96\xb2\xe6\x8c\xbd\xe5\xb2\x9a\xe8\x99\xbe\xe8\xa1\xbe\xe8\xa0\xb9\xe8\xb9\x82\xe9\xa3\x93\xe6\xb0\xa6\xe9\x93\x96\xe5\xad\xa9\xe7\xa8\x9e\xe7\x91\x9c\xe5\xa3\x85\xe6\x8e\x80\xe5\x8b\x98\xe5\xa6\x93\xe7\x95\x85\xe9\xab\x8bW\xe5\xba\x90\xe7\x89\xb2\xe8\x93\xbf\xe6\xa6\x95\xe7\xbb\x83\xe5\x9e\xa3\xe5\x94\xb1\xe9\x82\xb8\xe8\x8f\xb2\xe6\x98\x86\xe5\xa9\xba\xe7\xa9\xbf\xe7\xbb\xa1\xe9\xba\x92\xe8\x9a\xb1\xe6\x8e\x82\xe6\x84\x9a\xe6\xb3\xb7\xe6\xb6\xaa\xe6\xbc\xb3\xe5\xa6\xa9\xe5\xa8\x89\xe6\xa6\x84\xe8\xae\xb7\xe8\xa7\x85\xe6\x97\xa7\xe8\x97\xa4\xe7\x85\xae\xe5\x91\x9b\xe6\x9f\xb3\xe8\x85\x93\xe5\x8f\xad\xe5\xba\xb5\xe7\x83\xb7\xe9\x98\xa1\xe7\xbd\x82\xe8\x9c\x95\xe6\x93\x82\xe7\x8c\x96\xe5\x92\xbf\xe5\xaa\xb2\xe8\x84\x89\xe3\x80\x90\xe6\xb2\x8f\xe8\xb2\x85\xe9\xbb\xa0\xe7\x86\x8f\xe5\x93\xb2\xe7\x83\x81\xe5\x9d\xa6\xe9\x85\xb5\xe5\x85\x9c\xc3\x97\xe6\xbd\x87\xe6\x92\x92\xe5\x89\xbd\xe7\x8f\xa9\xe5\x9c\xb9\xe4\xb9\xbe\xe6\x91\xb8\xe6\xa8\x9f\xe5\xb8\xbd\xe5\x97\x92\xe8\xa5\x84\xe9\xad\x82\xe8\xbd\xbf\xe6\x86\xac\xe9\x94\xa1\xe3\x80\x95\xe5\x96\x83\xe7\x9a\x86\xe5\x92\x96\xe9\x9a\x85\xe8\x84\xb8\xe6\xae\x8b\xe6\xb3\xae\xe8\xa2\x82\xe9\xb9\x82\xe7\x8f\x8a\xe5\x9b\xa4\xe6\x8d\x86\xe5\x92\xa4\xe8\xaf\xaf\xe5\xbe\xa8\xe9\x97\xb9\xe6\xb7\x99\xe8\x8a\x8a\xe6\xb7\x8b\xe6\x80\x86\xe5\x9b\x97\xe6\x8b\xa8\xe6\xa2\xb3\xe6\xb8\xa4RG\xe7\xbb\xa8\xe8\x9a\x93\xe5\xa9\x80\xe5\xb9\xa1\xe7\x8b\xa9\xe9\xba\xbe\xe8\xb0\xa2\xe5\x94\xa2\xe8\xa3\xb8\xe6\x97\x8c\xe4\xbc\x89\xe7\xba\xb6\xe8\xa3\x82\xe9\xa9\xb3\xe7\xa0\xbc\xe5\x92\x9b\xe6\xbe\x84\xe6\xa8\xa8\xe8\xb9\x88\xe5\xae\x99\xe6\xbe\x8d\xe5\x80\x8d\xe8\xb2\x94\xe6\x93\x8d\xe5\x8b\x87\xe8\x9f\xa0\xe6\x91\x88\xe7\xa0\xa7\xe8\x99\xac\xe5\xa4\x9f\xe7\xbc\x81\xe6\x82\xa6\xe8\x97\xbf\xe6\x92\xb8\xe8\x89\xb9\xe6\x91\x81\xe6\xb7\xb9\xe8\xb1\x87\xe8\x99\x8e\xe6\xa6\xad\xcb\x89\xe5\x90\xb1d\xc2\xb0\xe5\x96\xa7\xe8\x8d\x80\xe8\xb8\xb1\xe4\xbe\xae\xe5\xa5\x8b\xe5\x81\x95\xe9\xa5\xb7\xe7\x8a\x8d\xe6\x83\xae\xe5\x9d\x91\xe7\x92\x8e\xe5\xbe\x98\xe5\xae\x9b\xe5\xa6\x86\xe8\xa2\x88\xe5\x80\xa9\xe7\xaa\xa6\xe6\x98\x82\xe8\x8d\x8f\xe4\xb9\x96K\xe6\x80\x85\xe6\x92\xb0\xe9\xb3\x99\xe7\x89\x99\xe8\xa2\x81\xe9\x85\x9eX\xe7\x97\xbf\xe7\x90\xbc\xe9\x97\xb8\xe9\x9b\x81\xe8\xb6\xbe\xe8\x8d\x9a\xe8\x99\xbb\xe6\xb6\x9d\xe3\x80\x8a\xe6\x9d\x8f\xe9\x9f\xad\xe5\x81\x88\xe7\x83\xa4\xe7\xbb\xab\xe9\x9e\x98\xe5\x8d\x89\xe7\x97\x87\xe9\x81\xa2\xe8\x93\xa5\xe8\xaf\x8b\xe6\x9d\xad\xe8\x8d\xa8\xe5\x8c\x86\xe7\xab\xa3\xe7\xb0\xaa\xe8\xbe\x99\xe6\x95\x95\xe8\x99\x9e\xe4\xb8\xb9\xe7\xbc\xad\xe5\x92\xa9\xe9\xbb\x9fm\xe6\xb7\xa4\xe7\x91\x95\xe5\x92\x82\xe9\x93\x89\xe7\xa1\xbc\xe8\x8c\xa8\xe5\xb6\x82\xe7\x97\x92\xe7\x95\xb8\xe6\x95\xac\xe6\xb6\xbf\xe7\xb2\xaa\xe7\xaa\x98\xe7\x86\x9f\xe5\x8f\x94\xe5\xab\x94\xe7\x9b\xbe\xe5\xbf\xb1\xe8\xa3\x98\xe6\x86\xbe\xe6\xa2\xb5\xe8\xb5\xa1\xe7\x8f\x99\xe5\x92\xaf\xe5\xa8\x98\xe5\xba\x99\xe6\xba\xaf\xe8\x83\xba\xe8\x91\xb1\xe7\x97\xaa\xe6\x91\x8a\xe8\x8d\xb7\xe5\x8d\x9e\xe4\xb9\x92\xe9\xab\xa6\xe5\xaf\x90\xe9\x93\xad\xe5\x9d\xa9\xe8\x83\x97\xe6\x9e\xb7\xe7\x88\x86\xe6\xba\x9f\xe5\x9a\xbc\xe7\xbe\x9a\xe7\xa0\xac\xe8\xbd\xa8\xe6\x83\x8a\xe6\x8c\xa0\xe7\xbd\x84\xe7\xab\xbd\xe8\x8f\x8f\xe6\xb0\xa7\xe6\xb5\x85\xe6\xa5\xa3\xe7\x9b\xbc\xe6\x9e\xa2\xe7\x82\xb8\xe9\x98\x86\xe6\x9d\xaf\xe8\xb0\x8f\xe5\x99\xac\xe6\xb7\x87\xe6\xb8\xba\xe4\xbf\xaa\xe7\xa7\x86\xe5\xa2\x93\xe6\xb3\xaa\xe8\xb7\xbb\xe7\xa0\x8c\xe7\x97\xb0\xe5\x9e\xa1\xe6\xb8\xa1\xe8\x80\xbd\xe9\x87\x9c\xe8\xae\xb6\xe9\xb3\x8e\xe7\x85\x9e\xe5\x91\x97\xe9\x9f\xb6\xe8\x88\xb6\xe7\xbb\xb7\xe9\xb9\xb3\xe7\xbc\x9c\xe6\x97\xb7\xe9\x93\x8a\xe7\x9a\xb1\xe9\xbe\x8c\xe6\xaa\x80\xe9\x9c\x96\xe5\xa5\x84\xe6\xa7\x90\xe8\x89\xb3\xe8\x9d\xb6\xe6\x97\x8b\xe5\x93\x9d\xe8\xb5\xb6\xe9\xaa\x9e\xe8\x9a\xa7\xe8\x85\x8a\xe7\x9b\x88\xe4\xb8\x81`\xe8\x9c\x9a\xe7\x9f\xb8\xe8\x9d\x99\xe7\x9d\xa8\xe5\x9a\x93\xe5\x83\xbb\xe9\xac\xbc\xe9\x86\xb4\xe5\xa4\x9c\xe5\xbd\x9d\xe7\xa3\x8a\xe7\xac\x94\xe6\x8b\x94\xe6\xa0\x80\xe7\xb3\x95\xe5\x8e\xa6\xe9\x82\xb0\xe7\xba\xab\xe9\x80\xad\xe7\xba\xa4\xe7\x9c\xa6\xe8\x86\x8a\xe9\xa6\x8d\xe8\xba\x87\xe7\x83\xaf\xe8\x98\xbc\xe5\x86\xac\xe8\xaf\xa4\xe6\x9a\x84\xe9\xaa\xb6\xe5\x93\x91\xe7\x98\xa0\xe3\x80\x8d\xe8\x87\x8a\xe4\xb8\x95\xe6\x84\x88\xe5\x92\xb1\xe8\x9e\xba\xe6\x93\x85\xe8\xb7\x8b\xe6\x90\x8f\xe7\xa1\xaa\xe8\xb0\x84\xe7\xac\xa0\xe6\xb7\xa1\xe5\x98\xbf\xe9\xaa\x85\xe8\xb0\xa7\xe9\xbc\x8e\xe7\x9a\x8b\xe5\xa7\x9a\xe6\xad\xbc\xe8\xa0\xa2\xe9\xa9\xbc\xe8\x80\xb3\xe8\x83\xac\xe6\x8c\x9d\xe6\xb6\xaf\xe7\x8b\x97\xe8\x92\xbd\xe5\xad\x93\xe7\x8a\xb7\xe5\x87\x89\xe8\x8a\xa6\xe7\xae\xb4\xe9\x93\xa4\xe5\xad\xa4\xe5\x98\x9b\xe5\x9d\xa4V\xe8\x8c\xb4\xe6\x9c\xa6\xe6\x8c\x9e\xe5\xb0\x96\xe6\xa9\x99\xe8\xaf\x9e\xe6\x90\xb4\xe7\xa2\x87\xe6\xb4\xb5\xe6\xb5\x9a\xe5\xb8\x9a\xe8\x9c\x8d\xe6\xbc\xaf\xe6\x9f\x98\xe5\x9a\x8e\xe8\xae\xbd\xe8\x8a\xad\xe8\x8d\xa4\xe5\x92\xbb\xe7\xa5\xa0\xe7\xa7\x89\xe8\xb7\x96\xe5\x9f\x83\xe5\x90\x93\xe7\xb3\xaf\xe7\x9c\xb7\xe9\xa6\x92\xe6\x83\xb9\xe5\xa8\xbc\xe9\xb2\x91\xe5\xab\xa9\xe8\xae\xb4\xe8\xbd\xae\xe7\x9e\xa5\xe9\x9d\xb6\xe8\xa4\x9a\xe4\xb9\x8f\xe7\xbc\xa4\xe5\xae\x8b\xe5\xb8\xa7\xe5\x88\xa0\xe9\xa9\xb1\xe7\xa2\x8e\xe6\x89\x91\xe4\xbf\xa9\xe4\xbf\x84\xe5\x81\x8f\xe6\xb6\xa3\xe7\xab\xb9\xe5\x99\xb1\xe7\x9a\x99\xe4\xbd\xb0\xe6\xb8\x9a\xe5\x94\xa7\xe6\x96\xa1#\xe9\x95\x89\xe5\x88\x80\xe5\xb4\x8e\xe7\xad\x90\xe4\xbd\xa3\xe5\xa4\xad\xe8\xb4\xb0\xe8\x82\xb4\xe5\xb3\x99\xe5\x93\x94\xe8\x89\xbf\xe5\x8c\x90\xe7\x89\xba\xe9\x95\x9b\xe7\xbc\x98\xe4\xbb\xa1\xe5\xab\xa1\xe5\x8a\xa3\xe6\x9e\xb8\xe5\xa0\x80\xe6\xa2\xa8\xe7\xb0\xbf\xe9\xb8\xad\xe8\x92\xb8\xe4\xba\xa6\xe7\xa8\xbd\xe6\xb5\xb4{\xe8\xa1\xa2\xe6\x9d\x9f\xe6\xa7\xb2j\xe9\x98\x81\xe6\x8f\x8d\xe7\x96\xa5\xe6\xa3\x8b\xe6\xbd\x8b\xe8\x81\xaa\xe7\xaa\x9c\xe4\xb9\x93\xe7\x9d\x9b\xe6\x8f\x92\xe5\x86\x89\xe9\x98\xaa\xe8\x8b\x8d\xe6\x90\xbd\xe3\x80\x8c\xe8\x9f\xbe\xe8\x9e\x9f\xe5\xb9\xb8\xe4\xbb\x87\xe6\xa8\xbd\xe6\x92\x82\xe6\x85\xa2\xe8\xb7\xa4\xe5\xb9\x94\xe4\xbf\x9a\xe6\xb7\x85\xe8\xa6\x83\xe8\xa7\x8a\xe6\xba\xb6\xe5\xa6\x96\xe5\xb8\x9b\xe4\xbe\xa8\xe6\x9b\xb0\xe5\xa6\xbe\xe6\xb3\x97 """"""\n'"
train/keras-train/model.py,0,"b'# -*- coding: utf-8 -*-\nfrom keras.layers import Flatten, BatchNormalization, Permute, TimeDistributed, Dense, Bidirectional, GRU\nfrom keras.layers import Input, Conv2D, MaxPooling2D, ZeroPadding2D\nfrom keras.models import Model\nrnnunit = 256\nfrom keras import backend as K\n\nfrom keras.layers import Lambda\nfrom keras.optimizers import SGD\n\n\ndef ctc_lambda_func(args):\n    y_pred, labels, input_length, label_length = args\n    # print(""cccccccccc:"",y_pred,labels,input_length,label_length)\n    y_pred = y_pred[:, 2:, :]\n\n    return K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\n\ndef get_model(height, nclass,learning_rate):\n    input = Input(shape=(height, None, 1), name=\'the_input\')\n    m = Conv2D(64, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv1\')(input)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=\'pool1\')(m)\n    m = Conv2D(128, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv2\')(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=\'pool2\')(m)\n    m = Conv2D(256, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv3\')(m)\n    m = Conv2D(256, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv4\')(m)\n\n    m = ZeroPadding2D(padding=(0, 1))(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 1), padding=\'valid\', name=\'pool3\')(m)\n\n    m = Conv2D(512, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv5\')(m)\n    m = BatchNormalization(axis=1)(m)\n    m = Conv2D(512, kernel_size=(3, 3), activation=\'relu\', padding=\'same\', name=\'conv6\')(m)\n    m = BatchNormalization(axis=1)(m)\n    m = ZeroPadding2D(padding=(0, 1))(m)\n    m = MaxPooling2D(pool_size=(2, 2), strides=(2, 1), padding=\'valid\', name=\'pool4\')(m)\n    m = Conv2D(512, kernel_size=(2, 2), activation=\'relu\', padding=\'valid\', name=\'conv7\')(m)\n\n    # Permute\xe5\xb1\x82\xe5\xb0\x86\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\xe6\x8c\x89\xe7\x85\xa7\xe7\xbb\x99\xe5\xae\x9a\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe6\x8e\x92\xef\xbc\x8c\xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x8c\xe5\xbd\x93\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86RNN\xe5\x92\x8cCNN\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x97\xb6\xef\xbc\x8c\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe7\x94\xa8\xe5\x88\xb0\xe8\xaf\xa5\xe5\xb1\x82\xe3\x80\x82\n    m = Permute((2, 1, 3), name=\'permute\')(m)\n    m = TimeDistributed(Flatten(), name=\'timedistrib\')(m)\n    # cnn\xe4\xb9\x8b\xe5\x90\x8e\xe9\x93\xbe\xe6\x8e\xa5\xe5\x8f\x8c\xe5\x90\x91GRU\xef\xbc\x8c\xe5\x8f\x8c\xe5\x90\x91GRU\xe4\xbc\x9a\xe8\xbe\x93\xe5\x87\xba\xe5\x9b\xba\xe5\xae\x9a\xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaaencode\xe7\x9a\x84\xe8\xbf\x87\xe7\xa8\x8b\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe5\x86\x8d\xe8\xbf\x9e\xe6\x8e\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x8c\xe5\x90\x91GRU\xef\xbc\x8c\xe5\xaf\xb9\xe8\xaf\xa5\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa7\xa3\xe7\xa0\x81\n    # \xe8\xaf\xa5\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe4\xb8\xba\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba256\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n    # cnn\xe4\xb9\x8b\xe5\x90\x8e\xe8\xbf\x9e\xe6\x8e\xa5\xe5\x8f\x8c\xe5\x90\x91GRU\n    m = Bidirectional(GRU(rnnunit, return_sequences=True), name=\'blstm1\')(m)\n    # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82-rnnunit\xe4\xb8\xba\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\xb4\xe5\xba\xa6\n    m = Dense(rnnunit, name=\'blstm1_out\', activation=\'linear\')(m)\n    # \xe8\xbf\x9e\xe6\x8e\xa5\xe5\x8f\x8c\xe5\x90\x91GRU\n    m = Bidirectional(GRU(rnnunit, return_sequences=True), name=\'blstm2\')(m)\n    # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xbe\x93\xe5\x87\xba\n    y_pred = Dense(nclass, name=\'blstm2_out\', activation=\'softmax\')(m)\n    # \xe7\xa1\xae\xe5\xae\x9a\xe6\xa8\xa1\xe5\x9e\x8b\n    basemodel = Model(inputs=input, outputs=y_pred)\n\n    labels = Input(name=\'the_labels\', shape=[None, ], dtype=\'float32\')\n    input_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n    label_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n    \n    loss_out = Lambda(ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n    model = Model(inputs=[input, labels, input_length, label_length], outputs=[loss_out])\n    sgd = SGD(lr=learning_rate, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n    # sgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n    # model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=\'adadelta\')\n    model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n    model.summary()\n    return model, basemodel\n'"
train/keras-train/train.py,0,"b'# -*- coding: utf-8 -*-\nimport dataset\nimport keys\nimport numpy as np\nimport torch\n\ncharacters = keys.alphabet[:]\nfrom model import get_model\n\nnclass = len(characters) + 1\n\ntrainroot = \'../data/lmdb/train\'\nvalroot = \'../data/lmdb/val\'\nbatchSize = 32\nworkers = 4\nimgH = 32\nimgW = 256\nkeep_ratio = False\nrandom_sample = False\n\n\ndef one_hot(text, length=10, characters=characters):\n    label = np.zeros(length)\n    # print(type(text))\n    for i, char in enumerate(text):\n        index = characters.find(char)\n        if index == -1:\n            index = characters.find(u\' \')\n        # print(i,char,length)\n        # if i < length:\n        label[i] = index\n    return label\n\n\nn_len = 10\n\n\ndef gen(loader, flag=\'train\'):\n    while True:\n        i = 0\n        n = len(loader)\n        for X, Y in loader:\n            X = X.numpy()\n            X = X.reshape((-1, imgH, imgW, 1))\n            if flag == \'test\':\n                Y = Y.numpy()\n\n            Y = np.array(Y)\n            Length = int(imgW / 4) - 1\n            batchs = X.shape[0]\n            # Y = Y.numpy()\n            if i > n - 1:\n                i = 0\n                break\n\n            yield [\n                X, Y,\n                np.ones(batchs) * int(Length),\n                np.ones(batchs) * n_len\n            ], np.ones(batchs)\n\n\nif random_sample:\n    sampler = dataset.randomSequentialSampler(train_dataset, batchSize)\nelse:\n    sampler = None\ntrain_dataset = dataset.lmdbDataset(root=trainroot, target_transform=one_hot)\n\ntrain_loader = torch.utils.data.DataLoader(\n    train_dataset,\n    batch_size=batchSize,\n    shuffle=True,\n    sampler=sampler,\n    num_workers=int(workers),\n    collate_fn=dataset.alignCollate(\n        imgH=imgH, imgW=imgW, keep_ratio=keep_ratio))\n\ntest_dataset = dataset.lmdbDataset(\n    root=valroot,\n    transform=dataset.resizeNormalize((imgW, imgH)),\n    target_transform=one_hot)\n\ntest_loader = torch.utils.data.DataLoader(\n    test_dataset, shuffle=True, batch_size=batchSize, num_workers=int(workers))\n\nif __name__ == \'__main__\':\n    from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\n\n    model, basemodel = get_model(height=imgH, nclass=nclass)\n    import os\n\n    if os.path.exists(\n            \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/save_model/my_model_keras.h5\'\n    ):\n        basemodel.load_weights(\n            \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/save_model/my_model_keras.h5\'\n        )\n\n    ##\xe6\xb3\xa8\xe6\x84\x8f\xe6\xad\xa4\xe5\xa4\x84\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x98\xafmodel\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\n    checkpointer = ModelCheckpoint(\n        filepath=\n        ""/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/save_model/my_model_keras.h5"",\n        monitor=\'val_loss\',\n        verbose=0,\n        save_weights_only=False,\n        save_best_only=True)\n    rlu = ReduceLROnPlateau(\n        monitor=\'val_loss\',\n        factor=0.1,\n        patience=1,\n        verbose=0,\n        mode=\'auto\',\n        epsilon=0.0001,\n        cooldown=0,\n        min_lr=0)\n\n    model.fit_generator(\n        gen(train_loader, flag=\'train\'),\n        steps_per_epoch=102400,\n        epochs=200,\n        validation_data=gen(test_loader, flag=\'test\'),\n        callbacks=[checkpointer, rlu],\n        validation_steps=1024)\n'"
train/keras-train/trainbatch.py,2,"b'# -*- coding: utf-8 -*-\nimport dataset\nimport keys_keras\nimport numpy as np\nimport torch\nimport time\nimport os\nimport sys\nsys.path.insert(0, os.getcwd())\nimport tensorflow as tf\nimport pydot\nimport graphviz\nimport keras.backend.tensorflow_backend as KTF\nfrom keras.callbacks import TensorBoard\nfrom keras.utils import plot_model\n\ncharacters = keys_keras.alphabet[:]\nfrom model import get_model\nnclass = len(characters) + 1\ntrainroot = \'../data/lmdb/train\'\nvalroot = \'../data/lmdb/val\'\n# modelPath = \'../pretrain-models/keras.hdf5\'\nmodelPath = \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/save_model/my_model_keras.h5\'\nworkers = 4\nimgH = 32\nimgW = 256\nkeep_ratio = False\nrandom_sample = False\nbatchSize = 32\ntestSize = 16\nn_len = 50\nloss = 1000\ninterval = 50\nLEARNING_RATE = 0.01\nLearning_decay_step = 20000\nPERCEPTION = 0.3\nEPOCH_NUMS = 1000000\nMODEL_PATH = \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/save_model\'\nLOG_FILE = \'log.txt\'\nSUMMARY_PATH = \'./log/\'\nif not os.path.exists(MODEL_PATH):\n    print(\'Creating save model path!!\')\n    os.makedirs(MODEL_PATH)\nif not os.path.exists(SUMMARY_PATH):\n    os.makedirs(SUMMARY_PATH)\n\nmodel, basemodel = get_model(\n    height=imgH, nclass=nclass, learning_rate=LEARNING_RATE)\n\nconfig = tf.ConfigProto(intra_op_parallelism_threads=2)\nconfig.gpu_options.per_process_gpu_memory_fraction = PERCEPTION\nKTF.set_session(tf.Session(config=config))\n\n# \xe5\x8a\xa0\xe8\xbd\xbd\xe9\xa2\x84\xe8\xae\xad\xe7\xbb\x83\xe5\x8f\x82\xe6\x95\xb0\nif os.path.exists(modelPath):\n    # basemodel.load_weights(modelPath)\n    model.load_weights(modelPath)\n\nplot_model(basemodel, to_file=\'basemodel.png\')\nplot_model(model, to_file=\'model.png\')\n\n\ndef one_hot(text, length=10, characters=characters):\n    label = np.zeros(length)\n    for i, char in enumerate(text):\n        index = characters.find(char)\n        if index == -1:\n            index = characters.find(u\' \')\n        if i < length:\n            label[i] = index\n    return label\n\n\n# \xe5\xaf\xbc\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\nif random_sample:\n    sampler = dataset.randomSequentialSampler(train_dataset, batchSize)\nelse:\n    sampler = None\ntrain_dataset = dataset.lmdbDataset(root=trainroot, target_transform=one_hot)\n# print(len(train_dataset))\n\ntest_dataset = dataset.lmdbDataset(\n    root=valroot,\n    transform=dataset.resizeNormalize((imgW, imgH)),\n    target_transform=one_hot)\n\n# \xe7\x94\x9f\xe6\x88\x90\xe8\xae\xad\xe7\xbb\x83\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\ntrain_loader = torch.utils.data.DataLoader(\n    train_dataset,\n    batch_size=batchSize,\n    shuffle=True,\n    sampler=sampler,\n    num_workers=int(workers),\n    collate_fn=dataset.alignCollate(\n        imgH=imgH, imgW=imgW, keep_ratio=keep_ratio))\n\ntest_loader = torch.utils.data.DataLoader(\n    test_dataset, batch_size=testSize, shuffle=True, num_workers=int(workers))\n\nj = 0\nprint(\'Strat training!!\')\nfor i in range(EPOCH_NUMS):\n    for X, Y in train_loader:\n        start = time.time()\n        X = X.numpy()\n        X = X.reshape((-1, imgH, imgW, 1))\n        Y = np.array(Y)\n        Length = int(imgW / 4) - 2\n        batch = X.shape[0]\n        X_train, Y_train = [X, Y,\n                            np.ones(batch) * Length,\n                            np.ones(batch) * n_len], np.ones(batch)\n        print(\'IMG_SHAPE:\', np.shape(X))\n        print(\'LABEL_SHAPE:\', np.shape(Y))\n        # print(np.shape(X_train))\n        model.train_on_batch(X_train, Y_train)\n        if j % interval == 0:\n            times = time.time() - start\n            currentLoss_train = model.evaluate(X_train, Y_train)\n            X, Y = next(iter(test_loader))\n            X = X.numpy()\n            X = X.reshape((-1, imgH, imgW, 1))\n            Y = Y.numpy()\n            Y = np.array(Y)\n            batch = X.shape[0]\n            X_val, Y_val = [\n                X, Y, np.ones(batch) * Length,\n                np.ones(batch) * n_len], np.ones(batch)\n            crrentLoss = model.evaluate(X_val, Y_val)\n            print(\'Learning rate is: \', LEARNING_RATE)\n            now_time = time.strftime(\'%Y/%m/%d-%H:%M:%S\',\n                                     time.localtime(time.time()))\n            print(\'Time: [%s]--Step/Epoch/Total: [%d/%d/%d]\' % (now_time, j, i,\n                                                                EPOCH_NUMS))\n            print(\'\\tTraining Loss is: [{}]\'.format(currentLoss_train))\n            print(\'\\tVal Loss is: [{}]\'.format(crrentLoss))\n            print(\'\\tSpeed is: [{}] Samples/Secs\'.format(interval / times))\n            path = MODEL_PATH + \'/my_model_keras.h5\'\n            with open(LOG_FILE, mode=\'a\') as log_file:\n                log_str = now_time + \'----global_step:\' + str(\n                    j) + \'----loss:\' + str(loss) + \'\\n\'\n                log_file.writelines(log_str)\n            log_file.close()\n            print(\'\\tWriting to the file: log.txt\')\n            print(""\\tSave model to disk: {}"".format(path))\n            model.save(path)\n            if crrentLoss < loss:\n                loss = crrentLoss\n        if j > 0 and j % Learning_decay_step == 0:\n            LEARNING_RATE_ori = LEARNING_RATE\n            LEARNING_RATE = 0.5 * LEARNING_RATE\n            print(\'\\tUpdating Leaning rate from {} to {}\'.format(\n                LEARNING_RATE_ori, LEARNING_RATE))\n        j += 1\n'"
train/pytorch-train/crnn_main.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\nimport argparse\nimport os\nimport random\n# from manager_torch import GPUManager\nimport dataset\n# Alphabet = [e.encode(\'utf-8\') for e in alphabet]\nimport models.crnn as crnn\nimport numpy as np\nimport torch\nimport torch.backends.cudnn as cudnn\nimport torch.optim as optim\nimport torch.utils.data\nimport utils\nfrom keys import alphabet\nfrom torch.autograd import Variable\nfrom warpctc_pytorch import CTCLoss\n\n# with open(\'../run/char.txt\') as f:\n#    newChars = f.read().strip().decode(\'utf-8\')\n# alphabet += u\'\'.join(list(set(newChars) - set(alphabet)))\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    \'--trainroot\', help=\'path to dataset\', default=\'../data/lmdb/train\')\nparser.add_argument(\n    \'--valroot\', help=\'path to dataset\', default=\'../data/lmdb/val\')\nparser.add_argument(\n    \'--workers\', type=int, help=\'number of data loading workers\', default=4)\nparser.add_argument(\n    \'--batchSize\', type=int, default=128, help=\'input batch size\')\nparser.add_argument(\n    \'--imgH\',\n    type=int,\n    default=32,\n    help=\'the height of the input image to network\')\nparser.add_argument(\n    \'--imgW\',\n    type=int,\n    default=256,\n    help=\'the width of the input image to network\')\nparser.add_argument(\n    \'--nh\', type=int, default=256, help=\'size of the lstm hidden state\')\nparser.add_argument(\n    \'--niter\', type=int, default=1000000, help=\'number of epochs to train for\')\nparser.add_argument(\n    \'--lr\',\n    type=float,\n    default=0.005,\n    help=\'learning rate for Critic, default=0.00005\')\nparser.add_argument(\n    \'--beta1\', type=float, default=0.5, help=\'beta1 for adam. default=0.5\')\nparser.add_argument(\'--cuda\', action=\'store_true\', help=\'enables cuda\')\nparser.add_argument(\n    \'--ngpu\', type=int, default=1, help=\'number of GPUs to use\')\nparser.add_argument(\n    \'--crnn\',\n    help=""path to crnn (to continue training)"",\n    default=\n    \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/save_model/netCRNN.pth\'\n)\n# parser.add_argument(\'--crnn\', help=""path to crnn (to continue training)"",default=\'\')\nparser.add_argument(\'--alphabet\', default=alphabet)\nparser.add_argument(\n    \'--experiment\',\n    help=\'Where to store samples and models\',\n    default=\'./save_model\')\nparser.add_argument(\n    \'--displayInterval\', type=int, default=50, help=\'Interval to be displayed\')\nparser.add_argument(\n    \'--n_test_disp\',\n    type=int,\n    default=1000,\n    help=\'Number of samples to display when test\')\nparser.add_argument(\n    \'--valInterval\', type=int, default=100, help=\'Interval to be displayed\')\nparser.add_argument(\n    \'--saveInterval\', type=int, default=1000, help=\'Interval to be displayed\')\nparser.add_argument(\n    \'--adam\',\n    action=\'store_true\',\n    help=\'Whether to use adam (default is rmsprop)\')\nparser.add_argument(\n    \'--adadelta\',\n    action=\'store_true\',\n    help=\'Whether to use adadelta (default is rmsprop)\')\nparser.add_argument(\n    \'--keep_ratio\',\n    action=\'store_true\',\n    help=\'whether to keep ratio for image resize\')\nparser.add_argument(\n    \'--random_sample\',\n    action=\'store_true\',\n    help=\'whether to sample the dataset with random sampler\')\nopt = parser.parse_args()\nprint(opt)\nifUnicode = True\nif opt.experiment is None:\n    opt.experiment = \'expr\'\nos.system(\'mkdir {0}\'.format(opt.experiment))\n\nopt.manualSeed = random.randint(1, 10000)  # fix seed\nprint(""Random Seed: "", opt.manualSeed)\nrandom.seed(opt.manualSeed)\nnp.random.seed(opt.manualSeed)\ntorch.manual_seed(opt.manualSeed)\n\ncudnn.benchmark = True\n\nif torch.cuda.is_available() and not opt.cuda:\n    print(\n        ""WARNING: You have a CUDA device, so you should probably run with --cuda""\n    )\n\ntrain_dataset = dataset.lmdbDataset(root=opt.trainroot)\nassert train_dataset\nif not opt.random_sample:\n    sampler = dataset.randomSequentialSampler(train_dataset, opt.batchSize)\nelse:\n    sampler = None\ntrain_loader = torch.utils.data.DataLoader(\n    train_dataset,\n    batch_size=opt.batchSize,\n    shuffle=False,\n    sampler=sampler,\n    num_workers=int(opt.workers),\n    collate_fn=dataset.alignCollate(\n        imgH=opt.imgH, imgW=opt.imgW, keep_ratio=opt.keep_ratio))\ntest_dataset = dataset.lmdbDataset(\n    root=opt.valroot, transform=dataset.resizeNormalize((256, 32)))\n\nngpu = int(opt.ngpu)\nnh = int(opt.nh)\nalphabet = opt.alphabet\nnclass = len(alphabet) + 1\nnc = 1\n\nconverter = utils.strLabelConverter(alphabet)\ncriterion = CTCLoss()\n\n\n# custom weights initialization called on crnn\ndef weights_init(m):\n    classname = m.__class__.__name__\n    if classname.find(\'Conv\') != -1:\n        m.weight.data.normal_(0.0, 0.02)\n    elif classname.find(\'BatchNorm\') != -1:\n        m.weight.data.normal_(1.0, 0.02)\n        m.bias.data.fill_(0)\n\n\n# \xe5\x88\x9b\xe5\xbb\xba\xe7\xbd\x91\xe7\xbb\x9c\xe6\xa8\xa1\xe5\x9e\x8b\ncrnn = crnn.CRNN(opt.imgH, nc, nclass, nh, ngpu)\ncrnn.apply(weights_init)\nif opt.crnn != \'\':\n    print(\'loading pretrained model from %s\' % opt.crnn)\n    crnn.load_state_dict(torch.load(opt.crnn))\nprint(crnn)\n\nimage = torch.FloatTensor(opt.batchSize, 3, opt.imgH, opt.imgH)\ntext = torch.IntTensor(opt.batchSize * 5)\nlength = torch.IntTensor(opt.batchSize)\n\nif opt.cuda:\n    crnn.cuda()\n    image = image.cuda()\n    criterion = criterion.cuda()\n\nimage = Variable(image)\ntext = Variable(text)\nlength = Variable(length)\n\n# loss averager\nloss_avg = utils.averager()\n\n# setup optimizer\nif opt.adam:\n    optimizer = optim.Adam(\n        crnn.parameters(), lr=opt.lr, betas=(opt.beta1, 0.999))\nelif opt.adadelta:\n    optimizer = optim.Adadelta(crnn.parameters(), lr=opt.lr)\nelse:\n    optimizer = optim.RMSprop(crnn.parameters(), lr=opt.lr)\n\n\ndef val(net, dataset, criterion, max_iter=2):\n    print(\'Start val\')\n\n    for p in crnn.parameters():\n        p.requires_grad = False\n\n    net.eval()\n    data_loader = torch.utils.data.DataLoader(\n        dataset,\n        shuffle=True,\n        batch_size=opt.batchSize,\n        num_workers=int(opt.workers))\n    val_iter = iter(data_loader)\n\n    i = 0\n    n_correct = 0\n    loss_avg = utils.averager()\n\n    max_iter = min(max_iter, len(data_loader))\n    for i in range(max_iter):\n        data = val_iter.next()\n        i += 1\n        cpu_images, cpu_texts = data\n        batch_size = cpu_images.size(0)\n        utils.loadData(image, cpu_images)\n        if ifUnicode:\n            cpu_texts = [clean_txt(tx.decode(\'utf-8\')) for tx in cpu_texts]\n        t, l = converter.encode(cpu_texts)\n        utils.loadData(text, t)\n        utils.loadData(length, l)\n\n        preds = crnn(image)\n        preds_size = Variable(torch.IntTensor([preds.size(0)] * batch_size))\n        cost = criterion(preds, text, preds_size, length) / batch_size\n        loss_avg.add(cost)\n\n        _, preds = preds.max(2)\n        preds = preds.squeeze(2)\n        preds = preds.transpose(1, 0).contiguous().view(-1)\n        sim_preds = converter.decode(preds.data, preds_size.data, raw=False)\n        for pred, target in zip(sim_preds, cpu_texts):\n            if pred.strip() == target.strip():\n                n_correct += 1\n\n    raw_preds = converter.decode(\n        preds.data, preds_size.data, raw=True)[:opt.n_test_disp]\n    # for raw_pred, pred, gt in zip(raw_preds, sim_preds, cpu_texts):\n    # print((pred, gt))\n    # print\n    accuracy = n_correct / float(max_iter * opt.batchSize)\n    testLoss = loss_avg.val()\n    # print(\'Test loss: %f, accuray: %f\' % (testLoss, accuracy))\n    return testLoss, accuracy\n\n\ndef clean_txt(txt):\n    """"""\n    filter char where not in alphabet with \' \'\n    """"""\n    newTxt = u\'\'\n    for t in txt:\n        if t in alphabet:\n            newTxt += t\n        else:\n            newTxt += u\' \'\n    return newTxt\n\n\ndef trainBatch(net, criterion, optimizer, flage=False):\n    data = train_iter.next()\n    cpu_images, cpu_texts = data  ##decode utf-8 to unicode\n    if ifUnicode:\n        cpu_texts = [clean_txt(tx) for tx in cpu_texts]\n\n    batch_size = cpu_images.size(0)\n    utils.loadData(image, cpu_images)\n    t, l = converter.encode(cpu_texts)\n    utils.loadData(text, t)\n    utils.loadData(length, l)\n\n    preds = crnn(image)\n    preds_size = Variable(torch.IntTensor([preds.size(0)] * batch_size))\n    cost = criterion(preds, text, preds_size, length) / batch_size\n    crnn.zero_grad()\n    cost.backward()\n    if flage:\n        lr = 0.0001\n        optimizer = optim.Adadelta(crnn.parameters(), lr=lr)\n    optimizer.step()\n    return cost\n\n\nnum = 0\nlasttestLoss = 10000\ntestLoss = 10000\n\n\ndef delete(path):\n    """"""\n    \xe5\x88\xa0\xe9\x99\xa4\xe6\x96\x87\xe4\xbb\xb6\n    """"""\n    import os\n    import glob\n    paths = glob.glob(path + \'/*.pth\')\n    for p in paths:\n        os.remove(p)\n\n\nnumLoss = 0  ##\xe5\x88\xa4\xe6\x96\xad\xe8\xae\xad\xe7\xbb\x83\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8b\xe9\x99\x8d\n\nfor epoch in range(opt.niter):\n    train_iter = iter(train_loader)\n    i = 0\n    while i < len(train_loader):\n        # print(\'The step{} ........\\n\'.format(i))\n        for p in crnn.parameters():\n            p.requires_grad = True\n        crnn.train()\n        # if numLoss>50:\n        #    cost = trainBatch(crnn, criterion, optimizer,True)\n        #    numLoss = 0\n        # else:\n        cost = trainBatch(crnn, criterion, optimizer)\n        loss_avg.add(cost)\n        i += 1\n\n        # if i % opt.displayInterval == 0:\n        #    print(\'[%d/%d][%d/%d] Loss: %f\' %\n        #          (epoch, opt.niter, i, len(train_loader), loss_avg.val()))\n        #    loss_avg.reset()\n\n        if i % opt.valInterval == 0:\n            testLoss, accuracy = val(crnn, test_dataset, criterion)\n            # print(\'Test loss: %f, accuray: %f\' % (testLoss, accuracy))\n            print(""epoch:{},step:{},Test loss:{},accuracy:{},train loss:{}"".\n                  format(epoch, num, testLoss, accuracy, loss_avg.val()))\n            loss_avg.reset()\n            print(\'Save model to:\', opt.experiment)\n            torch.save(crnn.state_dict(), \'{}/netCRNN.pth\'.format(\n                opt.experiment))\n        # do checkpointing\n        num += 1\n        # lasttestLoss = min(lasttestLoss,testLoss)\n\n        if lasttestLoss > testLoss:\n            print(""The step {},last lost:{}, current: {},save model!"".format(\n                num, lasttestLoss, testLoss))\n            lasttestLoss = testLoss\n            # delete(opt.experiment)##\xe5\x88\xa0\xe9\x99\xa4\xe5\x8e\x86\xe5\x8f\xb2\xe6\xa8\xa1\xe5\x9e\x8b\n            torch.save(crnn.state_dict(), \'{}/netCRNN.pth\'.format(\n                opt.experiment))\n            numLoss = 0\n        else:\n            numLoss += 1\n'"
train/pytorch-train/dataset.py,0,"b""#!/usr/bin/python\n# encoding: utf-8\n\nimport random\nimport sys\n\nimport lmdb\nimport numpy as np\nimport six\nimport torch\nimport torchvision.transforms as transforms\nfrom PIL import Image\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import sampler\n\n\nclass lmdbDataset(Dataset):\n    def __init__(self, root=None, transform=None, target_transform=None):\n        self.env = lmdb.open(\n            root,\n            max_readers=1,\n            readonly=True,\n            lock=False,\n            readahead=False,\n            meminit=False)\n\n        if not self.env:\n            print('cannot creat lmdb from %s' % (root))\n            sys.exit(0)\n\n        with self.env.begin(write=False) as txn:\n            nSamples = int(txn.get('num-samples'.encode()))\n            self.nSamples = nSamples\n\n        self.transform = transform\n        self.target_transform = target_transform\n\n    def __len__(self):\n        return self.nSamples\n\n    def __getitem__(self, index):\n        assert index <= len(self), 'index range error'\n        index += 1\n        with self.env.begin(write=False) as txn:\n            img_key = 'image-%09d' % index\n            imgbuf = txn.get(img_key.encode())\n\n            buf = six.BytesIO()\n            buf.write(imgbuf)\n            buf.seek(0)\n            try:\n                img = Image.open(buf).convert('L')\n            except IOError:\n                print('Corrupted image for %d' % index)\n                return self[index + 1]\n\n            if self.transform is not None:\n                img = self.transform(img)\n\n            label_key = 'label-%09d' % index\n            label = str(txn.get(label_key.encode()), 'utf-8')\n\n            if self.target_transform is not None:\n                label = self.target_transform(label)\n\n        return (img, label)\n\n\nclass resizeNormalize(object):\n    def __init__(self, size, interpolation=Image.BILINEAR):\n        self.size = size\n        self.interpolation = interpolation\n        self.toTensor = transforms.ToTensor()\n\n    def __call__(self, img):\n        img = img.resize(self.size, self.interpolation)\n        img = self.toTensor(img)\n        img.sub_(0.5).div_(0.5)\n        return img\n\n\nclass randomSequentialSampler(sampler.Sampler):\n    def __init__(self, data_source, batch_size):\n        self.num_samples = len(data_source)\n        self.batch_size = batch_size\n\n    def __iter__(self):\n        n_batch = len(self) // self.batch_size\n        tail = len(self) % self.batch_size\n        index = torch.LongTensor(len(self)).fill_(0)\n        for i in range(n_batch):\n            random_start = random.randint(0, len(self) - self.batch_size)\n            batch_index = random_start + torch.range(0, self.batch_size - 1)\n            index[i * self.batch_size:(i + 1) * self.batch_size] = batch_index\n        # deal with tail\n        if tail:\n            random_start = random.randint(0, len(self) - self.batch_size)\n            tail_index = random_start + torch.range(0, tail - 1)\n            index[(i + 1) * self.batch_size:] = tail_index\n\n        return iter(index)\n\n    def __len__(self):\n        return self.num_samples\n\n\nclass alignCollate(object):\n    def __init__(self, imgH=32, imgW=100, keep_ratio=False, min_ratio=1):\n        self.imgH = imgH\n        self.imgW = imgW\n        self.keep_ratio = keep_ratio\n        self.min_ratio = min_ratio\n\n    def __call__(self, batch):\n        images, labels = zip(*batch)\n\n        imgH = self.imgH\n        imgW = self.imgW\n        if self.keep_ratio:\n            ratios = []\n            for image in images:\n                w, h = image.size\n                ratios.append(w / float(h))\n            ratios.sort()\n            max_ratio = ratios[-1]\n            imgW = int(np.floor(max_ratio * imgH))\n            imgW = max(imgH * self.min_ratio, imgW)  # assure imgH >= imgW\n\n        transform = resizeNormalize((imgW, imgH))\n        images = [transform(image) for image in images]\n        images = torch.cat([t.unsqueeze(0) for t in images], 0)\n\n        return images, labels\n"""
train/pytorch-train/keys.py,0,"b'# coding:UTF-8\nalphabet = u\'\\\'\xe7\x96\x97\xe7\xbb\x9a\xe8\xaf\x9a\xe5\xa8\x87\xe6\xba\x9c\xe9\xa2\x98\xe8\xb4\xbf\xe8\x80\x85\xe5\xbb\x96\xe6\x9b\xb4\xe7\xba\xb3\xe5\x8a\xa0\xe5\xa5\x89\xe5\x85\xac\xe4\xb8\x80\xe5\xb0\xb1\xe6\xb1\xb4\xe8\xae\xa1\xe4\xb8\x8e\xe8\xb7\xaf\xe6\x88\xbf\xe5\x8e\x9f\xe5\xa6\x87208-7\xe5\x85\xb6>:],\xef\xbc\x8c\xe9\xaa\x91\xe5\x88\x88\xe5\x85\xa8\xe6\xb6\x88\xe6\x98\x8f\xe5\x82\x88\xe5\xae\x89\xe4\xb9\x85\xe9\x92\x9f\xe5\x97\x85\xe4\xb8\x8d\xe5\xbd\xb1\xe5\xa4\x84\xe9\xa9\xbd\xe8\x9c\xbf\xe8\xb5\x84\xe5\x85\xb3\xe6\xa4\xa4\xe5\x9c\xb0\xe7\x98\xb8\xe4\xb8\x93\xe9\x97\xae\xe5\xbf\x96\xe7\xa5\xa8\xe5\xab\x89\xe7\x82\x8e\xe9\x9f\xb5\xe8\xa6\x81\xe6\x9c\x88\xe7\x94\xb0\xe8\x8a\x82\xe9\x99\x82\xe9\x84\x99\xe6\x8d\x8c\xe5\xa4\x87\xe6\x8b\xb3\xe4\xbc\xba\xe7\x9c\xbc\xe7\xbd\x91\xe7\x9b\x8e\xe5\xa4\xa7\xe5\x82\x8d\xe5\xbf\x83\xe4\xb8\x9c\xe6\x84\x89\xe6\xb1\x87\xe8\xb9\xbf\xe7\xa7\x91\xe6\xaf\x8f\xe4\xb8\x9a\xe9\x87\x8c\xe8\x88\xaa\xe6\x99\x8f\xe5\xad\x97\xe5\xb9\xb3\xe5\xbd\x95\xe5\x85\x8813\xe5\xbd\xa4\xe9\xb2\xb6\xe4\xba\xa7\xe7\xa8\x8d\xe7\x9d\xa3\xe8\x85\xb4\xe6\x9c\x89\xe8\xb1\xa1\xe5\xb2\xb3\xe6\xb3\xa8\xe7\xbb\x8d\xe5\x9c\xa8\xe6\xb3\xba\xe6\x96\x87\xe5\xae\x9a\xe6\xa0\xb8\xe5\x90\x8d\xe6\xb0\xb4\xe8\xbf\x87\xe7\x90\x86\xe8\xae\xa9\xe5\x81\xb7\xe7\x8e\x87\xe7\xad\x89\xe8\xbf\x99\xe5\x8f\x91\xe2\x80\x9d\xe4\xb8\xba\xe5\x90\xab\xe8\x82\xa5\xe9\x85\x89\xe7\x9b\xb8\xe9\x84\xb1\xe4\xb8\x83\xe7\xbc\x96\xe7\x8c\xa5\xe9\x94\x9b\xe6\x97\xa5\xe9\x95\x80\xe8\x92\x82\xe6\x8e\xb0\xe5\x80\x92\xe8\xbe\x86\xe6\xa0\xbe\xe6\xa0\x97\xe7\xbb\xbc\xe6\xb6\xa9\xe5\xb7\x9e\xe9\x9b\x8c\xe6\xbb\x91\xe9\xa6\x80\xe4\xba\x86\xe6\x9c\xba\xe5\x9d\x97\xe5\x8f\xb8\xe5\xae\xb0\xe7\x94\x99\xe5\x85\xb4\xe7\x9f\xbd\xe6\x8a\x9a\xe4\xbf\x9d\xe7\x94\xa8\xe6\xb2\xa7\xe7\xa7\xa9\xe5\xa6\x82\xe6\x94\xb6\xe6\x81\xaf\xe6\xbb\xa5\xe9\xa1\xb5\xe7\x96\x91\xe5\x9f\xa0!\xef\xbc\x81\xe5\xa7\xa5\xe5\xbc\x82\xe6\xa9\xb9\xe9\x92\x87\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\x84\xe7\x9a\x84\xe6\xa4\xb4\xe6\xb2\xab\xe5\x9b\xbd\xe7\xbb\xa5\xe7\x8d\xa0\xe6\x8a\xa5\xe5\xbc\x80\xe6\xb0\x91\xe8\x9c\x87\xe4\xbd\x95\xe5\x88\x86\xe5\x87\x87\xe9\x95\xbf\xe8\xae\xa5\xe8\x97\x8f\xe6\x8e\x8f\xe6\x96\xbd\xe7\xbe\xbd\xe4\xb8\xad\xe8\xae\xb2\xe6\xb4\xbe\xe5\x98\x9f\xe4\xba\xba\xe6\x8f\x90\xe6\xb5\xbc\xe9\x97\xb4\xe4\xb8\x96\xe8\x80\x8c\xe5\x8f\xa4\xe5\xa4\x9a\xe5\x80\xaa\xe5\x94\x87\xe9\xa5\xaf\xe6\x8e\xa7\xe5\xba\x9a\xe9\xa6\x96\xe8\xb5\x9b\xe8\x9c\x93\xe5\x91\xb3\xe6\x96\xad\xe5\x88\xb6\xe8\xa7\x89\xe6\x8a\x80\xe6\x9b\xbf\xe8\x89\xb0\xe6\xba\xa2\xe6\xbd\xae\xe5\xa4\x95\xe9\x92\xba\xe5\xa4\x96\xe6\x91\x98\xe6\x9e\x8b\xe5\x8a\xa8\xe5\x8f\x8c\xe5\x8d\x95\xe5\x95\xae\xe6\x88\xb7\xe6\x9e\x87\xe7\xa1\xae\xe9\x94\xa6\xe6\x9b\x9c\xe6\x9d\x9c\xe6\x88\x96\xe8\x83\xbd\xe6\x95\x88\xe9\x9c\x9c\xe7\x9b\x92\xe7\x84\xb6\xe4\xbe\x97\xe7\x94\xb5\xe6\x99\x81\xe6\x94\xbe\xe6\xad\xa5\xe9\xb9\x83\xe6\x96\xb0\xe6\x9d\x96\xe8\x9c\x82\xe5\x90\x92\xe6\xbf\x82\xe7\x9e\xac\xe8\xaf\x84\xe6\x80\xbb\xe9\x9a\x8d\xe5\xaf\xb9\xe7\x8b\xac\xe5\x90\x88\xe4\xb9\x9f\xe6\x98\xaf\xe5\xba\x9c\xe9\x9d\x92\xe5\xa4\xa9\xe8\xaf\xb2\xe5\xa2\x99\xe7\xbb\x84\xe6\xbb\xb4\xe7\xba\xa7\xe9\x82\x80\xe5\xb8\x98\xe7\xa4\xba\xe5\xb7\xb2\xe6\x97\xb6\xe9\xaa\xb8\xe4\xbb\x84\xe6\xb3\x85\xe5\x92\x8c\xe9\x81\xa8\xe5\xba\x97\xe9\x9b\x87\xe7\x96\xab\xe6\x8c\x81\xe5\xb7\x8d\xe8\xb8\xae\xe5\xa2\x83\xe5\x8f\xaa\xe4\xba\xa8\xe7\x9b\xae\xe9\x89\xb4\xe5\xb4\xa4\xe9\x97\xb2\xe4\xbd\x93\xe6\xb3\x84\xe6\x9d\x82\xe4\xbd\x9c\xe8\x88\xac\xe8\xbd\xb0\xe5\x8c\x96\xe8\xa7\xa3\xe8\xbf\x82\xe8\xaf\xbf\xe8\x9b\xad\xe7\x92\x80\xe8\x85\xbe\xe5\x91\x8a\xe7\x89\x88\xe6\x9c\x8d\xe7\x9c\x81\xe5\xb8\x88\xe5\xb0\x8f\xe8\xa7\x84\xe7\xa8\x8b\xe7\xba\xbf\xe6\xb5\xb7\xe5\x8a\x9e\xe5\xbc\x95\xe4\xba\x8c\xe6\xa1\xa7\xe7\x89\x8c\xe7\xa0\xba\xe6\xb4\x84\xe8\xa3\xb4\xe4\xbf\xae\xe5\x9b\xbe\xe7\x97\xab\xe8\x83\xa1\xe8\xae\xb8\xe7\x8a\x8a\xe4\xba\x8b\xe9\x83\x9b\xe5\x9f\xba\xe6\x9f\xb4\xe5\x91\xbc\xe9\xa3\x9f\xe7\xa0\x94\xe5\xa5\xb6\xe5\xbe\x8b\xe8\x9b\x8b\xe5\x9b\xa0\xe8\x91\x86\xe5\xaf\x9f\xe6\x88\x8f\xe8\xa4\x92\xe6\x88\x92\xe5\x86\x8d\xe6\x9d\x8e\xe9\xaa\x81\xe5\xb7\xa5\xe8\xb2\x82\xe6\xb2\xb9\xe9\xb9\x85\xe7\xab\xa0\xe5\x95\x84\xe4\xbc\x91\xe5\x9c\xba\xe7\xbb\x99\xe7\x9d\xa1\xe7\xba\xb7\xe8\xb1\x86\xe5\x99\xa8\xe6\x8d\x8e\xe8\xaf\xb4\xe6\x95\x8f\xe5\xad\xa6\xe4\xbc\x9a\xe6\xb5\x92\xe8\xae\xbe\xe8\xaf\x8a\xe6\xa0\xbc\xe5\xbb\x93\xe6\x9f\xa5\xe6\x9d\xa5\xe9\x9c\x93\xe5\xae\xa4\xe6\xba\x86\xef\xbf\xa0\xe8\xaf\xa1\xe5\xaf\xa5\xe7\x84\x95\xe8\x88\x9c\xe6\x9f\x92\xe7\x8b\x90\xe5\x9b\x9e\xe6\x88\x9f\xe7\xa0\xbe\xe5\x8e\x84\xe5\xae\x9e\xe7\xbf\xa9\xe5\xb0\xbf\xe4\xba\x94\xe5\x85\xa5\xe5\xbe\x84\xe6\x83\xad\xe5\x96\xb9\xe8\x82\xa1\xe5\xae\x87\xe7\xaf\x9d|;\xe7\xbe\x8e\xe6\x9c\x9f\xe4\xba\x91\xe4\xb9\x9d\xe7\xa5\xba\xe6\x89\xae\xe9\x9d\xa0\xe9\x94\x9d\xe6\xa7\x8c\xe7\xb3\xbb\xe4\xbc\x81\xe9\x85\xb0\xe9\x98\x8a\xe6\x9a\x82\xe8\x9a\x95\xe5\xbf\xbb\xe8\xb1\x81\xe6\x9c\xac\xe7\xbe\xb9\xe6\x89\xa7\xe6\x9d\xa1\xe9\x92\xa6H\xe7\x8d\x92\xe9\x99\x90\xe8\xbf\x9b\xe5\xad\xa3\xe6\xa5\xa6\xe4\xba\x8e\xe8\x8a\x98\xe7\x8e\x96\xe9\x93\x8b\xe8\x8c\xaf\xe6\x9c\xaa\xe7\xad\x94\xe7\xb2\x98\xe6\x8b\xac\xe6\xa0\xb7\xe7\xb2\xbe\xe6\xac\xa0\xe7\x9f\xa2\xe7\x94\xa5\xe5\xb8\xb7\xe5\xb5\xa9\xe6\x89\xa3\xe4\xbb\xa4\xe4\xbb\x94\xe9\xa3\x8e\xe7\x9a\x88\xe8\xa1\x8c\xe6\x94\xaf\xe9\x83\xa8\xe8\x93\x89\xe5\x88\xae\xe7\xab\x99\xe8\x9c\xa1\xe6\x95\x91\xe9\x92\x8a\xe6\xb1\x97\xe6\x9d\xbe\xe5\xab\x8c\xe6\x88\x90\xe5\x8f\xaf.\xe9\xb9\xa4\xe9\x99\xa2\xe4\xbb\x8e\xe4\xba\xa4\xe6\x94\xbf\xe6\x80\x95\xe6\xb4\xbb\xe8\xb0\x83\xe7\x90\x83\xe5\xb1\x80\xe9\xaa\x8c\xe9\xab\x8c\xe7\xac\xac\xe9\x9f\xab\xe8\xb0\x97\xe4\xb8\xb2\xe5\x88\xb0\xe5\x9c\x86\xe5\xb9\xb4\xe7\xb1\xb3/*\xe5\x8f\x8b\xe5\xbf\xbf\xe6\xa3\x80\xe5\x8c\xba\xe7\x9c\x8b\xe8\x87\xaa\xe6\x95\xa2\xe5\x88\x83\xe4\xb8\xaa\xe5\x85\xb9\xe5\xbc\x84\xe6\xb5\x81\xe7\x95\x99\xe5\x90\x8c\xe6\xb2\xa1\xe9\xbd\xbf\xe6\x98\x9f\xe8\x81\x86\xe8\xbd\xbc\xe6\xb9\x96\xe4\xbb\x80\xe4\xb8\x89\xe5\xbb\xba\xe8\x9b\x94\xe5\x84\xbf\xe6\xa4\x8b\xe6\xb1\x95\xe9\x9c\x87\xe9\xa2\xa7\xe9\xb2\xa4\xe8\xb7\x9f\xe5\x8a\x9b\xe6\x83\x85\xe7\x92\xba\xe9\x93\xa8\xe9\x99\xaa\xe5\x8a\xa1\xe6\x8c\x87\xe6\x97\x8f\xe8\xae\xad\xe6\xbb\xa6\xe9\x84\xa3\xe6\xbf\xae\xe6\x89\x92\xe5\x95\x86\xe7\xae\xb1\xe5\x8d\x81\xe5\x8f\xac\xe6\x85\xb7\xe8\xbe\x97\xe6\x89\x80\xe8\x8e\x9e\xe7\xae\xa1\xe6\x8a\xa4\xe8\x87\xad\xe6\xa8\xaa\xe7\xa1\x92\xe5\x97\x93\xe6\x8e\xa5\xe4\xbe\xa6\xe5\x85\xad\xe9\x9c\xb2\xe5\x85\x9a\xe9\xa6\x8b\xe9\xa9\xbe\xe5\x89\x96\xe9\xab\x98\xe4\xbe\xac\xe5\xa6\xaa\xe5\xb9\x82\xe7\x8c\x97\xe7\xbb\xba\xe9\xaa\x90\xe5\xa4\xae\xe9\x85\x90\xe5\xad\x9d\xe7\xad\x9d\xe8\xaf\xbe\xe5\xbe\x87\xe7\xbc\xb0\xe9\x97\xa8\xe7\x94\xb7\xe8\xa5\xbf\xe9\xa1\xb9\xe5\x8f\xa5\xe8\xb0\x99\xe7\x9e\x92\xe7\xa7\x83\xe7\xaf\x87\xe6\x95\x99\xe7\xa2\xb2\xe7\xbd\x9a\xe5\xa3\xb0\xe5\x91\x90\xe6\x99\xaf\xe5\x89\x8d\xe5\xaf\x8c\xe5\x98\xb4\xe9\xb3\x8c\xe7\xa8\x80\xe5\x85\x8d\xe6\x9c\x8b\xe5\x95\xac\xe7\x9d\x90\xe5\x8e\xbb\xe8\xb5\x88\xe9\xb1\xbc\xe4\xbd\x8f\xe8\x82\xa9\xe6\x84\x95\xe9\x80\x9f\xe6\x97\x81\xe6\xb3\xa2\xe5\x8e\x85\xe5\x81\xa5\xe8\x8c\xbc\xe5\x8e\xa5\xe9\xb2\x9f\xe8\xb0\x85\xe6\x8a\x95\xe6\x94\xb8\xe7\x82\x94\xe6\x95\xb0\xe6\x96\xb9\xe5\x87\xbb\xe5\x91\x8b\xe8\xb0\x88\xe7\xbb\xa9\xe5\x88\xab\xe6\x84\xab\xe5\x83\x9a\xe8\xba\xac\xe9\xb9\xa7\xe8\x83\xaa\xe7\x82\xb3\xe6\x8b\x9b\xe5\x96\x87\xe8\x86\xa8\xe6\xb3\xb5\xe8\xb9\xa6\xe6\xaf\x9b\xe7\xbb\x9354\xe8\xb0\xb1\xe8\xaf\x86\xe9\x99\x95\xe7\xb2\xbd\xe5\xa9\x9a\xe6\x8b\x9f\xe6\x9e\x84\xe4\xb8\x94\xe6\x90\x9c\xe4\xbb\xbb\xe6\xbd\x98\xe6\xaf\x94\xe9\x83\xa2\xe5\xa6\xa8\xe9\x86\xaa\xe9\x99\x80\xe6\xa1\x94\xe7\xa2\x98\xe6\x89\x8e\xe9\x80\x89\xe5\x93\x88\xe9\xaa\xb7\xe6\xa5\xb7\xe4\xba\xbf\xe6\x98\x8e\xe7\xbc\x86\xe8\x84\xaf\xe7\x9b\x91\xe7\x9d\xab\xe9\x80\xbb\xe5\xa9\xb5\xe5\x85\xb1\xe8\xb5\xb4\xe6\xb7\x9d\xe5\x87\xa1\xe6\x83\xa6\xe5\x8f\x8a\xe8\xbe\xbe\xe6\x8f\x96\xe8\xb0\xa9\xe6\xbe\xb9\xe5\x87\x8f\xe7\x84\xb0\xe8\x9b\xb9\xe7\x95\xaa\xe7\xa5\x81\xe6\x9f\x8f\xe5\x91\x98\xe7\xa6\x84\xe6\x80\xa1\xe5\xb3\xa4\xe9\xbe\x99\xe7\x99\xbd\xe5\x8f\xbd\xe7\x94\x9f\xe9\x97\xaf\xe8\xb5\xb7\xe7\xbb\x86\xe8\xa3\x85\xe8\xb0\x95\xe7\xab\x9f\xe8\x81\x9a\xe9\x92\x99\xe4\xb8\x8a\xe5\xaf\xbc\xe6\xb8\x8a\xe6\x8c\x89\xe8\x89\xbe\xe8\xbe\x98\xe6\x8c\xa1\xe8\x80\x92\xe7\x9b\xb9\xe9\xa5\xaa\xe8\x87\x80\xe8\xae\xb0\xe9\x82\xae\xe8\x95\x99\xe5\x8f\x97\xe5\x90\x84\xe5\x8c\xbb\xe6\x90\x82\xe6\x99\xae\xe6\xbb\x87\xe6\x9c\x97\xe8\x8c\xb8\xe5\xb8\xa6\xe7\xbf\xbb\xe9\x85\x9a(\xe5\x85\x89\xe5\xa0\xa4\xe5\xa2\x9f\xe8\x94\xb7\xe4\xb8\x87\xe5\xb9\xbb\xe3\x80\x93\xe7\x91\x99\xe8\xbe\x88\xe6\x98\xa7\xe7\x9b\x8f\xe4\xba\x98\xe8\x9b\x80\xe5\x90\x89\xe9\x93\xb0\xe8\xaf\xb7\xe5\xad\x90\xe5\x81\x87\xe9\x97\xbb\xe7\xa8\x8e\xe4\xba\x95\xe8\xaf\xa9\xe5\x93\xa8\xe5\xab\x82\xe5\xa5\xbd\xe9\x9d\xa2\xe7\x90\x90\xe6\xa0\xa1\xe9\xa6\x8a\xe9\xac\xa3\xe7\xbc\x82\xe8\x90\xa5\xe8\xae\xbf\xe7\x82\x96\xe5\x8d\xa0\xe5\x86\x9c\xe7\xbc\x80\xe5\x90\xa6\xe7\xbb\x8f\xe9\x92\x9a\xe6\xa3\xb5\xe8\xb6\x9f\xe5\xbc\xa0\xe4\xba\x9f\xe5\x90\x8f\xe8\x8c\xb6\xe8\xb0\xa8\xe6\x8d\xbb\xe8\xae\xba\xe8\xbf\xb8\xe5\xa0\x82\xe7\x8e\x89\xe4\xbf\xa1\xe5\x90\xa7\xe7\x9e\xa0\xe4\xb9\xa1\xe5\xa7\xac\xe5\xaf\xba\xe5\x92\xac\xe6\xba\x8f\xe8\x8b\x84\xe7\x9a\xbf\xe6\x84\x8f\xe8\xb5\x89\xe5\xae\x9d\xe5\xb0\x94\xe9\x92\xb0\xe8\x89\xba\xe7\x89\xb9\xe5\x94\xb3\xe8\xb8\x89\xe9\x83\xbd\xe8\x8d\xa3\xe5\x80\x9a\xe7\x99\xbb\xe8\x8d\x90\xe4\xb8\xa7\xe5\xa5\x87\xe6\xb6\xb5\xe6\x89\xb9\xe7\x82\xad\xe8\xbf\x91\xe7\xac\xa6\xe5\x82\xa9\xe6\x84\x9f\xe9\x81\x93\xe7\x9d\x80\xe8\x8f\x8a\xe8\x99\xb9\xe4\xbb\xb2\xe4\xbc\x97\xe6\x87\x88\xe6\xbf\xaf\xe9\xa2\x9e\xe7\x9c\xba\xe5\x8d\x97\xe9\x87\x8a\xe5\x8c\x97\xe7\xbc\x9d\xe6\xa0\x87\xe6\x97\xa2\xe8\x8c\x97\xe6\x95\xb4\xe6\x92\xbc\xe8\xbf\xa4\xe8\xb4\xb2\xe6\x8c\x8e\xe8\x80\xb1\xe6\x8b\x92\xe6\x9f\x90\xe5\xa6\x8d\xe5\x8d\xab\xe5\x93\x87\xe8\x8b\xb1\xe7\x9f\xb6\xe8\x97\xa9\xe6\xb2\xbb\xe4\xbb\x96\xe5\x85\x83\xe9\xa2\x86\xe8\x86\x9c\xe9\x81\xae\xe7\xa9\x97\xe8\x9b\xbe\xe9\xa3\x9e\xe8\x8d\x92\xe6\xa3\xba\xe5\x8a\xab\xe4\xb9\x88\xe5\xb8\x82\xe7\x81\xab\xe6\xb8\xa9\xe6\x8b\x88\xe6\xa3\x9a\xe6\xb4\xbc\xe8\xbd\xac\xe6\x9e\x9c\xe5\xa5\x95\xe5\x8d\xb8\xe8\xbf\xaa\xe4\xbc\xb8\xe6\xb3\xb3\xe6\x96\x97\xe9\x82\xa1\xe4\xbe\x84\xe6\xb6\xa8\xe5\xb1\xaf\xe8\x90\x8b\xe8\x83\xad\xe6\xb0\xa1\xe5\xb4\xae\xe6\x9e\x9e\xe6\x83\xa7\xe5\x86\x92\xe5\xbd\xa9\xe6\x96\x9c\xe6\x89\x8b\xe8\xb1\x9a\xe9\x9a\x8f\xe6\x97\xad\xe6\xb7\x91\xe5\xa6\x9e\xe5\xbd\xa2\xe8\x8f\x8c\xe5\x90\xb2\xe6\xb2\xb1\xe4\xba\x89\xe9\xa9\xaf\xe6\xad\xb9\xe6\x8c\x9f\xe5\x85\x86\xe6\x9f\xb1\xe4\xbc\xa0\xe8\x87\xb3\xe5\x8c\x85\xe5\x86\x85\xe5\x93\x8d\xe4\xb8\xb4\xe7\xba\xa2\xe5\x8a\x9f\xe5\xbc\xa9\xe8\xa1\xa1\xe5\xaf\x82\xe7\xa6\x81\xe8\x80\x81\xe6\xa3\x8d\xe8\x80\x86\xe6\xb8\x8d\xe7\xbb\x87\xe5\xae\xb3\xe6\xb0\xb5\xe6\xb8\x91\xe5\xb8\x83\xe8\xbd\xbd\xe9\x9d\xa5\xe5\x97\xac\xe8\x99\xbd\xe8\x8b\xb9\xe5\x92\xa8\xe5\xa8\x84\xe5\xba\x93\xe9\x9b\x89\xe6\xa6\x9c\xe5\xb8\x9c\xe5\x98\xb2\xe5\xa5\x97\xe7\x91\x9a\xe4\xba\xb2\xe7\xb0\xb8\xe6\xac\xa7\xe8\xbe\xb96\xe8\x85\xbf\xe6\x97\xae\xe6\x8a\x9b\xe5\x90\xb9\xe7\x9e\xb3\xe5\xbe\x97\xe9\x95\x93\xe6\xa2\x97\xe5\x8e\xa8\xe7\xbb\xa7\xe6\xbc\xbe\xe6\x84\xa3\xe6\x86\xa8\xe5\xa3\xab\xe7\xad\x96\xe7\xaa\x91\xe6\x8a\x91\xe8\xba\xaf\xe8\xa5\x9f\xe8\x84\x8f\xe5\x8f\x82\xe8\xb4\xb8\xe8\xa8\x80\xe5\xb9\xb2\xe7\xbb\xb8\xe9\xb3\x84\xe7\xa9\xb7\xe8\x97\x9c\xe9\x9f\xb3\xe6\x8a\x98\xe8\xaf\xa6)\xe4\xb8\xbe\xe6\x82\x8d\xe7\x94\xb8\xe7\x99\x8c\xe9\xbb\x8e\xe8\xb0\xb4\xe6\xad\xbb\xe7\xbd\xa9\xe8\xbf\x81\xe5\xaf\x92\xe9\xa9\xb7\xe8\xa2\x96\xe5\xaa\x92\xe8\x92\x8b\xe6\x8e\x98\xe6\xa8\xa1\xe7\xba\xa0\xe6\x81\xa3\xe8\xa7\x82\xe7\xa5\x96\xe8\x9b\x86\xe7\xa2\x8d\xe4\xbd\x8d\xe7\xa8\xbf\xe4\xb8\xbb\xe6\xbe\xa7\xe8\xb7\x8c\xe7\xad\x8f\xe4\xba\xac\xe9\x94\x8f\xe5\xb8\x9d\xe8\xb4\xb4\xe8\xaf\x81\xe7\xb3\xa0\xe6\x89\x8d\xe9\xbb\x84\xe9\xb2\xb8\xe7\x95\xa5\xe7\x82\xaf\xe9\xa5\xb1\xe5\x9b\x9b\xe5\x87\xba\xe5\x9b\xad\xe7\x8a\x80\xe7\x89\xa7\xe5\xae\xb9\xe6\xb1\x89\xe6\x9d\x86\xe6\xb5\x88\xe6\xb1\xb0\xe7\x91\xb7\xe9\x80\xa0\xe8\x99\xab\xe7\x98\xa9\xe6\x80\xaa\xe9\xa9\xb4\xe6\xb5\x8e\xe5\xba\x94\xe8\x8a\xb1\xe6\xb2\xa3\xe8\xb0\x94\xe5\xa4\x99\xe6\x97\x85\xe4\xbb\xb7\xe7\x9f\xbf\xe4\xbb\xa5\xe8\x80\x83su\xe5\x91\xa6\xe6\x99\x92\xe5\xb7\xa1\xe8\x8c\x85\xe5\x87\x86\xe8\x82\x9f\xe7\x93\xb4\xe8\xa9\xb9\xe4\xbb\x9f\xe8\xa4\x82\xe8\xaf\x91\xe6\xa1\x8c\xe6\xb7\xb7\xe5\xae\x81\xe6\x80\xa6\xe9\x83\x91\xe6\x8a\xbf\xe4\xba\x9b\xe4\xbd\x99\xe9\x84\x82\xe9\xa5\xb4\xe6\x94\x92\xe7\x8f\x91\xe7\xbe\xa4\xe9\x98\x96\xe5\xb2\x94\xe7\x90\xa8\xe8\x97\x93\xe9\xa2\x84\xe7\x8e\xaf\xe6\xb4\xae\xe5\xb2\x8c\xe5\xae\x80\xe6\x9d\xb2\xe7\x80\xb5\xe6\x9c\x80\xe5\xb8\xb8\xe5\x9b\xa1\xe5\x91\xa8\xe8\xb8\x8a\xe5\xa5\xb3\xe9\xbc\x93\xe8\xa2\xad\xe5\x96\x89\xe7\xae\x80\xe8\x8c\x83\xe8\x96\xaf\xe9\x81\x90\xe7\x96\x8f\xe7\xb2\xb1\xe9\xbb\x9c\xe7\xa6\xa7\xe6\xb3\x95\xe7\xae\x94\xe6\x96\xa4\xe9\x81\xa5\xe6\xb1\x9d\xe5\xa5\xa5\xe7\x9b\xb4\xe8\xb4\x9e\xe6\x92\x91\xe7\xbd\xae\xe7\xbb\xb1\xe9\x9b\x86\xe5\xa5\xb9\xe9\xa6\x85\xe9\x80\x97\xe9\x92\xa7\xe6\xa9\xb1\xe9\xad\x89[\xe6\x81\x99\xe8\xba\x81\xe5\x94\xa49\xe6\x97\xba\xe8\x86\x98\xe5\xbe\x85\xe8\x84\xbe\xe6\x83\xab\xe8\xb4\xad\xe5\x90\x97\xe4\xbe\x9d\xe7\x9b\xb2\xe5\xba\xa6\xe7\x98\xbf\xe8\xa0\x96\xe4\xbf\xbe\xe4\xb9\x8b\xe9\x95\x97\xe6\x8b\x87\xe9\xb2\xb5\xe5\x8e\x9d\xe7\xb0\xa7\xe7\xbb\xad\xe6\xac\xbe\xe5\xb1\x95\xe5\x95\x83\xe8\xa1\xa8\xe5\x89\x94\xe5\x93\x81\xe9\x92\xbb\xe8\x85\xad\xe6\x8d\x9f\xe6\xb8\x85\xe9\x94\xb6\xe7\xbb\x9f\xe6\xb6\x8c\xe5\xaf\xb8\xe6\xbb\xa8\xe8\xb4\xaa\xe9\x93\xbe\xe5\x90\xa0\xe5\x86\x88\xe4\xbc\x8e\xe8\xbf\xa5\xe5\x92\x8f\xe5\x90\x81\xe8\xa7\x88\xe9\x98\xb2\xe8\xbf\x85\xe5\xa4\xb1\xe6\xb1\xbe\xe9\x98\x94\xe9\x80\xb5\xe7\xbb\x80\xe8\x94\x91\xe5\x88\x97\xe5\xb7\x9d\xe5\x87\xad\xe5\x8a\xaa\xe7\x86\xa8\xe6\x8f\xaa\xe5\x88\xa9\xe4\xbf\xb1\xe7\xbb\x89\xe6\x8a\xa2\xe9\xb8\xa8\xe6\x88\x91\xe5\x8d\xb3\xe8\xb4\xa3\xe8\x86\xa6\xe6\x98\x93\xe6\xaf\x93\xe9\xb9\x8a\xe5\x88\xb9\xe7\x8e\xb7\xe5\xb2\xbf\xe7\xa9\xba\xe5\x98\x9e\xe7\xbb\x8a\xe6\x8e\x92\xe6\x9c\xaf\xe4\xbc\xb0\xe9\x94\xb7\xe8\xbf\x9d\xe4\xbb\xac\xe8\x8b\x9f\xe9\x93\x9c\xe6\x92\xad\xe8\x82\x98\xe4\xbb\xb6\xe7\x83\xab\xe5\xae\xa1\xe9\xb2\x82\xe5\xb9\xbf\xe5\x83\x8f\xe9\x93\x8c\xe6\x83\xb0\xe9\x93\x9f\xe5\xb7\xb3\xe8\x83\x8d\xe9\xb2\x8d\xe5\xba\xb7\xe6\x86\xa7\xe8\x89\xb2\xe6\x81\xa2\xe6\x83\xb3\xe6\x8b\xb7\xe5\xb0\xa4\xe7\x96\xb3\xe7\x9f\xa5SYFDA\xe5\xb3\x84\xe8\xa3\x95\xe5\xb8\xae\xe6\x8f\xa1\xe6\x90\x94\xe6\xb0\x90\xe6\xb0\x98\xe9\x9a\xbe\xe5\xa2\x92\xe6\xb2\xae\xe9\x9b\xa8\xe5\x8f\x81\xe7\xbc\xa5\xe6\x82\xb4\xe8\x97\x90\xe6\xb9\xab\xe5\xa8\x9f\xe8\x8b\x91\xe7\xa8\xa0\xe9\xa2\x9b\xe7\xb0\x87\xe5\x90\x8e\xe9\x98\x95\xe9\x97\xad\xe8\x95\xa4\xe7\xbc\x9a\xe6\x80\x8e\xe4\xbd\x9e\xe7\xa0\x81\xe5\x98\xa4\xe8\x94\xa1\xe7\x97\x8a\xe8\x88\xb1\xe8\x9e\xaf\xe5\xb8\x95\xe8\xb5\xab\xe6\x98\xb5\xe5\x8d\x87\xe7\x83\xac\xe5\xb2\xab\xe3\x80\x81\xe7\x96\xb5\xe8\x9c\xbb\xe9\xab\x81\xe8\x95\xa8\xe9\x9a\xb6\xe7\x83\x9b\xe6\xa2\xb0\xe4\xb8\x91\xe7\x9b\x82\xe6\xa2\x81\xe5\xbc\xba\xe9\xb2\x9b\xe7\x94\xb1\xe6\x8b\x98\xe6\x8f\x89\xe5\x8a\xad\xe9\xbe\x9f\xe6\x92\xa4\xe9\x92\xa9\xe5\x91\x95\xe5\xad\x9b\xe8\xb4\xb9\xe5\xa6\xbb\xe6\xbc\x82\xe6\xb1\x82\xe9\x98\x91\xe5\xb4\x96\xe7\xa7\xa4\xe7\x94\x98\xe9\x80\x9a\xe6\xb7\xb1\xe8\xa1\xa5\xe8\xb5\x83\xe5\x9d\x8e\xe5\xba\x8a\xe5\x95\xaa\xe6\x89\xbf\xe5\x90\xbc\xe9\x87\x8f\xe6\x9a\x87\xe9\x92\xbc\xe7\x83\xa8\xe9\x98\x82\xe6\x93\x8e\xe8\x84\xb1\xe9\x80\xae\xe7\xa7\xb0P\xe7\xa5\x9e\xe5\xb1\x9e\xe7\x9f\x97\xe5\x8d\x8e\xe5\xb1\x8a\xe7\x8b\x8d\xe8\x91\x91\xe6\xb1\xb9\xe8\x82\xb2\xe6\x82\xa3\xe7\xaa\x92\xe8\x9b\xb0\xe4\xbd\xbc\xe9\x9d\x99\xe6\xa7\x8e\xe8\xbf\x90\xe9\xb3\x97\xe5\xba\x86\xe9\x80\x9d\xe6\x9b\xbc\xe7\x96\xb1\xe5\x85\x8b\xe4\xbb\xa3\xe5\xae\x98\xe6\xad\xa4\xe9\xba\xb8\xe8\x80\xa7\xe8\x9a\x8c\xe6\x99\x9f\xe4\xbe\x8b\xe7\xa1\x80\xe6\xa6\x9b\xe5\x89\xaf\xe6\xb5\x8b\xe5\x94\xb0\xe7\xbc\xa2\xe8\xbf\xb9\xe7\x81\xac\xe9\x9c\x81\xe8\xba\xab\xe5\xb2\x81\xe8\xb5\xad\xe6\x89\x9b\xe5\x8f\x88\xe8\x8f\xa1\xe4\xb9\x9c\xe9\x9b\xbe\xe6\x9d\xbf\xe8\xaf\xbb\xe9\x99\xb7\xe5\xbe\x89\xe8\xb4\xaf\xe9\x83\x81\xe8\x99\x91\xe5\x8f\x98\xe9\x92\x93\xe8\x8f\x9c\xe5\x9c\xbe\xe7\x8e\xb0\xe7\x90\xa2\xe5\xbc\x8f\xe4\xb9\x90\xe7\xbb\xb4\xe6\xb8\x94\xe6\xb5\x9c\xe5\xb7\xa6\xe5\x90\xbe\xe8\x84\x91\xe9\x92\xa1\xe8\xad\xa6T\xe5\x95\xb5\xe6\x8b\xb4\xe5\x81\x8c\xe6\xbc\xb1\xe6\xb9\xbf\xe7\xa1\x95\xe6\xad\xa2\xe9\xaa\xbc\xe9\xad\x84\xe7\xa7\xaf\xe7\x87\xa5\xe8\x81\x94\xe8\xb8\xa2\xe7\x8e\x9b|\xe5\x88\x99\xe7\xaa\xbf\xe8\xa7\x81\xe6\x8c\xaf\xe7\x95\xbf\xe9\x80\x81\xe7\x8f\xad\xe9\x92\xbd\xe6\x82\xa8\xe8\xb5\xb5\xe5\x88\xa8\xe5\x8d\xb0\xe8\xae\xa8\xe8\xb8\x9d\xe7\xb1\x8d\xe8\xb0\xa1\xe8\x88\x8c\xe5\xb4\xa7\xe6\xb1\xbd\xe8\x94\xbd\xe6\xb2\xaa\xe9\x85\xa5\xe7\xbb\x92\xe6\x80\x96\xe8\xb4\xa2\xe5\xb8\x96\xe8\x82\xb1\xe7\xa7\x81\xe8\x8e\x8e\xe5\x8b\x8b\xe7\xbe\x94\xe9\x9c\xb8\xe5\x8a\xb1\xe5\x93\xbc\xe5\xb8\x90\xe5\xb0\x86\xe5\xb8\x85\xe6\xb8\xa0\xe7\xba\xaa\xe5\xa9\xb4\xe5\xa8\xa9\xe5\xb2\xad\xe5\x8e\x98\xe6\xbb\x95\xe5\x90\xbb\xe4\xbc\xa4\xe5\x9d\x9d\xe5\x86\xa0\xe6\x88\x8a\xe9\x9a\x86\xe7\x98\x81\xe4\xbb\x8b\xe6\xb6\xa7\xe7\x89\xa9\xe9\xbb\x8d\xe5\xb9\xb6\xe5\xa7\x97\xe5\xa5\xa2\xe8\xb9\x91\xe6\x8e\xa3\xe5\x9e\xb8\xe9\x94\xb4\xe5\x91\xbd\xe7\xae\x8d\xe6\x8d\x89\xe7\x97\x85\xe8\xbe\x96\xe7\x90\xb0\xe7\x9c\xad\xe8\xbf\xa9\xe8\x89\x98\xe7\xbb\x8c\xe7\xb9\x81\xe5\xaf\x85\xe8\x8b\xa5\xe6\xaf\x8b\xe6\x80\x9d\xe8\xaf\x89\xe7\xb1\xbb\xe8\xaf\x88\xe7\x87\xae\xe8\xbd\xb2\xe9\x85\xae\xe7\x8b\x82\xe9\x87\x8d\xe5\x8f\x8d\xe8\x81\x8c\xe7\xad\xb1\xe5\x8e\xbf\xe5\xa7\x94\xe7\xa3\x95\xe7\xbb\xa3\xe5\xa5\x96\xe6\x99\x8b\xe6\xbf\x89\xe5\xbf\x97\xe5\xbe\xbd\xe8\x82\xa0\xe5\x91\x88\xe7\x8d\x90\xe5\x9d\xbb\xe5\x8f\xa3\xe7\x89\x87\xe7\xa2\xb0\xe5\x87\xa0\xe6\x9d\x91\xe6\x9f\xbf\xe5\x8a\xb3\xe6\x96\x99\xe8\x8e\xb7\xe4\xba\xa9\xe6\x83\x95\xe6\x99\x95\xe5\x8e\x8c\xe5\x8f\xb7\xe7\xbd\xa2\xe6\xb1\xa0\xe6\xad\xa3\xe9\x8f\x96\xe7\x85\xa8\xe5\xae\xb6\xe6\xa3\x95\xe5\xa4\x8d\xe5\xb0\x9d\xe6\x87\x8b\xe8\x9c\xa5\xe9\x94\x85\xe5\xb2\x9b\xe6\x89\xb0\xe9\x98\x9f\xe5\x9d\xa0\xe7\x98\xbe\xe9\x92\xac@\xe5\x8d\xa7\xe7\x96\xa3\xe9\x95\x87\xe8\xad\xac\xe5\x86\xb0\xe5\xbd\xb7\xe9\xa2\x91\xe9\xbb\xaf\xe6\x8d\xae\xe5\x9e\x84\xe9\x87\x87\xe5\x85\xab\xe7\xbc\xaa\xe7\x98\xab\xe5\x9e\x8b\xe7\x86\xb9\xe7\xa0\xb0\xe6\xa5\xa0\xe8\xa5\x81\xe7\xae\x90\xe4\xbd\x86\xe5\x98\xb6\xe7\xbb\xb3\xe5\x95\xa4\xe6\x8b\x8d\xe7\x9b\xa5\xe7\xa9\x86\xe5\x82\xb2\xe6\xb4\x97\xe7\x9b\xaf\xe5\xa1\x98\xe6\x80\x94\xe7\xad\x9b\xe4\xb8\xbf\xe5\x8f\xb0\xe6\x81\x92\xe5\x96\x82\xe8\x91\x9b\xe6\xb0\xb8\xef\xbf\xa5\xe7\x83\x9f\xe9\x85\x92\xe6\xa1\xa6\xe4\xb9\xa6\xe7\xa0\x82\xe8\x9a\x9d\xe7\xbc\x89\xe6\x80\x81\xe7\x80\x9a\xe8\xa2\x84\xe5\x9c\xb3\xe8\xbd\xbb\xe8\x9b\x9b\xe8\xb6\x85\xe6\xa6\xa7\xe9\x81\x9b\xe5\xa7\x92\xe5\xa5\x98\xe9\x93\xae\xe5\x8f\xb3\xe8\x8d\xbd\xe6\x9c\x9b\xe5\x81\xbb\xe5\x8d\xa1\xe4\xb8\xb6\xe6\xb0\xb0\xe9\x99\x84\xe5\x81\x9a\xe9\x9d\xa9\xe7\xb4\xa2\xe6\x88\x9a\xe5\x9d\xa8\xe6\xa1\xb7\xe5\x94\x81\xe5\x9e\x85\xe6\xa6\xbb\xe5\xb2\x90\xe5\x81\x8e\xe5\x9d\x9b\xe8\x8e\xa8\xe5\xb1\xb1\xe6\xae\x8a\xe5\xbe\xae\xe9\xaa\x87\xe9\x99\x88\xe7\x88\xa8\xe6\x8e\xa8\xe5\x97\x9d\xe9\xa9\xb9\xe6\xbe\xa1\xe8\x97\x81\xe5\x91\xa4\xe5\x8d\xa4\xe5\x98\xbb\xe7\xb3\x85\xe9\x80\x9b\xe4\xbe\xb5\xe9\x83\x93\xe9\x85\x8c\xe5\xbe\xb7\xe6\x91\x87\xe2\x80\xbb\xe9\xac\x83\xe8\xa2\xab\xe6\x85\xa8\xe6\xae\xa1\xe7\xbe\xb8\xe6\x98\x8c\xe6\xb3\xa1\xe6\x88\x9b\xe9\x9e\x8b\xe6\xb2\xb3\xe5\xae\xaa\xe6\xb2\xbf\xe7\x8e\xb2\xe9\xb2\xa8\xe7\xbf\x85\xe5\x93\xbd\xe6\xba\x90\xe9\x93\x85\xe8\xaf\xad\xe7\x85\xa7\xe9\x82\xaf\xe5\x9d\x80\xe8\x8d\x83\xe4\xbd\xac\xe9\xa1\xba\xe9\xb8\xb3\xe7\x94\xba\xe9\x9c\xad\xe7\x9d\xbe\xe7\x93\xa2\xe5\xa4\xb8\xe6\xa4\x81\xe6\x99\x93\xe9\x85\xbf\xe7\x97\x88\xe5\x92\x94\xe4\xbe\x8f\xe5\x88\xb8\xe5\x99\x8e\xe6\xb9\x8d\xe7\xad\xbe\xe5\x9a\xb7\xe7\xa6\xbb\xe5\x8d\x88\xe5\xb0\x9a\xe7\xa4\xbe\xe9\x94\xa4\xe8\x83\x8c\xe5\xad\x9f\xe4\xbd\xbf\xe6\xb5\xaa\xe7\xbc\xa6\xe6\xbd\x8d\xe9\x9e\x85\xe5\x86\x9b\xe5\xa7\xb9\xe9\xa9\xb6\xe7\xac\x91\xe9\xb3\x9f\xe9\xb2\x81\xe3\x80\x8b\xe5\xad\xbd\xe9\x92\x9c\xe7\xbb\xbf\xe6\xb4\xb1\xe7\xa4\xb4\xe7\x84\xaf\xe6\xa4\xb0\xe9\xa2\x96\xe5\x9b\x94\xe4\xb9\x8c\xe5\xad\x94\xe5\xb7\xb4\xe4\xba\x92\xe6\x80\xa7\xe6\xa4\xbd\xe5\x93\x9e\xe8\x81\x98\xe6\x98\xa8\xe6\x97\xa9\xe6\x9a\xae\xe8\x83\xb6\xe7\x82\x80\xe9\x9a\xa7\xe4\xbd\x8e\xe5\xbd\x97\xe6\x98\x9d\xe9\x93\x81\xe5\x91\x93\xe6\xb0\xbd\xe8\x97\x89\xe5\x96\x94\xe7\x99\x96\xe7\x91\x97\xe5\xa7\xa8\xe6\x9d\x83\xe8\x83\xb1\xe9\x9f\xa6\xe5\xa0\x91\xe8\x9c\x9c\xe9\x85\x8b\xe6\xa5\x9d\xe7\xa0\x9d\xe6\xaf\x81\xe9\x9d\x93\xe6\xad\x99\xe9\x94\xb2\xe7\xa9\xb6\xe5\xb1\x8b\xe5\x96\xb3\xe9\xaa\xa8\xe8\xbe\xa8\xe7\xa2\x91\xe6\xad\xa6\xe9\xb8\xa0\xe5\xae\xab\xe8\xbe\x9c\xe7\x83\x8a\xe9\x80\x82\xe5\x9d\xa1\xe6\xae\x83\xe5\x9f\xb9\xe4\xbd\xa9\xe4\xbe\x9b\xe8\xb5\xb0\xe8\x9c\x88\xe8\xbf\x9f\xe7\xbf\xbc\xe5\x86\xb5\xe5\xa7\xa3\xe5\x87\x9b\xe6\xb5\x94\xe5\x90\x83\xe9\xa3\x98\xe5\x80\xba\xe7\x8a\x9f\xe9\x87\x91\xe4\xbf\x83\xe8\x8b\x9b\xe5\xb4\x87\xe5\x9d\x82\xe8\x8e\xb3\xe7\x95\x94\xe7\xbb\x82\xe5\x85\xb5\xe8\xa0\x95\xe6\x96\x8b\xe6\xa0\xb9\xe7\xa0\x8d\xe4\xba\xa2\xe6\xac\xa2\xe6\x81\xac\xe5\xb4\x94\xe5\x89\x81\xe9\xa4\x90\xe6\xa6\xab\xe5\xbf\xab\xe6\x89\xb6\xe2\x80\x96\xe6\xbf\x92\xe7\xbc\xa0\xe9\xb3\x9c\xe5\xbd\x93\xe5\xbd\xad\xe9\xa9\xad\xe6\xb5\xa6\xe7\xaf\xae\xe6\x98\x80\xe9\x94\x86\xe7\xa7\xb8\xe9\x92\xb3\xe5\xbc\x8b\xe5\xa8\xa3\xe7\x9e\x91\xe5\xa4\xb7\xe9\xbe\x9b\xe8\x8b\xab\xe6\x8b\xb1\xe8\x87\xb4%\xe5\xb5\x8a\xe9\x9a\x9c\xe9\x9a\x90\xe5\xbc\x91\xe5\x88\x9d\xe5\xa8\x93\xe6\x8a\x89\xe6\xb1\xa9\xe7\xb4\xaf\xe8\x93\x96""\xe5\x94\xac\xe5\x8a\xa9\xe8\x8b\x93\xe6\x98\x99\xe6\x8a\xbc\xe6\xaf\x99\xe7\xa0\xb4\xe5\x9f\x8e\xe9\x83\xa7\xe9\x80\xa2\xe5\x9a\x8f\xe7\x8d\xad\xe7\x9e\xbb\xe6\xba\xb1\xe5\xa9\xbf\xe8\xb5\x8a\xe8\xb7\xa8\xe6\x81\xbc\xe7\x92\xa7\xe8\x90\x83\xe5\xa7\xbb\xe8\xb2\x89\xe7\x81\xb5\xe7\x82\x89\xe5\xaf\x86\xe6\xb0\x9b\xe9\x99\xb6\xe7\xa0\xb8\xe8\xb0\xac\xe8\xa1\x94\xe7\x82\xb9\xe7\x90\x9b\xe6\xb2\x9b\xe6\x9e\xb3\xe5\xb1\x82\xe5\xb2\xb1\xe8\xaf\xba\xe8\x84\x8d\xe6\xa6\x88\xe5\x9f\x82\xe5\xbe\x81\xe5\x86\xb7\xe8\xa3\x81\xe6\x89\x93\xe8\xb9\xb4\xe7\xb4\xa0\xe7\x98\x98\xe9\x80\x9e\xe8\x9b\x90\xe8\x81\x8a\xe6\xbf\x80\xe8\x85\xb1\xe8\x90\x98\xe8\xb8\xb5\xe9\xa3\x92\xe8\x93\x9f\xe5\x90\x86\xe5\x8f\x96\xe5\x92\x99\xe7\xb0\x8b\xe6\xb6\x93\xe7\x9f\xa9\xe6\x9b\x9d\xe6\x8c\xba\xe6\x8f\xa3\xe5\xba\xa7\xe4\xbd\xa0\xe5\x8f\xb2\xe8\x88\xb5\xe7\x84\xb1\xe5\xb0\x98\xe8\x8b\x8f\xe7\xac\x88\xe8\x84\x9a\xe6\xba\x89\xe6\xa6\xa8\xe8\xaf\xb5\xe6\xa8\x8a\xe9\x82\x93\xe7\x84\x8a\xe4\xb9\x89\xe5\xba\xb6\xe5\x84\x8b\xe8\x9f\x8b\xe8\x92\xb2\xe8\xb5\xa6\xe5\x91\xb7\xe6\x9d\x9e\xe8\xaf\xa0\xe8\xb1\xaa\xe8\xbf\x98\xe8\xaf\x95\xe9\xa2\x93\xe8\x8c\x89\xe5\xa4\xaa\xe9\x99\xa4\xe7\xb4\xab\xe9\x80\x83\xe7\x97\xb4\xe8\x8d\x89\xe5\x85\x85\xe9\xb3\x95\xe7\x8f\x89\xe7\xa5\x97\xe5\xa2\xa8\xe6\xb8\xad\xe7\x83\xa9\xe8\x98\xb8\xe6\x85\x95\xe7\x92\x87\xe9\x95\xb6\xe7\xa9\xb4\xe5\xb5\x98\xe6\x81\xb6\xe9\xaa\x82\xe9\x99\xa9\xe7\xbb\x8b\xe5\xb9\x95\xe7\xa2\x89\xe8\x82\xba\xe6\x88\xb3\xe5\x88\x98\xe6\xbd\x9e\xe7\xa7\xa3\xe7\xba\xbe\xe6\xbd\x9c\xe9\x8a\xae\xe6\xb4\x9b\xe9\xa1\xbb\xe7\xbd\x98\xe9\x94\x80\xe7\x98\xaa\xe6\xb1\x9e\xe5\x85\xae\xe5\xb1\x89r\xe6\x9e\x97\xe5\x8e\x95\xe8\xb4\xa8\xe6\x8e\xa2\xe5\x88\x92\xe7\x8b\xb8\xe6\xae\x9a\xe5\x96\x84\xe7\x85\x8a\xe7\x83\xb9\xe3\x80\x92\xe9\x94\x88\xe9\x80\xaf\xe5\xae\xb8\xe8\xbe\x8d\xe6\xb3\xb1\xe6\x9f\x9a\xe8\xa2\x8d\xe8\xbf\x9c\xe8\xb9\x8b\xe5\xb6\x99\xe7\xbb\x9d\xe5\xb3\xa5\xe5\xa8\xa5\xe7\xbc\x8d\xe9\x9b\x80\xe5\xbe\xb5\xe8\xae\xa4\xe9\x95\xb1\xe8\xb0\xb7=\xe8\xb4\xa9\xe5\x8b\x89\xe6\x92\xa9\xe9\x84\xaf\xe6\x96\x90\xe6\xb4\x8b\xe9\x9d\x9e\xe7\xa5\x9a\xe6\xb3\xbe\xe8\xaf\x92\xe9\xa5\xbf\xe6\x92\xac\xe5\xa8\x81\xe6\x99\xb7\xe6\x90\xad\xe8\x8a\x8d\xe9\x94\xa5\xe7\xac\xba\xe8\x93\xa6\xe5\x80\x99\xe7\x90\x8a\xe6\xa1\xa3\xe7\xa4\x81\xe6\xb2\xbc\xe5\x8d\xb5\xe8\x8d\xa0\xe5\xbf\x91\xe6\x9c\x9d\xe5\x87\xb9\xe7\x91\x9e\xe5\xa4\xb4\xe4\xbb\xaa\xe5\xbc\xa7\xe5\xad\xb5\xe7\x95\x8f\xe9\x93\x86\xe7\xaa\x81\xe8\xa1\xb2\xe8\xbd\xa6\xe6\xb5\xa9\xe6\xb0\x94\xe8\x8c\x82\xe6\x82\x96\xe5\x8e\xa2\xe6\x9e\x95\xe9\x85\x9d\xe6\x88\xb4\xe6\xb9\xbe\xe9\x82\xb9\xe9\xa3\x9a\xe6\x94\x98\xe9\x94\x82\xe5\x86\x99\xe5\xae\xb5\xe7\xbf\x81\xe5\xb2\xb7\xe6\x97\xa0\xe5\x96\x9c\xe4\xb8\x88\xe6\x8c\x91\xe5\x97\x9f\xe7\xbb\x9b\xe6\xae\x89\xe8\xae\xae\xe6\xa7\xbd\xe5\x85\xb7\xe9\x86\x87\xe6\xb7\x9e\xe7\xac\x83\xe9\x83\xb4\xe9\x98\x85\xe9\xa5\xbc\xe5\xba\x95\xe5\xa3\x95\xe7\xa0\x9a\xe5\xbc\x88\xe8\xaf\xa2\xe7\xbc\x95\xe5\xba\xb9\xe7\xbf\x9f\xe9\x9b\xb6\xe7\xad\xb7\xe6\x9a\xa8\xe8\x88\x9f\xe9\x97\xba\xe7\x94\xaf\xe6\x92\x9e\xe9\xba\x82\xe8\x8c\x8c\xe8\x94\xbc\xe5\xbe\x88\xe7\x8f\xb2\xe6\x8d\x95\xe6\xa3\xa0\xe8\xa7\x92\xe9\x98\x89\xe5\xaa\x9b\xe5\xa8\xb2\xe8\xaf\xbd\xe5\x89\xbf\xe5\xb0\x89\xe7\x88\xb5\xe7\x9d\xac\xe9\x9f\xa9\xe8\xaf\xb0\xe5\x8c\xa3\xe5\x8d\xb1\xe7\xb3\x8d\xe9\x95\xaf\xe7\xab\x8b\xe6\xb5\x8f\xe9\x98\xb3\xe5\xb0\x91\xe7\x9b\x86\xe8\x88\x94\xe6\x93\x98\xe5\x8c\xaa\xe7\x94\xb3\xe5\xb0\xac\xe9\x93\xa3\xe6\x97\xaf\xe6\x8a\x96\xe8\xb5\x98\xe7\x93\xaf\xe5\xb1\x85\xcb\x87\xe5\x93\xae\xe6\xb8\xb8\xe9\x94\xad\xe8\x8c\x8f\xe6\xad\x8c\xe5\x9d\x8f\xe7\x94\x9a\xe7\xa7\x92\xe8\x88\x9e\xe6\xb2\x99\xe4\xbb\x97\xe5\x8a\xb2\xe6\xbd\xba\xe9\x98\xbf\xe7\x87\xa7\xe9\x83\xad\xe5\x97\x96\xe9\x9c\x8f\xe5\xbf\xa0\xe6\x9d\x90\xe5\xa5\x82\xe8\x80\x90\xe8\xb7\xba\xe7\xa0\x80\xe8\xbe\x93\xe5\xb2\x96\xe5\xaa\xb3\xe6\xb0\x9f\xe6\x9e\x81\xe6\x91\x86\xe7\x81\xbf\xe4\xbb\x8a\xe6\x89\x94\xe8\x85\xbb\xe6\x9e\x9d\xe5\xa5\x8e\xe8\x8d\xaf\xe7\x86\x84\xe5\x90\xa8\xe8\xaf\x9dq\xe9\xa2\x9d\xe6\x85\x91\xe5\x98\x8c\xe5\x8d\x8f\xe5\x96\x80\xe5\xa3\xb3\xe5\x9f\xad\xe8\xa7\x86\xe8\x91\x97\xe6\x96\xbc\xe6\x84\xa7\xe9\x99\xb2\xe7\xbf\x8c\xe5\xb3\x81\xe9\xa2\x85\xe4\xbd\x9b\xe8\x85\xb9\xe8\x81\x8b\xe4\xbe\xaf\xe5\x92\x8e\xe5\x8f\x9f\xe7\xa7\x80\xe9\xa2\x87\xe5\xad\x98\xe8\xbe\x83\xe7\xbd\xaa\xe5\x93\x84\xe5\xb2\x97\xe6\x89\xab\xe6\xa0\x8f\xe9\x92\xbe\xe7\xbe\x8c\xe5\xb7\xb1\xe7\x92\xa8\xe6\x9e\xad\xe9\x9c\x89\xe7\x85\x8c\xe6\xb6\xb8\xe8\xa1\xbf\xe9\x94\xae\xe9\x95\x9d\xe7\x9b\x8a\xe5\xb2\xa2\xe5\xa5\x8f\xe8\xbf\x9e\xe5\xa4\xaf\xe7\x9d\xbf\xe5\x86\xa5\xe5\x9d\x87\xe7\xb3\x96\xe7\x8b\x9e\xe8\xb9\x8a\xe7\xa8\xbb\xe7\x88\xb8\xe5\x88\xbf\xe8\x83\xa5\xe7\x85\x9c\xe4\xb8\xbd\xe8\x82\xbf\xe7\x92\x83\xe6\x8e\xb8\xe8\xb7\x9a\xe7\x81\xbe\xe5\x9e\x82\xe6\xa8\xbe\xe6\xbf\x91\xe4\xb9\x8e\xe8\x8e\xb2\xe7\xaa\x84\xe7\x8a\xb9\xe6\x92\xae\xe6\x88\x98\xe9\xa6\x84\xe8\xbd\xaf\xe7\xbb\x9c\xe6\x98\xbe\xe9\xb8\xa2\xe8\x83\xb8\xe5\xae\xbe\xe5\xa6\xb2\xe6\x81\x95\xe5\x9f\x94\xe8\x9d\x8c\xe4\xbb\xbd\xe9\x81\x87\xe5\xb7\xa7\xe7\x9e\x9f\xe7\xb2\x92\xe6\x81\xb0\xe5\x89\xa5\xe6\xa1\xa1\xe5\x8d\x9a\xe8\xae\xaf\xe5\x87\xaf\xe5\xa0\x87\xe9\x98\xb6\xe6\xbb\xa4\xe5\x8d\x96\xe6\x96\x8c\xe9\xaa\x9a\xe5\xbd\xac\xe5\x85\x91\xe7\xa3\xba\xe6\xa8\xb1\xe8\x88\xb7\xe4\xb8\xa4\xe5\xa8\xb1\xe7\xa6\x8f\xe4\xbb\x83\xe5\xb7\xae\xe6\x89\xbe\xe6\xa1\x81\xc3\xb7\xe5\x87\x80\xe6\x8a\x8a\xe9\x98\xb4\xe6\xb1\xa1\xe6\x88\xac\xe9\x9b\xb7\xe7\xa2\x93\xe8\x95\xb2\xe6\xa5\x9a\xe7\xbd\xa1\xe7\x84\x96\xe6\x8a\xbd\xe5\xa6\xab\xe5\x92\x92\xe4\xbb\x91\xe9\x97\xb1\xe5\xb0\xbd\xe9\x82\x91\xe8\x8f\x81\xe7\x88\xb1\xe8\xb4\xb7\xe6\xb2\xa5\xe9\x9e\x91\xe7\x89\xa1\xe5\x97\x89\xe5\xb4\xb4\xe9\xaa\xa4\xe5\xa1\x8c\xe5\x97\xa6\xe8\xae\xa2\xe6\x8b\xae\xe6\xbb\x93\xe6\x8d\xa1\xe9\x94\xbb\xe6\xac\xa1\xe5\x9d\xaa\xe6\x9d\xa9\xe8\x87\x83\xe7\xae\xac\xe8\x9e\x8d\xe7\x8f\x82\xe9\xb9\x97\xe5\xae\x97\xe6\x9e\x9a\xe9\x99\x8d\xe9\xb8\xac\xe5\xa6\xaf\xe9\x98\x84\xe5\xa0\xb0\xe7\x9b\x90\xe6\xaf\x85\xe5\xbf\x85\xe6\x9d\xa8\xe5\xb4\x83\xe4\xbf\xba\xe7\x94\xac\xe7\x8a\xb6\xe8\x8e\x98\xe8\xb4\xa7\xe8\x80\xb8\xe8\x8f\xb1\xe8\x85\xbc\xe9\x93\xb8\xe5\x94\x8f\xe7\x97\xa4\xe5\xad\x9a\xe6\xbe\xb3\xe6\x87\x92\xe6\xba\x85\xe7\xbf\x98\xe7\x96\x99\xe6\x9d\xb7\xe6\xb7\xbc\xe7\xbc\x99\xe9\xaa\xb0\xe5\x96\x8a\xe6\x82\x89\xe7\xa0\xbb\xe5\x9d\xb7\xe8\x89\x87\xe8\xb5\x81\xe7\x95\x8c\xe8\xb0\xa4\xe7\xba\xa3\xe5\xae\xb4\xe6\x99\x83\xe8\x8c\xb9\xe5\xbd\x92\xe9\xa5\xad\xe6\xa2\xa2\xe9\x93\xa1\xe8\xa1\x97\xe6\x8a\x84\xe8\x82\xbc\xe9\xac\x9f\xe8\x8b\xaf\xe9\xa2\x82\xe6\x92\xb7\xe6\x88\x88\xe7\x82\x92\xe5\x92\x86\xe8\x8c\xad\xe7\x98\x99\xe8\xb4\x9f\xe4\xbb\xb0\xe5\xae\xa2\xe7\x90\x89\xe9\x93\xa2\xe5\xb0\x81\xe5\x8d\x91\xe7\x8f\xa5\xe6\xa4\xbf\xe9\x95\xa7\xe7\xaa\xa8\xe9\xac\xb2\xe5\xaf\xbf\xe5\xbe\xa1\xe8\xa2\xa4\xe9\x93\x83\xe8\x90\x8e\xe7\xa0\x96\xe9\xa4\xae\xe8\x84\x92\xe8\xa3\xb3\xe8\x82\xaa\xe5\xad\x95\xe5\xab\xa3\xe9\xa6\x97\xe5\xb5\x87\xe6\x81\xb3\xe6\xb0\xaf\xe6\xb1\x9f\xe7\x9f\xb3\xe8\xa4\xb6\xe5\x86\xa2\xe7\xa5\xb8\xe9\x98\xbb\xe7\x8b\x88\xe7\xbe\x9e\xe9\x93\xb6\xe9\x9d\xb3\xe9\x80\x8f\xe5\x92\xb3\xe5\x8f\xbc\xe6\x95\xb7\xe8\x8a\xb7\xe5\x95\xa5\xe5\xae\x83\xe7\x93\xa4\xe5\x85\xb0\xe7\x97\x98\xe6\x87\x8a\xe9\x80\x91\xe8\x82\x8c\xe5\xbe\x80\xe6\x8d\xba\xe5\x9d\x8a\xe7\x94\xa9\xe5\x91\xbb\xe3\x80\x83\xe6\xb2\xa6\xe5\xbf\x98\xe8\x86\xbb\xe7\xa5\x9f\xe8\x8f\x85\xe5\x89\xa7\xe5\xb4\x86\xe6\x99\xba\xe5\x9d\xaf\xe8\x87\xa7\xe9\x9c\x8d\xe5\xa2\x85\xe6\x94\xbb\xe7\x9c\xaf\xe5\x80\x98\xe6\x8b\xa2\xe9\xaa\xa0\xe9\x93\x90\xe5\xba\xad\xe5\xb2\x99\xe7\x93\xa0\xe2\x80\xb2\xe7\xbc\xba\xe6\xb3\xa5\xe8\xbf\xa2\xe6\x8d\xb6?\xef\xbc\x9f\xe9\x83\x8f\xe5\x96\x99\xe6\x8e\xb7\xe6\xb2\x8c\xe7\xba\xaf\xe7\xa7\x98\xe7\xa7\x8d\xe5\x90\xac\xe7\xbb\x98\xe5\x9b\xba\xe8\x9e\xa8\xe5\x9b\xa2\xe9\xa6\x99\xe7\x9b\x97\xe5\xa6\x92\xe5\x9f\x9a\xe8\x93\x9d\xe6\x8b\x96\xe6\x97\xb1\xe8\x8d\x9e\xe9\x93\x80\xe8\xa1\x80\xe9\x81\x8f\xe6\xb1\xb2\xe8\xbe\xb0\xe5\x8f\xa9\xe6\x8b\xbd\xe5\xb9\x85\xe7\xa1\xac\xe6\x83\xb6\xe6\xa1\x80\xe6\xbc\xa0\xe6\x8e\xaa\xe6\xb3\xbc\xe5\x94\x91\xe9\xbd\x90\xe8\x82\xbe\xe5\xbf\xb5\xe9\x85\xb1\xe8\x99\x9a\xe5\xb1\x81\xe8\x80\xb6\xe6\x97\x97\xe7\xa0\xa6\xe9\x97\xb5\xe5\xa9\x89\xe9\xa6\x86\xe6\x8b\xad\xe7\xbb\x85\xe9\x9f\xa7\xe5\xbf\x8f\xe7\xaa\x9d\xe9\x86\x8b\xe8\x91\xba\xe9\xa1\xbe\xe8\xbe\x9e\xe5\x80\x9c\xe5\xa0\x86\xe8\xbe\x8b\xe9\x80\x86\xe7\x8e\x9f\xe8\xb4\xb1\xe7\x96\xbe\xe8\x91\xa3\xe6\x83\x98\xe5\x80\x8c\xe9\x94\x95\xe6\xb7\x98\xe5\x98\x80\xe8\x8e\xbd\xe4\xbf\xad\xe7\xac\x8f\xe7\xbb\x91\xe9\xb2\xb7\xe6\x9d\x88\xe6\x8b\xa9\xe8\x9f\x80\xe7\xb2\xa5\xe5\x97\xaf\xe9\xa9\xb0\xe9\x80\xbe\xe6\xa1\x88\xe8\xb0\xaa\xe8\xa4\x93\xe8\x83\xab\xe5\x93\xa9\xe6\x98\x95\xe9\xa2\x9a\xe9\xb2\xa2\xe7\xbb\xa0\xe8\xba\xba\xe9\xb9\x84\xe5\xb4\x82\xe5\x84\x92\xe4\xbf\xa8\xe4\xb8\x9d\xe5\xb0\x95\xe6\xb3\x8c\xe5\x95\x8a\xe8\x90\xb8\xe5\xbd\xb0\xe5\xb9\xba\xe5\x90\x9f\xe9\xaa\x84\xe8\x8b\xa3\xe5\xbc\xa6\xe8\x84\x8a\xe7\x91\xb0\xe3\x80\x88\xe8\xaf\x9b\xe9\x95\x81\xe6\x9e\x90\xe9\x97\xaa\xe5\x89\xaa\xe4\xbe\xa7\xe5\x93\x9f\xe6\xa1\x86\xe8\x9e\x83\xe5\xae\x88\xe5\xac\x97\xe7\x87\x95\xe7\x8b\xad\xe9\x93\x88\xe7\xbc\xae\xe6\xa6\x82\xe8\xbf\xb3\xe7\x97\xa7\xe9\xb2\xb2\xe4\xbf\xaf\xe5\x94\xae\xe7\xac\xbc\xe7\x97\xa3\xe6\x89\x89\xe6\x8c\x96\xe6\xbb\xa1\xe5\x92\x8b\xe6\x8f\xb4\xe9\x82\xb1\xe6\x89\x87\xe6\xad\xaa\xe4\xbe\xbf\xe7\x8e\x91\xe7\xbb\xa6\xe5\xb3\xa1\xe8\x9b\x87\xe5\x8f\xa8\xe3\x80\x96\xe6\xb3\xbd\xe8\x83\x83\xe6\x96\x93\xe5\x96\x8b\xe6\x80\x82\xe5\x9d\x9f\xe7\x8c\xaa\xe8\xaf\xa5\xe8\x9a\xac\xe7\x82\x95\xe5\xbc\xa5\xe8\xb5\x9e\xe6\xa3\xa3\xe6\x99\x94\xe5\xa8\xa0\xe6\x8c\xb2\xe7\x8b\xa1\xe5\x88\x9b\xe7\x96\x96\xe9\x93\x95\xe9\x95\xad\xe7\xa8\xb7\xe6\x8c\xab\xe5\xbc\xad\xe5\x95\xbe\xe7\xbf\x94\xe7\xb2\x89\xe5\xb1\xa5\xe8\x8b\x98\xe5\x93\xa6\xe6\xa5\xbc\xe7\xa7\x95\xe9\x93\x82\xe5\x9c\x9f\xe9\x94\xa3\xe7\x98\x9f\xe6\x8c\xa3\xe6\xa0\x89\xe4\xb9\xa0\xe4\xba\xab\xe6\xa1\xa2\xe8\xa2\x85\xe7\xa3\xa8\xe6\xa1\x82\xe8\xb0\xa6\xe5\xbb\xb6\xe5\x9d\x9a\xe8\x94\x9a\xe5\x99\x97\xe7\xbd\xb2\xe8\xb0\x9f\xe7\x8c\xac\xe9\x92\x8e\xe6\x81\x90\xe5\xac\x89\xe9\x9b\x92\xe5\x80\xa6\xe8\xa1\x85\xe4\xba\x8f\xe7\x92\xa9\xe7\x9d\xb9\xe5\x88\xbb\xe6\xae\xbf\xe7\x8e\x8b\xe7\xae\x97\xe9\x9b\x95\xe9\xba\xbb\xe4\xb8\x98\xe6\x9f\xaf\xe9\xaa\x86\xe4\xb8\xb8\xe5\xa1\x8d\xe8\xb0\x9a\xe6\xb7\xbb\xe9\xb2\x88\xe5\x9e\x93\xe6\xa1\x8e\xe8\x9a\xaf\xe8\x8a\xa5\xe4\xba\x88\xe9\xa3\x95\xe9\x95\xa6\xe8\xb0\x8c\xe7\xaa\x97\xe9\x86\x9a\xe8\x8f\x80\xe4\xba\xae\xe6\x90\xaa\xe8\x8e\xba\xe8\x92\xbf\xe7\xbe\x81\xe8\xb6\xb3J\xe7\x9c\x9f\xe8\xbd\xb6\xe6\x82\xac\xe8\xa1\xb7\xe9\x9d\x9b\xe7\xbf\x8a\xe6\x8e\xa9\xe5\x93\x92\xe7\x82\x85\xe6\x8e\x90\xe5\x86\xbc\xe5\xa6\xael\xe8\xb0\x90\xe7\xa8\x9a\xe8\x8d\x86\xe6\x93\x92\xe7\x8a\xaf\xe9\x99\xb5\xe8\x99\x8f\xe6\xb5\x93\xe5\xb4\xbd\xe5\x88\x8d\xe9\x99\x8c\xe5\x82\xbb\xe5\xad\x9c\xe5\x8d\x83\xe9\x9d\x96\xe6\xbc\x94\xe7\x9f\x9c\xe9\x92\x95\xe7\x85\xbd\xe6\x9d\xb0\xe9\x85\x97\xe6\xb8\x97\xe4\xbc\x9e\xe6\xa0\x8b\xe4\xbf\x97\xe6\xb3\xab\xe6\x88\x8d\xe7\xbd\x95\xe6\xb2\xbe\xe7\x96\xbd\xe7\x81\x8f\xe7\x85\xa6\xe8\x8a\xac\xe7\xa3\xb4\xe5\x8f\xb1\xe9\x98\xb1\xe6\xa6\x89\xe6\xb9\x83\xe8\x9c\x80\xe5\x8f\x89\xe9\x86\x92\xe5\xbd\xaa\xe7\xa7\x9f\xe9\x83\xa1\xe7\xaf\xb7\xe5\xb1\x8e\xe8\x89\xaf\xe5\x9e\xa2\xe9\x9a\x97\xe5\xbc\xb1\xe9\x99\xa8\xe5\xb3\xaa\xe7\xa0\xb7\xe6\x8e\xb4\xe9\xa2\x81\xe8\x83\x8e\xe9\x9b\xaf\xe7\xbb\xb5\xe8\xb4\xac\xe6\xb2\x90\xe6\x92\xb5\xe9\x9a\x98\xe7\xaf\x99\xe6\x9a\x96\xe6\x9b\xb9\xe9\x99\xa1\xe6\xa0\x93\xe5\xa1\xab\xe8\x87\xbc\xe5\xbd\xa6\xe7\x93\xb6\xe7\x90\xaa\xe6\xbd\xbc\xe5\x93\xaa\xe9\xb8\xa1\xe6\x91\xa9\xe5\x95\xa6\xe4\xbf\x9f\xe9\x94\x8b\xe5\x9f\x9f\xe8\x80\xbb\xe8\x94\xab\xe7\x96\xaf\xe7\xba\xb9\xe6\x92\x87\xe6\xaf\x92\xe7\xbb\xb6\xe7\x97\x9b\xe9\x85\xaf\xe5\xbf\x8d\xe7\x88\xaa\xe8\xb5\xb3\xe6\xad\x86\xe5\x98\xb9\xe8\xbe\x95\xe7\x83\x88\xe5\x86\x8c\xe6\x9c\xb4\xe9\x92\xb1\xe5\x90\xae\xe6\xaf\xaf\xe7\x99\x9c\xe5\xa8\x83\xe8\xb0\x80\xe9\x82\xb5\xe5\x8e\xae\xe7\x82\xbd\xe7\x92\x9e\xe9\x82\x83\xe4\xb8\x90\xe8\xbf\xbd\xe8\xaf\x8d\xe7\x93\x92\xe5\xbf\x86\xe8\xbd\xa7\xe8\x8a\xab\xe8\xb0\xaf\xe5\x96\xb7\xe5\xbc\x9f\xe5\x8d\x8a\xe5\x86\x95\xe8\xa3\x99\xe6\x8e\x96\xe5\xa2\x89\xe7\xbb\xae\xe5\xaf\x9d\xe8\x8b\x94\xe5\x8a\xbf\xe9\xa1\xb7\xe8\xa4\xa5\xe5\x88\x87\xe8\xa1\xae\xe5\x90\x9b\xe4\xbd\xb3\xe5\xab\x92\xe8\x9a\xa9\xe9\x9c\x9e\xe4\xbd\x9a\xe6\xb4\x99\xe9\x80\x8a\xe9\x95\x96\xe6\x9a\xb9\xe5\x94\x9b&\xe6\xae\x92\xe9\xa1\xb6\xe7\xa2\x97\xe7\x8d\x97\xe8\xbd\xad\xe9\x93\xba\xe8\x9b\x8a\xe5\xba\x9f\xe6\x81\xb9\xe6\xb1\xa8\xe5\xb4\xa9\xe7\x8f\x8d\xe9\x82\xa3\xe6\x9d\xb5\xe6\x9b\xb2\xe7\xba\xba\xe5\xa4\x8f\xe8\x96\xb0\xe5\x82\x80\xe9\x97\xb3\xe6\xb7\xac\xe5\xa7\x98\xe8\x88\x80\xe6\x8b\xa7\xe5\x8d\xb7\xe6\xa5\x82\xe6\x81\x8d\xe8\xae\xaa\xe5\x8e\xa9\xe5\xaf\xae\xe7\xaf\xaa\xe8\xb5\x93\xe4\xb9\x98\xe7\x81\xad\xe7\x9b\x85\xe9\x9e\xa3\xe6\xb2\x9f\xe6\x85\x8e\xe6\x8c\x82\xe9\xa5\xba\xe9\xbc\xbe\xe6\x9d\xb3\xe6\xa0\x91\xe7\xbc\xa8\xe4\xb8\x9b\xe7\xb5\xae\xe5\xa8\x8c\xe8\x87\xbb\xe5\x97\xb3\xe7\xaf\xa1\xe4\xbe\xa9\xe8\xbf\xb0\xe8\xa1\xb0\xe7\x9f\x9b\xe5\x9c\x88\xe8\x9a\x9c\xe5\x8c\x95\xe7\xad\xb9\xe5\x8c\xbf\xe6\xbf\x9e\xe6\x99\xa8\xe5\x8f\xb6\xe9\xaa\x8b\xe9\x83\x9d\xe6\x8c\x9a\xe8\x9a\xb4\xe6\xbb\x9e\xe5\xa2\x9e\xe4\xbe\x8d\xe6\x8f\x8f\xe7\x93\xa3\xe5\x90\x96\xe5\xab\xa6\xe8\x9f\x92\xe5\x8c\xbe\xe5\x9c\xa3\xe8\xb5\x8c\xe6\xaf\xa1\xe7\x99\x9e\xe6\x81\xba\xe7\x99\xbe\xe6\x9b\xb3\xe9\x9c\x80\xe7\xaf\x93\xe8\x82\xae\xe5\xba\x96\xe5\xb8\x8f\xe5\x8d\xbf\xe9\xa9\xbf\xe9\x81\x97\xe8\xb9\xac\xe9\xac\x93\xe9\xaa\xa1\xe6\xad\x89\xe8\x8a\x8e\xe8\x83\xb3\xe5\xb1\x90\xe7\xa6\xbd\xe7\x83\xa6\xe6\x99\x8c\xe5\xaf\x84\xe5\xaa\xbe\xe7\x8b\x84\xe7\xbf\xa1\xe8\x8b\x92\xe8\x88\xb9\xe5\xbb\x89\xe7\xbb\x88\xe7\x97\x9e\xe6\xae\x87\xe3\x80\x85\xe7\x95\xa6\xe9\xa5\xb6\xe6\x94\xb9\xe6\x8b\x86\xe6\x82\xbb\xe8\x90\x84\xef\xbf\xa1\xe7\x93\xbf\xe4\xb9\x83\xe8\xa8\xbe\xe6\xa1\x85\xe5\x8c\xae\xe6\xba\xa7\xe6\x8b\xa5\xe7\xba\xb1\xe9\x93\x8d\xe9\xaa\x97\xe8\x95\x83\xe9\xbe\x8b\xe7\xbc\xac\xe7\x88\xb6\xe4\xbd\x90\xe7\x96\x9a\xe6\xa0\x8e\xe9\x86\x8d\xe6\x8e\xb3\xe8\x93\x84x\xe6\x83\x86\xe9\xa2\x9c\xe9\xb2\x86\xe6\xa6\x86\xe3\x80\x94\xe7\x8c\x8e\xe6\x95\x8c\xe6\x9a\xb4\xe8\xb0\xa5\xe9\xb2\xab\xe8\xb4\xbe\xe7\xbd\x97\xe7\x8e\xbb\xe7\xbc\x84\xe6\x89\xa6\xe8\x8a\xaa\xe7\x99\xa3\xe8\x90\xbd\xe5\xbe\x92\xe8\x87\xbe\xe6\x81\xbf\xe7\x8c\xa9\xe6\x89\x98\xe9\x82\xb4\xe8\x82\x84\xe7\x89\xb5\xe6\x98\xa5\xe9\x99\x9b\xe8\x80\x80\xe5\x88\x8a\xe6\x8b\x93\xe8\x93\x93\xe9\x82\xb3\xe5\xa0\x95\xe5\xaf\x87\xe6\x9e\x89\xe6\xb7\x8c\xe5\x95\xa1\xe6\xb9\x84\xe5\x85\xbd\xe9\x85\xb7\xe8\x90\xbc\xe7\xa2\x9a\xe6\xbf\xa0\xe8\x90\xa4\xe5\xa4\xb9\xe6\x97\xac\xe6\x88\xae\xe6\xa2\xad\xe7\x90\xa5\xe6\xa4\xad\xe6\x98\x94\xe5\x8b\xba\xe8\x9c\x8a\xe7\xbb\x90\xe6\x99\x9a\xe5\xad\xba\xe5\x83\xb5\xe5\xae\xa3\xe6\x91\x84\xe5\x86\xbd\xe6\x97\xa8\xe8\x90\x8c\xe5\xbf\x99\xe8\x9a\xa4\xe7\x9c\x89\xe5\x99\xbc\xe8\x9f\x91\xe4\xbb\x98\xe5\xa5\x91\xe7\x93\x9c\xe6\x82\xbc\xe9\xa2\xa1\xe5\xa3\x81\xe6\x9b\xbe\xe7\xaa\x95\xe9\xa2\xa2\xe6\xbe\x8e\xe4\xbb\xbf\xe4\xbf\x91\xe6\xb5\x91\xe5\xb5\x8c\xe6\xb5\xa3\xe4\xb9\x8d\xe7\xa2\x8c\xe8\xa4\xaa\xe4\xb9\xb1\xe8\x94\x9f\xe9\x9a\x99\xe7\x8e\xa9\xe5\x89\x90\xe8\x91\xab\xe7\xae\xab\xe7\xba\xb2\xe5\x9b\xb4\xe4\xbc\x90\xe5\x86\xb3\xe4\xbc\x99\xe6\xbc\xa9\xe7\x91\x9f\xe5\x88\x91\xe8\x82\x93\xe9\x95\xb3\xe7\xbc\x93\xe8\xb9\xad\xe6\xb0\xa8\xe7\x9a\x93\xe5\x85\xb8\xe7\x95\xb2\xe5\x9d\x8d\xe9\x93\x91\xe6\xaa\x90\xe5\xa1\x91\xe6\xb4\x9e\xe5\x80\xac\xe5\x82\xa8\xe8\x83\xb4\xe6\xb7\xb3\xe6\x88\xbe\xe5\x90\x90\xe7\x81\xbc\xe6\x83\xba\xe5\xa6\x99\xe6\xaf\x95\xe7\x8f\x90\xe7\xbc\x88\xe8\x99\xb1\xe7\x9b\x96\xe7\xbe\xb0\xe9\xb8\xbf\xe7\xa3\x85\xe8\xb0\x93\xe9\xab\x85\xe5\xa8\xb4\xe8\x8b\xb4\xe5\x94\xb7\xe8\x9a\xa3\xe9\x9c\xb9\xe6\x8a\xa8\xe8\xb4\xa4\xe5\x94\xa0\xe7\x8a\xac\xe8\xaa\x93\xe9\x80\x8d\xe5\xba\xa0\xe9\x80\xbc\xe9\xba\x93\xe7\xb1\xbc\xe9\x87\x89\xe5\x91\x9c\xe7\xa2\xa7\xe7\xa7\xa7\xe6\xb0\xa9\xe6\x91\x94\xe9\x9c\x84\xe7\xa9\xb8\xe7\xba\xa8\xe8\xbe\x9f\xe5\xa6\x88\xe6\x98\xa0\xe5\xae\x8c\xe7\x89\x9b\xe7\xbc\xb4\xe5\x97\xb7\xe7\x82\x8a\xe6\x81\xa9\xe8\x8d\x94\xe8\x8c\x86\xe6\x8e\x89\xe7\xb4\x8a\xe6\x85\x8c\xe8\x8e\x93\xe7\xbe\x9f\xe9\x98\x99\xe8\x90\x81\xe7\xa3\x90\xe5\x8f\xa6\xe8\x95\xb9\xe8\xbe\xb1\xe9\xb3\x90\xe6\xb9\xae\xe5\x90\xa1\xe5\x90\xa9\xe5\x94\x90\xe7\x9d\xa6\xe5\x9e\xa0\xe8\x88\x92\xe5\x9c\x9c\xe5\x86\x97\xe7\x9e\xbf\xe6\xba\xba\xe8\x8a\xbe\xe5\x9b\xb1\xe5\x8c\xa0\xe5\x83\xb3\xe6\xb1\x90\xe8\x8f\xa9\xe9\xa5\xac\xe6\xbc\x93\xe9\xbb\x91\xe9\x9c\xb0\xe6\xb5\xb8\xe6\xbf\xa1\xe7\xaa\xa5\xe6\xaf\x82\xe8\x92\xa1\xe5\x85\xa2\xe9\xa9\xbb\xe9\xb9\x89\xe8\x8a\xae\xe8\xaf\x99\xe8\xbf\xab\xe9\x9b\xb3\xe5\x8e\x82\xe5\xbf\x90\xe8\x87\x86\xe7\x8c\xb4\xe9\xb8\xa3\xe8\x9a\xaa\xe6\xa0\x88\xe7\xae\x95\xe7\xbe\xa1\xe6\xb8\x90\xe8\x8e\x86\xe6\x8d\x8d\xe7\x9c\x88\xe5\x93\x93\xe8\xb6\xb4\xe8\xb9\xbc\xe5\x9f\x95\xe5\x9a\xa3\xe9\xaa\x9b\xe5\xae\x8f\xe6\xb7\x84\xe6\x96\x91\xe5\x99\x9c\xe4\xb8\xa5\xe7\x91\x9b\xe5\x9e\x83\xe6\xa4\x8e\xe8\xaf\xb1\xe5\x8e\x8b\xe5\xba\xbe\xe7\xbb\x9e\xe7\x84\x98\xe5\xbb\xbf\xe6\x8a\xa1\xe8\xbf\x84\xe6\xa3\x98\xe5\xa4\xab\xe7\xba\xac\xe9\x94\xb9\xe7\x9c\xa8\xe7\x9e\x8c\xe4\xbe\xa0\xe8\x84\x90\xe7\xab\x9e\xe7\x80\x91\xe5\xad\xb3\xe9\xaa\xa7\xe9\x81\x81\xe5\xa7\x9c\xe9\xa2\xa6\xe8\x8d\xaa\xe6\xbb\x9a\xe8\x90\xa6\xe4\xbc\xaa\xe9\x80\xb8\xe7\xb2\xb3\xe7\x88\xac\xe9\x94\x81\xe7\x9f\xa3\xe5\xbd\xb9\xe8\xb6\xa3\xe6\xb4\x92\xe9\xa2\x94\xe8\xaf\x8f\xe9\x80\x90\xe5\xa5\xb8\xe7\x94\xad\xe6\x83\xa0\xe6\x94\x80\xe8\xb9\x84\xe6\xb3\x9b\xe5\xb0\xbc\xe6\x8b\xbc\xe9\x98\xae\xe9\xb9\xb0\xe4\xba\x9a\xe9\xa2\x88\xe6\x83\x91\xe5\x8b\x92\xe3\x80\x89\xe9\x99\x85\xe8\x82\x9b\xe7\x88\xb7\xe5\x88\x9a\xe9\x92\xa8\xe4\xb8\xb0\xe5\x85\xbb\xe5\x86\xb6\xe9\xb2\xbd\xe8\xbe\x89\xe8\x94\xbb\xe7\x94\xbb\xe8\xa6\x86\xe7\x9a\xb4\xe5\xa6\x8a\xe9\xba\xa6\xe8\xbf\x94\xe9\x86\x89\xe7\x9a\x82\xe6\x93\x80\xe3\x80\x97\xe9\x85\xb6\xe5\x87\x91\xe7\xb2\xb9\xe6\x82\x9f\xe8\xaf\x80\xe7\xa1\x96\xe6\xb8\xaf\xe5\x8d\x9cz\xe6\x9d\x80\xe6\xb6\x95\xc2\xb1\xe8\x88\x8d\xe9\x93\xa0\xe6\x8a\xb5\xe5\xbc\x9b\xe6\xae\xb5\xe6\x95\x9d\xe9\x95\x90\xe5\xa5\xa0\xe6\x8b\x82\xe8\xbd\xb4\xe8\xb7\x9b\xe8\xa2\xb1et\xe6\xb2\x89\xe8\x8f\x87\xe4\xbf\x8e\xe8\x96\xaa\xe5\xb3\xa6\xe7\xa7\xad\xe8\x9f\xb9\xe5\x8e\x86\xe7\x9b\x9f\xe8\x8f\xa0\xe5\xaf\xa1\xe6\xb6\xb2\xe8\x82\xa2\xe5\x96\xbb\xe6\x9f\x93\xe8\xa3\xb1\xe6\x82\xb1\xe6\x8a\xb1\xe6\xb0\x99\xe8\xb5\xa4\xe6\x8d\x85\xe7\x8c\x9b\xe8\xb7\x91\xe6\xb0\xae\xe8\xb0\xa3\xe4\xbb\x81\xe5\xb0\xba\xe8\xbe\x8a\xe7\xaa\x8d\xe7\x83\x99\xe8\xa1\x8d\xe6\x9e\xb6\xe6\x93\xa6\xe5\x80\x8f\xe7\x92\x90\xe7\x91\x81\xe5\xb8\x81\xe6\xa5\x9e\xe8\x83\x96\xe5\xa4\x94\xe8\xb6\xb8\xe9\x82\x9b\xe6\x83\xb4\xe9\xa5\x95\xe8\x99\x94\xe8\x9d\x8e\xc2\xa7\xe5\x93\x89\xe8\xb4\x9d\xe5\xae\xbd\xe8\xbe\xab\xe7\x82\xae\xe6\x89\xa9\xe9\xa5\xb2\xe7\xb1\xbd\xe9\xad\x8f\xe8\x8f\x9f\xe9\x94\xb0\xe4\xbc\x8d\xe7\x8c\x9d\xe6\x9c\xab\xe7\x90\xb3\xe5\x93\x9a\xe8\x9b\x8e\xe9\x82\x82\xe5\x91\x80\xe5\xa7\xbf\xe9\x84\x9e\xe5\x8d\xb4\xe6\xad\xa7\xe4\xbb\x99\xe6\x81\xb8\xe6\xa4\x90\xe6\xa3\xae\xe7\x89\x92\xe5\xaf\xa4\xe8\xa2\x92\xe5\xa9\x86\xe8\x99\xa2\xe9\x9b\x85\xe9\x92\x89\xe6\x9c\xb5\xe8\xb4\xbc\xe6\xac\xb2\xe8\x8b\x9e\xe5\xaf\xb0\xe6\x95\x85\xe9\xbe\x9a\xe5\x9d\xad\xe5\x98\x98\xe5\x92\xab\xe7\xa4\xbc\xe7\xa1\xb7\xe5\x85\x80\xe7\x9d\xa2\xe6\xb1\xb6\xe2\x80\x99\xe9\x93\xb2\xe7\x83\xa7\xe7\xbb\x95\xe8\xaf\x83\xe6\xb5\x83\xe9\x92\xbf\xe5\x93\xba\xe6\x9f\x9c\xe8\xae\xbc\xe9\xa2\x8a\xe7\x92\x81\xe8\x85\x94\xe6\xb4\xbd\xe5\x92\x90\xe8\x84\xb2\xe7\xb0\x8c\xe7\xad\xa0\xe9\x95\xa3\xe7\x8e\xae\xe9\x9e\xa0\xe8\xb0\x81\xe5\x85\xbc\xe5\xa7\x86\xe6\x8c\xa5\xe6\xa2\xaf\xe8\x9d\xb4\xe8\xb0\x98\xe6\xbc\x95\xe5\x88\xb7\xe8\xba\x8f\xe5\xae\xa6\xe5\xbc\xbcb\xe5\x9e\x8c\xe5\x8a\x88\xe9\xba\x9f\xe8\x8e\x89\xe6\x8f\xad\xe7\xac\x99\xe6\xb8\x8e\xe4\xbb\x95\xe5\x97\xa4\xe4\xbb\x93\xe9\x85\x8d\xe6\x80\x8f\xe6\x8a\xac\xe9\x94\x99\xe6\xb3\xaf\xe9\x95\x8a\xe5\xad\xb0\xe7\x8c\xbf\xe9\x82\xaa\xe4\xbb\x8d\xe7\xa7\x8b\xe9\xbc\xac\xe5\xa3\xb9\xe6\xad\x87\xe5\x90\xb5\xe7\x82\xbc<\xe5\xb0\xa7\xe5\xb0\x84\xe6\x9f\xac\xe5\xbb\xb7\xe8\x83\xa7\xe9\x9c\xbe\xe5\x87\xb3\xe9\x9a\x8b\xe8\x82\x9a\xe6\xb5\xae\xe6\xa2\xa6\xe7\xa5\xa5\xe6\xa0\xaa\xe5\xa0\xb5\xe9\x80\x80L\xe9\xb9\xab\xe8\xb7\x8e\xe5\x87\xb6\xe6\xaf\xbd\xe8\x8d\x9f\xe7\x82\xab\xe6\xa0\xa9\xe7\x8e\xb3\xe7\x94\x9c\xe6\xb2\x82\xe9\xb9\xbf\xe9\xa1\xbd\xe4\xbc\xaf\xe7\x88\xb9\xe8\xb5\x94\xe8\x9b\xb4\xe5\xbe\x90\xe5\x8c\xa1\xe6\xac\xa3\xe7\x8b\xb0\xe7\xbc\xb8\xe9\x9b\xb9\xe8\x9f\x86\xe7\x96\xa4\xe9\xbb\x98\xe6\xb2\xa4\xe5\x95\x9c\xe7\x97\x82\xe8\xa1\xa3\xe7\xa6\x85wih\xe8\xbe\xbd\xe8\x91\xb3\xe9\xbb\x9d\xe9\x92\x97\xe5\x81\x9c\xe6\xb2\xbd\xe6\xa3\x92\xe9\xa6\xa8\xe9\xa2\x8c\xe8\x82\x89\xe5\x90\xb4\xe7\xa1\xab\xe6\x82\xaf\xe5\x8a\xbe\xe5\xa8\x88\xe9\xa9\xac\xe5\x95\xa7\xe5\x90\x8a\xe6\x82\x8c\xe9\x95\x91\xe5\xb3\xad\xe5\xb8\x86\xe7\x80\xa3\xe6\xb6\x89\xe5\x92\xb8\xe7\x96\xb8\xe6\xbb\x8b\xe6\xb3\xa3\xe7\xbf\xa6\xe6\x8b\x99\xe7\x99\xb8\xe9\x92\xa5\xe8\x9c\x92+\xe5\xb0\xbe\xe5\xba\x84\xe5\x87\x9d\xe6\xb3\x89\xe5\xa9\xa2\xe6\xb8\xb4\xe8\xb0\x8a\xe4\xb9\x9e\xe9\x99\x86\xe9\x94\x89\xe7\xb3\x8a\xe9\xb8\xa6\xe6\xb7\xaeIBN\xe6\x99\xa6\xe5\xbc\x97\xe4\xb9\x94\xe5\xba\xa5\xe8\x91\xa1\xe5\xb0\xbb\xe5\xb8\xad\xe6\xa9\xa1\xe5\x82\xa3\xe6\xb8\xa3\xe6\x8b\xbf\xe6\x83\xa9\xe9\xba\x8b\xe6\x96\x9b\xe7\xbc\x83\xe7\x9f\xae\xe8\x9b\x8f\xe5\xb2\x98\xe9\xb8\xbd\xe5\xa7\x90\xe8\x86\x8f\xe5\x82\xac\xe5\xa5\x94\xe9\x95\x92\xe5\x96\xb1\xe8\xa0\xa1\xe6\x91\xa7\xe9\x92\xaf\xe8\x83\xa4\xe6\x9f\xa0\xe6\x8b\x90\xe7\x92\x8b\xe9\xb8\xa5\xe5\x8d\xa2\xe8\x8d\xa1\xe5\x80\xbe^_\xe7\x8f\x80\xe9\x80\x84\xe8\x90\xa7\xe5\xa1\xbe\xe6\x8e\x87\xe8\xb4\xae\xe7\xac\x86\xe8\x81\x82\xe5\x9c\x83\xe5\x86\xb2\xe5\xb5\xacM\xe6\xbb\x94\xe7\xac\x95\xe5\x80\xbc\xe7\x82\x99\xe5\x81\xb6\xe8\x9c\xb1\xe6\x90\x90\xe6\xa2\x86\xe6\xb1\xaa\xe8\x94\xac\xe8\x85\x91\xe9\xb8\xaf\xe8\xb9\x87\xe6\x95\x9e\xe7\xbb\xaf\xe4\xbb\xa8\xe7\xa5\xaf\xe8\xb0\x86\xe6\xa2\xa7\xe7\xb3\x97\xe9\x91\xab\xe5\x95\xb8\xe8\xb1\xba\xe5\x9b\xb9\xe7\x8c\xbe\xe5\xb7\xa2\xe6\x9f\x84\xe7\x80\x9b\xe7\xad\x91\xe8\xb8\x8c\xe6\xb2\xad\xe6\x9a\x97\xe8\x8b\x81\xe9\xb1\xbf\xe8\xb9\x89\xe8\x84\x82\xe8\x98\x96\xe7\x89\xa2\xe7\x83\xad\xe6\x9c\xa8\xe5\x90\xb8\xe6\xba\x83\xe5\xae\xa0\xe5\xba\x8f\xe6\xb3\x9e\xe5\x81\xbf\xe6\x8b\x9c\xe6\xaa\xa9\xe5\x8e\x9a\xe6\x9c\x90\xe6\xaf\x97\xe8\x9e\xb3\xe5\x90\x9e\xe5\xaa\x9a\xe6\x9c\xbd\xe6\x8b\x85\xe8\x9d\x97\xe6\xa9\x98\xe7\x95\xb4\xe7\xa5\x88\xe7\xb3\x9f\xe7\x9b\xb1\xe9\x9a\xbc\xe9\x83\x9c\xe6\x83\x9c\xe7\x8f\xa0\xe8\xa3\xa8\xe9\x93\xb5\xe7\x84\x99\xe7\x90\x9a\xe5\x94\xaf\xe5\x92\x9a\xe5\x99\xaa\xe9\xaa\x8a\xe4\xb8\xab\xe6\xbb\xa2\xe5\x8b\xa4\xe6\xa3\x89\xe5\x91\xb8\xe5\x92\xa3\xe6\xb7\x80\xe9\x9a\x94\xe8\x95\xbe\xe7\xaa\x88\xe9\xa5\xa8\xe6\x8c\xa8\xe7\x85\x85\xe7\x9f\xad\xe5\x8c\x99\xe7\xb2\x95\xe9\x95\x9c\xe8\xb5\xa3\xe6\x92\x95\xe5\xa2\xa9\xe9\x85\xac\xe9\xa6\x81\xe8\xb1\x8c\xe9\xa2\x90\xe6\x8a\x97\xe9\x85\xa3\xe6\xb0\x93\xe4\xbd\x91\xe6\x90\x81\xe5\x93\xad\xe9\x80\x92\xe8\x80\xb7\xe6\xb6\xa1\xe6\xa1\x83\xe8\xb4\xbb\xe7\xa2\xa3\xe6\x88\xaa\xe7\x98\xa6\xe6\x98\xad\xe9\x95\x8c\xe8\x94\x93\xe6\xb0\x9a\xe7\x94\xb2\xe7\x8c\x95\xe8\x95\xb4\xe8\x93\xac\xe6\x95\xa3\xe6\x8b\xbe\xe7\xba\x9b\xe7\x8b\xbc\xe7\x8c\xb7\xe9\x93\x8e\xe5\x9f\x8b\xe6\x97\x96\xe7\x9f\xbe\xe8\xae\xb3\xe5\x9b\x8a\xe7\xb3\x9c\xe8\xbf\x88\xe7\xb2\x9f\xe8\x9a\x82\xe7\xb4\xa7\xe9\xb2\xb3\xe7\x98\xa2\xe6\xa0\xbd\xe7\xa8\xbc\xe7\xbe\x8a\xe9\x94\x84\xe6\x96\x9f\xe7\x9d\x81\xe6\xa1\xa5\xe7\x93\xae\xe8\xb9\x99\xe7\xa5\x89\xe9\x86\xba\xe9\xbc\xbb\xe6\x98\xb1\xe5\x89\x83\xe8\xb7\xb3\xe7\xaf\xb1\xe8\xb7\xb7\xe8\x92\x9c\xe7\xbf\x8e\xe5\xae\x85\xe6\x99\x96\xe5\x97\x91\xe5\xa3\x91\xe5\xb3\xbb\xe7\x99\xab\xe5\xb1\x8f\xe7\x8b\xa0\xe9\x99\x8b\xe8\xa2\x9c\xe9\x80\x94\xe6\x86\x8e\xe7\xa5\x80\xe8\x8e\xb9\xe6\xbb\x9f\xe4\xbd\xb6\xe6\xba\xa5\xe8\x87\xa3\xe7\xba\xa6\xe7\x9b\x9b\xe5\xb3\xb0\xe7\xa3\x81\xe6\x85\xb5\xe5\xa9\xaa\xe6\x8b\xa6\xe8\x8e\x85\xe6\x9c\x95\xe9\xb9\xa6\xe7\xb2\xb2\xe8\xa3\xa4\xe5\x93\x8e\xe7\x96\xa1\xe5\xab\x96\xe7\x90\xb5\xe7\xaa\x9f\xe5\xa0\xaa\xe8\xb0\x9b\xe5\x98\x89\xe5\x84\xa1\xe9\xb3\x9d\xe6\x96\xa9\xe9\x83\xbe\xe9\xa9\xb8\xe9\x85\x8a\xe5\xa6\x84\xe8\x83\x9c\xe8\xb4\xba\xe5\xbe\x99\xe5\x82\x85\xe5\x99\x8c\xe9\x92\xa2\xe6\xa0\x85\xe5\xba\x87\xe6\x81\x8b\xe5\x8c\x9d\xe5\xb7\xaf\xe9\x82\x88\xe5\xb0\xb8\xe9\x94\x9a\xe7\xb2\x97\xe4\xbd\x9f\xe8\x9b\x9f\xe8\x96\xb9\xe7\xba\xb5\xe8\x9a\x8a\xe9\x83\x85\xe7\xbb\xa2\xe9\x94\x90\xe8\x8b\x97\xe4\xbf\x9e\xe7\xaf\x86\xe6\xb7\x86\xe8\x86\x80\xe9\xb2\x9c\xe7\x85\x8e\xe8\xaf\xb6\xe7\xa7\xbd\xe5\xaf\xbb\xe6\xb6\xae\xe5\x88\xba\xe6\x80\x80\xe5\x99\xb6\xe5\xb7\xa8\xe8\xa4\xb0\xe9\xad\x85\xe7\x81\xb6\xe7\x81\x8c\xe6\xa1\x89\xe8\x97\x95\xe8\xb0\x9c\xe8\x88\xb8\xe8\x96\x84\xe6\x90\x80\xe6\x81\xbd\xe5\x80\x9f\xe7\x89\xaf\xe7\x97\x89\xe6\xb8\xa5\xe6\x84\xbf\xe4\xba\x93\xe8\x80\x98\xe6\x9d\xa0\xe6\x9f\xa9\xe9\x94\x94\xe8\x9a\xb6\xe9\x92\xa3\xe7\x8f\x88\xe5\x96\x98\xe8\xb9\x92\xe5\xb9\xbd\xe8\xb5\x90\xe7\xa8\x97\xe6\x99\xa4\xe8\x8e\xb1\xe6\xb3\x94\xe6\x89\xaf\xe8\x82\xaf\xe8\x8f\xaa\xe8\xa3\x86\xe8\x85\xa9\xe8\xb1\x89\xe7\x96\x86\xe9\xaa\x9c\xe8\x85\x90\xe5\x80\xad\xe7\x8f\x8f\xe5\x94\x94\xe7\xb2\xae\xe4\xba\xa1\xe6\xb6\xa6\xe6\x85\xb0\xe4\xbc\xbd\xe6\xa9\x84\xe7\x8e\x84\xe8\xaa\x89\xe9\x86\x90\xe8\x83\x86\xe9\xbe\x8a\xe7\xb2\xbc\xe5\xa1\xac\xe9\x99\x87\xe5\xbd\xbc\xe5\x89\x8a\xe5\x97\xa3\xe7\xbb\xbe\xe8\x8a\xbd\xe5\xa6\x97\xe5\x9e\xad\xe7\x98\xb4\xe7\x88\xbd\xe8\x96\x8f\xe5\xaf\xa8\xe9\xbe\x88\xe6\xb3\xa0\xe5\xbc\xb9\xe8\xb5\xa2\xe6\xbc\xaa\xe7\x8c\xab\xe5\x98\xa7\xe6\xb6\x82\xe6\x81\xa4\xe5\x9c\xad\xe8\x8c\xa7\xe7\x83\xbd\xe5\xb1\x91\xe7\x97\x95\xe5\xb7\xbe\xe8\xb5\x96\xe8\x8d\xb8\xe5\x87\xb0\xe8\x85\xae\xe7\x95\x88\xe4\xba\xb5\xe8\xb9\xb2\xe5\x81\x83\xe8\x8b\x87\xe6\xbe\x9c\xe8\x89\xae\xe6\x8d\xa2\xe9\xaa\xba\xe7\x83\x98\xe8\x8b\x95\xe6\xa2\x93\xe9\xa2\x89\xe8\x82\x87\xe5\x93\x97\xe6\x82\x84\xe6\xb0\xa4\xe6\xb6\xa0\xe8\x91\xac\xe5\xb1\xa0\xe9\xb9\xad\xe6\xa4\x8d\xe7\xab\xba\xe4\xbd\xaf\xe8\xaf\xa3\xe9\xb2\x87\xe7\x98\x80\xe9\xb2\x85\xe9\x82\xa6\xe7\xa7\xbb\xe6\xbb\x81\xe5\x86\xaf\xe8\x80\x95\xe7\x99\x94\xe6\x88\x8c\xe8\x8c\xac\xe6\xb2\x81\xe5\xb7\xa9\xe6\x82\xa0\xe6\xb9\x98\xe6\xb4\xaa\xe7\x97\xb9\xe9\x94\x9f\xe5\xbe\xaa\xe8\xb0\x8b\xe8\x85\x95\xe9\xb3\x83\xe9\x92\xa0\xe6\x8d\x9e\xe7\x84\x89\xe8\xbf\x8e\xe7\xa2\xb1\xe4\xbc\xab\xe6\x80\xa5\xe6\xa6\xb7\xe5\xa5\x88\xe9\x82\x9d\xe5\x8d\xaf\xe8\xbe\x84\xe7\x9a\xb2\xe5\x8d\x9f\xe9\x86\x9b\xe7\x95\xb9\xe5\xbf\xa7\xe7\xa8\xb3\xe9\x9b\x84\xe6\x98\xbc\xe7\xbc\xa9\xe9\x98\x88\xe7\x9d\x91\xe6\x89\x8c\xe8\x80\x97\xe6\x9b\xa6\xe6\xb6\x85\xe6\x8d\x8f\xe7\x9e\xa7\xe9\x82\x95\xe6\xb7\x96\xe6\xbc\x89\xe9\x93\x9d\xe8\x80\xa6\xe7\xa6\xb9\xe6\xb9\x9b\xe5\x96\xbd\xe8\x8e\xbc\xe7\x90\x85\xe8\xaf\xb8\xe8\x8b\x8e\xe7\xba\x82\xe7\xa1\x85\xe5\xa7\x8b\xe5\x97\xa8\xe5\x82\xa5\xe7\x87\x83\xe8\x87\x82\xe8\xb5\x85\xe5\x98\x88\xe5\x91\x86\xe8\xb4\xb5\xe5\xb1\xb9\xe5\xa3\xae\xe8\x82\x8b\xe4\xba\x8d\xe8\x9a\x80\xe5\x8d\x85\xe8\xb1\xb9\xe8\x85\x86\xe9\x82\xac\xe8\xbf\xad\xe6\xb5\x8a}\xe7\xab\xa5\xe8\x9e\x82\xe6\x8d\x90\xe5\x9c\xa9\xe5\x8b\x90\xe8\xa7\xa6\xe5\xaf\x9e\xe6\xb1\x8a\xe5\xa3\xa4\xe8\x8d\xab\xe8\x86\xba\xe6\xb8\x8c\xe8\x8a\xb3\xe6\x87\xbf\xe9\x81\xb4\xe8\x9e\x88\xe6\xb3\xb0\xe8\x93\xbc\xe8\x9b\xa4\xe8\x8c\x9c\xe8\x88\x85\xe6\x9e\xab\xe6\x9c\x94\xe8\x86\x9d\xe7\x9c\x99\xe9\x81\xbf\xe6\xa2\x85\xe5\x88\xa4\xe9\xb9\x9c\xe7\x92\x9c\xe7\x89\x8d\xe7\xbc\x85\xe5\x9e\xab\xe8\x97\xbb\xe9\xbb\x94\xe4\xbe\xa5\xe6\x83\x9a\xe6\x87\x82\xe8\xb8\xa9\xe8\x85\xb0\xe8\x85\x88\xe6\x9c\xad\xe4\xb8\x9e\xe5\x94\xbe\xe6\x85\x88\xe9\xa1\xbf\xe6\x91\xb9\xe8\x8d\xbb\xe7\x90\xac~\xe6\x96\xa7\xe6\xb2\x88\xe6\xbb\x82\xe8\x83\x81\xe8\x83\x80\xe5\xb9\x84\xe8\x8e\x9cZ\xe5\x8c\x80\xe9\x84\x84\xe6\x8e\x8c\xe7\xbb\xb0\xe8\x8c\x8e\xe7\x84\x9a\xe8\xb5\x8b\xe8\x90\xb1\xe8\xb0\x91\xe6\xb1\x81\xe9\x93\x92\xe7\x9e\x8e\xe5\xa4\xba\xe8\x9c\x97\xe9\x87\x8e\xe5\xa8\x86\xe5\x86\x80\xe5\xbc\xaf\xe7\xaf\x81\xe6\x87\xb5\xe7\x81\x9e\xe9\x9a\xbd\xe8\x8a\xa1\xe8\x84\x98\xe4\xbf\x90\xe8\xbe\xa9\xe8\x8a\xaf\xe6\x8e\xba\xe5\x96\x8f\xe8\x86\x88\xe8\x9d\x88\xe8\xa7\x90\xe6\x82\x9a\xe8\xb8\xb9\xe8\x94\x97\xe7\x86\xa0\xe9\xbc\xa0\xe5\x91\xb5\xe6\x8a\x93\xe6\xa9\xbc\xe5\xb3\xa8\xe7\x95\x9c\xe7\xbc\x94\xe7\xa6\xbe\xe5\xb4\xad\xe5\xbc\x83\xe7\x86\x8a\xe6\x91\x92\xe5\x87\xb8\xe6\x8b\x97\xe7\xa9\xb9\xe8\x92\x99\xe6\x8a\x92\xe7\xa5\x9b\xe5\x8a\x9d\xe9\x97\xab\xe6\x89\xb3\xe9\x98\xb5\xe9\x86\x8c\xe8\xb8\xaa\xe5\x96\xb5\xe4\xbe\xa3\xe6\x90\xac\xe4\xbb\x85\xe8\x8d\xa7\xe8\xb5\x8e\xe8\x9d\xbe\xe7\x90\xa6\xe4\xb9\xb0\xe5\xa9\xa7\xe7\x9e\x84\xe5\xaf\x93\xe7\x9a\x8e\xe5\x86\xbb\xe8\xb5\x9d\xe7\xae\xa9\xe8\x8e\xab\xe7\x9e\xb0\xe9\x83\x8a\xe7\xac\xab\xe5\xa7\x9d\xe7\xad\x92\xe6\x9e\xaa\xe9\x81\xa3\xe7\x85\xb8\xe8\xa2\x8b\xe8\x88\x86\xe7\x97\xb1\xe6\xb6\x9b\xe6\xaf\x8d\xe3\x80\x87\xe5\x90\xaf\xe8\xb7\xb5\xe8\x80\x99\xe7\xbb\xb2\xe7\x9b\x98\xe9\x81\x82\xe6\x98\x8a\xe6\x90\x9e\xe6\xa7\xbf\xe8\xaf\xac\xe7\xba\xb0\xe6\xb3\x93\xe6\x83\xa8\xe6\xaa\xac\xe4\xba\xbb\xe8\xb6\x8aCo\xe6\x86\xa9\xe7\x86\xb5\xe7\xa5\xb7\xe9\x92\x92\xe6\x9a\xa7\xe5\xa1\x94\xe9\x98\x97\xe8\x83\xb0\xe5\x92\x84\xe5\xa8\xb6\xe9\xad\x94\xe7\x90\xb6\xe9\x92\x9e\xe9\x82\xbb\xe6\x89\xac\xe6\x9d\x89\xe6\xae\xb4\xe5\x92\xbd\xe5\xbc\x93\xe3\x80\x86\xe9\xab\xbb\xe3\x80\x91\xe5\x90\xad\xe6\x8f\xbd\xe9\x9c\x86\xe6\x8b\x84\xe6\xae\x96\xe8\x84\x86\xe5\xbd\xbb\xe5\xb2\xa9\xe8\x8a\x9d\xe5\x8b\x83\xe8\xbe\xa3\xe5\x89\x8c\xe9\x92\x9d\xe5\x98\x8e\xe7\x94\x84\xe4\xbd\x98\xe7\x9a\x96\xe4\xbc\xa6\xe6\x8e\x88\xe5\xbe\x95\xe6\x86\x94\xe6\x8c\xaa\xe7\x9a\x87\xe5\xba\x9e\xe7\xa8\x94\xe8\x8a\x9c\xe8\xb8\x8f\xe6\xba\xb4\xe5\x85\x96\xe5\x8d\x92\xe6\x93\xa2\xe9\xa5\xa5\xe9\xb3\x9e\xe7\x85\xb2\xe2\x80\xb0\xe8\xb4\xa6\xe9\xa2\x97\xe5\x8f\xbb\xe6\x96\xaf\xe6\x8d\xa7\xe9\xb3\x8d\xe7\x90\xae\xe8\xae\xb9\xe8\x9b\x99\xe7\xba\xbd\xe8\xb0\xad\xe9\x85\xb8\xe5\x85\x94\xe8\x8e\x92\xe7\x9d\x87\xe4\xbc\x9f\xe8\xa7\x91\xe7\xbe\xb2\xe5\x97\x9c\xe5\xae\x9c\xe8\xa4\x90\xe6\x97\x8e\xe8\xbe\x9b\xe5\x8d\xa6\xe8\xaf\x98\xe7\xad\x8b\xe9\x8e\x8f\xe6\xba\xaa\xe6\x8c\x9b\xe7\x86\x94\xe9\x98\x9c\xe6\x99\xb0\xe9\xb3\x85\xe4\xb8\xa2\xe5\xa5\x9a\xe7\x81\xb8\xe5\x91\xb1\xe7\x8c\xae\xe9\x99\x89\xe9\xbb\x9b\xe9\xb8\xaa\xe7\x94\xbe\xe8\x90\xa8\xe7\x96\xae\xe6\x8b\xaf\xe6\xb4\xb2\xe7\x96\xb9\xe8\xbe\x91\xe5\x8f\x99\xe6\x81\xbb\xe8\xb0\x92\xe5\x85\x81\xe6\x9f\x94\xe7\x83\x82\xe6\xb0\x8f\xe9\x80\x85\xe6\xbc\x86\xe6\x8b\x8e\xe6\x83\x8b\xe6\x89\x88\xe6\xb9\x9f\xe7\xba\xad\xe5\x95\x95\xe6\x8e\xac\xe6\x93\x9e\xe5\x93\xa5\xe5\xbf\xbd\xe6\xb6\xa4\xe9\xb8\xb5\xe9\x9d\xa1\xe9\x83\x97\xe7\x93\xb7\xe6\x89\x81\xe5\xbb\x8a\xe6\x80\xa8\xe9\x9b\x8f\xe9\x92\xae\xe6\x95\xa6E\xe6\x87\xa6\xe6\x86\x8b\xe6\xb1\x80\xe6\x8b\x9a\xe5\x95\x89\xe8\x85\x8c\xe5\xb2\xb8f\xe7\x97\xbc\xe7\x9e\x85\xe5\xb0\x8a\xe5\x92\x80\xe7\x9c\xa9\xe9\xa3\x99\xe5\xbf\x8c\xe4\xbb\x9d\xe8\xbf\xa6\xe7\x86\xac\xe6\xaf\xab\xe8\x83\xaf\xe7\xaf\x91\xe8\x8c\x84\xe8\x85\xba\xe5\x87\x84\xe8\x88\x9b\xe7\xa2\xb4\xe9\x94\xb5\xe8\xaf\xa7\xe7\xbe\xaf\xe5\xbe\x8c\xe6\xbc\x8f\xe6\xb1\xa4\xe5\xae\x93\xe4\xbb\x9e\xe8\x9a\x81\xe5\xa3\xb6\xe8\xb0\xb0\xe7\x9a\x91\xe9\x93\x84\xe6\xa3\xb0\xe7\xbd\x94\xe8\xbe\x85\xe6\x99\xb6\xe8\x8b\xa6\xe7\x89\x9f\xe9\x97\xbd\\\xe7\x83\x83\xe9\xa5\xae\xe8\x81\xbf\xe4\xb8\x99\xe8\x9b\xb3\xe6\x9c\xb1\xe7\x85\xa4\xe6\xb6\x94\xe9\xb3\x96\xe7\x8a\x81\xe7\xbd\x90\xe8\x8d\xbc\xe7\xa0\x92\xe6\xb7\xa6\xe5\xa6\xa4\xe9\xbb\x8f\xe6\x88\x8e\xe5\xad\x91\xe5\xa9\x95\xe7\x91\xbe\xe6\x88\xa2\xe9\x92\xb5\xe6\x9e\xa3\xe6\x8d\x8b\xe7\xa0\xa5\xe8\xa1\xa9\xe7\x8b\x99\xe6\xa1\xa0\xe7\xa8\xa3\xe9\x98\x8e\xe8\x82\x83\xe6\xa2\x8f\xe8\xaf\xab\xe5\xad\xaa\xe6\x98\xb6\xe5\xa9\x8a\xe8\xa1\xab\xe5\x97\x94\xe4\xbe\x83\xe5\xa1\x9e\xe8\x9c\x83\xe6\xa8\xb5\xe5\xb3\x92\xe8\xb2\x8c\xe5\xb1\xbf\xe6\xac\xba\xe7\xbc\xab\xe9\x98\x90\xe6\xa0\x96\xe8\xaf\x9f\xe7\x8f\x9e\xe8\x8d\xad\xe5\x90\x9d\xe8\x90\x8d\xe5\x97\xbd\xe6\x81\x82\xe5\x95\xbb\xe8\x9c\xb4\xe7\xa3\xac\xe5\xb3\x8b\xe4\xbf\xb8\xe8\xb1\xab\xe8\xb0\x8e\xe5\xbe\x8a\xe9\x95\x8d\xe9\x9f\xac\xe9\xad\x87\xe6\x99\xb4U\xe5\x9b\x9f\xe7\x8c\x9c\xe8\x9b\xae\xe5\x9d\x90\xe5\x9b\xbf\xe4\xbc\xb4\xe4\xba\xad\xe8\x82\x9d\xe4\xbd\x97\xe8\x9d\xa0\xe5\xa6\x83\xe8\x83\x9e\xe6\xbb\xa9\xe6\xa6\xb4\xe6\xb0\x96\xe5\x9e\xa9\xe8\x8b\x8b\xe7\xa0\xa3\xe6\x89\xaa\xe9\xa6\x8f\xe5\xa7\x93\xe8\xbd\xa9\xe5\x8e\x89\xe5\xa4\xa5\xe4\xbe\x88\xe7\xa6\x80\xe5\x9e\x92\xe5\xb2\x91\xe8\xb5\x8f\xe9\x92\x9b\xe8\xbe\x90\xe7\x97\x94\xe6\x8a\xab\xe7\xba\xb8\xe7\xa2\xb3\xe2\x80\x9c\xe5\x9d\x9e\xe8\xa0\x93\xe6\x8c\xa4\xe8\x8d\xa5\xe6\xb2\x85\xe6\x82\x94\xe9\x93\xa7\xe5\xb8\xbc\xe8\x92\x8c\xe8\x9d\x87apyng\xe5\x93\x80\xe6\xb5\x86\xe7\x91\xb6\xe5\x87\xbf\xe6\xa1\xb6\xe9\xa6\x88\xe7\x9a\xae\xe5\xa5\xb4\xe8\x8b\x9c\xe4\xbd\xa4\xe4\xbc\xb6\xe6\x99\x97\xe9\x93\xb1\xe7\x82\xac\xe4\xbc\x98\xe5\xbc\x8a\xe6\xb0\xa2\xe6\x81\x83\xe7\x94\xab\xe6\x94\xa5\xe7\xab\xaf\xe9\x94\x8c\xe7\x81\xb0\xe7\xa8\xb9\xe7\x82\x9d\xe6\x9b\x99\xe9\x82\x8b\xe4\xba\xa5\xe7\x9c\xb6\xe7\xa2\xbe\xe6\x8b\x89\xe8\x90\x9d\xe7\xbb\x94\xe6\x8d\xb7\xe6\xb5\x8d\xe8\x85\x8b\xe5\xa7\x91\xe8\x8f\x96\xe5\x87\x8c\xe6\xb6\x9e\xe9\xba\xbd\xe9\x94\xa2\xe6\xa1\xa8\xe6\xbd\xa2\xe7\xbb\x8e\xe9\x95\xb0\xe6\xae\x86\xe9\x94\x91\xe6\xb8\x9d\xe9\x93\xac\xe5\x9b\xb0\xe7\xbb\xbd\xe8\xa7\x8e\xe5\x8c\x88\xe7\xb3\x99\xe6\x9a\x91\xe8\xa3\xb9\xe9\xb8\x9f\xe7\x9b\x94\xe8\x82\xbd\xe8\xbf\xb7\xe7\xb6\xa6\xe3\x80\x8e\xe4\xba\xb3\xe4\xbd\x9d\xe4\xbf\x98\xe9\x92\xb4\xe8\xa7\x87\xe9\xaa\xa5\xe4\xbb\x86\xe7\x96\x9d\xe8\xb7\xaa\xe5\xa9\xb6\xe9\x83\xaf\xe7\x80\xb9\xe5\x94\x89\xe8\x84\x96\xe8\xb8\x9e\xe9\x92\x88\xe6\x99\xbe\xe5\xbf\x92\xe6\x89\xbc\xe7\x9e\xa9\xe5\x8f\x9b\xe6\xa4\x92\xe7\x96\x9f\xe5\x97\xa1\xe9\x82\x97\xe8\x82\x86\xe8\xb7\x86\xe7\x8e\xab\xe5\xbf\xa1\xe6\x8d\xa3\xe5\x92\xa7\xe5\x94\x86\xe8\x89\x84\xe8\x98\x91\xe6\xbd\xa6\xe7\xac\x9b\xe9\x98\x9a\xe6\xb2\xb8\xe6\xb3\xbb\xe6\x8e\x8a\xe8\x8f\xbd\xe8\xb4\xab\xe6\x96\xa5\xe9\xab\x82\xe5\xad\xa2\xe9\x95\x82\xe8\xb5\x82\xe9\xba\x9d\xe9\xb8\xbe\xe5\xb1\xa1\xe8\xa1\xac\xe8\x8b\xb7\xe6\x81\xaa\xe5\x8f\xa0\xe5\xb8\x8c\xe7\xb2\xa4\xe7\x88\xbb\xe5\x96\x9d\xe8\x8c\xab\xe6\x83\xac\xe9\x83\xb8\xe7\xbb\xbb\xe5\xba\xb8\xe6\x92\x85\xe7\xa2\x9f\xe5\xae\x84\xe5\xa6\xb9\xe8\x86\x9b\xe5\x8f\xae\xe9\xa5\xb5\xe5\xb4\x9b\xe5\x97\xb2\xe6\xa4\x85\xe5\x86\xa4\xe6\x90\x85\xe5\x92\x95\xe6\x95\x9b\xe5\xb0\xb9\xe5\x9e\xa6\xe9\x97\xb7\xe8\x9d\x89\xe9\x9c\x8e\xe5\x8b\xb0\xe8\xb4\xa5\xe8\x93\x91\xe6\xb3\xb8\xe8\x82\xa4\xe9\xb9\x8c\xe5\xb9\x8c\xe7\x84\xa6\xe6\xb5\xa0\xe9\x9e\x8d\xe5\x88\x81\xe8\x88\xb0\xe4\xb9\x99\xe7\xab\xbf\xe8\xa3\x94\xe3\x80\x82\xe8\x8c\xb5\xe5\x87\xbd\xe4\xbc\x8a\xe5\x85\x84\xe4\xb8\xa8\xe5\xa8\x9c\xe5\x8c\x8d\xe8\xac\x87\xe8\x8e\xaa\xe5\xae\xa5\xe4\xbc\xbc\xe8\x9d\xbd\xe7\xbf\xb3\xe9\x85\xaa\xe7\xbf\xa0\xe7\xb2\x91\xe8\x96\x87\xe7\xa5\xa2\xe9\xaa\x8f\xe8\xb5\xa0\xe5\x8f\xabQ\xe5\x99\xa4\xe5\x99\xbb\xe7\xab\x96\xe8\x8a\x97\xe8\x8e\xa0\xe6\xbd\xad\xe4\xbf\x8a\xe7\xbe\xbf\xe8\x80\x9cO\xe9\x83\xab\xe8\xb6\x81\xe5\x97\xaa\xe5\x9b\x9a\xe8\xb9\xb6\xe8\x8a\x92\xe6\xb4\x81\xe7\xac\x8b\xe9\xb9\x91\xe6\x95\xb2\xe7\xa1\x9d\xe5\x95\xb6\xe5\xa0\xa1\xe6\xb8\xb2\xe6\x8f\xa9\xe3\x80\x8f\xe6\x90\xba\xe5\xae\xbf\xe9\x81\x92\xe9\xa2\x8d\xe6\x89\xad\xe6\xa3\xb1\xe5\x89\xb2\xe8\x90\x9c\xe8\x94\xb8\xe8\x91\xb5\xe7\x90\xb4\xe6\x8d\x82\xe9\xa5\xb0\xe8\xa1\x99\xe8\x80\xbf\xe6\x8e\xa0\xe5\x8b\x9f\xe5\xb2\x82\xe7\xaa\x96\xe6\xb6\x9f\xe8\x94\xba\xe7\x98\xa4\xe6\x9f\x9e\xe7\x9e\xaa\xe6\x80\x9c\xe5\x8c\xb9\xe8\xb7\x9d\xe6\xa5\x94\xe7\x82\x9c\xe5\x93\x86\xe7\xa7\xa6\xe7\xbc\x8e\xe5\xb9\xbc\xe8\x8c\x81\xe7\xbb\xaa\xe7\x97\xa8\xe6\x81\xa8\xe6\xa5\xb8\xe5\xa8\x85\xe7\x93\xa6\xe6\xa1\xa9\xe9\x9b\xaa\xe5\xac\xb4\xe4\xbc\x8f\xe6\xa6\x94\xe5\xa6\xa5\xe9\x93\xbf\xe6\x8b\x8c\xe7\x9c\xa0\xe9\x9b\x8d\xe7\xbc\x87\xe2\x80\x98\xe5\x8d\x93\xe6\x90\x93\xe5\x93\x8c\xe8\xa7\x9e\xe5\x99\xa9\xe5\xb1\x88\xe5\x93\xa7\xe9\xab\x93\xe5\x92\xa6\xe5\xb7\x85\xe5\xa8\x91\xe4\xbe\x91\xe6\xb7\xab\xe8\x86\xb3\xe7\xa5\x9d\xe5\x8b\xbe\xe5\xa7\x8a\xe8\x8e\xb4\xe8\x83\x84\xe7\x96\x83\xe8\x96\x9b\xe8\x9c\xb7\xe8\x83\x9b\xe5\xb7\xb7\xe8\x8a\x99\xe8\x8a\x8b\xe7\x86\x99\xe9\x97\xb0\xe5\x8b\xbf\xe7\xaa\x83\xe7\x8b\xb1\xe5\x89\xa9\xe9\x92\x8f\xe5\xb9\xa2\xe9\x99\x9f\xe9\x93\x9b\xe6\x85\xa7\xe9\x9d\xb4\xe8\x80\x8dk\xe6\xb5\x99\xe6\xb5\x87\xe9\xa3\xa8\xe6\x83\x9f\xe7\xbb\x97\xe7\xa5\x9c\xe6\xbe\x88\xe5\x95\xbc\xe5\x92\xaa\xe7\xa3\xb7\xe6\x91\x9e\xe8\xaf\x85\xe9\x83\xa6\xe6\x8a\xb9\xe8\xb7\x83\xe5\xa3\xac\xe5\x90\x95\xe8\x82\x96\xe7\x90\x8f\xe9\xa2\xa4\xe5\xb0\xb4\xe5\x89\xa1\xe6\x8a\xa0\xe5\x87\x8b\xe8\xb5\x9a\xe6\xb3\x8a\xe6\xb4\xa5\xe5\xae\x95\xe6\xae\xb7\xe5\x80\x94\xe6\xb0\xb2\xe6\xbc\xab\xe9\x82\xba\xe6\xb6\x8e\xe6\x80\xa0$\xe5\x9e\xae\xe8\x8d\xac\xe9\x81\xb5\xe4\xbf\x8f\xe5\x8f\xb9\xe5\x99\xa2\xe9\xa5\xbd\xe8\x9c\x98\xe5\xad\x99\xe7\xad\xb5\xe7\x96\xbc\xe9\x9e\xad\xe7\xbe\xa7\xe7\x89\xa6\xe7\xae\xad\xe6\xbd\xb4c\xe7\x9c\xb8\xe7\xa5\xad\xe9\xab\xaf\xe5\x95\x96\xe5\x9d\xb3\xe6\x84\x81\xe8\x8a\xa9\xe9\xa9\xae\xe5\x80\xa1\xe5\xb7\xbd\xe7\xa9\xb0\xe6\xb2\x83\xe8\x83\x9a\xe6\x80\x92\xe5\x87\xa4\xe6\xa7\x9b\xe5\x89\x82\xe8\xb6\xb5\xe5\xab\x81v\xe9\x82\xa2\xe7\x81\xaf\xe9\x84\xa2\xe6\xa1\x90\xe7\x9d\xbd\xe6\xaa\x97\xe9\x94\xaf\xe6\xa7\x9f\xe5\xa9\xb7\xe5\xb5\x8b\xe5\x9c\xbb\xe8\xaf\x97\xe8\x95\x88\xe9\xa2\xa0\xe9\x81\xad\xe7\x97\xa2\xe8\x8a\xb8\xe6\x80\xaf\xe9\xa6\xa5\xe7\xab\xad\xe9\x94\x97\xe5\xbe\x9c\xe6\x81\xad\xe9\x81\x8d\xe7\xb1\x81\xe5\x89\x91\xe5\x98\xb1\xe8\x8b\xa1\xe9\xbe\x84\xe5\x83\xa7\xe6\xa1\x91\xe6\xbd\xb8\xe5\xbc\x98\xe6\xbe\xb6\xe6\xa5\xb9\xe6\x82\xb2\xe8\xae\xab\xe6\x84\xa4\xe8\x85\xa5\xe6\x82\xb8\xe8\xb0\x8d\xe6\xa4\xb9\xe5\x91\xa2\xe6\xa1\x93\xe8\x91\xad\xe6\x94\xab\xe9\x98\x80\xe7\xbf\xb0\xe8\xba\xb2\xe6\x95\x96\xe6\x9f\x91\xe9\x83\x8e\xe7\xac\xa8\xe6\xa9\x87\xe5\x91\x83\xe9\xad\x81\xe7\x87\x8e\xe8\x84\x93\xe8\x91\xa9\xe7\xa3\x8b\xe5\x9e\x9b\xe7\x8e\xba\xe7\x8b\xae\xe6\xb2\x93\xe7\xa0\x9c\xe8\x95\x8a\xe9\x94\xba\xe7\xbd\xb9\xe8\x95\x89\xe7\xbf\xb1\xe8\x99\x90\xe9\x97\xbe\xe5\xb7\xab\xe6\x97\xa6\xe8\x8c\xb1\xe5\xac\xb7\xe6\x9e\xaf\xe9\xb9\x8f\xe8\xb4\xa1\xe8\x8a\xb9\xe6\xb1\x9b\xe7\x9f\xab\xe7\xbb\x81\xe6\x8b\xa3\xe7\xa6\xba\xe4\xbd\x83\xe8\xae\xa3\xe8\x88\xab\xe6\x83\xaf\xe4\xb9\xb3\xe8\xb6\x8b\xe7\x96\xb2\xe6\x8c\xbd\xe5\xb2\x9a\xe8\x99\xbe\xe8\xa1\xbe\xe8\xa0\xb9\xe8\xb9\x82\xe9\xa3\x93\xe6\xb0\xa6\xe9\x93\x96\xe5\xad\xa9\xe7\xa8\x9e\xe7\x91\x9c\xe5\xa3\x85\xe6\x8e\x80\xe5\x8b\x98\xe5\xa6\x93\xe7\x95\x85\xe9\xab\x8bW\xe5\xba\x90\xe7\x89\xb2\xe8\x93\xbf\xe6\xa6\x95\xe7\xbb\x83\xe5\x9e\xa3\xe5\x94\xb1\xe9\x82\xb8\xe8\x8f\xb2\xe6\x98\x86\xe5\xa9\xba\xe7\xa9\xbf\xe7\xbb\xa1\xe9\xba\x92\xe8\x9a\xb1\xe6\x8e\x82\xe6\x84\x9a\xe6\xb3\xb7\xe6\xb6\xaa\xe6\xbc\xb3\xe5\xa6\xa9\xe5\xa8\x89\xe6\xa6\x84\xe8\xae\xb7\xe8\xa7\x85\xe6\x97\xa7\xe8\x97\xa4\xe7\x85\xae\xe5\x91\x9b\xe6\x9f\xb3\xe8\x85\x93\xe5\x8f\xad\xe5\xba\xb5\xe7\x83\xb7\xe9\x98\xa1\xe7\xbd\x82\xe8\x9c\x95\xe6\x93\x82\xe7\x8c\x96\xe5\x92\xbf\xe5\xaa\xb2\xe8\x84\x89\xe3\x80\x90\xe6\xb2\x8f\xe8\xb2\x85\xe9\xbb\xa0\xe7\x86\x8f\xe5\x93\xb2\xe7\x83\x81\xe5\x9d\xa6\xe9\x85\xb5\xe5\x85\x9c\xc3\x97\xe6\xbd\x87\xe6\x92\x92\xe5\x89\xbd\xe7\x8f\xa9\xe5\x9c\xb9\xe4\xb9\xbe\xe6\x91\xb8\xe6\xa8\x9f\xe5\xb8\xbd\xe5\x97\x92\xe8\xa5\x84\xe9\xad\x82\xe8\xbd\xbf\xe6\x86\xac\xe9\x94\xa1\xe3\x80\x95\xe5\x96\x83\xe7\x9a\x86\xe5\x92\x96\xe9\x9a\x85\xe8\x84\xb8\xe6\xae\x8b\xe6\xb3\xae\xe8\xa2\x82\xe9\xb9\x82\xe7\x8f\x8a\xe5\x9b\xa4\xe6\x8d\x86\xe5\x92\xa4\xe8\xaf\xaf\xe5\xbe\xa8\xe9\x97\xb9\xe6\xb7\x99\xe8\x8a\x8a\xe6\xb7\x8b\xe6\x80\x86\xe5\x9b\x97\xe6\x8b\xa8\xe6\xa2\xb3\xe6\xb8\xa4RG\xe7\xbb\xa8\xe8\x9a\x93\xe5\xa9\x80\xe5\xb9\xa1\xe7\x8b\xa9\xe9\xba\xbe\xe8\xb0\xa2\xe5\x94\xa2\xe8\xa3\xb8\xe6\x97\x8c\xe4\xbc\x89\xe7\xba\xb6\xe8\xa3\x82\xe9\xa9\xb3\xe7\xa0\xbc\xe5\x92\x9b\xe6\xbe\x84\xe6\xa8\xa8\xe8\xb9\x88\xe5\xae\x99\xe6\xbe\x8d\xe5\x80\x8d\xe8\xb2\x94\xe6\x93\x8d\xe5\x8b\x87\xe8\x9f\xa0\xe6\x91\x88\xe7\xa0\xa7\xe8\x99\xac\xe5\xa4\x9f\xe7\xbc\x81\xe6\x82\xa6\xe8\x97\xbf\xe6\x92\xb8\xe8\x89\xb9\xe6\x91\x81\xe6\xb7\xb9\xe8\xb1\x87\xe8\x99\x8e\xe6\xa6\xad\xcb\x89\xe5\x90\xb1d\xc2\xb0\xe5\x96\xa7\xe8\x8d\x80\xe8\xb8\xb1\xe4\xbe\xae\xe5\xa5\x8b\xe5\x81\x95\xe9\xa5\xb7\xe7\x8a\x8d\xe6\x83\xae\xe5\x9d\x91\xe7\x92\x8e\xe5\xbe\x98\xe5\xae\x9b\xe5\xa6\x86\xe8\xa2\x88\xe5\x80\xa9\xe7\xaa\xa6\xe6\x98\x82\xe8\x8d\x8f\xe4\xb9\x96K\xe6\x80\x85\xe6\x92\xb0\xe9\xb3\x99\xe7\x89\x99\xe8\xa2\x81\xe9\x85\x9eX\xe7\x97\xbf\xe7\x90\xbc\xe9\x97\xb8\xe9\x9b\x81\xe8\xb6\xbe\xe8\x8d\x9a\xe8\x99\xbb\xe6\xb6\x9d\xe3\x80\x8a\xe6\x9d\x8f\xe9\x9f\xad\xe5\x81\x88\xe7\x83\xa4\xe7\xbb\xab\xe9\x9e\x98\xe5\x8d\x89\xe7\x97\x87\xe9\x81\xa2\xe8\x93\xa5\xe8\xaf\x8b\xe6\x9d\xad\xe8\x8d\xa8\xe5\x8c\x86\xe7\xab\xa3\xe7\xb0\xaa\xe8\xbe\x99\xe6\x95\x95\xe8\x99\x9e\xe4\xb8\xb9\xe7\xbc\xad\xe5\x92\xa9\xe9\xbb\x9fm\xe6\xb7\xa4\xe7\x91\x95\xe5\x92\x82\xe9\x93\x89\xe7\xa1\xbc\xe8\x8c\xa8\xe5\xb6\x82\xe7\x97\x92\xe7\x95\xb8\xe6\x95\xac\xe6\xb6\xbf\xe7\xb2\xaa\xe7\xaa\x98\xe7\x86\x9f\xe5\x8f\x94\xe5\xab\x94\xe7\x9b\xbe\xe5\xbf\xb1\xe8\xa3\x98\xe6\x86\xbe\xe6\xa2\xb5\xe8\xb5\xa1\xe7\x8f\x99\xe5\x92\xaf\xe5\xa8\x98\xe5\xba\x99\xe6\xba\xaf\xe8\x83\xba\xe8\x91\xb1\xe7\x97\xaa\xe6\x91\x8a\xe8\x8d\xb7\xe5\x8d\x9e\xe4\xb9\x92\xe9\xab\xa6\xe5\xaf\x90\xe9\x93\xad\xe5\x9d\xa9\xe8\x83\x97\xe6\x9e\xb7\xe7\x88\x86\xe6\xba\x9f\xe5\x9a\xbc\xe7\xbe\x9a\xe7\xa0\xac\xe8\xbd\xa8\xe6\x83\x8a\xe6\x8c\xa0\xe7\xbd\x84\xe7\xab\xbd\xe8\x8f\x8f\xe6\xb0\xa7\xe6\xb5\x85\xe6\xa5\xa3\xe7\x9b\xbc\xe6\x9e\xa2\xe7\x82\xb8\xe9\x98\x86\xe6\x9d\xaf\xe8\xb0\x8f\xe5\x99\xac\xe6\xb7\x87\xe6\xb8\xba\xe4\xbf\xaa\xe7\xa7\x86\xe5\xa2\x93\xe6\xb3\xaa\xe8\xb7\xbb\xe7\xa0\x8c\xe7\x97\xb0\xe5\x9e\xa1\xe6\xb8\xa1\xe8\x80\xbd\xe9\x87\x9c\xe8\xae\xb6\xe9\xb3\x8e\xe7\x85\x9e\xe5\x91\x97\xe9\x9f\xb6\xe8\x88\xb6\xe7\xbb\xb7\xe9\xb9\xb3\xe7\xbc\x9c\xe6\x97\xb7\xe9\x93\x8a\xe7\x9a\xb1\xe9\xbe\x8c\xe6\xaa\x80\xe9\x9c\x96\xe5\xa5\x84\xe6\xa7\x90\xe8\x89\xb3\xe8\x9d\xb6\xe6\x97\x8b\xe5\x93\x9d\xe8\xb5\xb6\xe9\xaa\x9e\xe8\x9a\xa7\xe8\x85\x8a\xe7\x9b\x88\xe4\xb8\x81`\xe8\x9c\x9a\xe7\x9f\xb8\xe8\x9d\x99\xe7\x9d\xa8\xe5\x9a\x93\xe5\x83\xbb\xe9\xac\xbc\xe9\x86\xb4\xe5\xa4\x9c\xe5\xbd\x9d\xe7\xa3\x8a\xe7\xac\x94\xe6\x8b\x94\xe6\xa0\x80\xe7\xb3\x95\xe5\x8e\xa6\xe9\x82\xb0\xe7\xba\xab\xe9\x80\xad\xe7\xba\xa4\xe7\x9c\xa6\xe8\x86\x8a\xe9\xa6\x8d\xe8\xba\x87\xe7\x83\xaf\xe8\x98\xbc\xe5\x86\xac\xe8\xaf\xa4\xe6\x9a\x84\xe9\xaa\xb6\xe5\x93\x91\xe7\x98\xa0\xe3\x80\x8d\xe8\x87\x8a\xe4\xb8\x95\xe6\x84\x88\xe5\x92\xb1\xe8\x9e\xba\xe6\x93\x85\xe8\xb7\x8b\xe6\x90\x8f\xe7\xa1\xaa\xe8\xb0\x84\xe7\xac\xa0\xe6\xb7\xa1\xe5\x98\xbf\xe9\xaa\x85\xe8\xb0\xa7\xe9\xbc\x8e\xe7\x9a\x8b\xe5\xa7\x9a\xe6\xad\xbc\xe8\xa0\xa2\xe9\xa9\xbc\xe8\x80\xb3\xe8\x83\xac\xe6\x8c\x9d\xe6\xb6\xaf\xe7\x8b\x97\xe8\x92\xbd\xe5\xad\x93\xe7\x8a\xb7\xe5\x87\x89\xe8\x8a\xa6\xe7\xae\xb4\xe9\x93\xa4\xe5\xad\xa4\xe5\x98\x9b\xe5\x9d\xa4V\xe8\x8c\xb4\xe6\x9c\xa6\xe6\x8c\x9e\xe5\xb0\x96\xe6\xa9\x99\xe8\xaf\x9e\xe6\x90\xb4\xe7\xa2\x87\xe6\xb4\xb5\xe6\xb5\x9a\xe5\xb8\x9a\xe8\x9c\x8d\xe6\xbc\xaf\xe6\x9f\x98\xe5\x9a\x8e\xe8\xae\xbd\xe8\x8a\xad\xe8\x8d\xa4\xe5\x92\xbb\xe7\xa5\xa0\xe7\xa7\x89\xe8\xb7\x96\xe5\x9f\x83\xe5\x90\x93\xe7\xb3\xaf\xe7\x9c\xb7\xe9\xa6\x92\xe6\x83\xb9\xe5\xa8\xbc\xe9\xb2\x91\xe5\xab\xa9\xe8\xae\xb4\xe8\xbd\xae\xe7\x9e\xa5\xe9\x9d\xb6\xe8\xa4\x9a\xe4\xb9\x8f\xe7\xbc\xa4\xe5\xae\x8b\xe5\xb8\xa7\xe5\x88\xa0\xe9\xa9\xb1\xe7\xa2\x8e\xe6\x89\x91\xe4\xbf\xa9\xe4\xbf\x84\xe5\x81\x8f\xe6\xb6\xa3\xe7\xab\xb9\xe5\x99\xb1\xe7\x9a\x99\xe4\xbd\xb0\xe6\xb8\x9a\xe5\x94\xa7\xe6\x96\xa1#\xe9\x95\x89\xe5\x88\x80\xe5\xb4\x8e\xe7\xad\x90\xe4\xbd\xa3\xe5\xa4\xad\xe8\xb4\xb0\xe8\x82\xb4\xe5\xb3\x99\xe5\x93\x94\xe8\x89\xbf\xe5\x8c\x90\xe7\x89\xba\xe9\x95\x9b\xe7\xbc\x98\xe4\xbb\xa1\xe5\xab\xa1\xe5\x8a\xa3\xe6\x9e\xb8\xe5\xa0\x80\xe6\xa2\xa8\xe7\xb0\xbf\xe9\xb8\xad\xe8\x92\xb8\xe4\xba\xa6\xe7\xa8\xbd\xe6\xb5\xb4{\xe8\xa1\xa2\xe6\x9d\x9f\xe6\xa7\xb2j\xe9\x98\x81\xe6\x8f\x8d\xe7\x96\xa5\xe6\xa3\x8b\xe6\xbd\x8b\xe8\x81\xaa\xe7\xaa\x9c\xe4\xb9\x93\xe7\x9d\x9b\xe6\x8f\x92\xe5\x86\x89\xe9\x98\xaa\xe8\x8b\x8d\xe6\x90\xbd\xe3\x80\x8c\xe8\x9f\xbe\xe8\x9e\x9f\xe5\xb9\xb8\xe4\xbb\x87\xe6\xa8\xbd\xe6\x92\x82\xe6\x85\xa2\xe8\xb7\xa4\xe5\xb9\x94\xe4\xbf\x9a\xe6\xb7\x85\xe8\xa6\x83\xe8\xa7\x8a\xe6\xba\xb6\xe5\xa6\x96\xe5\xb8\x9b\xe4\xbe\xa8\xe6\x9b\xb0\xe5\xa6\xbe\xe6\xb3\x97\'\n'"
train/pytorch-train/manager_torch.py,0,"b'# -*- coding: utf-8 -*-\n""""""\nCreated on Tue Aug 22 19:41:55 2017\n\n@author: Quantum Liu\n""""""\n\'\'\'\nExample:\ngm=GPUManager()\nwith torch.cuda.device(gm.auto_choice()):\n    blabla\n\nOr:\ngm=GPUManager()\ntorch.cuda.set_device(gm.auto_choice())\n\'\'\'\n\nimport os\nimport torch\ndef check_gpus():\n    \'\'\'\n    GPU available check\n    http://pytorch-cn.readthedocs.io/zh/latest/package_references/torch-cuda/\n    \'\'\'\n    if not torch.cuda.is_available():\n        print(\'This script could only be used to manage NVIDIA GPUs,but no GPU found in your device\')\n        return False\n    elif not \'NVIDIA System Management\' in os.popen(\'nvidia-smi -h\').read():\n        print(""\'nvidia-smi\' tool not found."")\n        return False\n    return True\n\nif check_gpus():\n    def parse(line,qargs):\n        \'\'\'\n        line:\n            a line of text\n        qargs:\n            query arguments\n        return:\n            a dict of gpu infos\n        Pasing a line of csv format text returned by nvidia-smi\n        \xe8\xa7\xa3\xe6\x9e\x90\xe4\xb8\x80\xe8\xa1\x8cnvidia-smi\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84csv\xe6\xa0\xbc\xe5\xbc\x8f\xe6\x96\x87\xe6\x9c\xac\n        \'\'\'\n        numberic_args = [\'memory.free\', \'memory.total\', \'power.draw\', \'power.limit\']#\xe5\x8f\xaf\xe8\xae\xa1\xe6\x95\xb0\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n        power_manage_enable=lambda v:(not \'Not Support\' in v)#lambda\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xef\xbc\x8c\xe6\x98\xbe\xe5\x8d\xa1\xe6\x98\xaf\xe5\x90\xa6\xe6\xbb\x8b\xe7\x93\xb7power management\xef\xbc\x88\xe7\xac\x94\xe8\xae\xb0\xe6\x9c\xac\xe5\x8f\xaf\xe8\x83\xbd\xe4\xb8\x8d\xe6\xbb\x8b\xe7\x93\xb7\xef\xbc\x89\n        to_numberic=lambda v:float(v.upper().strip().replace(\'MIB\',\'\').replace(\'W\',\'\'))#\xe5\xb8\xa6\xe5\x8d\x95\xe4\xbd\x8d\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x8e\xbb\xe6\x8e\x89\xe5\x8d\x95\xe4\xbd\x8d\n        process = lambda k,v:((int(to_numberic(v)) if power_manage_enable(v) else 1) if k in numberic_args else v.strip())\n        return {k:process(k,v) for k,v in zip(qargs,line.strip().split(\',\'))}\n    \n    def query_gpu(qargs=[]):\n        \'\'\'\n        qargs:\n            query arguments\n        return:\n            a list of dict\n        Querying GPUs infos\n        \xe6\x9f\xa5\xe8\xaf\xa2GPU\xe4\xbf\xa1\xe6\x81\xaf\n        \'\'\'\n        qargs =[\'index\',\'gpu_name\', \'memory.free\', \'memory.total\', \'power.draw\', \'power.limit\']+ qargs\n        cmd = \'nvidia-smi --query-gpu={} --format=csv,noheader\'.format(\',\'.join(qargs))\n        results = os.popen(cmd).readlines()\n        return [parse(line,qargs) for line in results]\n    \n    def by_power(d):\n        \'\'\'\n        helper function fo sorting gpus by power\n        \'\'\'\n        power_infos=(d[\'power.draw\'],d[\'power.limit\'])\n        if any(v==1 for v in power_infos):\n            print(\'Power management unable for GPU {}\'.format(d[\'index\']))\n            return 1\n        return float(d[\'power.draw\'])/d[\'power.limit\']\n    \n    class GPUManager():\n        \'\'\'\n        qargs:\n            query arguments\n        A manager which can list all available GPU devices\n        and sort them and choice the most free one.Unspecified \n        ones pref.\n        GPU\xe8\xae\xbe\xe5\xa4\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xef\xbc\x8c\xe8\x80\x83\xe8\x99\x91\xe5\x88\x97\xe4\xb8\xbe\xe5\x87\xba\xe6\x89\x80\xe6\x9c\x89\xe5\x8f\xaf\xe7\x94\xa8GPU\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe5\xb9\xb6\xe5\x8a\xa0\xe4\xbb\xa5\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x89\xe5\x87\xba\n        \xe6\x9c\x80\xe7\xa9\xba\xe9\x97\xb2\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe3\x80\x82\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaaGPUManager\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x86\x85\xe4\xbc\x9a\xe8\xae\xb0\xe5\xbd\x95\xe6\xaf\x8f\xe4\xb8\xaaGPU\xe6\x98\xaf\xe5\x90\xa6\xe5\xb7\xb2\xe8\xa2\xab\xe6\x8c\x87\xe5\xae\x9a\xef\xbc\x8c\n        \xe4\xbc\x98\xe5\x85\x88\xe9\x80\x89\xe6\x8b\xa9\xe6\x9c\xaa\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84GPU\xe3\x80\x82\n        \'\'\'\n        def __init__(self,qargs=[]):\n            \'\'\'\n            \'\'\'\n            self.qargs=qargs\n            self.gpus=query_gpu(qargs)\n            for gpu in self.gpus:\n                gpu[\'specified\']=False\n            self.gpu_num=len(self.gpus)\n    \n        def _sort_by_memory(self,gpus,by_size=False):\n            if by_size:\n                print(\'Sorted by free memory size\')\n                return sorted(gpus,key=lambda d:d[\'memory.free\'],reverse=True)\n            else:\n                print(\'Sorted by free memory rate\')\n                return sorted(gpus,key=lambda d:float(d[\'memory.free\'])/ d[\'memory.total\'],reverse=True)\n    \n        def _sort_by_power(self,gpus):\n            return sorted(gpus,key=by_power)\n        \n        def _sort_by_custom(self,gpus,key,reverse=False,qargs=[]):\n            if isinstance(key,str) and (key in qargs):\n                return sorted(gpus,key=lambda d:d[key],reverse=reverse)\n            if isinstance(key,type(lambda a:a)):\n                return sorted(gpus,key=key,reverse=reverse)\n            raise ValueError(""The argument \'key\' must be a function or a key in query args,please read the documention of nvidia-smi"")\n\n        def auto_choice(self,mode=0):\n            \'\'\'\n            mode:\n                0:(default)sorted by free memory size\n            return:\n                a TF device object\n            Auto choice the freest GPU device,not specified\n            ones \n            \xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x89\xe6\x8b\xa9\xe6\x9c\x80\xe7\xa9\xba\xe9\x97\xb2GPU,\xe8\xbf\x94\xe5\x9b\x9e\xe7\xb4\xa2\xe5\xbc\x95\n            \'\'\'\n            for old_infos,new_infos in zip(self.gpus,query_gpu(self.qargs)):\n                old_infos.update(new_infos)\n            unspecified_gpus=[gpu for gpu in self.gpus if not gpu[\'specified\']] or self.gpus\n            \n            if mode==0:\n                print(\'Choosing the GPU device has largest free memory...\')\n                chosen_gpu=self._sort_by_memory(unspecified_gpus,True)[0]\n            elif mode==1:\n                print(\'Choosing the GPU device has highest free memory rate...\')\n                chosen_gpu=self._sort_by_power(unspecified_gpus)[0]\n            elif mode==2:\n                print(\'Choosing the GPU device by power...\')\n                chosen_gpu=self._sort_by_power(unspecified_gpus)[0]\n            else:\n                print(\'Given an unaviliable mode,will be chosen by memory\')\n                chosen_gpu=self._sort_by_memory(unspecified_gpus)[0]\n            chosen_gpu[\'specified\']=True\n            index=chosen_gpu[\'index\']\n            print(\'Using GPU {i}:\\n{info}\'.format(i=index,info=\'\\n\'.join([str(k)+\':\'+str(v) for k,v in chosen_gpu.items()])))\n            return int(index)\nelse:\n    raise ImportError(\'GPU available check failed\')\n'"
train/pytorch-train/utils.py,0,"b'#!/usr/bin/python\n# encoding: utf-8\n\nimport collections\n\nimport torch\nimport torch.nn as nn\n\n\nclass strLabelConverter(object):\n    def __init__(self, alphabet):\n        self.alphabet = alphabet + u\'-\'  # for `-1` index\n\n        self.dict = {}\n        for i, char in enumerate(alphabet):\n            # NOTE: 0 is reserved for \'blank\' required by wrap_ctc\n            self.dict[char] = i + 1\n        # print(self.dict)\n\n    def encode(self, text, depth=0):\n        """"""Support batch or single str.""""""\n        length = []\n        result = []\n        for item in text:\n            #FIXME\n            #item = item.decode(\'utf-8\', \'strict\')\n            length.append(len(item))\n            # print(len(item))\n            # print(item)\n            for char in item:\n                index = self.dict[char]\n                result.append(index)\n\n        text = result\n        # print(text, length)\n        # print(length)\n        return (torch.IntTensor(text), torch.IntTensor(length))\n\n        \'\'\'\n        if isinstance(text, str):\n            text = [self.dict[char.lower()] for char in text]\n            length = [len(text)]\n\n        if isinstance(text, str):\n            text = [self.dict.get(char, 0) for char in text]\n            length = [len(text)]\n        # add for unicode python2\n        # elif isinstance(text, unicode):\n        #    text = [self.dict.get(char, self.dict[u\'-\']) for char in text]\n        #    length = [len(text)]\n\n        elif isinstance(text, collections.Iterable):\n            length = [len(text)]\n            # print(""length = %s"" % length)\n            text = \'\'.join(str(v) for v in text)\n            # print(""text = %s"" % text)\n            text, _ = self.encode(text)\n\n        if depth:\n            return text, len(text)\n        return (torch.IntTensor(text), torch.IntTensor(length))\n        \'\'\'\n\n    def decode(self, t, length, raw=False):\n        if length.numel() == 1:\n            length = length[0]\n            t = t[:length]\n            if raw:\n                return \'\'.join([self.alphabet[i - 1] for i in t])\n            else:\n                char_list = []\n                for i in range(length):\n                    if t[i] != 0 and (not (i > 0 and t[i - 1] == t[i])):\n                        char_list.append(self.alphabet[t[i] - 1])\n                return \'\'.join(char_list)\n        else:\n            texts = []\n            index = 0\n            for i in range(length.numel()):\n                l = length[i]\n                texts.append(\n                    self.decode(\n                        t[index:index + l], torch.IntTensor([l]), raw=raw))\n                index += l\n            return texts\n\n\nclass averager(object):\n    def __init__(self):\n        self.reset()\n\n    def add(self, v):\n        self.n_count += v.data.numel()\n        # NOTE: not `+= v.sum()`, which will add a node in the compute graph,\n        # which lead to memory leak\n        self.sum += v.data.sum()\n\n    def reset(self):\n        self.n_count = 0\n        self.sum = 0\n\n    def val(self):\n        res = 0\n        if self.n_count != 0:\n            res = self.sum / float(self.n_count)\n        return res\n\n\ndef oneHot(v, v_length, nc):\n    batchSize = v_length.size(0)\n    maxLength = v_length.max()\n    v_onehot = torch.FloatTensor(batchSize, maxLength, nc).fill_(0)\n    acc = 0\n    for i in range(batchSize):\n        length = v_length[i]\n        label = v[acc:acc + length].view(-1, 1).long()\n        v_onehot[i, :length].scatter_(1, label, 1.0)\n        acc += length\n    return v_onehot\n\n\ndef loadData(v, data):\n    v.data.resize_(data.size()).copy_(data)\n\n\ndef prettyPrint(v):\n    print(\'Size {0}, Type: {1}\'.format(str(v.size()), v.data.type()))\n    print(\'| Max: %f | Min: %f | Mean: %f\' % (v.max().data[0], v.min().data[0],\n                                              v.mean().data[0]))\n\n\ndef assureRatio(img):\n    """"""Ensure imgH <= imgW.""""""\n    b, c, h, w = img.size()\n    if h > w:\n        main = nn.UpsamplingBilinear2d(size=(h, h), scale_factor=None)\n        img = main(img)\n    return img\n'"
ctpn/lib/datasets/__init__.py,0,"b'#!/usr/bin/env python \n# -*- coding: utf-8 -*- \n# _Author_: xiaofeng \n# Date: 2018-04-08 14:41:12 \n# Last Modified by: xiaofeng \n# Last Modified time: 2018-04-08 14:41:12 \n \nfrom .imdb import imdb\n# from pascal_voc import pascal_voc\nfrom .pascal_voc import pascal_voc\nfrom . import factory\n\ndef _which(program):\n    import os\n    def is_exe(fpath):\n        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n\n    fpath, fname = os.path.split(program)\n    if fpath:\n        if is_exe(program):\n            return program\n    else:\n        for path in os.environ[""PATH""].split(os.pathsep):\n            path = path.strip(\'""\')\n            exe_file = os.path.join(path, program)\n            if is_exe(exe_file):\n                return exe_file\n\n    return None\n'"
ctpn/lib/datasets/ds_utils.py,0,"b'#!/usr/bin/env python \n# -*- coding: utf-8 -*- \n# _Author_: xiaofeng \n# Date: 2018-04-08 14:46:05 \n# Last Modified by: xiaofeng \n# Last Modified time: 2018-04-08 14:46:05 \n \nimport numpy as np\n\ndef unique_boxes(boxes, scale=1.0):\n    """"""Return indices of unique boxes.""""""\n    v = np.array([1, 1e3, 1e6, 1e9])\n    hashes = np.round(boxes * scale).dot(v)\n    _, index = np.unique(hashes, return_index=True)\n    return np.sort(index)\n\ndef xywh_to_xyxy(boxes):\n    """"""Convert [x y w h] box format to [x1 y1 x2 y2] format.""""""\n    return np.hstack((boxes[:, 0:2], boxes[:, 0:2] + boxes[:, 2:4] - 1))\n\ndef xyxy_to_xywh(boxes):\n    """"""Convert [x1 y1 x2 y2] box format to [x y w h] format.""""""\n    return np.hstack((boxes[:, 0:2], boxes[:, 2:4] - boxes[:, 0:2] + 1))\n\ndef validate_boxes(boxes, width=0, height=0):\n    """"""Check that a set of boxes are valid.""""""\n    x1 = boxes[:, 0]\n    y1 = boxes[:, 1]\n    x2 = boxes[:, 2]\n    y2 = boxes[:, 3]\n    assert (x1 >= 0).all()\n    assert (y1 >= 0).all()\n    assert (x2 >= x1).all()\n    assert (y2 >= y1).all()\n    assert (x2 < width).all()\n    assert (y2 < height).all()\n\ndef filter_small_boxes(boxes, min_size):\n    w = boxes[:, 2] - boxes[:, 0]\n    h = boxes[:, 3] - boxes[:, 1]\n    keep = np.where((w >= min_size) & (h > min_size))[0]\n    return keep\n'"
ctpn/lib/datasets/factory.py,0,"b'__sets = {}\nfrom .pascal_voc import pascal_voc\n\n\ndef _selective_search_IJCV_top_k(split, year, top_k):\n    imdb = pascal_voc(split, year)\n    imdb.roidb_handler = imdb.selective_search_IJCV_roidb\n    imdb.config[\'top_k\'] = top_k\n    return imdb\n\n\n# Set up voc_<year>_<split> using selective search ""fast"" mode\nfor year in [\'2007\', \'2012\', \'0712\']:\n    for split in [\'train\', \'val\', \'trainval\', \'test\']:\n        name = \'voc_{}_{}\'.format(year, split)\n        # __sets[name] = (lambda split=split, year=year: pascal_voc(split, year))\n        __sets[name] = (lambda split=split, year=year: pascal_voc(split, year))\n\n\ndef get_imdb(name):\n    """"""Get an imdb (image database) by name.""""""\n    # print(\'__Sets\', __sets)\n    if name not in __sets:\n        raise KeyError(\'Unknown dataset: {}\'.format(name))\n    return __sets[name]()\n\n\ndef list_imdbs():\n    """"""List all registered imdbs.""""""\n    return list(__sets.keys())\n'"
ctpn/lib/datasets/imdb.py,0,"b""import os\nimport os.path as osp\nimport PIL\nimport numpy as np\nimport scipy.sparse\n\nfrom ..utils.bbox import bbox_overlaps\nfrom ..fast_rcnn.config import cfg\n\n\nclass imdb(object):\n    def __init__(self, name):\n        self._name = name\n        self._num_classes = 0\n        self._classes = []\n        self._image_index = []\n        self._obj_proposer = 'selective_search'\n        self._roidb = None\n        print(self.default_roidb)\n        self._roidb_handler = self.default_roidb\n        # Use this dict for storing dataset specific config options\n        self.config = {}\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def num_classes(self):\n        return len(self._classes)\n\n    @property\n    def classes(self):\n        return self._classes\n\n    @property\n    def image_index(self):\n        return self._image_index\n\n    @property\n    def roidb_handler(self):\n        return self._roidb_handler\n\n    @roidb_handler.setter\n    def roidb_handler(self, val):\n        self._roidb_handler = val\n\n    def set_proposal_method(self, method):\n        method = eval('self.' + method + '_roidb')\n        self.roidb_handler = method\n\n    @property\n    def roidb(self):\n        # A roidb is a list of dictionaries, each with the following keys:\n        #   boxes\n        #   gt_overlaps\n        #   gt_classes\n        #   flipped\n        if self._roidb is not None:\n            return self._roidb\n        self._roidb = self.roidb_handler()\n        return self._roidb\n\n    @property\n    def cache_path(self):\n        cache_path = osp.abspath(osp.join(cfg.DATA_DIR, 'cache'))\n        if not os.path.exists(cache_path):\n            os.makedirs(cache_path)\n        return cache_path\n\n    @property\n    def num_images(self):\n        return len(self.image_index)\n\n    def image_path_at(self, i):\n        raise NotImplementedError\n\n    def default_roidb(self):\n        raise NotImplementedError\n\n    def _get_widths(self):\n        return [\n            PIL.Image.open(self.image_path_at(i)).size[0]\n            for i in range(self.num_images)\n        ]\n\n    def append_flipped_images(self):\n        num_images = self.num_images\n        widths = self._get_widths()\n        for i in range(num_images):\n            boxes = self.roidb[i]['boxes'].copy()\n            oldx1 = boxes[:, 0].copy()\n            oldx2 = boxes[:, 2].copy()\n            boxes[:, 0] = widths[i] - oldx2 - 1\n            boxes[:, 2] = widths[i] - oldx1 - 1\n            for b in range(len(boxes)):\n                if boxes[b][2] < boxes[b][0]:\n                    boxes[b][0] = 0\n            assert (boxes[:, 2] >= boxes[:, 0]).all()\n            entry = {\n                'boxes': boxes,\n                'gt_overlaps': self.roidb[i]['gt_overlaps'],\n                'gt_classes': self.roidb[i]['gt_classes'],\n                'flipped': True\n            }\n\n            if 'gt_ishard' in self.roidb[i] and 'dontcare_areas' in self.roidb[i]:\n                entry['gt_ishard'] = self.roidb[i]['gt_ishard'].copy()\n                dontcare_areas = self.roidb[i]['dontcare_areas'].copy()\n                oldx1 = dontcare_areas[:, 0].copy()\n                oldx2 = dontcare_areas[:, 2].copy()\n                dontcare_areas[:, 0] = widths[i] - oldx2 - 1\n                dontcare_areas[:, 2] = widths[i] - oldx1 - 1\n                entry['dontcare_areas'] = dontcare_areas\n\n            self.roidb.append(entry)\n\n        self._image_index = self._image_index * 2\n\n    def create_roidb_from_box_list(self, box_list, gt_roidb):\n        assert len(box_list) == self.num_images, \\\n                'Number of boxes must match number of ground-truth images'\n        roidb = []\n        for i in range(self.num_images):\n            boxes = box_list[i]\n            num_boxes = boxes.shape[0]\n            overlaps = np.zeros(\n                (num_boxes, self.num_classes), dtype=np.float32)\n\n            if gt_roidb is not None and gt_roidb[i]['boxes'].size > 0:\n                gt_boxes = gt_roidb[i]['boxes']\n                gt_classes = gt_roidb[i]['gt_classes']\n                gt_overlaps = bbox_overlaps(\n                    boxes.astype(np.float), gt_boxes.astype(np.float))\n                argmaxes = gt_overlaps.argmax(axis=1)\n                maxes = gt_overlaps.max(axis=1)\n                I = np.where(maxes > 0)[0]\n                overlaps[I, gt_classes[argmaxes[I]]] = maxes[I]\n\n            overlaps = scipy.sparse.csr_matrix(overlaps)\n            roidb.append({\n                'boxes':\n                boxes,\n                'gt_classes':\n                np.zeros((num_boxes, ), dtype=np.int32),\n                'gt_overlaps':\n                overlaps,\n                'flipped':\n                False,\n                'seg_areas':\n                np.zeros((num_boxes, ), dtype=np.float32),\n            })\n        return roidb\n\n    @staticmethod\n    def merge_roidbs(a, b):\n        assert len(a) == len(b)\n        for i in range(len(a)):\n            a[i]['boxes'] = np.vstack((a[i]['boxes'], b[i]['boxes']))\n            a[i]['gt_classes'] = np.hstack((a[i]['gt_classes'],\n                                            b[i]['gt_classes']))\n            a[i]['gt_overlaps'] = scipy.sparse.vstack(\n                [a[i]['gt_overlaps'], b[i]['gt_overlaps']])\n            a[i]['seg_areas'] = np.hstack((a[i]['seg_areas'],\n                                           b[i]['seg_areas']))\n        return a\n"""
ctpn/lib/datasets/pascal_voc.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# _Author_: xiaofeng\n# Date: 2018-04-08 14:40:30\n# Last Modified by: xiaofeng\n# Last Modified time: 2018-04-08 14:40:30\n\nimport os\nimport sys\nimport numpy as np\nimport scipy.sparse\nparentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.insert(0, parentdir)\ntry:\n    import cPickle as pickle\nexcept:\n    import pickle\n#import pickle\nimport uuid\nimport scipy.io as sio\nimport xml.etree.ElementTree as ET\nfrom .imdb import imdb\n\nfrom .ds_utils import *\nfrom ..fast_rcnn.config import cfg\n\n\nclass pascal_voc(imdb):\n    def __init__(self, image_set, year, devkit_path=None):\n        imdb.__init__(self, \'voc_\' + year + \'_\' + image_set)\n        self._year = year\n        self._image_set = image_set\n        # \xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\x9a\x84\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\n        self._devkit_path = self._get_default_path() if devkit_path is None \\\n            else devkit_path\n        # \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe4\xbb\x93\xe5\xba\x93\xe4\xb9\x8b\xe5\xa4\x96\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n        # self._devkit_path = \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/ctpn/VOCdevkit2007\'\n        self._devkit_path = \'/home/xiaofeng/data/ctpn/VOCdevkit2007\'\n        # \xe5\xbe\x97\xe5\x88\xb0\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\n        self._data_path = os.path.join(self._devkit_path, \'VOC\' + self._year)\n\n        self._classes = (\n            \'__background__\',  # always index 0\n            \'text\')\n\n        self._class_to_ind = dict(\n            list(zip(self.classes, list(range(self.num_classes)))))\n        self._image_ext = \'.jpg\'\n        # \xe8\xaf\xbb\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xad\xe7\x9a\x84txt\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\n        self._image_index = self._load_image_set_index()\n        # Default to roidb handler\n        #self._roidb_handler = self.selective_search_roidb\n        self._roidb_handler = self.gt_roidb\n        self._salt = str(uuid.uuid4())\n        self._comp_id = \'comp4\'\n\n        # PASCAL specific config options\n        self.config = {\n            \'cleanup\': True,\n            \'use_salt\': True,\n            \'use_diff\': False,\n            \'matlab_eval\': False,\n            \'rpn_file\': None,\n            \'min_size\': 2\n        }\n\n        assert os.path.exists(self._devkit_path), \\\n            \'VOCdevkit path does not exist: {}\'.format(self._devkit_path)\n        assert os.path.exists(self._data_path), \\\n            \'Path does not exist: {}\'.format(self._data_path)\n\n    def image_path_at(self, i):\n        """"""\n        Return the absolute path to image i in the image sequence.\n        """"""\n        return self.image_path_from_index(self._image_index[i])\n\n    def image_path_from_index(self, index):\n        """"""\n        Construct an image path from the image\'s ""index"" identifier.\n        """"""\n        image_path = os.path.join(self._data_path, \'JPEGImages\',\n                                  index + self._image_ext)\n        assert os.path.exists(image_path), \\\n            \'Path does not exist: {}\'.format(image_path)\n        return image_path\n\n    def _load_image_set_index(self):\n        """"""\n        Load the indexes listed in this dataset\'s image set file.\n        """"""\n        # Example path to image set file:\n        # self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt\n        image_set_file = os.path.join(self._data_path, \'ImageSets\', \'Main\',\n                                      self._image_set + \'.txt\')\n        assert os.path.exists(image_set_file), \\\n            \'Path does not exist: {}\'.format(image_set_file)\n        with open(image_set_file) as f:\n            image_index = [x.strip() for x in f.readlines()]\n        return image_index\n\n    def _get_default_path(self):\n        """"""\n        Return the default path where PASCAL VOC is expected to be installed.\n        """"""\n        return os.path.join(cfg.DATA_DIR, \'VOCdevkit\' + self._year)\n\n    def gt_roidb(self):\n        """"""\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        """"""\n        # name \xe6\x98\xaf\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe8\xa6\x81\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        cache_file = os.path.join(self.cache_path, self.name + \'_gt_roidb.pkl\')\n        # \xe5\xa6\x82\xe6\x9e\x9ccatch\xe5\xad\x98\xe5\x9c\xa8\xe5\x88\x99\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xaf\xbb\xe5\x8f\x96catch\n        if os.path.exists(cache_file):\n            with open(cache_file, \'rb\') as fid:\n                roidb = pickle.load(fid)\n            print(\'{} gt roidb loaded from {}\'.format(self.name, cache_file))\n            return roidb\n\n        gt_roidb = [\n            self._load_pascal_annotation(index) for index in self.image_index\n        ]\n        with open(cache_file, \'wb\') as fid:\n            pickle.dump(gt_roidb, fid, pickle.HIGHEST_PROTOCOL)\n        print(\'wrote gt roidb to {}\'.format(cache_file))\n\n        return gt_roidb\n\n    def selective_search_roidb(self):\n        """"""\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        """"""\n        cache_file = os.path.join(self.cache_path,\n                                  self.name + \'_selective_search_roidb.pkl\')\n\n        if os.path.exists(cache_file):\n            with open(cache_file, \'rb\') as fid:\n                roidb = pickle.load(fid)\n            print(\'{} ss roidb loaded from {}\'.format(self.name, cache_file))\n            return roidb\n\n        if int(self._year) == 2007 or self._image_set != \'test\':\n            gt_roidb = self.gt_roidb()\n            ss_roidb = self._load_selective_search_roidb(gt_roidb)\n            roidb = imdb.merge_roidbs(gt_roidb, ss_roidb)\n        else:\n            roidb = self._load_selective_search_roidb(None)\n        with open(cache_file, \'wb\') as fid:\n            pickle.dump(roidb, fid, pickle.HIGHEST_PROTOCOL)\n        print(\'wrote ss roidb to {}\'.format(cache_file))\n\n        return roidb\n\n    def rpn_roidb(self):\n        if int(self._year) == 2007 or self._image_set != \'test\':\n            gt_roidb = self.gt_roidb()\n            rpn_roidb = self._load_rpn_roidb(gt_roidb)\n            roidb = imdb.merge_roidbs(gt_roidb, rpn_roidb)\n        else:\n            roidb = self._load_rpn_roidb(None)\n\n        return roidb\n\n    def _load_rpn_roidb(self, gt_roidb):\n        filename = self.config[\'rpn_file\']\n        print(\'loading {}\'.format(filename))\n        assert os.path.exists(filename), \\\n            \'rpn data not found at: {}\'.format(filename)\n        with open(filename, \'rb\') as f:\n            box_list = pickle.load(f)\n        return self.create_roidb_from_box_list(box_list, gt_roidb)\n\n    def _load_selective_search_roidb(self, gt_roidb):\n        filename = os.path.abspath(\n            os.path.join(cfg.DATA_DIR, \'selective_search_data\',\n                         self.name + \'.mat\'))\n        assert os.path.exists(filename), \\\n            \'Selective search data not found at: {}\'.format(filename)\n        raw_data = sio.loadmat(filename)[\'boxes\'].ravel()\n\n        box_list = []\n        for i in range(raw_data.shape[0]):\n            boxes = raw_data[i][:, (1, 0, 3, 2)] - 1\n            keep = unique_boxes(boxes)\n            boxes = boxes[keep, :]\n            keep = filter_small_boxes(boxes, self.config[\'min_size\'])\n            boxes = boxes[keep, :]\n            box_list.append(boxes)\n\n        return self.create_roidb_from_box_list(box_list, gt_roidb)\n\n    def _load_pascal_annotation(self, index):\n        """"""\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        """"""\n        filename = os.path.join(self._data_path, \'Annotations\', index + \'.xml\')\n        tree = ET.parse(filename)\n        objs = tree.findall(\'object\')\n        num_objs = len(objs)\n\n        boxes = np.zeros((num_objs, 4), dtype=np.uint16)\n        gt_classes = np.zeros((num_objs), dtype=np.int32)\n        overlaps = np.zeros((num_objs, self.num_classes), dtype=np.float32)\n        # ""Seg"" area for pascal is just the box area\n        seg_areas = np.zeros((num_objs), dtype=np.float32)\n        ishards = np.zeros((num_objs), dtype=np.int32)\n\n        # objs = diff_objs(or non_diff_objs)\n        # ignore any objects with classes except the classes we are looking for\n\n        # cls_objs = [\n        #     obj for obj in objs if obj.find(\'name\').text in self._classes\n        # ]\n        # objs = cls_objs\n\n        ####\n\n        # Load object bounding boxes into a data frame.\n        for ix, obj in enumerate(objs):\n            bbox = obj.find(\'bndbox\')\n            # Make pixel indexes 0-based\n            x1 = float(bbox.find(\'xmin\').text)\n            y1 = float(bbox.find(\'ymin\').text)\n            x2 = float(bbox.find(\'xmax\').text)\n            y2 = float(bbox.find(\'ymax\').text)\n            \'\'\'\n            x1 = float(bbox.find(\'xmin\').text) - 1\n            y1 = float(bbox.find(\'ymin\').text) - 1\n            x2 = float(bbox.find(\'xmax\').text) - 1\n            y2 = float(bbox.find(\'ymax\').text) - 1\n            \'\'\'\n            diffc = obj.find(\'difficult\')\n            difficult = 0 if diffc == None else int(diffc.text)\n            ishards[ix] = difficult\n\n            cls = self._class_to_ind[obj.find(\'name\').text.lower().strip()]\n            # cls = self._class_to_ind[obj.find(\'name\').text]\n\n            boxes[ix, :] = [x1, y1, x2, y2]\n            gt_classes[ix] = cls\n            overlaps[ix, cls] = 1.0\n            seg_areas[ix] = (x2 - x1 + 1) * (y2 - y1 + 1)\n\n        overlaps = scipy.sparse.csr_matrix(overlaps)\n\n        return {\n            \'boxes\': boxes,\n            \'gt_classes\': gt_classes,\n            \'gt_ishard\': ishards,\n            \'gt_overlaps\': overlaps,\n            \'flipped\': False,\n            \'seg_areas\': seg_areas\n        }\n\n    def _get_comp_id(self):\n        comp_id = (self._comp_id + \'_\' + self._salt\n                   if self.config[\'use_salt\'] else self._comp_id)\n        return comp_id\n\n    def _get_voc_results_file_template(self):\n        filename = self._get_comp_id() + \'_det_\' + self._image_set + \'_{:s}.txt\'\n        filedir = os.path.join(self._devkit_path, \'results\',\n                               \'VOC\' + self._year, \'Main\')\n        if not os.path.exists(filedir):\n            os.makedirs(filedir)\n        path = os.path.join(filedir, filename)\n        return path\n\n    def _write_voc_results_file(self, all_boxes):\n        for cls_ind, cls in enumerate(self.classes):\n            if cls == \'__background__\':\n                continue\n            print(\'Writing {} VOC results file\'.format(cls))\n            filename = self._get_voc_results_file_template().format(cls)\n            with open(filename, \'wt\') as f:\n                for im_ind, index in enumerate(self.image_index):\n                    dets = all_boxes[cls_ind][im_ind]\n                    if dets == []:\n                        continue\n                    # the VOCdevkit expects 1-based indices\n                    for k in range(dets.shape[0]):\n                        f.write(\n                            \'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n\'.format(\n                                index, dets[k, -1], dets[k, 0] + 1,\n                                dets[k, 1] + 1, dets[k, 2] + 1,\n                                dets[k, 3] + 1))\n\n\nif __name__ == \'__main__\':\n    d = pascal_voc(\'trainval\', \'2007\')\n    res = d.roidb\n    from IPython import embed\n    embed()\n'"
ctpn/lib/fast_rcnn/__init__.py,0,b'from . import config\nfrom . import nms_wrapper\nfrom . import test\nfrom . import train\n'
ctpn/lib/fast_rcnn/bbox_transform.py,0,"b'import numpy as np\n\n# tinanjia\ndef bbox_transform(ex_rois, gt_rois):\n    """"""\n    computes the distance from ground-truth boxes to the given boxes, normed by their size\n    :param ex_rois: n * 4 numpy array, given boxes\n    :param gt_rois: n * 4 numpy array, ground-truth boxes\n    :return: deltas: n * 4 numpy array, ground-truth boxes\n    """"""\n    ex_widths = ex_rois[:, 2] - ex_rois[:, 0] + 1.0\n    ex_heights = ex_rois[:, 3] - ex_rois[:, 1] + 1.0\n    ex_ctr_x = ex_rois[:, 0] + 0.5 * ex_widths\n    ex_ctr_y = ex_rois[:, 1] + 0.5 * ex_heights\n\n    assert np.min(ex_widths) > 0.1 and np.min(ex_heights) > 0.1, \\\n        \'Invalid boxes found: {} {}\'. \\\n            format(ex_rois[np.argmin(ex_widths), :], ex_rois[np.argmin(ex_heights), :])\n\n    gt_widths = gt_rois[:, 2] - gt_rois[:, 0] + 1.0\n    gt_heights = gt_rois[:, 3] - gt_rois[:, 1] + 1.0\n    gt_ctr_x = gt_rois[:, 0] + 0.5 * gt_widths\n    gt_ctr_y = gt_rois[:, 1] + 0.5 * gt_heights\n\n    # warnings.catch_warnings()\n    # warnings.filterwarnings(\'error\')\n    targets_dx = (gt_ctr_x - ex_ctr_x) / ex_widths\n    targets_dy = (gt_ctr_y - ex_ctr_y) / ex_heights\n    targets_dw = np.log(gt_widths / ex_widths)\n    targets_dh = np.log(gt_heights / ex_heights)\n\n    targets = np.vstack(\n        (targets_dx, targets_dy, targets_dw, targets_dh)).transpose()\n\n    return targets\n\n\ndef bbox_transform_inv(boxes, deltas):\n    boxes = boxes.astype(deltas.dtype, copy=False)\n\n    widths = boxes[:, 2] - boxes[:, 0] + 1.0\n    heights = boxes[:, 3] - boxes[:, 1] + 1.0\n    ctr_x = boxes[:, 0] + 0.5 * widths\n    ctr_y = boxes[:, 1] + 0.5 * heights\n\n    dx = deltas[:, 0::4]\n    dy = deltas[:, 1::4]\n    dw = deltas[:, 2::4]\n    dh = deltas[:, 3::4]\n\n    pred_ctr_x = ctr_x[:, np.newaxis]\n    pred_ctr_y = dy * heights[:, np.newaxis] + ctr_y[:, np.newaxis]\n    pred_w = widths[:, np.newaxis]\n    pred_h = np.exp(dh) * heights[:, np.newaxis]\n\n    pred_boxes = np.zeros(deltas.shape, dtype=deltas.dtype)\n    # x1\n    pred_boxes[:, 0::4] = pred_ctr_x - 0.5 * pred_w\n    # y1\n    pred_boxes[:, 1::4] = pred_ctr_y - 0.5 * pred_h\n    # x2\n    pred_boxes[:, 2::4] = pred_ctr_x + 0.5 * pred_w\n    # y2\n    pred_boxes[:, 3::4] = pred_ctr_y + 0.5 * pred_h\n\n    return pred_boxes\n\n\ndef clip_boxes(boxes, im_shape):\n    """"""\n    Clip boxes to image boundaries.\n    """"""\n\n    # x1 >= 0\n    boxes[:, 0::4] = np.maximum(np.minimum(boxes[:, 0::4], im_shape[1] - 1), 0)\n    # y1 >= 0\n    boxes[:, 1::4] = np.maximum(np.minimum(boxes[:, 1::4], im_shape[0] - 1), 0)\n    # x2 < im_shape[1]\n    boxes[:, 2::4] = np.maximum(np.minimum(boxes[:, 2::4], im_shape[1] - 1), 0)\n    # y2 < im_shape[0]\n    boxes[:, 3::4] = np.maximum(np.minimum(boxes[:, 3::4], im_shape[0] - 1), 0)\n    return boxes\n'"
ctpn/lib/fast_rcnn/config.py,0,"b'# --------------------------------------------------------\n# Fast R-CNN\n# Copyright (c) 2015 Microsoft\n# Licensed under The MIT License [see LICENSE for details]\n# Written by Ross Girshick\n# --------------------------------------------------------\n""""""Fast R-CNN config system.\nThis file specifies default config options for Fast R-CNN. You should not\nchange values in this file. Instead, you should write a config file (in yaml)\nand use cfg_from_file(yaml_file) to load it and override the default options.\nMost tools in $ROOT/tools take a --cfg option to specify an override file.\n    - See tools/{train,test}_net.py for example code that uses cfg_from_file()\n    - See experiments/cfgs/*.yml for example YAML config override files\n""""""\n\nimport os\nimport os.path as osp\nfrom time import strftime, localtime\n\nimport numpy as np\nfrom easydict import EasyDict as edict\n\n__C = edict()\n# Consumers can get config by:\n#   from fast_rcnn_config import cfg\ncfg = __C\n\n#\n# Training options\n#\n\n# region proposal network (RPN) or not\n__C.IS_RPN = True\n__C.ANCHOR_SCALES = [16]\n__C.NCLASSES = 2\n\n# multiscale training and testing\n__C.IS_MULTISCALE = False\n__C.IS_EXTRAPOLATING = True\n\n__C.REGION_PROPOSAL = \'RPN\'\n\n__C.NET_NAME = \'VGGnet\'\n__C.SUBCLS_NAME = \'voxel_exemplars\'\n\n__C.TRAIN = edict()\n# Adam, Momentum, RMS\n__C.TRAIN.SOLVER = \'Momentum\'\n# learning rate\n__C.TRAIN.WEIGHT_DECAY = 0.0005\n__C.TRAIN.LEARNING_RATE = 0.001\n__C.TRAIN.MOMENTUM = 0.9\n__C.TRAIN.GAMMA = 0.1\n__C.TRAIN.STEPSIZE = 50000\n__C.TRAIN.DISPLAY = 10\n__C.TRAIN.LOG_IMAGE_ITERS = 100\n__C.TRAIN.OHEM = False\n__C.TRAIN.RANDOM_DOWNSAMPLE = False\n\n# Scales to compute real features\n__C.TRAIN.SCALES_BASE = (0.25, 0.5, 1.0, 2.0, 3.0)\n# __C.TRAIN.SCALES_BASE = (1.0,)\n\n# parameters for ROI generating\n# __C.TRAIN.SPATIAL_SCALE = 0.0625\n__C.TRAIN.KERNEL_SIZE = 5\n\n# Aspect ratio to use during training\n# __C.TRAIN.ASPECTS = (1, 0.75, 0.5, 0.25)\n__C.TRAIN.ASPECTS = (1, )\n\n# Scales to use during training (can list multiple scales)\n# Each scale is the pixel size of an image\'s shortest side\n__C.TRAIN.SCALES = (600, )\n\n# Max pixel size of the longest side of a scaled input image\n__C.TRAIN.MAX_SIZE = 1000\n\n# Images to use per minibatch\n__C.TRAIN.IMS_PER_BATCH = 1\n\n# Minibatch size (number of regions of interest [ROIs])\n__C.TRAIN.BATCH_SIZE = 128\n\n# Fraction of minibatch that is labeled foreground (i.e. class > 0)\n__C.TRAIN.FG_FRACTION = 0.25\n\n# Overlap threshold for a ROI to be considered foreground (if >= FG_THRESH)\n__C.TRAIN.FG_THRESH = 0.5\n\n# Overlap threshold for a ROI to be considered background (class = 0 if\n# overlap in [LO, HI))\n__C.TRAIN.BG_THRESH_HI = 0.5\n__C.TRAIN.BG_THRESH_LO = 0.1\n\n# Use horizontally-flipped images during training?\n__C.TRAIN.USE_FLIPPED = True\n\n# Train bounding-box regressors\n__C.TRAIN.BBOX_REG = True\n\n# Overlap required between a ROI and ground-truth box in order for that ROI to\n# be used as a bounding-box regression training example\n__C.TRAIN.BBOX_THRESH = 0.5\n\n# Iterations between snapshots\n__C.TRAIN.SNAPSHOT_ITERS = 5000\n\n# solver.prototxt specifies the snapshot path prefix, this adds an optional\n# infix to yield the path: <prefix>[_<infix>]_iters_XYZ.caffemodel\n__C.TRAIN.SNAPSHOT_PREFIX = \'VGGnet_fast_rcnn\'\n__C.TRAIN.SNAPSHOT_INFIX = \'\'\n\n# Use a prefetch thread in roi_data_layer.layer\n# So far I haven\'t found this useful; likely more engineering work is required\n__C.TRAIN.USE_PREFETCH = False\n\n# Normalize the targets (subtract empirical mean, divide by empirical stddev)\n__C.TRAIN.BBOX_NORMALIZE_TARGETS = True\n# Deprecated (inside weights)\n# used for assigning weights for each coords (x1, y1, w, h)\n__C.TRAIN.BBOX_INSIDE_WEIGHTS = (1.0, 1.0, 1.0, 1.0)\n# Normalize the targets using ""precomputed"" (or made up) means and stdevs\n# (BBOX_NORMALIZE_TARGETS must also be True)\n__C.TRAIN.BBOX_NORMALIZE_TARGETS_PRECOMPUTED = True\n__C.TRAIN.BBOX_NORMALIZE_MEANS = (0.0, 0.0, 0.0, 0.0)\n__C.TRAIN.BBOX_NORMALIZE_STDS = (0.1, 0.1, 0.2, 0.2)\n# faster rcnn dont use pre-generated rois by selective search\n# __C.TRAIN.BBOX_NORMALIZE_STDS = (1, 1, 1, 1)\n\n# Train using these proposals\n__C.TRAIN.PROPOSAL_METHOD = \'selective_search\'\n\n# Make minibatches from images that have similar aspect ratios (i.e. both\n# tall and thin or both short and wide) in order to avoid wasting computation\n# on zero-padding.\n__C.TRAIN.ASPECT_GROUPING = True\n# preclude rois intersected with dontcare areas above the value\n__C.TRAIN.DONTCARE_AREA_INTERSECTION_HI = 0.5\n__C.TRAIN.PRECLUDE_HARD_SAMPLES = True\n# Use RPN to detect objects\n__C.TRAIN.HAS_RPN = True\n# IOU >= thresh: positive example\n__C.TRAIN.RPN_POSITIVE_OVERLAP = 0.7\n# IOU < thresh: negative example\n__C.TRAIN.RPN_NEGATIVE_OVERLAP = 0.3\n# If an anchor statisfied by positive and negative conditions set to negative\n__C.TRAIN.RPN_CLOBBER_POSITIVES = False\n# Max number of foreground examples\n__C.TRAIN.RPN_FG_FRACTION = 0.5\n# Total number of examples\n__C.TRAIN.RPN_BATCHSIZE = 256\n# NMS threshold used on RPN proposals\n__C.TRAIN.RPN_NMS_THRESH = 0.7\n# Number of top scoring boxes to keep before apply NMS to RPN proposals\n__C.TRAIN.RPN_PRE_NMS_TOP_N = 12000\n# Number of top scoring boxes to keep after applying NMS to RPN proposals\n__C.TRAIN.RPN_POST_NMS_TOP_N = 2000\n# Proposal height and width both need to be greater than RPN_MIN_SIZE (at orig image scale)\n__C.TRAIN.RPN_MIN_SIZE = 8\n# Deprecated (outside weights)\n__C.TRAIN.RPN_BBOX_INSIDE_WEIGHTS = (1.0, 1.0, 1.0, 1.0)\n# Give the positive RPN examples weight of p * 1 / {num positives}\n# and give negatives a weight of (1 - p)\n# Set to -1.0 to use uniform example weighting\n__C.TRAIN.RPN_POSITIVE_WEIGHT = -1.0\n# __C.TRAIN.RPN_POSITIVE_WEIGHT = 0.5\n\n#\n# Testing options\n#\n\n__C.TEST = edict()\n\n# Scales to use during testing (can list multiple scales)\n# Each scale is the pixel size of an image\'s shortest side\n__C.TEST.SCALES = (900, )\n\n# Max pixel size of the longest side of a scaled input image\n__C.TEST.MAX_SIZE = 1500\n\n# Overlap threshold used for non-maximum suppression (suppress boxes with\n# IoU >= this threshold)\n__C.TEST.NMS = 0.3\n\n# Experimental: treat the (K+1) units in the cls_score layer as linear\n# predictors (trained, eg, with one-vs-rest SVMs).\n__C.TEST.SVM = False\n\n# Test using bounding-box regressors\n__C.TEST.BBOX_REG = True\n\n# Propose boxes\n__C.TEST.HAS_RPN = True\n\n# Test using these proposals\n__C.TEST.PROPOSAL_METHOD = \'selective_search\'\n\n## NMS threshold used on RPN proposals\n__C.TEST.RPN_NMS_THRESH = 0.7\n## Number of top scoring boxes to keep before apply NMS to RPN proposals\n# __C.TEST.RPN_PRE_NMS_TOP_N = 6000\n__C.TEST.RPN_PRE_NMS_TOP_N = 12000\n## Number of top scoring boxes to keep after applying NMS to RPN proposals\n__C.TEST.RPN_POST_NMS_TOP_N = 1000\n# __C.TEST.RPN_POST_NMS_TOP_N = 2000\n# Proposal height and width both need to be greater than RPN_MIN_SIZE (at orig image scale)\n__C.TEST.RPN_MIN_SIZE = 8\n\n#\n# MISC\n#\n\n# The mapping from image coordinates to feature map coordinates might cause\n# some boxes that are distinct in image space to become identical in feature\n# coordinates. If DEDUP_BOXES > 0, then DEDUP_BOXES is used as the scale factor\n# for identifying duplicate boxes.\n# 1/16 is correct for {Alex,Caffe}Net, VGG_CNN_M_1024, and VGG16\n__C.DEDUP_BOXES = 1. / 16.\n\n# Pixel mean values (BGR order) as a (1, 1, 3) array\n# We use the same pixel mean for all networks even though it\'s not exactly what\n# they were trained with\n__C.PIXEL_MEANS = np.array([[[102.9801, 115.9465, 122.7717]]])\n\n# For reproducibility\n# __C.RNG_SEED = 3\n__C.RNG_SEED = 3\n\n# A small number that\'s used many times\n__C.EPS = 1e-14\n\n# Root directory of project\n__C.ROOT_DIR = osp.abspath(osp.join(osp.dirname(__file__), \'..\', \'..\'))\n\n# Data directory\n__C.DATA_DIR = osp.abspath(osp.join(__C.ROOT_DIR, \'data\'))\n# \xe5\xb0\x86voc\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe4\xbd\x8d\xe7\xbd\xae\xe7\xa7\xbb\xe5\x88\xb0\xe4\xbb\x93\xe5\xba\x93\xe5\xa4\x96\xe9\x83\xa8\n# __C.DATA_DIR = \'/Users/xiaofeng/Code/Github/dataset/CHINESE_OCR/ctpn/\'\n\n# Model directory\n__C.MODELS_DIR = osp.abspath(osp.join(__C.ROOT_DIR, \'models\', \'pascal_voc\'))\n\n# Name (or path to) the matlab executable\n__C.MATLAB = \'matlab\'\n\n# Place outputs under an experiments directory\n__C.EXP_DIR = \'default\'\n__C.LOG_DIR = \'default\'\n\n# Use GPU implementation of non-maximum suppression\n__C.USE_GPU_NMS = True\n\n# Default GPU device id\n__C.GPU_ID = 0\n\n\ndef get_output_dir(imdb, weights_filename):\n    """"""Return the directory where experimental artifacts are placed.\n    If the directory does not exist, it is created.\n    A canonical path is built using the name from an imdb and a network\n    (if not None).\n    """"""\n    outdir = osp.abspath(\n        osp.join(__C.ROOT_DIR, \'output\', __C.EXP_DIR, imdb.name))\n    if weights_filename is not None:\n        outdir = osp.join(outdir, weights_filename)\n    if not os.path.exists(outdir):\n        os.makedirs(outdir)\n    return outdir\n\n\ndef get_log_dir(imdb):\n    """"""Return the directory where experimental artifacts are placed.\n    If the directory does not exist, it is created.\n    A canonical path is built using the name from an imdb and a network\n    (if not None).\n    """"""\n    log_dir = osp.abspath( \\\n        osp.join(__C.ROOT_DIR, \'logs\', __C.LOG_DIR, imdb.name, strftime(""%Y-%m-%d-%H-%M-%S"", localtime())))\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n    return log_dir\n\n\ndef _merge_a_into_b(a, b):\n    """"""Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    """"""\n    if type(a) is not edict:\n        return\n\n    for k, v in a.items():\n        # a must specify keys that are in b\n        # if not b.has_key(k): #--python2\n        if k not in b:  # python3\n            raise KeyError(\'{} is not a valid config key\'.format(k))\n\n        # the types must match, too\n        old_type = type(b[k])\n        if old_type is not type(v):\n            if isinstance(b[k], np.ndarray):\n                v = np.array(v, dtype=b[k].dtype)\n            else:\n                raise ValueError((\'Type mismatch ({} vs. {}) \'\n                                  \'for config key: {}\').format(\n                                      type(b[k]), type(v), k))\n\n        # recursively merge dicts\n        if type(v) is edict:\n            try:\n                _merge_a_into_b(a[k], b[k])\n            except:\n                print(\'Error under config key: {}\'.format(k))\n                raise\n        else:\n            b[k] = v\n\n\ndef cfg_from_file(filename):\n    """"""Load a config file and merge it into the default options.""""""\n    import yaml\n    with open(filename, \'r\') as f:\n        yaml_cfg = edict(yaml.load(f))\n\n    _merge_a_into_b(yaml_cfg, __C)\n\n\ndef cfg_from_list(cfg_list):\n    """"""Set config keys via list (e.g., from command line).""""""\n    from ast import literal_eval\n    assert len(cfg_list) % 2 == 0\n    for k, v in zip(cfg_list[0::2], cfg_list[1::2]):\n        key_list = k.split(\'.\')\n        d = __C\n        for subkey in key_list[:-1]:\n            # assert d.has_key(subkey)\n            assert subkey in d\n            d = d[subkey]\n        subkey = key_list[-1]\n        assert d.has_key(subkey)\n        try:\n            value = literal_eval(v)\n        except:\n            # handle the case when v is a string literal\n            value = v\n        assert type(value) == type(d[subkey]), \\\n            \'type {} does not match original type {}\'.format(\n                type(value), type(d[subkey]))\n        d[subkey] = value\n'"
ctpn/lib/fast_rcnn/nms_wrapper.py,0,"b'from .config import cfg\nfrom ..utils.cython_nms import nms as cython_nms\n\ntry:\n    from lib.utils.gpu_nms import gpu_nms\nexcept:\n    gpu_nms = cython_nms\npass\n\n\ndef nms(dets, thresh):\n    if dets.shape[0] == 0:\n        return []\n    if cfg.USE_GPU_NMS:\n        try:\n            return gpu_nms(dets, thresh, device_id=cfg.GPU_ID)\n        except:\n            return cython_nms(dets, thresh)\n    else:\n        return cython_nms(dets, thresh)\n'"
ctpn/lib/fast_rcnn/test.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# _Author_: xiaofeng\n# Date: 2018-04-08 14:31:45\n# Last Modified by: xiaofeng\n# Last Modified time: 2018-04-08 14:31:45\n\nimport cv2\nimport os\nimport sys\nimport numpy as np\n\n# sys.path.append(os.getcwd())\nparentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.insert(0, parentdir)\nfrom .config import cfg\nfrom ..utils.blob import im_list_to_blob\n\n# from ..utils.blob import im_list_to_blob\n\n\ndef _get_image_blob(im):\n    im_orig = im.astype(np.float32, copy=True)\n    im_orig -= cfg.PIXEL_MEANS\n\n    im_shape = im_orig.shape\n    im_size_min = np.min(im_shape[0:2])\n    im_size_max = np.max(im_shape[0:2])\n\n    processed_ims = []\n    im_scale_factors = []\n\n    for target_size in cfg.TEST.SCALES:\n        im_scale = float(target_size) / float(im_size_min)\n        # Prevent the biggest axis from being more than MAX_SIZE\n        if np.round(im_scale * im_size_max) > cfg.TEST.MAX_SIZE:\n            im_scale = float(cfg.TEST.MAX_SIZE) / float(im_size_max)\n        im = cv2.resize(\n            im_orig,\n            None,\n            None,\n            fx=im_scale,\n            fy=im_scale,\n            interpolation=cv2.INTER_LINEAR)\n        im_scale_factors.append(im_scale)\n        processed_ims.append(im)\n\n    # Create a blob to hold the input images\n    blob = im_list_to_blob(processed_ims)\n\n    return blob, np.array(im_scale_factors)\n\n\ndef _get_blobs(im, rois):\n    blobs = {\'data\': None, \'rois\': None}\n    blobs[\'data\'], im_scale_factors = _get_image_blob(im)\n    return blobs, im_scale_factors\n\n\ndef test_ctpn(sess, net, im, boxes=None):\n    blobs, im_scales = _get_blobs(im, boxes)\n    if cfg.TEST.HAS_RPN:\n        im_blob = blobs[\'data\']\n        blobs[\'im_info\'] = np.array(\n            [[im_blob.shape[1], im_blob.shape[2], im_scales[0]]],\n            dtype=np.float32)\n\n    # forward pass\n    if cfg.TEST.HAS_RPN:\n        feed_dict = {\n            net.data: blobs[\'data\'],\n            net.im_info: blobs[\'im_info\'],\n            net.keep_prob: 1.0\n        }\n\n    rois = sess.run([net.get_output(\'rois\')[0]], feed_dict=feed_dict)\n    rois = rois[0]\n\n    scores = rois[:, 0]\n    if cfg.TEST.HAS_RPN:\n        assert len(im_scales) == 1, ""Only single-image batch implemented""\n        boxes = rois[:, 1:5] / im_scales[0]\n    return scores, boxes\n'"
ctpn/lib/fast_rcnn/train.py,30,"b'from __future__ import print_function\n\nimport os\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom ..fast_rcnn.config import cfg\nfrom ..roi_data_layer import roidb as rdl_roidb\nfrom ..roi_data_layer.layer import RoIDataLayer\nfrom..utils.timer import Timer\n# from lib.datasets import imdb as imdb\n\n_DEBUG = False\n\n\nclass SolverWrapper(object):\n    def __init__(self,\n                 sess,\n                 network,\n                 imdb,\n                 roidb,\n                 output_dir,\n                 logdir,\n                 pretrained_model=None):\n        """"""Initialize the SolverWrapper.""""""\n        self.net = network\n        self.imdb = imdb\n        self.roidb = roidb\n        self.output_dir = output_dir\n        self.pretrained_model = pretrained_model\n\n        print(\'Computing bounding-box regression targets...\')\n        if cfg.TRAIN.BBOX_REG:\n            self.bbox_means, self.bbox_stds = rdl_roidb.add_bbox_regression_targets(\n                roidb)\n        print(\'done\')\n\n        # For checkpoint\n        self.saver = tf.train.Saver(\n            max_to_keep=1, write_version=tf.train.SaverDef.V2)\n        self.writer = tf.summary.FileWriter(\n            logdir=logdir, graph=tf.get_default_graph(), flush_secs=5)\n\n    def snapshot(self, sess, iter):\n        net = self.net\n        if cfg.TRAIN.BBOX_REG and \'bbox_pred\' in net.layers and cfg.TRAIN.BBOX_NORMALIZE_TARGETS:\n            # save original values\n            with tf.variable_scope(\'bbox_pred\', reuse=True):\n                weights = tf.get_variable(""weights"")\n                biases = tf.get_variable(""biases"")\n\n            orig_0 = weights.eval()\n            orig_1 = biases.eval()\n\n            # scale and shift with bbox reg unnormalization; then save snapshot\n            weights_shape = weights.get_shape().as_list()\n            sess.run(\n                weights.assign(orig_0 * np.tile(self.bbox_stds,\n                                                (weights_shape[0], 1))))\n            sess.run(biases.assign(orig_1 * self.bbox_stds + self.bbox_means))\n\n        if not os.path.exists(self.output_dir):\n            os.makedirs(self.output_dir)\n\n        infix = (\'_\' + cfg.TRAIN.SNAPSHOT_INFIX\n                 if cfg.TRAIN.SNAPSHOT_INFIX != \'\' else \'\')\n        filename = (cfg.TRAIN.SNAPSHOT_PREFIX + infix +\n                    \'_iter_{:d}\'.format(iter + 1) + \'.ckpt\')\n        filename = os.path.join(self.output_dir, filename)\n        # save\n        self.saver.save(sess, filename)\n        print(\'Wrote snapshot to: {:s}\'.format(filename))\n\n        if cfg.TRAIN.BBOX_REG and \'bbox_pred\' in net.layers:\n            # restore net to original state\n            sess.run(weights.assign(orig_0))\n            sess.run(biases.assign(orig_1))\n\n    def build_image_summary(self):\n        # A simple graph for write image summary\n\n        log_image_data = tf.placeholder(tf.uint8, [None, None, 3])\n        log_image_name = tf.placeholder(tf.string)\n        # import tensorflow.python.ops.gen_logging_ops as logging_ops\n        from tensorflow.python.ops import gen_logging_ops\n        from tensorflow.python.framework import ops as _ops\n        log_image = gen_logging_ops.image_summary(\n            log_image_name, tf.expand_dims(log_image_data, 0), max_images=1)\n        _ops.add_to_collection(_ops.GraphKeys.SUMMARIES, log_image)\n        # log_image = tf.summary.image(log_image_name, tf.expand_dims(log_image_data, 0), max_outputs=1)\n        return log_image, log_image_data, log_image_name\n\n    def train_model(self, sess, max_iters, restore=False):\n        """"""Network training loop.""""""\n        data_layer = get_data_layer(self.roidb, self.imdb.num_classes)\n        total_loss, model_loss, rpn_cross_entropy, rpn_loss_box = self.net.build_loss(\n            ohem=cfg.TRAIN.OHEM)\n        # scalar summary\n        tf.summary.scalar(\'rpn_reg_loss\', rpn_loss_box)\n        tf.summary.scalar(\'rpn_cls_loss\', rpn_cross_entropy)\n        tf.summary.scalar(\'model_loss\', model_loss)\n        tf.summary.scalar(\'total_loss\', total_loss)\n        summary_op = tf.summary.merge_all()\n\n        log_image, log_image_data, log_image_name = \\\n            self.build_image_summary()\n\n        # optimizer\n        lr = tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)\n        if cfg.TRAIN.SOLVER == \'Adam\':\n            opt = tf.train.AdamOptimizer(cfg.TRAIN.LEARNING_RATE)\n        elif cfg.TRAIN.SOLVER == \'RMS\':\n            opt = tf.train.RMSPropOptimizer(cfg.TRAIN.LEARNING_RATE)\n        else:\n            # lr = tf.Variable(0.0, trainable=False)\n            momentum = cfg.TRAIN.MOMENTUM\n            opt = tf.train.MomentumOptimizer(lr, momentum)\n\n        global_step = tf.Variable(0, trainable=False)\n        with_clip = True\n        if with_clip:\n            tvars = tf.trainable_variables()\n            grads, norm = tf.clip_by_global_norm(\n                tf.gradients(total_loss, tvars), 10.0)\n            train_op = opt.apply_gradients(\n                list(zip(grads, tvars)), global_step=global_step)\n        else:\n            train_op = opt.minimize(total_loss, global_step=global_step)\n\n        # intialize variables\n        sess.run(tf.global_variables_initializer())\n        restore_iter = 0\n\n        # load vgg16\n        if self.pretrained_model is not None and not restore:\n            try:\n                print((\'Loading pretrained model \'\n                       \'weights from {:s}\').format(self.pretrained_model))\n                self.net.load(self.pretrained_model, sess, True)\n            except:\n                raise \'Check your pretrained model {:s}\'.format(\n                    self.pretrained_model)\n\n        # resuming a trainer\n        if restore:\n            # try:\n            print(\'output_dir:\', self.output_dir)\n            # \xe5\x8a\xa0\xe8\xbd\xbdckpt\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe8\x80\x8c\xe9\x9d\x9e\xe6\x8c\x87\xe5\x90\x91checkpoint\n            ckpt = tf.train.get_checkpoint_state(\n                self.output_dir + \'/\')\n            print(\n                \'Restoring from {}...\'.format(ckpt.model_checkpoint_path),\n                end=\' \')\n            self.saver.restore(sess, ckpt.model_checkpoint_path)\n            stem = os.path.splitext(\n                os.path.basename(ckpt.model_checkpoint_path))[0]\n            restore_iter = int(stem.split(\'_\')[-1])\n            sess.run(global_step.assign(restore_iter))\n            print(\'done\')\n            # except:\n\n            # raise \'Check your pretrained {:s}\'.format(ckpt.model_checkpoint_path)\n\n        last_snapshot_iter = -1\n        timer = Timer()\n        print(restore_iter, max_iters)\n        for iter in range(restore_iter, max_iters):\n            timer.tic()\n            # learning rate\n            print(iter)\n            if iter != 0 and iter % cfg.TRAIN.STEPSIZE == 0:\n                sess.run(tf.assign(lr, lr.eval() * cfg.TRAIN.GAMMA))\n                print(lr)\n\n            # get one batch\n            blobs = data_layer.forward()\n\n            feed_dict = {\n                self.net.data: blobs[\'data\'],\n                self.net.im_info: blobs[\'im_info\'],\n                self.net.keep_prob: 0.5,\n                self.net.gt_boxes: blobs[\'gt_boxes\'],\n                self.net.gt_ishard: blobs[\'gt_ishard\'],\n                self.net.dontcare_areas: blobs[\'dontcare_areas\']\n            }\n            res_fetches = []\n            fetch_list = [\n                total_loss, model_loss, rpn_cross_entropy, rpn_loss_box,\n                summary_op, train_op\n            ] + res_fetches\n\n            total_loss_val, model_loss_val, rpn_loss_cls_val, rpn_loss_box_val, \\\n            summary_str, _ = sess.run(fetches=fetch_list, feed_dict=feed_dict)\n\n            self.writer.add_summary(\n                summary=summary_str, global_step=global_step.eval())\n\n            _diff_time = timer.toc(average=False)\n\n            if (iter) % (cfg.TRAIN.DISPLAY) == 0:\n                print(\n                    \'iter: %d / %d, total loss: %.4f, model loss: %.4f, rpn_loss_cls: %.4f, rpn_loss_box: %.4f, lr: %f\' % \\\n                    (iter, max_iters, total_loss_val, model_loss_val, rpn_loss_cls_val, rpn_loss_box_val, lr.eval()))\n                print(\'speed: {:.3f}s / iter\'.format(_diff_time))\n\n            if (iter + 1) % cfg.TRAIN.SNAPSHOT_ITERS == 0:\n                last_snapshot_iter = iter\n                self.snapshot(sess, iter)\n\n        if last_snapshot_iter != iter:\n            self.snapshot(sess, iter)\n\n\ndef get_training_roidb(imdb):\n    """"""Returns a roidb (Region of Interest database) for use in training.""""""\n    if cfg.TRAIN.USE_FLIPPED:\n        print(\'Appending horizontally-flipped training examples...\')\n        imdb.append_flipped_images()\n        print(\'done\')\n\n    print(\'Preparing training data...\')\n    if cfg.TRAIN.HAS_RPN:\n        rdl_roidb.prepare_roidb(imdb)\n    else:\n        rdl_roidb.prepare_roidb(imdb)\n    print(\'done\')\n\n    return imdb.roidb\n\n\ndef get_data_layer(roidb, num_classes):\n    """"""return a data layer.""""""\n    if cfg.TRAIN.HAS_RPN:\n        if cfg.IS_MULTISCALE:\n            # obsolete\n            # layer = GtDataLayer(roidb)\n            raise ""Calling caffe modules...""\n        else:\n            layer = RoIDataLayer(roidb, num_classes)\n    else:\n        layer = RoIDataLayer(roidb, num_classes)\n\n    return layer\n\n\ndef train_net(network,\n              imdb,\n              roidb,\n              output_dir,\n              log_dir,\n              pretrained_model=None,\n              max_iters=40000,\n              restore=False):\n    """"""Train a Fast R-CNN network.""""""\n\n    config = tf.ConfigProto(allow_soft_placement=True)\n    config.gpu_options.allocator_type = \'BFC\'\n    config.gpu_options.per_process_gpu_memory_fraction = 0.75\n    with tf.Session(config=config) as sess:\n        sw = SolverWrapper(\n            sess,\n            network,\n            imdb,\n            roidb,\n            output_dir,\n            logdir=log_dir,\n            pretrained_model=pretrained_model)\n        print(\'Solving...\')\n        sw.train_model(sess, max_iters, restore=restore)\n        print(\'done solving\')\n'"
ctpn/lib/networks/VGGnet_test.py,3,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# _Author_: xiaofeng\n# Date: 2018-04-22 21:45:13\n# Last Modified by: xiaofeng\n# Last Modified time: 2018-04-22 21:45:13\n\nimport tensorflow as tf\nimport numpy as np\nfrom .network import Network\nfrom ..fast_rcnn.config import cfg\n\n\nclass VGGnet_test(Network):\n    def __init__(self, trainable=True):\n        self.inputs = []\n        self.data = tf.placeholder(tf.float32, shape=[None, None, None, 3])\n        # a list of [image_height, image_width, scale_ratios]\n        self.im_info = tf.placeholder(tf.float32, shape=[None, 3])\n        self.keep_prob = tf.placeholder(tf.float32)\n        self.layers = dict({'data': self.data, 'im_info': self.im_info})\n        self.trainable = trainable\n        self.setup()\n\n    def setup(self):\n        anchor_scales = cfg.ANCHOR_SCALES\n        _feat_stride = [16, ]\n\n        (self.feed('data').conv(3, 3, 64, 1, 1, name='conv1_1')\n         .conv(3, 3, 64, 1, 1, name='conv1_2')\n         .max_pool(2, 2, 2, 2, padding='VALID', name='pool1')\n         .conv(3, 3, 128, 1, 1, name='conv2_1')\n         .conv(3, 3, 128, 1, 1, name='conv2_2')\n         .max_pool(2, 2, 2, 2, padding='VALID', name='pool2')\n         .conv(3, 3, 256, 1, 1, name='conv3_1')\n         .conv(3, 3, 256, 1, 1, name='conv3_2')\n         .conv(3, 3, 256, 1, 1, name='conv3_3')\n         .max_pool(2, 2, 2, 2, padding='VALID', name='pool3')\n         .conv(3, 3, 512, 1, 1, name='conv4_1')\n         .conv(3, 3, 512, 1, 1, name='conv4_2')\n         .conv(3, 3, 512, 1, 1, name='conv4_3')\n         .max_pool(2, 2, 2, 2, padding='VALID', name='pool4')\n         .conv(3, 3, 512, 1, 1, name='conv5_1')\n         .conv(3, 3, 512, 1, 1, name='conv5_2')\n         .conv(3, 3, 512, 1, 1, name='conv5_3'))\n\n        # \xe5\x8d\xb7\xe7\xa7\xaf3x3x512--\xe6\xad\xa5\xe9\x95\xbf1x1\n        # \xe4\xbd\xbf\xe7\x94\xa8vgg\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\xb1\x82\xe7\x9a\x84feature map\xe8\xbf\x9b\xe8\xa1\x8crpn\xe5\x8c\xba\xe5\x9f\x9f\xe6\x8f\x90\xe8\xae\xae\n        (self.feed('conv5_3').conv(3, 3, 512, 1, 1, name='rpn_conv/3x3'))\n        # rpn\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe4\xb8\xba512\xe4\xb8\xaa\xe9\x80\x9a\xe9\x81\x93\n        # \xe5\x8f\x8c\xe5\x90\x91lstm \xe5\x8c\x85\xe5\x90\xab128\xe4\xb8\xaa\xe8\x8a\x82\xe7\x82\xb9\n        (self.feed('rpn_conv/3x3').Bilstm(512, 128, 512, name='lstm_o'))\n\n        # lstm\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\n        (self.feed('lstm_o').lstm_fc(\n            512, len(anchor_scales) * 10 * 4, name='rpn_bbox_pred'))\n        (self.feed('lstm_o').lstm_fc(\n            512, len(anchor_scales) * 10 * 2, name='rpn_cls_score'))\n\n        #  shape is (1, H, W, Ax2) -> (1, H, WxA, 2)\n        (self.feed('rpn_cls_score').spatial_reshape_layer(\n            2, name='rpn_cls_score_reshape')\n         .spatial_softmax(name='rpn_cls_prob'))\n\n        # shape is (1, H, WxA, 2) -> (1, H, W, Ax2)\n        (self.feed('rpn_cls_prob').spatial_reshape_layer(\n            len(anchor_scales) * 10 * 2, name='rpn_cls_prob_reshape'))\n        \n        (self.feed('rpn_cls_prob_reshape', 'rpn_bbox_pred', 'im_info')\n         .proposal_layer(_feat_stride, anchor_scales, 'TEST', name='rois'))"""
ctpn/lib/networks/VGGnet_train.py,6,"b""# -*- coding:utf-8 -*-\nimport tensorflow as tf\n\nfrom .network import Network\nfrom ..fast_rcnn.config import cfg\n\n\nclass VGGnet_train(Network):\n    def __init__(self, trainable=True):\n        self.inputs = []\n        self.data = tf.placeholder(tf.float32, shape=[None, None, None, 3], name='data')\n        self.im_info = tf.placeholder(tf.float32, shape=[None, 3], name='im_info')\n        self.gt_boxes = tf.placeholder(tf.float32, shape=[None, 5], name='gt_boxes')\n        self.gt_ishard = tf.placeholder(tf.int32, shape=[None], name='gt_ishard')\n        self.dontcare_areas = tf.placeholder(tf.float32, shape=[None, 4], name='dontcare_areas')\n        self.keep_prob = tf.placeholder(tf.float32)\n        self.layers = dict({'data': self.data, 'im_info': self.im_info, 'gt_boxes': self.gt_boxes, \\\n                            'gt_ishard': self.gt_ishard, 'dontcare_areas': self.dontcare_areas})\n        self.trainable = trainable\n        self.setup()\n\n    def setup(self):\n        n_classes = cfg.NCLASSES\n        anchor_scales = cfg.ANCHOR_SCALES\n        _feat_stride = [16, ]\n        # net frame\n        (self.feed('data')\n         .conv(3, 3, 64, 1, 1, name='conv1_1')\n         .conv(3, 3, 64, 1, 1, name='conv1_2')\n         .max_pool(2, 2, 2, 2, padding='VALID', name='pool1')\n         .conv(3, 3, 128, 1, 1, name='conv2_1')\n         .conv(3, 3, 128, 1, 1, name='conv2_2')\n         .max_pool(2, 2, 2, 2, padding='VALID', name='pool2')\n         .conv(3, 3, 256, 1, 1, name='conv3_1')\n         .conv(3, 3, 256, 1, 1, name='conv3_2')\n         .conv(3, 3, 256, 1, 1, name='conv3_3')\n         .max_pool(2, 2, 2, 2, padding='VALID', name='pool3')\n         .conv(3, 3, 512, 1, 1, name='conv4_1')\n         .conv(3, 3, 512, 1, 1, name='conv4_2')\n         .conv(3, 3, 512, 1, 1, name='conv4_3')\n         .max_pool(2, 2, 2, 2, padding='VALID', name='pool4')\n         .conv(3, 3, 512, 1, 1, name='conv5_1')\n         .conv(3, 3, 512, 1, 1, name='conv5_2')\n         .conv(3, 3, 512, 1, 1, name='conv5_3'))\n        # ========= RPN ============\n        (self.feed('conv5_3')\n         .conv(3, 3, 512, 1, 1, name='rpn_conv/3x3'))\n        \n        (self.feed('rpn_conv/3x3').Bilstm(512, 128, 512, name='lstm_o'))\n        (self.feed('lstm_o').lstm_fc(512, len(anchor_scales) * 10 * 4, name='rpn_bbox_pred'))\n        (self.feed('lstm_o').lstm_fc(512, len(anchor_scales) * 10 * 2, name='rpn_cls_score'))\n\n        # generating training labels on the fly\n        # output: rpn_labels(HxWxA, 2) rpn_bbox_targets(HxWxA, 4) rpn_bbox_inside_weights rpn_bbox_outside_weights\n        # \xe7\xbb\x99\xe6\xaf\x8f\xe4\xb8\xaaanchor\xe4\xb8\x8a\xe6\xa0\x87\xe7\xad\xbe\xef\xbc\x8c\xe5\xb9\xb6\xe8\xae\xa1\xe7\xae\x97\xe7\x9c\x9f\xe5\x80\xbc\xef\xbc\x88\xe4\xb9\x9f\xe6\x98\xafdelta\xe7\x9a\x84\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x89\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x86\x85\xe9\x83\xa8\xe6\x9d\x83\xe9\x87\x8d\xe5\x92\x8c\xe5\xa4\x96\xe9\x83\xa8\xe6\x9d\x83\xe9\x87\x8d\n        (self.feed('rpn_cls_score', 'gt_boxes', 'gt_ishard', 'dontcare_areas', 'im_info')\n         .anchor_target_layer(_feat_stride, anchor_scales, name='rpn-data'))\n\n        # shape is (1, H, W, Ax2) -> (1, H, WxA, 2)\n        # \xe7\xbb\x99\xe4\xb9\x8b\xe5\x89\x8d\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84score\xe8\xbf\x9b\xe8\xa1\x8csoftmax\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb00-1\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\xbe\x97\xe5\x88\x86\n        (self.feed('rpn_cls_score')\n         .spatial_reshape_layer(2, name='rpn_cls_score_reshape')\n         .spatial_softmax(name='rpn_cls_prob'))\n"""
ctpn/lib/networks/__init__.py,0,b'from . import factory\nfrom .VGGnet_test import VGGnet_test\nfrom .VGGnet_train import VGGnet_train\n'
ctpn/lib/networks/factory.py,0,"b'from .VGGnet_test import VGGnet_test\nfrom .VGGnet_train import VGGnet_train\n\n\ndef get_network(name):\n    """"""Get a network by name.""""""\n    if name.split(\'_\')[0] == \'VGGnet\':\n        if name.split(\'_\')[1] == \'test\':\n            return VGGnet_test()\n        elif name.split(\'_\')[1] == \'train\':\n            return VGGnet_train()\n        else:\n            raise KeyError(\'Unknown dataset: {}\'.format(name))\n    else:\n        raise KeyError(\'Unknown dataset: {}\'.format(name))\n'"
ctpn/lib/networks/network.py,116,"b'# -*- coding:utf-8 -*-\nimport numpy as np\nimport tensorflow as tf\n\nfrom ..fast_rcnn.config import cfg\nfrom ..rpn_msr.anchor_target_layer_tf import anchor_target_layer as anchor_target_layer_py\nfrom ..rpn_msr.proposal_layer_tf import proposal_layer as proposal_layer_py\n\nDEFAULT_PADDING = \'SAME\'\n\n\ndef layer(op):\n    def layer_decorated(self, *args, **kwargs):\n        # Automatically set a name if not provided.\n        name = kwargs.setdefault(\'name\', self.get_unique_name(op.__name__))\n        # Figure out the layer inputs.\n        if len(self.inputs) == 0:\n            raise RuntimeError(\'No input variables found for layer %s.\' % name)\n        elif len(self.inputs) == 1:\n            layer_input = self.inputs[0]\n        else:\n            layer_input = list(self.inputs)\n        # Perform the operation and get the output.\n        layer_output = op(self, layer_input, *args, **kwargs)\n        # Add to layer LUT.\n        self.layers[name] = layer_output\n        # This output is now the input for the next layer.\n        self.feed(layer_output)\n        # Return self for chained calls.\n        return self\n\n    return layer_decorated\n\n\nclass Network(object):\n    def __init__(self, inputs, trainable=True):\n        self.inputs = []\n        self.layers = dict(inputs)\n        self.trainable = trainable\n        self.setup()\n\n    def setup(self):\n        raise NotImplementedError(\'Must be subclassed.\')\n\n    def load(self, data_path, session, ignore_missing=False):\n        data_dict = np.load(data_path, encoding=\'latin1\').item()\n        for key in data_dict:\n            with tf.variable_scope(key, reuse=True):\n                for subkey in data_dict[key]:\n                    try:\n                        var = tf.get_variable(subkey)\n                        session.run(var.assign(data_dict[key][subkey]))\n                        print(""assign pretrain model "" + subkey + "" to "" + key)\n                    except ValueError:\n                        print(""ignore "" + key)\n                        if not ignore_missing:\n                            raise\n\n    def feed(self, *args):\n        assert len(args) != 0\n        self.inputs = []\n        for layer in args:\n            if isinstance(layer, str):\n                try:\n                    layer = self.layers[layer]\n                    print(layer)\n                except KeyError:\n                    print(list(self.layers.keys()))\n                    raise KeyError(\'Unknown layer name fed: %s\' % layer)\n            self.inputs.append(layer)\n        return self\n\n    def get_output(self, layer):\n        try:\n            layer = self.layers[layer]\n        except KeyError:\n            print(list(self.layers.keys()))\n            raise KeyError(\'Unknown layer name fed: %s\' % layer)\n        return layer\n\n    def get_unique_name(self, prefix):\n        id = sum(t.startswith(prefix)\n                 for t, _ in list(self.layers.items())) + 1\n        return \'%s_%d\' % (prefix, id)\n\n    def make_var(self, name, shape, initializer=None, trainable=True, regularizer=None):\n        return tf.get_variable(name, shape, initializer=initializer, trainable=trainable, regularizer=regularizer)\n\n    def validate_padding(self, padding):\n        assert padding in (\'SAME\', \'VALID\')\n\n    @layer\n    def Bilstm(self, input, d_i, d_h, d_o, name, trainable=True):\n        img = input\n        with tf.variable_scope(name) as scope:\n            shape = tf.shape(img)\n            N, H, W, C = shape[0], shape[1], shape[2], shape[3]\n            img = tf.reshape(img, [N * H, W, C])\n            img.set_shape([None, None, d_i])\n            # \xe5\x8d\x95\xe5\xb1\x82\xe5\x8f\x8c\xe5\x90\x91\xe5\x8a\xa8\xe6\x80\x81RNN\n            lstm_fw_cell = tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)\n            lstm_bw_cell = tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)\n\n            lstm_out, last_state = tf.nn.bidirectional_dynamic_rnn(\n                lstm_fw_cell, lstm_bw_cell, img, dtype=tf.float32)\n            lstm_out = tf.concat(lstm_out, axis=-1)\n            \n            lstm_out = tf.reshape(lstm_out, [N * H * W, 2 * d_h])\n\n            init_weights = tf.truncated_normal_initializer(stddev=0.1)\n            init_biases = tf.constant_initializer(0.0)\n            weights = self.make_var(\'weights\', [2 * d_h, d_o], init_weights, trainable,\n                                    regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))\n            biases = self.make_var(\'biases\', [d_o], init_biases, trainable)\n            outputs = tf.matmul(lstm_out, weights) + biases\n\n            outputs = tf.reshape(outputs, [N, H, W, d_o])\n            return outputs\n\n    @layer\n    def lstm(self, input, d_i, d_h, d_o, name, trainable=True):\n        img = input\n        with tf.variable_scope(name) as scope:\n            shape = tf.shape(img)\n            N, H, W, C = shape[0], shape[1], shape[2], shape[3]\n            img = tf.reshape(img, [N * H, W, C])\n            img.set_shape([None, None, d_i])\n\n            lstm_cell = tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)\n            initial_state = lstm_cell.zero_state(N * H, dtype=tf.float32)\n\n            lstm_out, last_state = tf.nn.dynamic_rnn(lstm_cell, img,\n                                                     initial_state=initial_state, dtype=tf.float32)\n\n            lstm_out = tf.reshape(lstm_out, [N * H * W, d_h])\n\n            init_weights = tf.truncated_normal_initializer(stddev=0.1)\n            init_biases = tf.constant_initializer(0.0)\n            weights = self.make_var(\'weights\', [d_h, d_o], init_weights, trainable,\n                                    regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))\n            biases = self.make_var(\'biases\', [d_o], init_biases, trainable)\n            outputs = tf.matmul(lstm_out, weights) + biases\n\n            outputs = tf.reshape(outputs, [N, H, W, d_o])\n            return outputs\n\n    @layer\n    def lstm_fc(self, input, d_i, d_o, name, trainable=True):\n        with tf.variable_scope(name) as scope:\n            shape = tf.shape(input)\n            N, H, W, C = shape[0], shape[1], shape[2], shape[3]\n            input = tf.reshape(input, [N * H * W, C])\n\n            init_weights = tf.truncated_normal_initializer(0.0, stddev=0.01)\n            init_biases = tf.constant_initializer(0.0)\n            kernel = self.make_var(\'weights\', [d_i, d_o], init_weights, trainable,\n                                   regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))\n            biases = self.make_var(\'biases\', [d_o], init_biases, trainable)\n\n            _O = tf.matmul(input, kernel) + biases\n            return tf.reshape(_O, [N, H, W, int(d_o)])\n\n    @layer\n    def conv(self, input, k_h, k_w, c_o, s_h, s_w, name, biased=True, relu=True, padding=DEFAULT_PADDING,\n             trainable=True):\n        """""" contribution by miraclebiu, and biased option""""""\n        self.validate_padding(padding)\n        c_i = input.get_shape()[-1]\n\n        def convolve(i, k): return tf.nn.conv2d(\n            i, k, [1, s_h, s_w, 1], padding=padding)\n        with tf.variable_scope(name) as scope:\n\n            init_weights = tf.truncated_normal_initializer(0.0, stddev=0.01)\n            init_biases = tf.constant_initializer(0.0)\n            kernel = self.make_var(\'weights\', [k_h, k_w, c_i, c_o], init_weights, trainable,\n                                   regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))\n            if biased:\n                biases = self.make_var(\'biases\', [c_o], init_biases, trainable)\n                conv = convolve(input, kernel)\n                if relu:\n                    bias = tf.nn.bias_add(conv, biases)\n                    return tf.nn.relu(bias, name=scope.name)\n                return tf.nn.bias_add(conv, biases, name=scope.name)\n            else:\n                conv = convolve(input, kernel)\n                if relu:\n                    return tf.nn.relu(conv, name=scope.name)\n                return conv\n\n    @layer\n    def relu(self, input, name):\n        return tf.nn.relu(input, name=name)\n\n    @layer\n    def max_pool(self, input, k_h, k_w, s_h, s_w, name, padding=DEFAULT_PADDING):\n        self.validate_padding(padding)\n        return tf.nn.max_pool(input,\n                              ksize=[1, k_h, k_w, 1],\n                              strides=[1, s_h, s_w, 1],\n                              padding=padding,\n                              name=name)\n\n    @layer\n    def avg_pool(self, input, k_h, k_w, s_h, s_w, name, padding=DEFAULT_PADDING):\n        self.validate_padding(padding)\n        return tf.nn.avg_pool(input,\n                              ksize=[1, k_h, k_w, 1],\n                              strides=[1, s_h, s_w, 1],\n                              padding=padding,\n                              name=name)\n\n    @layer\n    def proposal_layer(self, input, _feat_stride, anchor_scales, cfg_key, name):\n        if isinstance(input[0], tuple):\n            input[0] = input[0][0]\n            # input[0] shape is (1, H, W, Ax2)\n            # rpn_rois <- (1 x H x W x A, 5) [0, x1, y1, x2, y2]\n        with tf.variable_scope(name) as scope:\n            blob, bbox_delta = tf.py_func(proposal_layer_py,\n                                          [input[0], input[1], input[2], cfg_key,\n                                              _feat_stride, anchor_scales],\n                                          [tf.float32, tf.float32])\n\n            rpn_rois = tf.convert_to_tensor(tf.reshape(\n                blob, [-1, 5]), name=\'rpn_rois\')  # shape is (1 x H x W x A, 2)\n            rpn_targets = tf.convert_to_tensor(\n                bbox_delta, name=\'rpn_targets\')  # shape is (1 x H x W x A, 4)\n            self.layers[\'rpn_rois\'] = rpn_rois\n            self.layers[\'rpn_targets\'] = rpn_targets\n\n            return rpn_rois, rpn_targets\n\n    @layer\n    def anchor_target_layer(self, input, _feat_stride, anchor_scales, name):\n        if isinstance(input[0], tuple):\n            input[0] = input[0][0]\n\n        with tf.variable_scope(name) as scope:\n            # \'rpn_cls_score\', \'gt_boxes\', \'gt_ishard\', \'dontcare_areas\', \'im_info\'\n            rpn_labels, rpn_bbox_targets, rpn_bbox_inside_weights, rpn_bbox_outside_weights = \\\n                tf.py_func(anchor_target_layer_py,\n                           [input[0], input[1], input[2], input[3],\n                               input[4], _feat_stride, anchor_scales],\n                           [tf.float32, tf.float32, tf.float32, tf.float32])\n\n            rpn_labels = tf.convert_to_tensor(tf.cast(rpn_labels, tf.int32),\n                                              name=\'rpn_labels\')  # shape is (1 x H x W x A, 2)\n            rpn_bbox_targets = tf.convert_to_tensor(rpn_bbox_targets,\n                                                    name=\'rpn_bbox_targets\')  # shape is (1 x H x W x A, 4)\n            rpn_bbox_inside_weights = tf.convert_to_tensor(rpn_bbox_inside_weights,\n                                                           name=\'rpn_bbox_inside_weights\')  # shape is (1 x H x W x A, 4)\n            rpn_bbox_outside_weights = tf.convert_to_tensor(rpn_bbox_outside_weights,\n                                                            name=\'rpn_bbox_outside_weights\')  # shape is (1 x H x W x A, 4)\n\n            return rpn_labels, rpn_bbox_targets, rpn_bbox_inside_weights, rpn_bbox_outside_weights\n\n    @layer\n    def reshape_layer(self, input, d, name):\n        input_shape = tf.shape(input)\n        if name == \'rpn_cls_prob_reshape\':\n            #\n            # transpose: (1, AxH, W, 2) -> (1, 2, AxH, W)\n            # reshape: (1, 2xA, H, W)\n            # transpose: -> (1, H, W, 2xA)\n            return tf.transpose(tf.reshape(tf.transpose(input, [0, 3, 1, 2]),\n                                           [input_shape[0],\n                                            int(d),\n                                            tf.cast(\n                                                tf.cast(input_shape[1], tf.float32) / tf.cast(d, tf.float32) * tf.cast(\n                                                    input_shape[3], tf.float32), tf.int32),\n                                            input_shape[2]\n                                            ]),\n                                [0, 2, 3, 1], name=name)\n        else:\n            return tf.transpose(tf.reshape(tf.transpose(input, [0, 3, 1, 2]),\n                                           [input_shape[0],\n                                            int(d),\n                                            tf.cast(tf.cast(input_shape[1], tf.float32) * (\n                                                tf.cast(input_shape[3], tf.float32) / tf.cast(d, tf.float32)),\n                                               tf.int32),\n                                            input_shape[2]\n                                            ]),\n                                [0, 2, 3, 1], name=name)\n\n    @layer\n    def spatial_reshape_layer(self, input, d, name):\n        input_shape = tf.shape(input)\n        # transpose: (1, H, W, A x d) -> (1, H, WxA, d)\n        return tf.reshape(input,\n                          [input_shape[0],\n                           input_shape[1],\n                           -1,\n                           int(d)])\n\n    @layer\n    def lrn(self, input, radius, alpha, beta, name, bias=1.0):\n        return tf.nn.local_response_normalization(input,\n                                                  depth_radius=radius,\n                                                  alpha=alpha,\n                                                  beta=beta,\n                                                  bias=bias,\n                                                  name=name)\n\n    @layer\n    def concat(self, inputs, axis, name):\n        return tf.concat(concat_dim=axis, values=inputs, name=name)\n\n    @layer\n    def fc(self, input, num_out, name, relu=True, trainable=True):\n        with tf.variable_scope(name) as scope:\n            # only use the first input\n            if isinstance(input, tuple):\n                input = input[0]\n\n            input_shape = input.get_shape()\n            if input_shape.ndims == 4:\n                dim = 1\n                for d in input_shape[1:].as_list():\n                    dim *= d\n                feed_in = tf.reshape(tf.transpose(\n                    input, [0, 3, 1, 2]), [-1, dim])\n            else:\n                feed_in, dim = (input, int(input_shape[-1]))\n\n            if name == \'bbox_pred\':\n                init_weights = tf.truncated_normal_initializer(\n                    0.0, stddev=0.001)\n                init_biases = tf.constant_initializer(0.0)\n            else:\n                init_weights = tf.truncated_normal_initializer(\n                    0.0, stddev=0.01)\n                init_biases = tf.constant_initializer(0.0)\n\n            weights = self.make_var(\'weights\', [dim, num_out], init_weights, trainable,\n                                    regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))\n            biases = self.make_var(\'biases\', [num_out], init_biases, trainable)\n\n            op = tf.nn.relu_layer if relu else tf.nn.xw_plus_b\n            fc = op(feed_in, weights, biases, name=scope.name)\n            return fc\n\n    @layer\n    def softmax(self, input, name):\n        input_shape = tf.shape(input)\n        if name == \'rpn_cls_prob\':\n            return tf.reshape(tf.nn.softmax(tf.reshape(input, [-1, input_shape[3]])),\n                              [-1, input_shape[1], input_shape[2], input_shape[3]], name=name)\n        else:\n            return tf.nn.softmax(input, name=name)\n\n    @layer\n    def spatial_softmax(self, input, name):\n        input_shape = tf.shape(input)\n        # d = input.get_shape()[-1]\n        return tf.reshape(tf.nn.softmax(tf.reshape(input, [-1, input_shape[3]])),\n                          [-1, input_shape[1], input_shape[2], input_shape[3]], name=name)\n\n    @layer\n    def add(self, input, name):\n        """"""contribution by miraclebiu""""""\n        return tf.add(input[0], input[1])\n\n    @layer\n    def batch_normalization(self, input, name, relu=True, is_training=False):\n        """"""contribution by miraclebiu""""""\n        if relu:\n            temp_layer = tf.contrib.layers.batch_norm(input, scale=True, center=True, is_training=is_training,\n                                                      scope=name)\n            return tf.nn.relu(temp_layer)\n        else:\n            return tf.contrib.layers.batch_norm(input, scale=True, center=True, is_training=is_training, scope=name)\n\n    @layer\n    def dropout(self, input, keep_prob, name):\n        return tf.nn.dropout(input, keep_prob, name=name)\n\n    def l2_regularizer(self, weight_decay=0.0005, scope=None):\n        def regularizer(tensor):\n            with tf.name_scope(scope, default_name=\'l2_regularizer\', values=[tensor]):\n                l2_weight = tf.convert_to_tensor(weight_decay,\n                                                 dtype=tensor.dtype.base_dtype,\n                                                 name=\'weight_decay\')\n                # return tf.mul(l2_weight, tf.nn.l2_loss(tensor), name=\'value\')\n                return tf.multiply(l2_weight, tf.nn.l2_loss(tensor), name=\'value\')\n\n        return regularizer\n\n    def smooth_l1_dist(self, deltas, sigma2=9.0, name=\'smooth_l1_dist\'):\n        with tf.name_scope(name=name) as scope:\n            deltas_abs = tf.abs(deltas)\n            smoothL1_sign = tf.cast(\n                tf.less(deltas_abs, 1.0 / sigma2), tf.float32)\n            return tf.square(deltas) * 0.5 * sigma2 * smoothL1_sign + \\\n                (deltas_abs - 0.5 / sigma2) * tf.abs(smoothL1_sign - 1)\n\n    def build_loss(self, ohem=False):\n        # classification loss\n        rpn_cls_score = tf.reshape(self.get_output(\n            \'rpn_cls_score_reshape\'), [-1, 2])  # shape (HxWxA, 2)\n        rpn_label = tf.reshape(self.get_output(\n            \'rpn-data\')[0], [-1])  # shape (HxWxA)\n        # ignore_label(-1)\n        fg_keep = tf.equal(rpn_label, 1)\n        rpn_keep = tf.where(tf.not_equal(rpn_label, -1))\n        rpn_cls_score = tf.gather(rpn_cls_score, rpn_keep)  # shape (N, 2)\n        rpn_label = tf.gather(rpn_label, rpn_keep)\n        rpn_cross_entropy_n = tf.nn.sparse_softmax_cross_entropy_with_logits(\n            labels=rpn_label, logits=rpn_cls_score)\n\n        # box loss\n        rpn_bbox_pred = self.get_output(\n            \'rpn_bbox_pred\')  # shape (1, H, W, Ax4)\n        rpn_bbox_targets = self.get_output(\'rpn-data\')[1]\n        rpn_bbox_inside_weights = self.get_output(\'rpn-data\')[2]\n        rpn_bbox_outside_weights = self.get_output(\'rpn-data\')[3]\n        rpn_bbox_pred = tf.gather(tf.reshape(\n            rpn_bbox_pred, [-1, 4]), rpn_keep)  # shape (N, 4)\n        rpn_bbox_targets = tf.gather(tf.reshape(\n            rpn_bbox_targets, [-1, 4]), rpn_keep)\n        rpn_bbox_inside_weights = tf.gather(tf.reshape(\n            rpn_bbox_inside_weights, [-1, 4]), rpn_keep)\n        rpn_bbox_outside_weights = tf.gather(tf.reshape(\n            rpn_bbox_outside_weights, [-1, 4]), rpn_keep)\n\n        rpn_loss_box_n = tf.reduce_sum(rpn_bbox_outside_weights * self.smooth_l1_dist(\n            rpn_bbox_inside_weights * (rpn_bbox_pred - rpn_bbox_targets)), reduction_indices=[1])\n\n        rpn_loss_box = tf.reduce_sum(\n            rpn_loss_box_n) / (tf.reduce_sum(tf.cast(fg_keep, tf.float32)) + 1)\n        rpn_cross_entropy = tf.reduce_mean(rpn_cross_entropy_n)\n\n        model_loss = rpn_cross_entropy + rpn_loss_box\n\n        regularization_losses = tf.get_collection(\n            tf.GraphKeys.REGULARIZATION_LOSSES)\n        total_loss = tf.add_n(regularization_losses) + model_loss\n\n        return total_loss, model_loss, rpn_cross_entropy, rpn_loss_box\n'"
ctpn/lib/roi_data_layer/__init__.py,0,b'from . import roidb\n'
ctpn/lib/roi_data_layer/layer.py,0,"b'# --------------------------------------------------------\n# Fast R-CNN\n# Copyright (c) 2015 Microsoft\n# Licensed under The MIT License [see LICENSE for details]\n# Written by Ross Girshick\n# --------------------------------------------------------\n\n""""""The data layer used during training to train a Fast R-CNN network.\n\nRoIDataLayer implements a Caffe Python layer.\n""""""\n\nimport numpy as np\n\n# TODO: make fast_rcnn irrelevant\n# >>>> obsolete, because it depends on sth outside of this project\nfrom ..fast_rcnn.config import cfg\n# <<<< obsolete\nfrom ..roi_data_layer.minibatch import get_minibatch\n\n\nclass RoIDataLayer(object):\n    """"""Fast R-CNN data layer used for training.""""""\n\n    def __init__(self, roidb, num_classes):\n        """"""Set the roidb to be used by this layer during training.""""""\n        self._roidb = roidb\n        self._num_classes = num_classes\n        self._shuffle_roidb_inds()\n\n    def _shuffle_roidb_inds(self):\n        """"""Randomly permute the training roidb.""""""\n        self._perm = np.random.permutation(np.arange(len(self._roidb)))\n        self._cur = 0\n\n    def _get_next_minibatch_inds(self):\n        """"""Return the roidb indices for the next minibatch.""""""\n\n        if cfg.TRAIN.HAS_RPN:\n            if self._cur + cfg.TRAIN.IMS_PER_BATCH >= len(self._roidb):\n                self._shuffle_roidb_inds()\n\n            db_inds = self._perm[self._cur:self._cur + cfg.TRAIN.IMS_PER_BATCH]\n            self._cur += cfg.TRAIN.IMS_PER_BATCH\n        else:\n            # sample images\n            db_inds = np.zeros((cfg.TRAIN.IMS_PER_BATCH), dtype=np.int32)\n            i = 0\n            while (i < cfg.TRAIN.IMS_PER_BATCH):\n                ind = self._perm[self._cur]\n                num_objs = self._roidb[ind][\'boxes\'].shape[0]\n                if num_objs != 0:\n                    db_inds[i] = ind\n                    i += 1\n\n                self._cur += 1\n                if self._cur >= len(self._roidb):\n                    self._shuffle_roidb_inds()\n\n        return db_inds\n\n    def _get_next_minibatch(self):\n        """"""Return the blobs to be used for the next minibatch.\n\n        If cfg.TRAIN.USE_PREFETCH is True, then blobs will be computed in a\n        separate process and made available through self._blob_queue.\n        """"""\n        db_inds = self._get_next_minibatch_inds()\n        minibatch_db = [self._roidb[i] for i in db_inds]\n        return get_minibatch(minibatch_db, self._num_classes)\n\n    def forward(self):\n        """"""Get blobs and copy them into this layer\'s top blob vector.""""""\n        blobs = self._get_next_minibatch()\n        return blobs\n'"
ctpn/lib/roi_data_layer/minibatch.py,0,"b'import os\n\nimport cv2\nimport numpy as np\nimport numpy.random as npr\n\nfrom ..fast_rcnn.config import cfg\nfrom ..utils.blob import prep_im_for_blob, im_list_to_blob\n\n\ndef get_minibatch(roidb, num_classes):\n    """"""Given a roidb, construct a minibatch sampled from it.""""""\n    num_images = len(roidb)\n    # Sample random scales to use for each image in this batch\n    random_scale_inds = npr.randint(\n        0, high=len(cfg.TRAIN.SCALES), size=num_images)\n    assert (cfg.TRAIN.BATCH_SIZE % num_images == 0), \\\n        \'num_images ({}) must divide BATCH_SIZE ({})\'. \\\n            format(num_images, cfg.TRAIN.BATCH_SIZE)\n    rois_per_image = cfg.TRAIN.BATCH_SIZE / num_images\n    fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image)\n\n    # Get the input image blob, formatted for caffe\n    im_blob, im_scales = _get_image_blob(roidb, random_scale_inds)\n\n    blobs = {\'data\': im_blob}\n\n    if cfg.TRAIN.HAS_RPN:\n        assert len(im_scales) == 1, ""Single batch only""\n        assert len(roidb) == 1, ""Single batch only""\n        # gt boxes: (x1, y1, x2, y2, cls)\n        gt_inds = np.where(roidb[0][\'gt_classes\'] != 0)[0]\n        gt_boxes = np.empty((len(gt_inds), 5), dtype=np.float32)\n        gt_boxes[:, 0:4] = roidb[0][\'boxes\'][gt_inds, :] * im_scales[0]\n        gt_boxes[:, 4] = roidb[0][\'gt_classes\'][gt_inds]\n        blobs[\'gt_boxes\'] = gt_boxes\n        blobs[\'gt_ishard\'] = roidb[0][\'gt_ishard\'][gt_inds] \\\n            if \'gt_ishard\' in roidb[0] else np.zeros(gt_inds.size, dtype=int)\n        # blobs[\'gt_ishard\'] = roidb[0][\'gt_ishard\'][gt_inds]\n        blobs[\'dontcare_areas\'] = roidb[0][\'dontcare_areas\'] * im_scales[0] \\\n            if \'dontcare_areas\' in roidb[0] else np.zeros([0, 4], dtype=float)\n        blobs[\'im_info\'] = np.array(\n            [[im_blob.shape[1], im_blob.shape[2], im_scales[0]]],\n            dtype=np.float32)\n        blobs[\'im_name\'] = os.path.basename(roidb[0][\'image\'])\n\n    else:  # not using RPN\n        # Now, build the region of interest and label blobs\n        rois_blob = np.zeros((0, 5), dtype=np.float32)\n        labels_blob = np.zeros((0), dtype=np.float32)\n        bbox_targets_blob = np.zeros((0, 4 * num_classes), dtype=np.float32)\n        bbox_inside_blob = np.zeros(bbox_targets_blob.shape, dtype=np.float32)\n        # all_overlaps = []\n        for im_i in range(num_images):\n            labels, overlaps, im_rois, bbox_targets, bbox_inside_weights \\\n                = _sample_rois(roidb[im_i], fg_rois_per_image, rois_per_image,\n                               num_classes)\n\n            # Add to RoIs blob\n            rois = _project_im_rois(im_rois, im_scales[im_i])\n            batch_ind = im_i * np.ones((rois.shape[0], 1))\n            rois_blob_this_image = np.hstack((batch_ind, rois))\n            rois_blob = np.vstack((rois_blob, rois_blob_this_image))\n\n            # Add to labels, bbox targets, and bbox loss blobs\n            labels_blob = np.hstack((labels_blob, labels))\n            bbox_targets_blob = np.vstack((bbox_targets_blob, bbox_targets))\n            bbox_inside_blob = np.vstack((bbox_inside_blob,\n                                          bbox_inside_weights))\n            # all_overlaps = np.hstack((all_overlaps, overlaps))\n\n        # For debug visualizations\n        # _vis_minibatch(im_blob, rois_blob, labels_blob, all_overlaps)\n\n        blobs[\'rois\'] = rois_blob\n        blobs[\'labels\'] = labels_blob\n\n        if cfg.TRAIN.BBOX_REG:\n            blobs[\'bbox_targets\'] = bbox_targets_blob\n            blobs[\'bbox_inside_weights\'] = bbox_inside_blob\n            blobs[\'bbox_outside_weights\'] = \\\n                np.array(bbox_inside_blob > 0).astype(np.float32)\n\n    return blobs\n\n\ndef _sample_rois(roidb, fg_rois_per_image, rois_per_image, num_classes):\n    """"""Generate a random sample of RoIs comprising foreground and background\n    examples.\n    """"""\n    # label = class RoI has max overlap with\n    labels = roidb[\'max_classes\']\n    overlaps = roidb[\'max_overlaps\']\n    rois = roidb[\'boxes\']\n\n    # Select foreground RoIs as those with >= FG_THRESH overlap\n    fg_inds = np.where(overlaps >= cfg.TRAIN.FG_THRESH)[0]\n    # Guard against the case when an image has fewer than fg_rois_per_image\n    # foreground RoIs\n    fg_rois_per_this_image = np.minimum(fg_rois_per_image, fg_inds.size)\n    # Sample foreground regions without replacement\n    if fg_inds.size > 0:\n        fg_inds = npr.choice(\n            fg_inds, size=fg_rois_per_this_image, replace=False)\n\n    # Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)\n    bg_inds = np.where((overlaps < cfg.TRAIN.BG_THRESH_HI) &\n                       (overlaps >= cfg.TRAIN.BG_THRESH_LO))[0]\n    # Compute number of background RoIs to take from this image (guarding\n    # against there being fewer than desired)\n    bg_rois_per_this_image = rois_per_image - fg_rois_per_this_image\n    bg_rois_per_this_image = np.minimum(bg_rois_per_this_image, bg_inds.size)\n    # Sample foreground regions without replacement\n    if bg_inds.size > 0:\n        bg_inds = npr.choice(\n            bg_inds, size=bg_rois_per_this_image, replace=False)\n\n    # The indices that we\'re selecting (both fg and bg)\n    keep_inds = np.append(fg_inds, bg_inds)\n    # Select sampled values from various arrays:\n    labels = labels[keep_inds]\n    # Clamp labels for the background RoIs to 0\n    labels[fg_rois_per_this_image:] = 0\n    overlaps = overlaps[keep_inds]\n    rois = rois[keep_inds]\n\n    bbox_targets, bbox_inside_weights = _get_bbox_regression_labels(\n        roidb[\'bbox_targets\'][keep_inds, :], num_classes)\n\n    return labels, overlaps, rois, bbox_targets, bbox_inside_weights\n\n\ndef _get_image_blob(roidb, scale_inds):\n    """"""Builds an input blob from the images in the roidb at the specified\n    scales.\n    """"""\n    num_images = len(roidb)\n    processed_ims = []\n    im_scales = []\n    for i in range(num_images):\n        im = cv2.imread(roidb[i][\'image\'])\n        if roidb[i][\'flipped\']:\n            im = im[:, ::-1, :]\n        target_size = cfg.TRAIN.SCALES[scale_inds[i]]\n        im, im_scale = prep_im_for_blob(im, cfg.PIXEL_MEANS, target_size,\n                                        cfg.TRAIN.MAX_SIZE)\n        im_scales.append(im_scale)\n        processed_ims.append(im)\n\n    # Create a blob to hold the input images\n    blob = im_list_to_blob(processed_ims)\n\n    return blob, im_scales\n\n\ndef _project_im_rois(im_rois, im_scale_factor):\n    """"""Project image RoIs into the rescaled training image.""""""\n    rois = im_rois * im_scale_factor\n    return rois\n\n\ndef _get_bbox_regression_labels(bbox_target_data, num_classes):\n    """"""Bounding-box regression targets are stored in a compact form in the\n    roidb.\n\n    This function expands those targets into the 4-of-4*K representation used\n    by the network (i.e. only one class has non-zero targets). The loss weights\n    are similarly expanded.\n\n    Returns:\n        bbox_target_data (ndarray): N x 4K blob of regression targets\n        bbox_inside_weights (ndarray): N x 4K blob of loss weights\n    """"""\n    clss = bbox_target_data[:, 0]\n    bbox_targets = np.zeros((clss.size, 4 * num_classes), dtype=np.float32)\n    bbox_inside_weights = np.zeros(bbox_targets.shape, dtype=np.float32)\n    inds = np.where(clss > 0)[0]\n    for ind in inds:\n        cls = clss[ind]\n        start = 4 * cls\n        end = start + 4\n        bbox_targets[ind, start:end] = bbox_target_data[ind, 1:]\n        bbox_inside_weights[ind, start:end] = cfg.TRAIN.BBOX_INSIDE_WEIGHTS\n    return bbox_targets, bbox_inside_weights\n\n\ndef _vis_minibatch(im_blob, rois_blob, labels_blob, overlaps):\n    """"""Visualize a mini-batch for debugging.""""""\n    import matplotlib.pyplot as plt\n    for i in range(rois_blob.shape[0]):\n        rois = rois_blob[i, :]\n        im_ind = rois[0]\n        roi = rois[1:]\n        im = im_blob[im_ind, :, :, :].transpose((1, 2, 0)).copy()\n        im += cfg.PIXEL_MEANS\n        im = im[:, :, (2, 1, 0)]\n        im = im.astype(np.uint8)\n        cls = labels_blob[i]\n        plt.imshow(im)\n        print(\'class: \', cls, \' overlap: \', overlaps[i])\n        plt.gca().add_patch(\n            plt.Rectangle(\n                (roi[0], roi[1]),\n                roi[2] - roi[0],\n                roi[3] - roi[1],\n                fill=False,\n                edgecolor=\'r\',\n                linewidth=3))\n        plt.show()\n'"
ctpn/lib/roi_data_layer/roidb.py,0,"b'import PIL\nimport numpy as np\n\nfrom ..fast_rcnn.bbox_transform import bbox_transform\nfrom ..fast_rcnn.config import cfg\nfrom ..utils.bbox import bbox_overlaps\n\n\ndef prepare_roidb(imdb):\n    """"""Enrich the imdb\'s roidb by adding some derived quantities that\n    are useful for training. This function precomputes the maximum\n    overlap, taken over ground-truth boxes, between each ROI and\n    each ground-truth box. The class with maximum overlap is also\n    recorded.\n    """"""\n    sizes = [\n        PIL.Image.open(imdb.image_path_at(i)).size\n        for i in range(imdb.num_images)\n    ]\n    roidb = imdb.roidb\n    for i in range(len(imdb.image_index)):\n        roidb[i][\'image\'] = imdb.image_path_at(i)\n        roidb[i][\'width\'] = sizes[i][0]\n        roidb[i][\'height\'] = sizes[i][1]\n        # need gt_overlaps as a dense array for argmax\n        gt_overlaps = roidb[i][\'gt_overlaps\'].toarray()\n        # max overlap with gt over classes (columns)\n        max_overlaps = gt_overlaps.max(axis=1)\n        # gt class that had the max overlap\n        max_classes = gt_overlaps.argmax(axis=1)\n        roidb[i][\'max_classes\'] = max_classes\n        roidb[i][\'max_overlaps\'] = max_overlaps\n        # sanity checks\n        # max overlap of 0 => class should be zero (background)\n        zero_inds = np.where(max_overlaps == 0)[0]\n        assert all(max_classes[zero_inds] == 0)\n        # max overlap > 0 => class should not be zero (must be a fg class)\n        nonzero_inds = np.where(max_overlaps > 0)[0]\n        assert all(max_classes[nonzero_inds] != 0)\n\n\ndef add_bbox_regression_targets(roidb):\n    """"""\n    Add information needed to train bounding-box regressors.\n    For each roi find the corresponding gt box, and compute the distance.\n    then normalize the distance into Gaussian by minus mean and divided by std\n    """"""\n    assert len(roidb) > 0\n    assert \'max_classes\' in roidb[0], \'Did you call prepare_roidb first?\'\n\n    num_images = len(roidb)\n    # Infer number of classes from the number of columns in gt_overlaps\n    num_classes = roidb[0][\'gt_overlaps\'].shape[1]\n    for im_i in range(num_images):\n        rois = roidb[im_i][\'boxes\']\n        max_overlaps = roidb[im_i][\'max_overlaps\']\n        max_classes = roidb[im_i][\'max_classes\']\n        roidb[im_i][\'bbox_targets\'] = \\\n            _compute_targets(rois, max_overlaps, max_classes)\n\n    if cfg.TRAIN.BBOX_NORMALIZE_TARGETS_PRECOMPUTED:\n        # Use fixed / precomputed ""means"" and ""stds"" instead of empirical values\n        means = np.tile(\n            np.array(cfg.TRAIN.BBOX_NORMALIZE_MEANS), (num_classes, 1))\n        stds = np.tile(\n            np.array(cfg.TRAIN.BBOX_NORMALIZE_STDS), (num_classes, 1))\n    else:\n        # Compute values needed for means and stds\n        # var(x) = E(x^2) - E(x)^2\n        class_counts = np.zeros((num_classes, 1)) + cfg.EPS\n        sums = np.zeros((num_classes, 4))\n        squared_sums = np.zeros((num_classes, 4))\n        for im_i in range(num_images):\n            targets = roidb[im_i][\'bbox_targets\']\n            for cls in range(1, num_classes):\n                cls_inds = np.where(targets[:, 0] == cls)[0]\n                if cls_inds.size > 0:\n                    class_counts[cls] += cls_inds.size\n                    sums[cls, :] += targets[cls_inds, 1:].sum(axis=0)\n                    squared_sums[cls, :] += \\\n                        (targets[cls_inds, 1:] ** 2).sum(axis=0)\n\n        means = sums / class_counts\n        stds = np.sqrt(squared_sums / class_counts - means**2)\n        # too small number will cause nan error\n        assert np.min(stds) < 0.01, \\\n            \'Boxes std is too small, std:{}\'.format(stds)\n\n    print(\'bbox target means:\')\n    print(means)\n    print(means[1:, :].mean(axis=0))  # ignore bg class\n    print(\'bbox target stdevs:\')\n    print(stds)\n    print(stds[1:, :].mean(axis=0))  # ignore bg class\n\n    # Normalize targets\n    if cfg.TRAIN.BBOX_NORMALIZE_TARGETS:\n        print(""Normalizing targets"")\n        for im_i in range(num_images):\n            targets = roidb[im_i][\'bbox_targets\']\n            for cls in range(1, num_classes):\n                cls_inds = np.where(targets[:, 0] == cls)[0]\n                roidb[im_i][\'bbox_targets\'][cls_inds, 1:] -= means[cls, :]\n                roidb[im_i][\'bbox_targets\'][cls_inds, 1:] /= stds[cls, :]\n    else:\n        print(""NOT normalizing targets"")\n\n    # These values will be needed for making predictions\n    # (the predicts will need to be unnormalized and uncentered)\n    return means.ravel(), stds.ravel()\n\n\ndef _compute_targets(rois, overlaps, labels):\n    """"""\n    Compute bounding-box regression targets for an image.\n    for each roi find the corresponding gt_box, then compute the distance.\n    """"""\n    # Indices of ground-truth ROIs\n    gt_inds = np.where(overlaps == 1)[0]\n    if len(gt_inds) == 0:\n        # Bail if the image has no ground-truth ROIs\n        return np.zeros((rois.shape[0], 5), dtype=np.float32)\n    # Indices of examples for which we try to make predictions\n    ex_inds = np.where(overlaps >= cfg.TRAIN.BBOX_THRESH)[0]\n\n    # Get IoU overlap between each ex ROI and gt ROI\n    ex_gt_overlaps = bbox_overlaps(\n        np.ascontiguousarray(rois[ex_inds, :], dtype=np.float),\n        np.ascontiguousarray(rois[gt_inds, :], dtype=np.float))\n\n    # Find which gt ROI each ex ROI has max overlap with:\n    # this will be the ex ROI\'s gt target\n    gt_assignment = ex_gt_overlaps.argmax(axis=1)\n    gt_rois = rois[gt_inds[gt_assignment], :]\n    ex_rois = rois[ex_inds, :]\n\n    targets = np.zeros((rois.shape[0], 5), dtype=np.float32)\n    targets[ex_inds, 0] = labels[ex_inds]\n    targets[ex_inds, 1:] = bbox_transform(ex_rois, gt_rois)\n    return targets\n'"
ctpn/lib/rpn_msr/__init__.py,0,b''
ctpn/lib/rpn_msr/anchor_target_layer_tf.py,0,"b'# -*- coding:utf-8 -*-\nimport numpy as np\nimport numpy.random as npr\n\nfrom .generate_anchors import generate_anchors\nfrom ..fast_rcnn.bbox_transform import bbox_transform\nfrom ..fast_rcnn.config import cfg\nfrom ..utils.bbox import bbox_overlaps, bbox_intersections\n\nDEBUG = False\n\n\ndef anchor_target_layer(rpn_cls_score, gt_boxes, gt_ishard, dontcare_areas, im_info, _feat_stride=[16, ],\n                        anchor_scales=[16, ]):\n    """"""\n    Assign anchors to ground-truth targets. Produces anchor classification\n    labels and bounding-box regression targets.\n    Parameters\n    ----------\n    rpn_cls_score: (1, H, W, Ax2) bg/fg scores of previous conv layer\n    gt_boxes: (G, 5) vstack of [x1, y1, x2, y2, class]\n    gt_ishard: (G, 1), 1 or 0 indicates difficult or not\n    dontcare_areas: (D, 4), some areas may contains small objs but no labelling. D may be 0\n    im_info: a list of [image_height, image_width, scale_ratios]\n    _feat_stride: the downsampling ratio of feature map to the original input image\n    anchor_scales: the scales to the basic_anchor (basic anchor is [16, 16])\n    ----------\n    Returns\n    ----------\n    rpn_labels : (HxWxA, 1), for each anchor, 0 denotes bg, 1 fg, -1 dontcare\n    rpn_bbox_targets: (HxWxA, 4), distances of the anchors to the gt_boxes(may contains some transform)\n                            that are the regression objectives\n    rpn_bbox_inside_weights: (HxWxA, 4) weights of each boxes, mainly accepts hyper param in cfg\n    rpn_bbox_outside_weights: (HxWxA, 4) used to balance the fg/bg,\n                            beacuse the numbers of bgs and fgs mays significiantly different\n    """"""\n    _anchors = generate_anchors(scales=np.array(anchor_scales))  # \xe7\x94\x9f\xe6\x88\x90\xe5\x9f\xba\xe6\x9c\xac\xe7\x9a\x84anchor,\xe4\xb8\x80\xe5\x85\xb19\xe4\xb8\xaa\n    _num_anchors = _anchors.shape[0]  # 9\xe4\xb8\xaaanchor\n\n    if DEBUG:\n        print(\'anchors:\')\n        print(_anchors)\n        print(\'anchor shapes:\')\n        print(np.hstack((\n            _anchors[:, 2::4] - _anchors[:, 0::4],\n            _anchors[:, 3::4] - _anchors[:, 1::4],\n        )))\n        _counts = cfg.EPS\n        _sums = np.zeros((1, 4))\n        _squared_sums = np.zeros((1, 4))\n        _fg_sum = 0\n        _bg_sum = 0\n        _count = 0\n\n    # allow boxes to sit over the edge by a small amount\n    _allowed_border = 0\n    # map of shape (..., H, W)\n    # height, width = rpn_cls_score.shape[1:3]\n\n    im_info = im_info[0]  # \xe5\x9b\xbe\xe5\x83\x8f\xe7\x9a\x84\xe9\xab\x98\xe5\xae\xbd\xe5\x8f\x8a\xe9\x80\x9a\xe9\x81\x93\xe6\x95\xb0\n\n    # \xe5\x9c\xa8feature-map\xe4\xb8\x8a\xe5\xae\x9a\xe4\xbd\x8danchor\xef\xbc\x8c\xe5\xb9\xb6\xe5\x8a\xa0\xe4\xb8\x8adelta\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe5\x9c\xa8\xe5\xae\x9e\xe9\x99\x85\xe5\x9b\xbe\xe5\x83\x8f\xe4\xb8\xadanchor\xe7\x9a\x84\xe7\x9c\x9f\xe5\xae\x9e\xe5\x9d\x90\xe6\xa0\x87\n    # Algorithm:\n    # for each (H, W) location i\n    #   generate 9 anchor boxes centered on cell i\n    #   apply predicted bbox deltas at cell i to each of the 9 anchors\n    # filter out-of-image anchors\n    # measure GT overlap\n\n    assert rpn_cls_score.shape[0] == 1, \\\n        \'Only single item batches are supported\'\n\n    # map of shape (..., H, W)\n    height, width = rpn_cls_score.shape[1:3]  # feature-map\xe7\x9a\x84\xe9\xab\x98\xe5\xae\xbd\n\n    if DEBUG:\n        print(\'AnchorTargetLayer: height\', height, \'width\', width)\n        print(\'\')\n        print(\'im_size: ({}, {})\'.format(im_info[0], im_info[1]))\n        print(\'scale: {}\'.format(im_info[2]))\n        print(\'height, width: ({}, {})\'.format(height, width))\n        print(\'rpn: gt_boxes.shape\', gt_boxes.shape)\n        print(\'rpn: gt_boxes\', gt_boxes)\n\n    # 1. Generate proposals from bbox deltas and shifted anchors\n    shift_x = np.arange(0, width) * _feat_stride\n    shift_y = np.arange(0, height) * _feat_stride\n    shift_x, shift_y = np.meshgrid(shift_x, shift_y)  # in W H order\n    # K is H x W\n    shifts = np.vstack((shift_x.ravel(), shift_y.ravel(),\n                        shift_x.ravel(), shift_y.ravel())).transpose()  # \xe7\x94\x9f\xe6\x88\x90feature-map\xe5\x92\x8c\xe7\x9c\x9f\xe5\xae\x9eimage\xe4\xb8\x8aanchor\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\x81\x8f\xe7\xa7\xbb\xe9\x87\x8f\n    # add A anchors (1, A, 4) to\n    # cell K shifts (K, 1, 4) to get\n    # shift anchors (K, A, 4)\n    # reshape to (K*A, 4) shifted anchors\n    A = _num_anchors  # 9\xe4\xb8\xaaanchor\n    K = shifts.shape[0]  # 50*37\xef\xbc\x8cfeature-map\xe7\x9a\x84\xe5\xae\xbd\xe4\xb9\x98\xe9\xab\x98\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n    all_anchors = (_anchors.reshape((1, A, 4)) +\n                   shifts.reshape((1, K, 4)).transpose((1, 0, 2)))  # \xe7\x9b\xb8\xe5\xbd\x93\xe4\xba\x8e\xe5\xa4\x8d\xe5\x88\xb6\xe5\xae\xbd\xe9\xab\x98\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe7\x9b\xb8\xe5\x8a\xa0\n    all_anchors = all_anchors.reshape((K * A, 4))\n    total_anchors = int(K * A)\n\n    # only keep anchors inside the image\n    # \xe4\xbb\x85\xe4\xbf\x9d\xe7\x95\x99\xe9\x82\xa3\xe4\xba\x9b\xe8\xbf\x98\xe5\x9c\xa8\xe5\x9b\xbe\xe5\x83\x8f\xe5\x86\x85\xe9\x83\xa8\xe7\x9a\x84anchor\xef\xbc\x8c\xe8\xb6\x85\xe5\x87\xba\xe5\x9b\xbe\xe5\x83\x8f\xe7\x9a\x84\xe9\x83\xbd\xe5\x88\xa0\xe6\x8e\x89\n    inds_inside = np.where(\n        (all_anchors[:, 0] >= -_allowed_border) &\n        (all_anchors[:, 1] >= -_allowed_border) &\n        (all_anchors[:, 2] < im_info[1] + _allowed_border) &  # width\n        (all_anchors[:, 3] < im_info[0] + _allowed_border)  # height\n    )[0]\n\n    if DEBUG:\n        print(\'total_anchors\', total_anchors)\n        print(\'inds_inside\', len(inds_inside))\n\n    # keep only inside anchors\n    anchors = all_anchors[inds_inside, :]  # \xe4\xbf\x9d\xe7\x95\x99\xe9\x82\xa3\xe4\xba\x9b\xe5\x9c\xa8\xe5\x9b\xbe\xe5\x83\x8f\xe5\x86\x85\xe7\x9a\x84anchor\n    if DEBUG:\n        print(\'anchors.shape\', anchors.shape)\n\n    # \xe8\x87\xb3\xe6\xad\xa4\xef\xbc\x8canchor\xe5\x87\x86\xe5\xa4\x87\xe5\xa5\xbd\xe4\xba\x86\n    # --------------------------------------------------------------\n    # label: 1 is positive, 0 is negative, -1 is dont care\n    # (A)\n    labels = np.empty((len(inds_inside),), dtype=np.float32)\n    labels.fill(-1)  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96label\xef\xbc\x8c\xe5\x9d\x87\xe4\xb8\xba-1\n\n    # overlaps between the anchors and the gt boxes\n    # overlaps (ex, gt), shape is A x G\n    # \xe8\xae\xa1\xe7\xae\x97anchor\xe5\x92\x8cgt-box\xe7\x9a\x84overlap\xef\xbc\x8c\xe7\x94\xa8\xe6\x9d\xa5\xe7\xbb\x99anchor\xe4\xb8\x8a\xe6\xa0\x87\xe7\xad\xbe\n    overlaps = bbox_overlaps(\n        np.ascontiguousarray(anchors, dtype=np.float),\n        np.ascontiguousarray(gt_boxes, dtype=np.float))  # \xe5\x81\x87\xe8\xae\xbeanchors\xe6\x9c\x89x\xe4\xb8\xaa\xef\xbc\x8cgt_boxes\xe6\x9c\x89y\xe4\xb8\xaa\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x88x,y\xef\xbc\x89\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84\n    # \xe5\xad\x98\xe6\x94\xbe\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaaanchor\xe5\x92\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaagtbox\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84overlap\n    argmax_overlaps = overlaps.argmax(axis=1)  # (A)#\xe6\x89\xbe\xe5\x88\xb0\xe5\x92\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaagtbox\xef\xbc\x8coverlap\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe9\x82\xa3\xe4\xb8\xaaanchor\n    max_overlaps = overlaps[np.arange(len(inds_inside)), argmax_overlaps]\n    gt_argmax_overlaps = overlaps.argmax(axis=0)  # G#\xe6\x89\xbe\xe5\x88\xb0\xe6\xaf\x8f\xe4\xb8\xaa\xe4\xbd\x8d\xe7\xbd\xae\xe4\xb8\x8a9\xe4\xb8\xaaanchor\xe4\xb8\xad\xe4\xb8\x8egtbox\xef\xbc\x8coverlap\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe9\x82\xa3\xe4\xb8\xaa\n    gt_max_overlaps = overlaps[gt_argmax_overlaps,\n                               np.arange(overlaps.shape[1])]\n    gt_argmax_overlaps = np.where(overlaps == gt_max_overlaps)[0]\n\n    if not cfg.TRAIN.RPN_CLOBBER_POSITIVES:\n        # assign bg labels first so that positive labels can clobber them\n        labels[max_overlaps < cfg.TRAIN.RPN_NEGATIVE_OVERLAP] = 0  # \xe5\x85\x88\xe7\xbb\x99\xe8\x83\x8c\xe6\x99\xaf\xe4\xb8\x8a\xe6\xa0\x87\xe7\xad\xbe\xef\xbc\x8c\xe5\xb0\x8f\xe4\xba\x8e0.3overlap\xe7\x9a\x84\n\n    # fg label: for each gt, anchor with highest overlap\n    labels[gt_argmax_overlaps] = 1  # \xe6\xaf\x8f\xe4\xb8\xaa\xe4\xbd\x8d\xe7\xbd\xae\xe4\xb8\x8a\xe7\x9a\x849\xe4\xb8\xaaanchor\xe4\xb8\xadoverlap\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe5\x89\x8d\xe6\x99\xaf\n    # fg label: above threshold IOU\n    labels[max_overlaps >= cfg.TRAIN.RPN_POSITIVE_OVERLAP] = 1  # overlap\xe5\xa4\xa7\xe4\xba\x8e0.7\xe7\x9a\x84\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe5\x89\x8d\xe6\x99\xaf\n\n    if cfg.TRAIN.RPN_CLOBBER_POSITIVES:\n        # assign bg labels last so that negative labels can clobber positives\n        labels[max_overlaps < cfg.TRAIN.RPN_NEGATIVE_OVERLAP] = 0\n\n    # preclude dontcare areas\n    if dontcare_areas is not None and dontcare_areas.shape[0] > 0:  # \xe8\xbf\x99\xe9\x87\x8c\xe6\x88\x91\xe4\xbb\xac\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\x9c\x89doncare_area\xe7\x9a\x84\xe5\xad\x98\xe5\x9c\xa8\n        # intersec shape is D x A\n        intersecs = bbox_intersections(\n            np.ascontiguousarray(dontcare_areas, dtype=np.float),  # D x 4\n            np.ascontiguousarray(anchors, dtype=np.float)  # A x 4\n        )\n        intersecs_ = intersecs.sum(axis=0)  # A x 1\n        labels[intersecs_ > cfg.TRAIN.DONTCARE_AREA_INTERSECTION_HI] = -1\n\n    # \xe8\xbf\x99\xe9\x87\x8c\xe6\x88\x91\xe4\xbb\xac\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe9\x9a\xbe\xe6\xa0\xb7\xe6\x9c\xac\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\n    # preclude hard samples that are highly occlusioned, truncated or difficult to see\n    if cfg.TRAIN.PRECLUDE_HARD_SAMPLES and gt_ishard is not None and gt_ishard.shape[0] > 0:\n        assert gt_ishard.shape[0] == gt_boxes.shape[0]\n        gt_ishard = gt_ishard.astype(int)\n        gt_hardboxes = gt_boxes[gt_ishard == 1, :]\n        if gt_hardboxes.shape[0] > 0:\n            # H x A\n            hard_overlaps = bbox_overlaps(\n                np.ascontiguousarray(gt_hardboxes, dtype=np.float),  # H x 4\n                np.ascontiguousarray(anchors, dtype=np.float))  # A x 4\n            hard_max_overlaps = hard_overlaps.max(axis=0)  # (A)\n            labels[hard_max_overlaps >= cfg.TRAIN.RPN_POSITIVE_OVERLAP] = -1\n            max_intersec_label_inds = hard_overlaps.argmax(axis=1)  # H x 1\n            labels[max_intersec_label_inds] = -1  #\n\n    # subsample positive labels if we have too many\n    # \xe5\xaf\xb9\xe6\xad\xa3\xe6\xa0\xb7\xe6\x9c\xac\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\xad\xa3\xe6\xa0\xb7\xe6\x9c\xac\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe5\xa4\xaa\xe5\xa4\x9a\xe7\x9a\x84\xe8\xaf\x9d\n    # \xe9\x99\x90\xe5\x88\xb6\xe6\xad\xa3\xe6\xa0\xb7\xe6\x9c\xac\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\x8d\xe8\xb6\x85\xe8\xbf\x87128\xe4\xb8\xaa\n    # TODO \xe8\xbf\x99\xe4\xb8\xaa\xe5\x90\x8e\xe6\x9c\x9f\xe5\x8f\xaf\xe8\x83\xbd\xe8\xbf\x98\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe6\xaf\x95\xe7\xab\x9f\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe7\x89\x87\xe6\xae\xb5\xef\xbc\x8c\xe9\x82\xa3\xe4\xb8\xaa\xe6\xad\xa3\xe6\xa0\xb7\xe6\x9c\xac\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe6\x98\xaf\xe5\xbe\x88\xe5\xa4\x9a\xe7\x9a\x84\xe3\x80\x82\n    num_fg = int(cfg.TRAIN.RPN_FG_FRACTION * cfg.TRAIN.RPN_BATCHSIZE)\n    fg_inds = np.where(labels == 1)[0]\n    if len(fg_inds) > num_fg:\n        disable_inds = npr.choice(\n            fg_inds, size=(len(fg_inds) - num_fg), replace=False)  # \xe9\x9a\x8f\xe6\x9c\xba\xe5\x8e\xbb\xe9\x99\xa4\xe6\x8e\x89\xe4\xb8\x80\xe4\xba\x9b\xe6\xad\xa3\xe6\xa0\xb7\xe6\x9c\xac\n        labels[disable_inds] = -1  # \xe5\x8f\x98\xe4\xb8\xba-1\n\n    # subsample negative labels if we have too many\n    # \xe5\xaf\xb9\xe8\xb4\x9f\xe6\xa0\xb7\xe6\x9c\xac\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe8\xb4\x9f\xe6\xa0\xb7\xe6\x9c\xac\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe5\xa4\xaa\xe5\xa4\x9a\xe7\x9a\x84\xe8\xaf\x9d\n    # \xe6\xad\xa3\xe8\xb4\x9f\xe6\xa0\xb7\xe6\x9c\xac\xe6\x80\xbb\xe6\x95\xb0\xe6\x98\xaf256\xef\xbc\x8c\xe9\x99\x90\xe5\x88\xb6\xe6\xad\xa3\xe6\xa0\xb7\xe6\x9c\xac\xe6\x95\xb0\xe7\x9b\xae\xe6\x9c\x80\xe5\xa4\x9a128\xef\xbc\x8c\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xad\xa3\xe6\xa0\xb7\xe6\x9c\xac\xe6\x95\xb0\xe9\x87\x8f\xe5\xb0\x8f\xe4\xba\x8e128\xef\xbc\x8c\xe5\xb7\xae\xe7\x9a\x84\xe9\x82\xa3\xe4\xba\x9b\xe5\xb0\xb1\xe7\x94\xa8\xe8\xb4\x9f\xe6\xa0\xb7\xe6\x9c\xac\xe8\xa1\xa5\xe4\xb8\x8a\xef\xbc\x8c\xe5\x87\x91\xe9\xbd\x90256\xe4\xb8\xaa\xe6\xa0\xb7\xe6\x9c\xac\n    num_bg = cfg.TRAIN.RPN_BATCHSIZE - np.sum(labels == 1)\n    bg_inds = np.where(labels == 0)[0]\n    if len(bg_inds) > num_bg:\n        disable_inds = npr.choice(\n            bg_inds, size=(len(bg_inds) - num_bg), replace=False)\n        labels[disable_inds] = -1\n        # print ""was %s inds, disabling %s, now %s inds"" % (\n        # len(bg_inds), len(disable_inds), np.sum(labels == 0))\n\n    # \xe8\x87\xb3\xe6\xad\xa4\xef\xbc\x8c \xe4\xb8\x8a\xe5\xa5\xbd\xe6\xa0\x87\xe7\xad\xbe\xef\xbc\x8c\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xa1\xe7\xae\x97rpn-box\xe7\x9a\x84\xe7\x9c\x9f\xe5\x80\xbc\n    # --------------------------------------------------------------\n    bbox_targets = np.zeros((len(inds_inside), 4), dtype=np.float32)\n    bbox_targets = _compute_targets(anchors, gt_boxes[argmax_overlaps, :])  # \xe6\xa0\xb9\xe6\x8d\xaeanchor\xe5\x92\x8cgtbox\xe8\xae\xa1\xe7\xae\x97\xe5\xbe\x97\xe7\x9c\x9f\xe5\x80\xbc\xef\xbc\x88anchor\xe5\x92\x8cgtbox\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\x81\x8f\xe5\xb7\xae\xef\xbc\x89\n\n    bbox_inside_weights = np.zeros((len(inds_inside), 4), dtype=np.float32)\n    bbox_inside_weights[labels == 1, :] = np.array(cfg.TRAIN.RPN_BBOX_INSIDE_WEIGHTS)  # \xe5\x86\x85\xe9\x83\xa8\xe6\x9d\x83\xe9\x87\x8d\xef\xbc\x8c\xe5\x89\x8d\xe6\x99\xaf\xe5\xb0\xb1\xe7\xbb\x991\xef\xbc\x8c\xe5\x85\xb6\xe4\xbb\x96\xe6\x98\xaf0\n\n    bbox_outside_weights = np.zeros((len(inds_inside), 4), dtype=np.float32)\n    if cfg.TRAIN.RPN_POSITIVE_WEIGHT < 0:  # \xe6\x9a\x82\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8uniform \xe6\x9d\x83\xe9\x87\x8d\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe6\xad\xa3\xe6\xa0\xb7\xe6\x9c\xac\xe6\x98\xaf1\xef\xbc\x8c\xe8\xb4\x9f\xe6\xa0\xb7\xe6\x9c\xac\xe6\x98\xaf0\n        # uniform weighting of examples (given non-uniform sampling)\n        num_examples = np.sum(labels >= 0) + 1\n        # positive_weights = np.ones((1, 4)) * 1.0 / num_examples\n        # negative_weights = np.ones((1, 4)) * 1.0 / num_examples\n        positive_weights = np.ones((1, 4))\n        negative_weights = np.zeros((1, 4))\n    else:\n        assert ((cfg.TRAIN.RPN_POSITIVE_WEIGHT > 0) &\n                (cfg.TRAIN.RPN_POSITIVE_WEIGHT < 1))\n        positive_weights = (cfg.TRAIN.RPN_POSITIVE_WEIGHT /\n                            (np.sum(labels == 1)) + 1)\n        negative_weights = ((1.0 - cfg.TRAIN.RPN_POSITIVE_WEIGHT) /\n                            (np.sum(labels == 0)) + 1)\n    bbox_outside_weights[labels == 1, :] = positive_weights  # \xe5\xa4\x96\xe9\x83\xa8\xe6\x9d\x83\xe9\x87\x8d\xef\xbc\x8c\xe5\x89\x8d\xe6\x99\xaf\xe6\x98\xaf1\xef\xbc\x8c\xe8\x83\x8c\xe6\x99\xaf\xe6\x98\xaf0\n    bbox_outside_weights[labels == 0, :] = negative_weights\n\n    if DEBUG:\n        _sums += bbox_targets[labels == 1, :].sum(axis=0)\n        _squared_sums += (bbox_targets[labels == 1, :] ** 2).sum(axis=0)\n        _counts += np.sum(labels == 1)\n        means = _sums / _counts\n        stds = np.sqrt(_squared_sums / _counts - means ** 2)\n        print(\'means:\')\n        print(means)\n        print(\'stdevs:\')\n        print(stds)\n\n    # map up to original set of anchors\n    # \xe4\xb8\x80\xe5\xbc\x80\xe5\xa7\x8b\xe6\x98\xaf\xe5\xb0\x86\xe8\xb6\x85\xe5\x87\xba\xe5\x9b\xbe\xe5\x83\x8f\xe8\x8c\x83\xe5\x9b\xb4\xe7\x9a\x84anchor\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xb8\xa2\xe6\x8e\x89\xe7\x9a\x84\xef\xbc\x8c\xe7\x8e\xb0\xe5\x9c\xa8\xe5\x9c\xa8\xe5\x8a\xa0\xe5\x9b\x9e\xe6\x9d\xa5\n    labels = _unmap(labels, total_anchors, inds_inside, fill=-1)  # \xe8\xbf\x99\xe4\xba\x9banchor\xe7\x9a\x84label\xe6\x98\xaf-1\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8d\xb3dontcare\n    bbox_targets = _unmap(bbox_targets, total_anchors, inds_inside, fill=0)  # \xe8\xbf\x99\xe4\xba\x9banchor\xe7\x9a\x84\xe7\x9c\x9f\xe5\x80\xbc\xe6\x98\xaf0\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8d\xb3\xe6\xb2\xa1\xe6\x9c\x89\xe5\x80\xbc\n    bbox_inside_weights = _unmap(bbox_inside_weights, total_anchors, inds_inside, fill=0)  # \xe5\x86\x85\xe9\x83\xa8\xe6\x9d\x83\xe9\x87\x8d\xe4\xbb\xa50\xe5\xa1\xab\xe5\x85\x85\n    bbox_outside_weights = _unmap(bbox_outside_weights, total_anchors, inds_inside, fill=0)  # \xe5\xa4\x96\xe9\x83\xa8\xe6\x9d\x83\xe9\x87\x8d\xe4\xbb\xa50\xe5\xa1\xab\xe5\x85\x85\n\n    if DEBUG:\n        print(\'rpn: max max_overlap\', np.max(max_overlaps))\n        print(\'rpn: num_positive\', np.sum(labels == 1))\n        print(\'rpn: num_negative\', np.sum(labels == 0))\n        _fg_sum += np.sum(labels == 1)\n        _bg_sum += np.sum(labels == 0)\n        _count += 1\n        print(\'rpn: num_positive avg\', _fg_sum / _count)\n        print(\'rpn: num_negative avg\', _bg_sum / _count)\n\n    # labels\n    labels = labels.reshape((1, height, width, A))  # reshap\xe4\xb8\x80\xe4\xb8\x8blabel\n    rpn_labels = labels\n\n    # bbox_targets\n    bbox_targets = bbox_targets \\\n        .reshape((1, height, width, A * 4))  # reshape\n\n    rpn_bbox_targets = bbox_targets\n    # bbox_inside_weights\n    bbox_inside_weights = bbox_inside_weights \\\n        .reshape((1, height, width, A * 4))\n\n    rpn_bbox_inside_weights = bbox_inside_weights\n\n    # bbox_outside_weights\n    bbox_outside_weights = bbox_outside_weights \\\n        .reshape((1, height, width, A * 4))\n    rpn_bbox_outside_weights = bbox_outside_weights\n\n    return rpn_labels, rpn_bbox_targets, rpn_bbox_inside_weights, rpn_bbox_outside_weights\n\n\ndef _unmap(data, count, inds, fill=0):\n    """""" Unmap a subset of item (data) back to the original set of items (of\n    size count) """"""\n    if len(data.shape) == 1:\n        ret = np.empty((count,), dtype=np.float32)\n        ret.fill(fill)\n        ret[inds] = data\n    else:\n        ret = np.empty((count,) + data.shape[1:], dtype=np.float32)\n        ret.fill(fill)\n        ret[inds, :] = data\n    return ret\n\n\ndef _compute_targets(ex_rois, gt_rois):\n    """"""Compute bounding-box regression targets for an image.""""""\n\n    assert ex_rois.shape[0] == gt_rois.shape[0]\n    assert ex_rois.shape[1] == 4\n    assert gt_rois.shape[1] == 5\n\n    return bbox_transform(ex_rois, gt_rois[:, :4]).astype(np.float32, copy=False)\n'"
ctpn/lib/rpn_msr/generate_anchors.py,0,"b""import numpy as np\n\n\ndef generate_basic_anchors(sizes, base_size=16):\n    base_anchor = np.array([0, 0, base_size - 1, base_size - 1], np.int32)\n    anchors = np.zeros((len(sizes), 4), np.int32)\n    index = 0\n    for h, w in sizes:\n        anchors[index] = scale_anchor(base_anchor, h, w)\n        index += 1\n    return anchors\n\n\ndef scale_anchor(anchor, h, w):\n    x_ctr = (anchor[0] + anchor[2]) * 0.5\n    y_ctr = (anchor[1] + anchor[3]) * 0.5\n    scaled_anchor = anchor.copy()\n    scaled_anchor[0] = x_ctr - w / 2  # xmin\n    scaled_anchor[2] = x_ctr + w / 2  # xmax\n    scaled_anchor[1] = y_ctr - h / 2  # ymin\n    scaled_anchor[3] = y_ctr + h / 2  # ymax\n    return scaled_anchor\n\n\ndef generate_anchors(base_size=16, ratios=[0.5, 1, 2],\n                     scales=2 ** np.arange(3, 6)):\n    heights = [11, 16, 23, 33, 48, 68, 97, 139, 198, 283]\n    widths = [16]\n    sizes = []\n    for h in heights:\n        for w in widths:\n            sizes.append((h, w))\n    return generate_basic_anchors(sizes)\n\n\nif __name__ == '__main__':\n    import time\n\n    t = time.time()\n    a = generate_anchors()\n    print(time.time() - t)\n    print(a)\n    from IPython import embed\n\n    embed()\n"""
ctpn/lib/rpn_msr/proposal_layer_tf.py,0,"b'# -*- coding:utf-8 -*-\nimport numpy as np\n\nfrom .generate_anchors import generate_anchors\nfrom ..fast_rcnn.bbox_transform import bbox_transform_inv, clip_boxes\nfrom ..fast_rcnn.config import cfg\nfrom ..fast_rcnn.nms_wrapper import nms\n\nDEBUG = False\n# DEBUG=True\n""""""\nOutputs object detection proposals by applying estimated bounding-box\ntransformations to a set of regular boxes (called ""anchors"").\n""""""\n\n\ndef proposal_layer(rpn_cls_prob_reshape, rpn_bbox_pred, im_info, cfg_key, _feat_stride=[16, ], anchor_scales=[16, ]):\n    """"""\n    Parameters\n    ----------\n    rpn_cls_prob_reshape: (1 , H , W , Ax2) outputs of RPN, prob of bg or fg\n                         NOTICE: the old version is ordered by (1, H, W, 2, A) !!!!\n    rpn_bbox_pred: (1 , H , W , Ax4), rgs boxes output of RPN\n    im_info: a list of [image_height, image_width, scale_ratios]\n    cfg_key: \'TRAIN\' or \'TEST\'\n    _feat_stride: the downsampling ratio of feature map to the original input image\n    anchor_scales: the scales to the basic_anchor (basic anchor is [16, 16])\n    ----------\n    Returns\n    ----------\n    rpn_rois : (1 x H x W x A, 5) e.g. [0, x1, y1, x2, y2]\n\n    # Algorithm:\n    #\n    # for each (H, W) location i\n    #   generate A anchor boxes centered on cell i\n    #   apply predicted bbox deltas at cell i to each of the A anchors\n    # clip predicted boxes to image\n    # remove predicted boxes with either height or width < threshold\n    # sort all (proposal, score) pairs by score from highest to lowest\n    # take top pre_nms_topN proposals before NMS\n    # apply NMS with threshold 0.7 to remaining proposals\n    # take after_nms_topN proposals after NMS\n    # return the top proposals (-> RoIs top, scores top)\n    #layer_params = yaml.load(self.param_str_)\n\n    """"""\n    cfg_key = cfg_key.decode(\'ascii\')\n    _anchors = generate_anchors(\n        scales=np.array(anchor_scales))  # \xe7\x94\x9f\xe6\x88\x90\xe5\x9f\xba\xe6\x9c\xac\xe7\x9a\x849\xe4\xb8\xaaanchor\n    # print(\'anchors\', _anchors)\n    _num_anchors = _anchors.shape[0]  # 9\xe4\xb8\xaaanchor\n\n    im_info = im_info[0]  # \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x9b\xbe\xe5\x83\x8f\xe7\x9a\x84\xe9\xab\x98\xe5\xae\xbd\xe3\x80\x81\xe7\xbc\xa9\xe6\x94\xbe\xe5\xb0\xba\xe5\xba\xa6\n\n    assert rpn_cls_prob_reshape.shape[0] == 1, \\\n        \'Only single item batches are supported\'\n\n    pre_nms_topN = cfg[cfg_key].RPN_PRE_NMS_TOP_N  # 12000,\xe5\x9c\xa8\xe5\x81\x9anms\xe4\xb9\x8b\xe5\x89\x8d\xef\xbc\x8c\xe6\x9c\x80\xe5\xa4\x9a\xe4\xbf\x9d\xe7\x95\x99\xe7\x9a\x84\xe5\x80\x99\xe9\x80\x89box\xe6\x95\xb0\xe7\x9b\xae\n    post_nms_topN = cfg[cfg_key].RPN_POST_NMS_TOP_N  # 2000\xef\xbc\x8c\xe5\x81\x9a\xe5\xae\x8cnms\xe4\xb9\x8b\xe5\x90\x8e\xef\xbc\x8c\xe6\x9c\x80\xe5\xa4\x9a\xe4\xbf\x9d\xe7\x95\x99\xe7\x9a\x84box\xe7\x9a\x84\xe6\x95\xb0\xe7\x9b\xae\n    nms_thresh = cfg[cfg_key].RPN_NMS_THRESH  # nms\xe7\x94\xa8\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\x98\x88\xe5\x80\xbc\xe6\x98\xaf0.7\n    min_size = cfg[cfg_key].RPN_MIN_SIZE  # \xe5\x80\x99\xe9\x80\x89box\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\xb0\xba\xe5\xaf\xb8\xef\xbc\x8c\xe7\x9b\xae\xe5\x89\x8d\xe6\x98\xaf16\xef\xbc\x8c\xe9\xab\x98\xe5\xae\xbd\xe5\x9d\x87\xe8\xa6\x81\xe5\xa4\xa7\xe4\xba\x8e16\n    # TODO \xe5\x90\x8e\xe6\x9c\x9f\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9\xe8\xbf\x99\xe4\xb8\xaa\xe6\x9c\x80\xe5\xb0\x8f\xe5\xb0\xba\xe5\xaf\xb8\xef\xbc\x8c\xe6\x94\xb9\xe4\xb8\xba8\xef\xbc\x9f\n    \n    height, width = rpn_cls_prob_reshape.shape[1:3]  # feature-map\xe7\x9a\x84\xe9\xab\x98\xe5\xae\xbd\n\n    # the first set of _num_anchors channels are bg probs\n    # the second set are the fg probs, which we want\n    # (1, H, W, A)\n    scores = np.reshape(np.reshape(rpn_cls_prob_reshape, [1, height, width, _num_anchors, 2])[:, :, :, :, 1],\n                        [1, height, width, _num_anchors])\n    # \xe6\x8f\x90\xe5\x8f\x96\xe5\x88\xb0object\xe7\x9a\x84\xe5\x88\x86\xe6\x95\xb0\xef\xbc\x8cnon-object\xe7\x9a\x84\xe6\x88\x91\xe4\xbb\xac\xe4\xb8\x8d\xe5\x85\xb3\xe5\xbf\x83\n    # \xe5\xb9\xb6reshape\xe5\x88\xb01*H*W*9\n\n    bbox_deltas = rpn_bbox_pred  # \xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84pred\xe6\x98\xaf\xe7\x9b\xb8\xe5\xaf\xb9\xe5\x80\xbc\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe5\xa4\x84\xe7\x90\x86\xe6\x88\x90\xe7\x9c\x9f\xe5\xae\x9e\xe5\x9b\xbe\xe5\x83\x8f\xe4\xb8\xad\xe7\x9a\x84\xe5\x9d\x90\xe6\xa0\x87\n    # im_info = bottom[2].data[0, :]\n\n    if DEBUG:\n        print(\'im_size: ({}, {})\'.format(im_info[0], im_info[1]))\n        print(\'scale: {}\'.format(im_info[2]))\n\n    # 1. Generate proposals from bbox deltas and shifted anchors\n    if DEBUG:\n        print(\'score map size: {}\'.format(scores.shape))\n\n    # Enumerate all shifts\n    # \xe5\x90\x8canchor-target-layer-tf\xe8\xbf\x99\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90anchor\xe7\x9a\x84shift\xef\xbc\x8c\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe5\xbe\x97\xe5\x88\xb0\xe6\x95\xb4\xe5\xbc\xa0\xe5\x9b\xbe\xe5\x83\x8f\xe4\xb8\x8a\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89anchor\n    shift_x = np.arange(0, width) * _feat_stride\n    shift_y = np.arange(0, height) * _feat_stride\n    shift_x, shift_y = np.meshgrid(shift_x, shift_y)\n    shifts = np.vstack((shift_x.ravel(), shift_y.ravel(),\n                        shift_x.ravel(), shift_y.ravel())).transpose()\n\n    # Enumerate all shifted anchors:\n    #\n    # add A anchors (1, A, 4) to\n    # cell K shifts (K, 1, 4) to get\n    # shift anchors (K, A, 4)\n    # reshape to (K*A, 4) shifted anchors\n    A = _num_anchors\n    K = shifts.shape[0]\n    anchors = _anchors.reshape((1, A, 4)) + \\\n        shifts.reshape((1, K, 4)).transpose((1, 0, 2))\n    anchors = anchors.reshape((K * A, 4))  # \xe8\xbf\x99\xe9\x87\x8c\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84anchor\xe5\xb0\xb1\xe6\x98\xaf\xe6\x95\xb4\xe5\xbc\xa0\xe5\x9b\xbe\xe5\x83\x8f\xe4\xb8\x8a\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89anchor\n\n    # Transpose and reshape predicted bbox transformations to get them\n    # into the same order as the anchors:\n    # bbox deltas will be (1, 4 * A, H, W) format\n    # transpose to (1, H, W, 4 * A)\n    # reshape to (1 * H * W * A, 4) where rows are ordered by (h, w, a)\n    # in slowest to fastest order\n    bbox_deltas = bbox_deltas.reshape((-1, 4))  # (HxWxA, 4)\n\n    # Same story for the scores:\n    scores = scores.reshape((-1, 1))\n\n    # Convert anchors into proposals via bbox transformations\n    proposals = bbox_transform_inv(anchors, bbox_deltas)  # \xe5\x81\x9a\xe9\x80\x86\xe5\x8f\x98\xe6\x8d\xa2\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0box\xe5\x9c\xa8\xe5\x9b\xbe\xe5\x83\x8f\xe4\xb8\x8a\xe7\x9a\x84\xe7\x9c\x9f\xe5\xae\x9e\xe5\x9d\x90\xe6\xa0\x87\n\n    # 2. clip predicted boxes to image\n    # \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84proposal\xe4\xbf\xae\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\x8b\xef\xbc\x8c\xe8\xb6\x85\xe5\x87\xba\xe5\x9b\xbe\xe5\x83\x8f\xe8\x8c\x83\xe5\x9b\xb4\xe7\x9a\x84\xe5\xb0\x86\xe4\xbc\x9a\xe8\xa2\xab\xe4\xbf\xae\xe5\x89\xaa\xe6\x8e\x89\n    proposals = clip_boxes(proposals, im_info[:2])\n\n    # 3. remove predicted boxes with either height or width < threshold\n    # (NOTE: convert min_size to input image scale stored in im_info[2])\n    # \xe7\xa7\xbb\xe9\x99\xa4\xe9\x82\xa3\xe4\xba\x9bproposal\xe5\xb0\x8f\xe4\xba\x8e\xe4\xb8\x80\xe5\xae\x9a\xe5\xb0\xba\xe5\xaf\xb8\xe7\x9a\x84proposal\n    keep = _filter_boxes(proposals, min_size * im_info[2])\n    proposals = proposals[keep, :]  # \xe4\xbf\x9d\xe7\x95\x99\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84proposal\n    scores = scores[keep]\n    bbox_deltas = bbox_deltas[keep, :]\n\n    # # remove irregular boxes, too fat too tall\n    # keep = _filter_irregular_boxes(proposals)\n    # proposals = proposals[keep, :]\n    # scores = scores[keep]\n\n    # 4. sort all (proposal, score) pairs by score from highest to lowest\n    # 5. take top pre_nms_topN (e.g. 6000)\n    order = scores.ravel().argsort()[::-1]  # score\xe6\x8c\x89\xe5\xbe\x97\xe5\x88\x86\xe7\x9a\x84\xe9\xab\x98\xe4\xbd\x8e\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\xba\x8f\n    if pre_nms_topN > 0:  # \xe4\xbf\x9d\xe7\x95\x9912000\xe4\xb8\xaaproposal\xe8\xbf\x9b\xe5\x8e\xbb\xe5\x81\x9anms\n        order = order[:pre_nms_topN]\n    proposals = proposals[order, :]\n    scores = scores[order]\n    bbox_deltas = bbox_deltas[order, :]\n\n    # 6. apply nms (e.g. threshold = 0.7)\n    # 7. take after_nms_topN (e.g. 300)\n    # 8. return the top proposals (-> RoIs top)\n    keep = nms(np.hstack((proposals, scores)),\n               nms_thresh)  # \xe8\xbf\x9b\xe8\xa1\x8cnms\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x992000\xe4\xb8\xaaproposal\n    if post_nms_topN > 0:\n        keep = keep[:post_nms_topN]\n    proposals = proposals[keep, :]\n    scores = scores[keep]\n    bbox_deltas = bbox_deltas[keep, :]\n\n    # Output rois blob\n    # Our RPN implementation only supports a single input image, so all\n    # batch inds are 0\n    blob = np.hstack((scores.astype(np.float32, copy=False),\n                      proposals.astype(np.float32, copy=False)))\n\n    return blob, bbox_deltas\n\n\ndef _filter_boxes(boxes, min_size):\n    """"""Remove all boxes with any side smaller than min_size.""""""\n    ws = boxes[:, 2] - boxes[:, 0] + 1\n    hs = boxes[:, 3] - boxes[:, 1] + 1\n    keep = np.where((ws >= min_size) & (hs >= min_size))[0]\n    return keep\n\n\ndef _filter_irregular_boxes(boxes, min_ratio=0.2, max_ratio=5):\n    """"""Remove all boxes with any side smaller than min_size.""""""\n    ws = boxes[:, 2] - boxes[:, 0] + 1\n    hs = boxes[:, 3] - boxes[:, 1] + 1\n    rs = ws / hs\n    keep = np.where((rs <= max_ratio) & (rs >= min_ratio))[0]\n    return keep\n'"
ctpn/lib/text_connector/__init__.py,0,b'from .detectors import TextDetector\nfrom .text_connect_cfg import Config\n'
ctpn/lib/text_connector/detectors.py,0,"b'#coding:utf-8\nimport numpy as np\nfrom lib.fast_rcnn.nms_wrapper import nms\nfrom lib.fast_rcnn.config import cfg\nfrom .text_proposal_connector import TextProposalConnector\nfrom .text_proposal_connector_oriented import TextProposalConnector as TextProposalConnectorOriented\nfrom .text_connect_cfg import Config as TextLineCfg\n\n\nclass TextDetector:\n    def __init__(self):\n        self.mode= cfg.TEST.DETECT_MODE\n        if self.mode == ""H"":\n            self.text_proposal_connector=TextProposalConnector()\n        elif self.mode == ""O"":\n            self.text_proposal_connector=TextProposalConnectorOriented()\n\n        \n    def detect(self, text_proposals,scores,size):\n        # \xe5\x88\xa0\xe9\x99\xa4\xe5\xbe\x97\xe5\x88\x86\xe8\xbe\x83\xe4\xbd\x8e\xe7\x9a\x84proposal\n        keep_inds=np.where(scores>TextLineCfg.TEXT_PROPOSALS_MIN_SCORE)[0]\n        text_proposals, scores=text_proposals[keep_inds], scores[keep_inds]\n\n        # \xe6\x8c\x89\xe5\xbe\x97\xe5\x88\x86\xe6\x8e\x92\xe5\xba\x8f\n        sorted_indices=np.argsort(scores.ravel())[::-1]\n        text_proposals, scores=text_proposals[sorted_indices], scores[sorted_indices]\n\n        # \xe5\xaf\xb9proposal\xe5\x81\x9anms\n        keep_inds=nms(np.hstack((text_proposals, scores)), TextLineCfg.TEXT_PROPOSALS_NMS_THRESH)\n        text_proposals, scores=text_proposals[keep_inds], scores[keep_inds]\n\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xa3\x80\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n        text_recs=self.text_proposal_connector.get_text_lines(text_proposals, scores, size)\n        keep_inds=self.filter_boxes(text_recs)\n        return text_recs[keep_inds]\n\n    def filter_boxes(self, boxes):\n        heights=np.zeros((len(boxes), 1), np.float)\n        widths=np.zeros((len(boxes), 1), np.float)\n        scores=np.zeros((len(boxes), 1), np.float)\n        index=0\n        for box in boxes:\n            heights[index]=(abs(box[5]-box[1])+abs(box[7]-box[3]))/2.0+1\n            widths[index]=(abs(box[2]-box[0])+abs(box[6]-box[4]))/2.0+1\n            scores[index] = box[8]\n            index += 1\n\n        return np.where((widths/heights>TextLineCfg.MIN_RATIO) & (scores>TextLineCfg.LINE_MIN_SCORE) &\n                          (widths>(TextLineCfg.TEXT_PROPOSALS_WIDTH*TextLineCfg.MIN_NUM_PROPOSALS)))[0]'"
ctpn/lib/text_connector/other.py,0,"b'import numpy as np\n\n\ndef threshold(coords, min_, max_):\n    return np.maximum(np.minimum(coords, max_), min_)\n\ndef clip_boxes(boxes, im_shape):\n    """"""\n    Clip boxes to image boundaries.\n    """"""\n    boxes[:, 0::2]=threshold(boxes[:, 0::2], 0, im_shape[1]-1)\n    boxes[:, 1::2]=threshold(boxes[:, 1::2], 0, im_shape[0]-1)\n    return boxes\n\n\nclass Graph:\n    def __init__(self, graph):\n        self.graph=graph\n\n    def sub_graphs_connected(self):\n        sub_graphs=[]\n        for index in range(self.graph.shape[0]):\n            if not self.graph[:, index].any() and self.graph[index, :].any():\n                v=index\n                sub_graphs.append([v])\n                while self.graph[v, :].any():\n                    v=np.where(self.graph[v, :])[0][0]\n                    sub_graphs[-1].append(v)\n        return sub_graphs\n\n'"
ctpn/lib/text_connector/text_connect_cfg.py,0,b'class Config:\n    SCALE=600\n    MAX_SCALE=1200\n    TEXT_PROPOSALS_WIDTH=16\n    MIN_NUM_PROPOSALS = 2\n    MIN_RATIO=0.5\n    LINE_MIN_SCORE=0.9\n    MAX_HORIZONTAL_GAP=50\n    TEXT_PROPOSALS_MIN_SCORE=0.7\n    TEXT_PROPOSALS_NMS_THRESH=0.2\n    MIN_V_OVERLAPS=0.7\n    MIN_SIZE_SIM=0.7\n\n\n'
ctpn/lib/text_connector/text_proposal_connector.py,0,"b'import numpy as np\nfrom .other import clip_boxes\nfrom .text_proposal_graph_builder import TextProposalGraphBuilder\n\nclass TextProposalConnector:\n    def __init__(self):\n        self.graph_builder=TextProposalGraphBuilder()\n\n    def group_text_proposals(self, text_proposals, scores, im_size):\n        graph=self.graph_builder.build_graph(text_proposals, scores, im_size)\n        return graph.sub_graphs_connected()\n\n    def fit_y(self, X, Y, x1, x2):\n        len(X)!=0\n        # if X only include one point, the function will get line y=Y[0]\n        if np.sum(X==X[0])==len(X):\n            return Y[0], Y[0]\n        p=np.poly1d(np.polyfit(X, Y, 1))\n        return p(x1), p(x2)\n\n    def get_text_lines(self, text_proposals, scores, im_size):\n        # tp=text proposal\n        tp_groups=self.group_text_proposals(text_proposals, scores, im_size)\n        text_lines=np.zeros((len(tp_groups), 5), np.float32)\n\n        for index, tp_indices in enumerate(tp_groups):\n            text_line_boxes=text_proposals[list(tp_indices)]\n\n            x0=np.min(text_line_boxes[:, 0])\n            x1=np.max(text_line_boxes[:, 2])\n\n            offset=(text_line_boxes[0, 2]-text_line_boxes[0, 0])*0.5\n\n            lt_y, rt_y=self.fit_y(text_line_boxes[:, 0], text_line_boxes[:, 1], x0+offset, x1-offset)\n            lb_y, rb_y=self.fit_y(text_line_boxes[:, 0], text_line_boxes[:, 3], x0+offset, x1-offset)\n\n            # the score of a text line is the average score of the scores\n            # of all text proposals contained in the text line\n            score=scores[list(tp_indices)].sum()/float(len(tp_indices))\n\n            text_lines[index, 0]=x0\n            text_lines[index, 1]=min(lt_y, rt_y)\n            text_lines[index, 2]=x1\n            text_lines[index, 3]=max(lb_y, rb_y)\n            text_lines[index, 4]=score\n\n        text_lines=clip_boxes(text_lines, im_size)\n\n        text_recs = np.zeros((len(text_lines), 9), np.float)\n        index = 0\n        for line in text_lines:\n            xmin,ymin,xmax,ymax=line[0],line[1],line[2],line[3]\n            text_recs[index, 0] = xmin\n            text_recs[index, 1] = ymin\n            text_recs[index, 2] = xmax\n            text_recs[index, 3] = ymin\n            text_recs[index, 4] = xmin\n            text_recs[index, 5] = ymax\n            text_recs[index, 6] = xmax\n            text_recs[index, 7] = ymax\n            text_recs[index, 8] = line[4]\n            index = index + 1\n\n        return text_recs\n'"
ctpn/lib/text_connector/text_proposal_connector_oriented.py,0,"b'#coding:utf-8\nimport numpy as np\nfrom .text_proposal_graph_builder import TextProposalGraphBuilder\n\nclass TextProposalConnector:\n    """"""\n        Connect text proposals into text lines\n    """"""\n    def __init__(self):\n        self.graph_builder=TextProposalGraphBuilder()\n\n    def group_text_proposals(self, text_proposals, scores, im_size):\n        graph=self.graph_builder.build_graph(text_proposals, scores, im_size)\n        return graph.sub_graphs_connected()\n\n    def fit_y(self, X, Y, x1, x2):\n        len(X)!=0\n        # if X only include one point, the function will get line y=Y[0]\n        if np.sum(X==X[0])==len(X):\n            return Y[0], Y[0]\n        p=np.poly1d(np.polyfit(X, Y, 1))\n        return p(x1), p(x2)\n\n    def get_text_lines(self, text_proposals, scores, im_size):\n        """"""\n        text_proposals:boxes\n        \n        """"""\n        # tp=text proposal\n        tp_groups=self.group_text_proposals(text_proposals, scores, im_size)#\xe9\xa6\x96\xe5\x85\x88\xe8\xbf\x98\xe6\x98\xaf\xe5\xbb\xba\xe5\x9b\xbe\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\xb0\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe7\x94\xb1\xe5\x93\xaa\xe5\x87\xa0\xe4\xb8\xaa\xe5\xb0\x8f\xe6\xa1\x86\xe6\x9e\x84\xe6\x88\x90\n        \n        text_lines=np.zeros((len(tp_groups), 8), np.float32)\n\n        for index, tp_indices in enumerate(tp_groups):\n            text_line_boxes=text_proposals[list(tp_indices)]#\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe7\x9a\x84\xe5\x85\xa8\xe9\x83\xa8\xe5\xb0\x8f\xe6\xa1\x86\n            X = (text_line_boxes[:,0] + text_line_boxes[:,2]) / 2# \xe6\xb1\x82\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb0\x8f\xe6\xa1\x86\xe7\x9a\x84\xe4\xb8\xad\xe5\xbf\x83x\xef\xbc\x8cy\xe5\x9d\x90\xe6\xa0\x87\n            Y = (text_line_boxes[:,1] + text_line_boxes[:,3]) / 2\n            \n            z1 = np.polyfit(X,Y,1)#\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\x8b\xe5\x89\x8d\xe6\xb1\x82\xe7\x9a\x84\xe4\xb8\xad\xe5\xbf\x83\xe5\xba\x97\xe6\x8b\x9f\xe5\x90\x88\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x88\xe6\x9c\x80\xe5\xb0\x8f\xe4\xba\x8c\xe4\xb9\x98\xef\xbc\x89\n\n            x0=np.min(text_line_boxes[:, 0])#\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8cx\xe5\x9d\x90\xe6\xa0\x87\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n            x1=np.max(text_line_boxes[:, 2])#\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8cx\xe5\x9d\x90\xe6\xa0\x87\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n\n            offset=(text_line_boxes[0, 2]-text_line_boxes[0, 0])*0.5#\xe5\xb0\x8f\xe6\xa1\x86\xe5\xae\xbd\xe5\xba\xa6\xe7\x9a\x84\xe4\xb8\x80\xe5\x8d\x8a\n\n            # \xe4\xbb\xa5\xe5\x85\xa8\xe9\x83\xa8\xe5\xb0\x8f\xe6\xa1\x86\xe7\x9a\x84\xe5\xb7\xa6\xe4\xb8\x8a\xe8\xa7\x92\xe8\xbf\x99\xe4\xb8\xaa\xe7\x82\xb9\xe5\x8e\xbb\xe6\x8b\x9f\xe5\x90\x88\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe4\xb8\x8b\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8cx\xe5\x9d\x90\xe6\xa0\x87\xe7\x9a\x84\xe6\x9e\x81\xe5\xb7\xa6\xe6\x9e\x81\xe5\x8f\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84y\xe5\x9d\x90\xe6\xa0\x87\n            lt_y, rt_y=self.fit_y(text_line_boxes[:, 0], text_line_boxes[:, 1], x0+offset, x1-offset)\n            # \xe4\xbb\xa5\xe5\x85\xa8\xe9\x83\xa8\xe5\xb0\x8f\xe6\xa1\x86\xe7\x9a\x84\xe5\xb7\xa6\xe4\xb8\x8b\xe8\xa7\x92\xe8\xbf\x99\xe4\xb8\xaa\xe7\x82\xb9\xe5\x8e\xbb\xe6\x8b\x9f\xe5\x90\x88\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe4\xb8\x8b\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8cx\xe5\x9d\x90\xe6\xa0\x87\xe7\x9a\x84\xe6\x9e\x81\xe5\xb7\xa6\xe6\x9e\x81\xe5\x8f\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84y\xe5\x9d\x90\xe6\xa0\x87\n            lb_y, rb_y=self.fit_y(text_line_boxes[:, 0], text_line_boxes[:, 3], x0+offset, x1-offset)\n\n            score=scores[list(tp_indices)].sum()/float(len(tp_indices))#\xe6\xb1\x82\xe5\x85\xa8\xe9\x83\xa8\xe5\xb0\x8f\xe6\xa1\x86\xe5\xbe\x97\xe5\x88\x86\xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\xe4\xbd\x9c\xe4\xb8\xba\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\n\n            text_lines[index, 0]=x0\n            text_lines[index, 1]=min(lt_y, rt_y)#\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe4\xb8\x8a\xe7\xab\xaf \xe7\xba\xbf\xe6\xae\xb5 \xe7\x9a\x84y\xe5\x9d\x90\xe6\xa0\x87\xe7\x9a\x84\xe5\xb0\x8f\xe5\x80\xbc\n            text_lines[index, 2]=x1\n            text_lines[index, 3]=max(lb_y, rb_y)#\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe4\xb8\x8b\xe7\xab\xaf \xe7\xba\xbf\xe6\xae\xb5 \xe7\x9a\x84y\xe5\x9d\x90\xe6\xa0\x87\xe7\x9a\x84\xe5\xa4\xa7\xe5\x80\xbc\n            text_lines[index, 4]=score#\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe5\xbe\x97\xe5\x88\x86\n            text_lines[index, 5]=z1[0]#\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb8\xad\xe5\xbf\x83\xe7\x82\xb9\xe6\x8b\x9f\xe5\x90\x88\xe7\x9a\x84\xe7\x9b\xb4\xe7\xba\xbf\xe7\x9a\x84k\xef\xbc\x8cb\n            text_lines[index, 6]=z1[1]\n            height = np.mean( (text_line_boxes[:,3]-text_line_boxes[:,1]) )#\xe5\xb0\x8f\xe6\xa1\x86\xe5\xb9\xb3\xe5\x9d\x87\xe9\xab\x98\xe5\xba\xa6\n            text_lines[index, 7]= height + 2.5\n\n        text_recs = np.zeros((len(text_lines), 9), np.float)\n        index = 0\n        for line in text_lines:\n            b1 = line[6] - line[7] / 2  # \xe6\xa0\xb9\xe6\x8d\xae\xe9\xab\x98\xe5\xba\xa6\xe5\x92\x8c\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe4\xb8\xad\xe5\xbf\x83\xe7\xba\xbf\xef\xbc\x8c\xe6\xb1\x82\xe5\x8f\x96\xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe4\xb8\x8a\xe4\xb8\x8b\xe4\xb8\xa4\xe6\x9d\xa1\xe7\xba\xbf\xe7\x9a\x84b\xe5\x80\xbc\n            b2 = line[6] + line[7] / 2\n            x1 = line[0]\n            y1 = line[5] * line[0] + b1  # \xe5\xb7\xa6\xe4\xb8\x8a\n            x2 = line[2]\n            y2 = line[5] * line[2] + b1  # \xe5\x8f\xb3\xe4\xb8\x8a\n            x3 = line[0]\n            y3 = line[5] * line[0] + b2  # \xe5\xb7\xa6\xe4\xb8\x8b\n            x4 = line[2]\n            y4 = line[5] * line[2] + b2  # \xe5\x8f\xb3\xe4\xb8\x8b\n            disX = x2 - x1\n            disY = y2 - y1\n            width = np.sqrt(disX * disX + disY * disY)  # \xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe5\xae\xbd\xe5\xba\xa6\n\n            fTmp0 = y3 - y1  # \xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe9\xab\x98\xe5\xba\xa6\n            fTmp1 = fTmp0 * disY / width\n            x = np.fabs(fTmp1 * disX / width)  # \xe5\x81\x9a\xe8\xa1\xa5\xe5\x81\xbf\n            y = np.fabs(fTmp1 * disY / width)\n            if line[5] < 0:\n                x1 -= x\n                y1 += y\n                x4 += x\n                y4 -= y\n            else:\n                x2 += x\n                y2 += y\n                x3 -= x\n                y3 -= y\n            text_recs[index, 0] = x1\n            text_recs[index, 1] = y1\n            text_recs[index, 2] = x2\n            text_recs[index, 3] = y2\n            text_recs[index, 4] = x3\n            text_recs[index, 5] = y3\n            text_recs[index, 6] = x4\n            text_recs[index, 7] = y4\n            text_recs[index, 8] = line[4]\n            index = index + 1\n\n        return text_recs\n'"
ctpn/lib/text_connector/text_proposal_graph_builder.py,0,"b'from .text_connect_cfg import Config as TextLineCfg\nfrom .other import Graph\nimport numpy as np\n\n\nclass TextProposalGraphBuilder:\n    """"""\n        Build Text proposals into a graph.\n    """"""\n    def get_successions(self, index):\n            box=self.text_proposals[index]\n            results=[]\n            for left in range(int(box[0])+1, min(int(box[0])+TextLineCfg.MAX_HORIZONTAL_GAP+1, self.im_size[1])):\n                adj_box_indices=self.boxes_table[left]\n                for adj_box_index in adj_box_indices:\n                    if self.meet_v_iou(adj_box_index, index):\n                        results.append(adj_box_index)\n                if len(results)!=0:\n                    return results\n            return results\n\n    def get_precursors(self, index):\n        box=self.text_proposals[index]\n        results=[]\n        for left in range(int(box[0])-1, max(int(box[0]-TextLineCfg.MAX_HORIZONTAL_GAP), 0)-1, -1):\n            adj_box_indices=self.boxes_table[left]\n            for adj_box_index in adj_box_indices:\n                if self.meet_v_iou(adj_box_index, index):\n                    results.append(adj_box_index)\n            if len(results)!=0:\n                return results\n        return results\n\n    def is_succession_node(self, index, succession_index):\n        precursors=self.get_precursors(succession_index)\n        if self.scores[index]>=np.max(self.scores[precursors]):\n            return True\n        return False\n\n    def meet_v_iou(self, index1, index2):\n        def overlaps_v(index1, index2):\n            h1=self.heights[index1]\n            h2=self.heights[index2]\n            y0=max(self.text_proposals[index2][1], self.text_proposals[index1][1])\n            y1=min(self.text_proposals[index2][3], self.text_proposals[index1][3])\n            return max(0, y1-y0+1)/min(h1, h2)\n\n        def size_similarity(index1, index2):\n            h1=self.heights[index1]\n            h2=self.heights[index2]\n            return min(h1, h2)/max(h1, h2)\n\n        return overlaps_v(index1, index2)>=TextLineCfg.MIN_V_OVERLAPS and \\\n               size_similarity(index1, index2)>=TextLineCfg.MIN_SIZE_SIM\n\n    def build_graph(self, text_proposals, scores, im_size):\n        self.text_proposals=text_proposals\n        self.scores=scores\n        self.im_size=im_size\n        self.heights=text_proposals[:, 3]-text_proposals[:, 1]+1\n\n        boxes_table=[[] for _ in range(self.im_size[1])]\n        for index, box in enumerate(text_proposals):\n            boxes_table[int(box[0])].append(index)\n        self.boxes_table=boxes_table\n\n        graph=np.zeros((text_proposals.shape[0], text_proposals.shape[0]), np.bool)\n\n        for index, box in enumerate(text_proposals):\n            successions=self.get_successions(index)\n            if len(successions)==0:\n                continue\n            succession_index=successions[np.argmax(scores[successions])]\n            if self.is_succession_node(index, succession_index):\n                # NOTE: a box can have multiple successions(precursors) if multiple successions(precursors)\n                # have equal scores.\n                graph[index, succession_index]=True\n        return Graph(graph)\n'"
ctpn/lib/utils/__init__.py,0,b'from . import bbox\nfrom . import blob\nfrom . import boxes_grid\nfrom . import cython_nms\nfrom . import timer\n\ntry:\n    from . import gpu_nms\nexcept:\n    gpu_nms = cython_nms\n'
ctpn/lib/utils/bbox.py,0,"b'# --------------------------------------------------------\n# Fast R-CNN\n# Copyright (c) 2015 Microsoft\n# Licensed under The MIT License [see LICENSE for details]\n# Written by Sergey Karayev\n# --------------------------------------------------------\n\nimport numpy as np\ncimport numpy as np\n\n\n\nDTYPE = np.float\nctypedef np.float_t DTYPE_t\n\ndef bbox_overlaps(\n        np.ndarray[DTYPE_t, ndim=2] boxes,\n        np.ndarray[DTYPE_t, ndim=2] query_boxes):\n    """"""\n    Parameters\n    ----------\n    boxes: (N, 4) ndarray of float\n    query_boxes: (K, 4) ndarray of float\n    Returns\n    -------\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    """"""\n    cdef unsigned int N = boxes.shape[0]\n    cdef unsigned int K = query_boxes.shape[0]\n    cdef np.ndarray[DTYPE_t, ndim=2] overlaps = np.zeros((N, K), dtype=DTYPE)\n    cdef DTYPE_t iw, ih, box_area\n    cdef DTYPE_t ua\n    cdef unsigned int k, n\n    for k in range(K):\n        box_area = (\n            (query_boxes[k, 2] - query_boxes[k, 0] + 1) *\n            (query_boxes[k, 3] - query_boxes[k, 1] + 1)\n        )\n        for n in range(N):\n            iw = (\n                min(boxes[n, 2], query_boxes[k, 2]) -\n                max(boxes[n, 0], query_boxes[k, 0]) + 1\n            )\n            if iw > 0:\n                ih = (\n                    min(boxes[n, 3], query_boxes[k, 3]) -\n                    max(boxes[n, 1], query_boxes[k, 1]) + 1\n                )\n                if ih > 0:\n                    ua = float(\n                        (boxes[n, 2] - boxes[n, 0] + 1) *\n                        (boxes[n, 3] - boxes[n, 1] + 1) +\n                        box_area - iw * ih\n                    )\n                    overlaps[n, k] = iw * ih / ua\n    return overlaps\n\ndef bbox_intersections(\n        np.ndarray[DTYPE_t, ndim=2] boxes,\n        np.ndarray[DTYPE_t, ndim=2] query_boxes):\n    """"""\n    For each query box compute the intersection ratio covered by boxes\n    ----------\n    Parameters\n    ----------\n    boxes: (N, 4) ndarray of float\n    query_boxes: (K, 4) ndarray of float\n    Returns\n    -------\n    overlaps: (N, K) ndarray of intersec between boxes and query_boxes\n    """"""\n    cdef unsigned int N = boxes.shape[0]\n    cdef unsigned int K = query_boxes.shape[0]\n    cdef np.ndarray[DTYPE_t, ndim=2] intersec = np.zeros((N, K), dtype=DTYPE)\n    cdef DTYPE_t iw, ih, box_area\n    cdef DTYPE_t ua\n    cdef unsigned int k, n\n    for k in range(K):\n        box_area = (\n            (query_boxes[k, 2] - query_boxes[k, 0] + 1) *\n            (query_boxes[k, 3] - query_boxes[k, 1] + 1)\n        )\n        for n in range(N):\n            iw = (\n                min(boxes[n, 2], query_boxes[k, 2]) -\n                max(boxes[n, 0], query_boxes[k, 0]) + 1\n            )\n            if iw > 0:\n                ih = (\n                    min(boxes[n, 3], query_boxes[k, 3]) -\n                    max(boxes[n, 1], query_boxes[k, 1]) + 1\n                )\n                if ih > 0:\n                    intersec[n, k] = iw * ih / box_area\n    return intersec\n'"
ctpn/lib/utils/blob.py,0,"b'""""""Blob helper functions.""""""\nimport cv2\nimport numpy as np\n\nfrom ..fast_rcnn.config import cfg\n\n\ndef im_list_to_blob(ims):\n    """"""Convert a list of images into a network input.\n\n    Assumes images are already prepared (means subtracted, BGR order, ...).\n    """"""\n    max_shape = np.array([im.shape for im in ims]).max(axis=0)\n    num_images = len(ims)\n    blob = np.zeros((num_images, max_shape[0], max_shape[1], 3),\n                    dtype=np.float32)\n    for i in range(num_images):\n        im = ims[i]\n        blob[i, 0:im.shape[0], 0:im.shape[1], :] = im\n\n    return blob\n\n\ndef prep_im_for_blob(im, pixel_means, target_size, max_size):\n    """"""Mean subtract and scale an image for use in a blob.""""""\n    im = im.astype(np.float32, copy=False)\n    im -= pixel_means\n    im_shape = im.shape\n    im_size_min = np.min(im_shape[0:2])\n    im_size_max = np.max(im_shape[0:2])\n    im_scale = float(target_size) / float(im_size_min)\n    # Prevent the biggest axis from being more than MAX_SIZE\n    if np.round(im_scale * im_size_max) > max_size:\n        im_scale = float(max_size) / float(im_size_max)\n    if cfg.TRAIN.RANDOM_DOWNSAMPLE:\n        r = 0.6 + np.random.rand() * 0.4\n        im_scale *= r\n    im = cv2.resize(im, None, None, fx=im_scale, fy=im_scale,\n                    interpolation=cv2.INTER_LINEAR)\n\n    return im, im_scale\n'"
ctpn/lib/utils/boxes_grid.py,0,"b'# --------------------------------------------------------\n# Subcategory CNN\n# Copyright (c) 2015 CVGL Stanford\n# Licensed under The MIT License [see LICENSE for details]\n# Written by Yu Xiang\n# --------------------------------------------------------\n\nimport math\n\nimport numpy as np\n\n# TODO: make fast_rcnn irrelevant\n# >>>> obsolete, because it depends on sth outside of this project\nfrom ..fast_rcnn.config import cfg\n\n\n# <<<< obsolete\n\ndef get_boxes_grid(image_height, image_width):\n    """"""\n    Return the boxes on image grid.\n    calling this function when cfg.IS_MULTISCALE is True, otherwise, calling rdl_roidb.prepare_roidb(imdb) instead.\n    """"""\n\n    # fixed a bug, change cfg.TRAIN.SCALES to cfg.TRAIN.SCALES_BASE\n    # coz, here needs a ratio around 1.0, not the accutual size.\n    # height and width of the feature map\n    if cfg.NET_NAME == \'CaffeNet\':\n        height = np.floor((image_height * max(cfg.TRAIN.SCALES_BASE) - 1) / 4.0 + 1)\n        height = np.floor((height - 1) / 2.0 + 1 + 0.5)\n        height = np.floor((height - 1) / 2.0 + 1 + 0.5)\n\n        width = np.floor((image_width * max(cfg.TRAIN.SCALES_BASE) - 1) / 4.0 + 1)\n        width = np.floor((width - 1) / 2.0 + 1 + 0.5)\n        width = np.floor((width - 1) / 2.0 + 1 + 0.5)\n    elif cfg.NET_NAME == \'VGGnet\':\n        height = np.floor(image_height * max(cfg.TRAIN.SCALES_BASE) / 2.0 + 0.5)\n        height = np.floor(height / 2.0 + 0.5)\n        height = np.floor(height / 2.0 + 0.5)\n        height = np.floor(height / 2.0 + 0.5)\n\n        width = np.floor(image_width * max(cfg.TRAIN.SCALES_BASE) / 2.0 + 0.5)\n        width = np.floor(width / 2.0 + 0.5)\n        width = np.floor(width / 2.0 + 0.5)\n        width = np.floor(width / 2.0 + 0.5)\n    else:\n        assert (1), \'The network architecture is not supported in utils.get_boxes_grid!\'\n\n    # compute the grid box centers\n    h = np.arange(height)\n    w = np.arange(width)\n    y, x = np.meshgrid(h, w, indexing=\'ij\')\n    centers = np.dstack((x, y))\n    centers = np.reshape(centers, (-1, 2))\n    num = centers.shape[0]\n\n    # compute width and height of grid box\n    area = cfg.TRAIN.KERNEL_SIZE * cfg.TRAIN.KERNEL_SIZE\n    aspect = cfg.TRAIN.ASPECTS  # height / width\n    num_aspect = len(aspect)\n    widths = np.zeros((1, num_aspect), dtype=np.float32)\n    heights = np.zeros((1, num_aspect), dtype=np.float32)\n    for i in range(num_aspect):\n        widths[0, i] = math.sqrt(area / aspect[i])\n        heights[0, i] = widths[0, i] * aspect[i]\n\n    # construct grid boxes\n    centers = np.repeat(centers, num_aspect, axis=0)\n    widths = np.tile(widths, num).transpose()\n    heights = np.tile(heights, num).transpose()\n\n    x1 = np.reshape(centers[:, 0], (-1, 1)) - widths * 0.5\n    x2 = np.reshape(centers[:, 0], (-1, 1)) + widths * 0.5\n    y1 = np.reshape(centers[:, 1], (-1, 1)) - heights * 0.5\n    y2 = np.reshape(centers[:, 1], (-1, 1)) + heights * 0.5\n\n    boxes_grid = np.hstack((x1, y1, x2, y2)) / cfg.TRAIN.SPATIAL_SCALE\n\n    return boxes_grid, centers[:, 0], centers[:, 1]\n'"
ctpn/lib/utils/setup.py,0,"b'import os\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom os.path import join as pjoin\n\nimport numpy as np\nfrom Cython.Distutils import build_ext\n\n\ndef find_in_path(name, path):\n    for dir in path.split(os.pathsep):\n        binpath = pjoin(dir, name)\n        if os.path.exists(binpath):\n            return os.path.abspath(binpath)\n    return None\n\n\ndef locate_cuda():\n    # first check if the CUDAHOME env variable is in use\n    if \'CUDAHOME\' in os.environ:\n        home = os.environ[\'CUDAHOME\']\n        nvcc = pjoin(home, \'bin\', \'nvcc\')\n    else:\n        # otherwise, search the PATH for NVCC\n        default_path = pjoin(os.sep, \'usr\', \'local\', \'cuda\', \'bin\')\n        nvcc = find_in_path(\'nvcc\', os.environ[\'PATH\'] + os.pathsep + default_path)\n        if nvcc is None:\n            raise EnvironmentError(\'The nvcc binary could not be \'\n                                   \'located in your $PATH. Either add it to your path, or set $CUDAHOME\')\n        home = os.path.dirname(os.path.dirname(nvcc))\n\n    cudaconfig = {\'home\': home, \'nvcc\': nvcc,\n                  \'include\': pjoin(home, \'include\'),\n                  \'lib64\': pjoin(home, \'lib64\')}\n    for k, v in cudaconfig.items():\n        # for k, v in cudaconfig.iteritems():\n        if not os.path.exists(v):\n            raise EnvironmentError(\'The CUDA %s path could not be located in %s\' % (k, v))\n    return cudaconfig\n\n\nCUDA = locate_cuda()\n\ntry:\n    numpy_include = np.get_include()\nexcept AttributeError:\n    numpy_include = np.get_numpy_include()\n\n\ndef customize_compiler_for_nvcc(self):\n    self.src_extensions.append(\'.cu\')\n    default_compiler_so = self.compiler_so\n    super = self._compile\n\n    def _compile(obj, src, ext, cc_args, extra_postargs, pp_opts):\n        print(extra_postargs)\n        if os.path.splitext(src)[1] == \'.cu\':\n            # use the cuda for .cu files\n            self.set_executable(\'compiler_so\', CUDA[\'nvcc\'])\n            # use only a subset of the extra_postargs, which are 1-1 translated\n            # from the extra_compile_args in the Extension class\n            postargs = extra_postargs[\'nvcc\']\n        else:\n            postargs = extra_postargs[\'gcc\']\n\n        super(obj, src, ext, cc_args, postargs, pp_opts)\n        # reset the default compiler_so, which we might have changed for cuda\n        self.compiler_so = default_compiler_so\n\n    # inject our redefined _compile method into the class\n    self._compile = _compile\n\n\n# run the customize_compiler\nclass custom_build_ext(build_ext):\n    def build_extensions(self):\n        customize_compiler_for_nvcc(self.compiler)\n        build_ext.build_extensions(self)\n\n\next_modules = [\n    Extension(\n        ""utils.bbox"",\n        [""bbox.pyx""],\n        extra_compile_args={\'gcc\': [""-Wno-cpp"", ""-Wno-unused-function""]},\n        include_dirs=[numpy_include]\n    ),\n    Extension(\n        ""utils.cython_nms"",\n        [""cython_nms.pyx""],\n        extra_compile_args={\'gcc\': [""-Wno-cpp"", ""-Wno-unused-function""]},\n        include_dirs=[numpy_include]\n    ),\n    Extension(\'utils.gpu_nms\',\n              [\'nms_kernel.cu\', \'gpu_nms.pyx\'],\n              library_dirs=[CUDA[\'lib64\']],\n              libraries=[\'cudart\'],\n              language=\'c++\',\n              runtime_library_dirs=[CUDA[\'lib64\']],\n              extra_compile_args={\'gcc\': [""-Wno-unused-function""],\n                                  \'nvcc\': [\'-arch=sm_35\',\n                                           \'--ptxas-options=-v\',\n                                           \'-c\',\n                                           \'--compiler-options\',\n                                           ""\'-fPIC\'""]},\n              include_dirs=[numpy_include, CUDA[\'include\']]\n              ),\n]\n\nsetup(\n    ext_modules=ext_modules,\n    cmdclass={\'build_ext\': custom_build_ext},\n)\n'"
ctpn/lib/utils/setup_cpu.py,0,"b'import os\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom os.path import join as pjoin\n\nimport numpy as np\nfrom Cython.Distutils import build_ext\n\n\ndef find_in_path(name, path):\n    for dir in path.split(os.pathsep):\n        binpath = pjoin(dir, name)\n        if os.path.exists(binpath):\n            return os.path.abspath(binpath)\n    return None\n\n\ndef locate_cuda():\n    # first check if the CUDAHOME env variable is in use\n    if \'CUDAHOME\' in os.environ:\n        home = os.environ[\'CUDAHOME\']\n        nvcc = pjoin(home, \'bin\', \'nvcc\')\n    else:\n        # otherwise, search the PATH for NVCC\n        default_path = pjoin(os.sep, \'usr\', \'local\', \'cuda\', \'bin\')\n        nvcc = find_in_path(\'nvcc\',\n                            os.environ[\'PATH\'] + os.pathsep + default_path)\n        if nvcc is None:\n            raise EnvironmentError(\n                \'The nvcc binary could not be \'\n                \'located in your $PATH. Either add it to your path, or set $CUDAHOME\'\n            )\n        home = os.path.dirname(os.path.dirname(nvcc))\n\n    cudaconfig = {\n        \'home\': home,\n        \'nvcc\': nvcc,\n        \'include\': pjoin(home, \'include\'),\n        \'lib64\': pjoin(home, \'lib64\')\n    }\n    for k, v in cudaconfig.items():\n        # for k, v in cudaconfig.iteritems():\n        if not os.path.exists(v):\n            raise EnvironmentError(\n                \'The CUDA %s path could not be located in %s\' % (k, v))\n    return cudaconfig\n\n\n# CUDA = locate_cuda()\n\ntry:\n    numpy_include = np.get_include()\nexcept AttributeError:\n    numpy_include = np.get_numpy_include()\n\n\ndef customize_compiler_for_nvcc(self):\n    self.src_extensions.append(\'.cu\')\n    default_compiler_so = self.compiler_so\n    super = self._compile\n\n    def _compile(obj, src, ext, cc_args, extra_postargs, pp_opts):\n        print(extra_postargs)\n        """"""\n        if os.path.splitext(src)[1] == \'.cu\':\n            # use the cuda for .cu files\n            self.set_executable(\'compiler_so\', CUDA[\'nvcc\'])\n            # use only a subset of the extra_postargs, which are 1-1 translated\n            # from the extra_compile_args in the Extension class\n            postargs = extra_postargs[\'nvcc\']\n        else:\n            postargs = extra_postargs[\'gcc\']\n        """"""\n        postargs = extra_postargs[\'gcc\']\n        super(obj, src, ext, cc_args, postargs, pp_opts)\n        # reset the default compiler_so, which we might have changed for cuda\n        self.compiler_so = default_compiler_so\n\n    # inject our redefined _compile method into the class\n    self._compile = _compile\n\n\n# run the customize_compiler\nclass custom_build_ext(build_ext):\n    def build_extensions(self):\n        customize_compiler_for_nvcc(self.compiler)\n        build_ext.build_extensions(self)\n\n\n""""""\next_modules = [\n    Extension(\n        ""utils.bbox"",\n        [""bbox.pyx""],\n        extra_compile_args={\'gcc\': [""-Wno-cpp"", ""-Wno-unused-function""]},\n        include_dirs = [numpy_include]\n    ),\n    Extension(\n        ""utils.cython_nms"",\n        [""cython_nms.pyx""],\n        extra_compile_args={\'gcc\': [""-Wno-cpp"", ""-Wno-unused-function""]},\n        include_dirs = [numpy_include]\n    ),\n               \n    Extension(\'utils.gpu_nms\',\n        [\'nms_kernel.cu\', \'gpu_nms.pyx\'],\n        library_dirs=[CUDA[\'lib64\']],\n        libraries=[\'cudart\'],\n        language=\'c++\',\n        runtime_library_dirs=[CUDA[\'lib64\']],\n        extra_compile_args={\'gcc\': [""-Wno-unused-function""],\n                            \'nvcc\': [\'-arch=sm_35\',\n                                     \'--ptxas-options=-v\',\n                                     \'-c\',\n                                     \'--compiler-options\',\n                                     ""\'-fPIC\'""]},\n        include_dirs = [numpy_include, CUDA[\'include\']]\n    ),\n]\n""""""\next_modules = [\n    Extension(\n        ""utils.bbox"", [""bbox.pyx""],\n        extra_compile_args={\'gcc\': [""-Wno-cpp"", ""-Wno-unused-function""]},\n        include_dirs=[numpy_include]),\n    Extension(\n        ""utils.cython_nms"", [""cython_nms.pyx""],\n        extra_compile_args={\'gcc\': [""-Wno-cpp"", ""-Wno-unused-function""]},\n        include_dirs=[numpy_include]),\n]\n\nsetup(\n    ext_modules=ext_modules,\n    cmdclass={\'build_ext\': custom_build_ext},\n)\n'"
ctpn/lib/utils/timer.py,0,"b'import time\n\n\nclass Timer(object):\n    def __init__(self):\n        self.total_time = 0.\n        self.calls = 0\n        self.start_time = 0.\n        self.diff = 0.\n        self.average_time = 0.\n\n    def tic(self):\n        self.start_time = time.time()\n\n    def toc(self, average=True):\n        self.diff = time.time() - self.start_time\n        self.total_time += self.diff\n        self.calls += 1\n        self.average_time = self.total_time / self.calls\n        if average:\n            return self.average_time\n        else:\n            return self.diff\n'"
train/pytorch-train/models/__init__.py,0,b''
train/pytorch-train/models/crnn.py,0,"b'import torch.nn as nn\nimport utils\n\n\nclass BidirectionalLSTM(nn.Module):\n    def __init__(self, nIn, nHidden, nOut, ngpu):\n        super(BidirectionalLSTM, self).__init__()\n        self.ngpu = ngpu\n\n        self.rnn = nn.LSTM(nIn, nHidden, bidirectional=True)\n        self.embedding = nn.Linear(nHidden * 2, nOut)\n\n    def forward(self, input):\n        recurrent, _ = utils.data_parallel(self.rnn, input,\n                                           self.ngpu)  # [T, b, h * 2]\n\n        T, b, h = recurrent.size()\n        t_rec = recurrent.view(T * b, h)\n        output = utils.data_parallel(self.embedding, t_rec,\n                                     self.ngpu)  # [T * b, nOut]\n        output = output.view(T, b, -1)\n\n        return output\n\n\nclass CRNN(nn.Module):\n    def __init__(self, imgH, nc, nclass, nh, ngpu, n_rnn=2, leakyRelu=False):\n        super(CRNN, self).__init__()\n        self.ngpu = ngpu\n        assert imgH % 16 == 0, \'imgH has to be a multiple of 16\'\n\n        ks = [3, 3, 3, 3, 3, 3, 2]\n        ps = [1, 1, 1, 1, 1, 1, 0]\n        ss = [1, 1, 1, 1, 1, 1, 1]\n        nm = [64, 128, 256, 256, 512, 512, 512]\n\n        cnn = nn.Sequential()\n\n        def convRelu(i, batchNormalization=False):\n            nIn = nc if i == 0 else nm[i - 1]\n            nOut = nm[i]\n            cnn.add_module(\'conv{0}\'.format(i),\n                           nn.Conv2d(nIn, nOut, ks[i], ss[i], ps[i]))\n            if batchNormalization:\n                cnn.add_module(\'batchnorm{0}\'.format(i), nn.BatchNorm2d(nOut))\n            if leakyRelu:\n                cnn.add_module(\'relu{0}\'.format(i),\n                               nn.LeakyReLU(0.2, inplace=True))\n            else:\n                cnn.add_module(\'relu{0}\'.format(i), nn.ReLU(True))\n\n        convRelu(0)\n        cnn.add_module(\'pooling{0}\'.format(0), nn.MaxPool2d(2, 2))  # 64x16x64\n        convRelu(1)\n        cnn.add_module(\'pooling{0}\'.format(1), nn.MaxPool2d(2, 2))  # 128x8x32\n        convRelu(2, True)\n        convRelu(3)\n        cnn.add_module(\'pooling{0}\'.format(2),\n                       nn.MaxPool2d((2, 2), (2, 1), (0, 1)))  # 256x4x16\n        convRelu(4, True)\n        convRelu(5)\n        cnn.add_module(\'pooling{0}\'.format(3),\n                       nn.MaxPool2d((2, 2), (2, 1), (0, 1)))  # 512x2x16\n        convRelu(6, True)  # 512x1x16\n\n        self.cnn = cnn\n        self.rnn = nn.Sequential(\n            BidirectionalLSTM(512, nh, nh, ngpu),\n            BidirectionalLSTM(nh, nh, nclass, ngpu))\n\n    def forward(self, input):\n        # conv features\n        conv = utils.data_parallel(self.cnn, input, self.ngpu)\n        b, c, h, w = conv.size()\n        assert h == 1, ""the height of conv must be 1""\n        conv = conv.squeeze(2)\n        conv = conv.permute(2, 0, 1)  # [w, b, c]\n\n        # rnn features\n        output = utils.data_parallel(self.rnn, conv, self.ngpu)\n\n        return output\n'"
train/pytorch-train/models/utils.py,0,"b'#!/usr/bin/python\n# encoding: utf-8\n\nimport torch.nn as nn\nimport torch.nn.parallel\n\n\ndef data_parallel(model, input, ngpu):\n    if isinstance(input.data, torch.cuda.FloatTensor) and ngpu > 1:\n        output = nn.parallel.data_parallel(model, input, range(ngpu))\n    else:\n        output = model(input)\n    return output\n'"
