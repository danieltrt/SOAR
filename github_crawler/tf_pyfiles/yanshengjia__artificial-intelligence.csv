file_path,api_count,code
genetic-algorithm-for-functional-maximum-problem/tensorflow-ga/train_ga.py,21,"b'# !/usr/bin/python\n# -*- coding:utf-8 -*-  \n# @author: Shengjia Yan\n# @date: 2018-01-02 Tuesday\n# @email: i@yanshengjia.com\n#\n# Genetic Algorithm Optimization in TensorFlow\n#\n# We are going to implement a genetic algorithm to optimize to find out the maximum value of the function \n# f(x)=x+10sin(5x)+7cos(4x)\n# in the range [0, 9].\n#\n# We will use TensorFlow\'s update function to run the different parts of the genetic algorithm.\n\nimport os\nfrom math import math\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.python.framework import ops\nops.reset_default_graph()\n\n\n# genetic algorithm parameters\nupper_limit = 9\nlow_limit = 0\nprecision = 4\npopulation_size = (upper_limit - low_limit) * pow(10, precision)\nfeatures = 50\nselection = 0.2\nmutation = 1.0 / pop_size\ngenerations = 200\nnum_parents = int(pop_size*selection)\nnum_children = pop_size - num_parents\n\n# start a graph session\nsess = tf.Session()\n\n# create ground truth\ntruth = np.sin(2*np.pi*(np.arange(features, dtype=np.float32))/features)\n\n# initialize population array\npopulation = tf.Variable(np.random.randn(pop_size, features), dtype=tf.float32)\n\n# initialize placeholders\ntruth_ph = tf.placeholder(tf.float32, [1, features])\ncrossover_mat_ph = tf.placeholder(tf.float32, [num_children, features])\nmutation_val_ph = tf.placeholder(tf.float32, [num_children, features])\n\n# calculate fitness (MSE)\nfitness = -tf.reduce_mean(tf.square(tf.subtract(population, truth_ph)), 1)\ntop_vals, top_ind = tf.nn.top_k(fitness, k=pop_size)\n\n# get best fit individual\nbest_val = tf.reduce_min(top_vals)\nbest_ind = tf.argmin(top_vals, 0)\nbest_individual = tf.gather(population, best_ind)\n\n# get parents\npopulation_sorted = tf.gather(population, top_ind)\nparents = tf.slice(population_sorted, [0, 0], [num_parents, features])\n\n# get offspring\n# indices to shuffle-gather parents\nrand_parent1_ix = np.random.choice(num_parents, num_children)\nrand_parent2_ix = np.random.choice(num_parents, num_children)\n# gather parents by shuffled indices, expand back out to pop_size too\nrand_parent1 = tf.gather(parents, rand_parent1_ix)\nrand_parent2 = tf.gather(parents, rand_parent2_ix)\nrand_parent1_sel = tf.multiply(rand_parent1, crossover_mat_ph)\nrand_parent2_sel = tf.multiply(rand_parent2, tf.subtract(1., crossover_mat_ph))\nchildren_after_sel = tf.add(rand_parent1_sel, rand_parent2_sel)\n\n# mutate children\nmutated_children = tf.add(children_after_sel, mutation_val_ph)\n\n# combine children and parents into new population\nnew_population = tf.concat(axis=0, values=[parents, mutated_children])\n\nstep = tf.group(population.assign(new_population))\n\ninit = tf.global_variables_initializer()\nsess.run(init)\n\n# run through generations\nfor i in range(generations):\n    # create cross-over matrices for plugging in.\n    crossover_mat = np.ones(shape=[num_children, features])\n    crossover_point = np.random.choice(np.arange(1, features-1, step=1), num_children)\n    for pop_ix in range(num_children):\n        crossover_mat[pop_ix,0:crossover_point[pop_ix]]=0.\n    # generate mutation probability matrices\n    mutation_prob_mat = np.random.uniform(size=[num_children, features])\n    mutation_values = np.random.normal(size=[num_children, features])\n    mutation_values[mutation_prob_mat >= mutation] = 0\n    \n    # run GA step\n    feed_dict = {truth_ph: truth.reshape([1, features]),\n                 crossover_mat_ph: crossover_mat,\n                 mutation_val_ph: mutation_values}\n    step.run(feed_dict, session=sess)\n    best_individual_val = sess.run(best_individual, feed_dict=feed_dict)\n    \n    best_fit = sess.run(best_val, feed_dict = feed_dict)\n    print(\'Generation: {}, Best Fitness (lowest MSE): {:.2}\'.format(i, -best_fit))\n\nplt.plot(truth, label=""True Values"")\nplt.plot(np.squeeze(best_individual_val), label=""Best Individual"")\nplt.axis((0, features, -1.25, 1.25))\nplt.legend(loc=\'upper right\')\nplt.show()\n\n\n'"
