file_path,api_count,code
produce_submit_json_file.py,0,"b'# coding=utf-8\nimport os\nimport json\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe9\xa2\x84\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\ndef get_latest_model_predict_data_dir(new_epochs_ckpt_dir=None):\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\x8b\xe6\x9c\x80\xe6\x96\xb0\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n    def new_report(test_report):\n        lists = os.listdir(test_report)  # \xe5\x88\x97\xe5\x87\xba\xe7\x9b\xae\xe5\xbd\x95\xe7\x9a\x84\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x92\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0lists\n        lists.sort(key=lambda fn: os.path.getmtime(test_report + ""/"" + fn))  # \xe6\x8c\x89\xe6\x97\xb6\xe9\x97\xb4\xe6\x8e\x92\xe5\xba\x8f\n        file_new = os.path.join(test_report, lists[-1])  # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0file_new\n        return file_new\n    if new_epochs_ckpt_dir is None:\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\xbe\x93\xe5\x87\xba\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        input_new_epochs = os.path.join(\n                os.path.abspath(os.path.join(os.path.dirname(__file__), ""output"")), ""sequnce_infer_out"")\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe5\x91\xa8\xe6\x9c\x9f\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        new_ckpt_dir = new_report(input_new_epochs)\n        input_new_epochs_ckpt = os.path.join(input_new_epochs, new_ckpt_dir)\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\x8b\xe6\x9c\x80\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        new_epochs_ckpt_dir = new_report(input_new_epochs_ckpt)\n    if not os.path.exists(new_ckpt_dir):\n        raise ValueError(""\xe8\xb7\xaf\xe5\xbe\x84\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81{}"".format(new_epochs_ckpt_dir))\n    return new_epochs_ckpt_dir\n\n# dict is comes from raw_data all_50_schemas\nschemas_dict_relation_2_object_subject_type = {\n    \'\xe7\x88\xb6\xe4\xba\xb2\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe5\xa6\xbb\xe5\xad\x90\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe6\xaf\x8d\xe4\xba\xb2\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe4\xb8\x88\xe5\xa4\xab\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe7\xa5\x96\xe7\xb1\x8d\': [(\'\xe5\x9c\xb0\xe7\x82\xb9\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe6\x80\xbb\xe9\x83\xa8\xe5\x9c\xb0\xe7\x82\xb9\': [(\'\xe5\x9c\xb0\xe7\x82\xb9\', \'\xe4\xbc\x81\xe4\xb8\x9a\')],\n    \'\xe5\x87\xba\xe7\x94\x9f\xe5\x9c\xb0\': [(\'\xe5\x9c\xb0\xe7\x82\xb9\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe7\x9b\xae\': [(\'\xe7\x9b\xae\', \'\xe7\x94\x9f\xe7\x89\xa9\')],\n    \'\xe9\x9d\xa2\xe7\xa7\xaf\': [(\'Number\', \'\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\')],\n    \'\xe7\xae\x80\xe7\xa7\xb0\': [(\'Text\', \'\xe6\x9c\xba\xe6\x9e\x84\')],\n    \'\xe4\xb8\x8a\xe6\x98\xa0\xe6\x97\xb6\xe9\x97\xb4\': [(\'Date\', \'\xe5\xbd\xb1\xe8\xa7\x86\xe4\xbd\x9c\xe5\x93\x81\')],\n    \'\xe6\x89\x80\xe5\xb1\x9e\xe4\xb8\x93\xe8\xbe\x91\': [(\'\xe9\x9f\xb3\xe4\xb9\x90\xe4\xb8\x93\xe8\xbe\x91\', \'\xe6\xad\x8c\xe6\x9b\xb2\')],\n    \'\xe6\xb3\xa8\xe5\x86\x8c\xe8\xb5\x84\xe6\x9c\xac\': [(\'Number\', \'\xe4\xbc\x81\xe4\xb8\x9a\')],\n    \'\xe9\xa6\x96\xe9\x83\xbd\': [(\'\xe5\x9f\x8e\xe5\xb8\x82\', \'\xe5\x9b\xbd\xe5\xae\xb6\')],\n    \'\xe5\xaf\xbc\xe6\xbc\x94\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe5\xbd\xb1\xe8\xa7\x86\xe4\xbd\x9c\xe5\x93\x81\')],\n    \'\xe5\xad\x97\': [(\'Text\', \'\xe5\x8e\x86\xe5\x8f\xb2\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe8\xba\xab\xe9\xab\x98\': [(\'Number\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe5\x87\xba\xe5\x93\x81\xe5\x85\xac\xe5\x8f\xb8\': [(\'\xe4\xbc\x81\xe4\xb8\x9a\', \'\xe5\xbd\xb1\xe8\xa7\x86\xe4\xbd\x9c\xe5\x93\x81\')],\n    \'\xe4\xbf\xae\xe4\xb8\x9a\xe5\xb9\xb4\xe9\x99\x90\': [(\'Number\', \'\xe5\xad\xa6\xe7\xa7\x91\xe4\xb8\x93\xe4\xb8\x9a\')],\n    \'\xe5\x87\xba\xe7\x94\x9f\xe6\x97\xa5\xe6\x9c\x9f\': [(\'Date\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe5\x88\xb6\xe7\x89\x87\xe4\xba\xba\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe5\xbd\xb1\xe8\xa7\x86\xe4\xbd\x9c\xe5\x93\x81\')],\n    \'\xe7\xbc\x96\xe5\x89\xa7\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe5\xbd\xb1\xe8\xa7\x86\xe4\xbd\x9c\xe5\x93\x81\')],\n    \'\xe5\x9b\xbd\xe7\xb1\x8d\': [(\'\xe5\x9b\xbd\xe5\xae\xb6\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe6\xb5\xb7\xe6\x8b\x94\': [(\'Number\', \'\xe5\x9c\xb0\xe7\x82\xb9\')],\n    \'\xe8\xbf\x9e\xe8\xbd\xbd\xe7\xbd\x91\xe7\xab\x99\': [(\'\xe7\xbd\x91\xe7\xab\x99\', \'\xe7\xbd\x91\xe7\xbb\x9c\xe5\xb0\x8f\xe8\xaf\xb4\')],\n    \'\xe6\x9c\x9d\xe4\xbb\xa3\': [(\'Text\', \'\xe5\x8e\x86\xe5\x8f\xb2\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe6\xb0\x91\xe6\x97\x8f\': [(\'Text\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe5\x8f\xb7\': [(\'Text\', \'\xe5\x8e\x86\xe5\x8f\xb2\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe5\x87\xba\xe7\x89\x88\xe7\xa4\xbe\': [(\'\xe5\x87\xba\xe7\x89\x88\xe7\xa4\xbe\', \'\xe4\xb9\xa6\xe7\xb1\x8d\')],\n    \'\xe4\xb8\xbb\xe6\x8c\x81\xe4\xba\xba\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe7\x94\xb5\xe8\xa7\x86\xe7\xbb\xbc\xe8\x89\xba\')],\n    \'\xe4\xb8\x93\xe4\xb8\x9a\xe4\xbb\xa3\xe7\xa0\x81\': [(\'Text\', \'\xe5\xad\xa6\xe7\xa7\x91\xe4\xb8\x93\xe4\xb8\x9a\')],\n    \'\xe6\xad\x8c\xe6\x89\x8b\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe6\xad\x8c\xe6\x9b\xb2\')],\n    \'\xe4\xbd\x9c\xe8\xaf\x8d\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe6\xad\x8c\xe6\x9b\xb2\')],\n    \'\xe4\xb8\xbb\xe8\xa7\x92\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe7\xbd\x91\xe7\xbb\x9c\xe5\xb0\x8f\xe8\xaf\xb4\')],\n    \'\xe8\x91\xa3\xe4\xba\x8b\xe9\x95\xbf\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe4\xbc\x81\xe4\xb8\x9a\')],\n    \'\xe6\x88\x90\xe7\xab\x8b\xe6\x97\xa5\xe6\x9c\x9f\': [(\'Date\', \'\xe6\x9c\xba\xe6\x9e\x84\'), (\'Date\', \'\xe4\xbc\x81\xe4\xb8\x9a\')],\n    \'\xe6\xaf\x95\xe4\xb8\x9a\xe9\x99\xa2\xe6\xa0\xa1\': [(\'\xe5\xad\xa6\xe6\xa0\xa1\', \'\xe4\xba\xba\xe7\x89\xa9\')],\n    \'\xe5\x8d\xa0\xe5\x9c\xb0\xe9\x9d\xa2\xe7\xa7\xaf\': [(\'Number\', \'\xe6\x9c\xba\xe6\x9e\x84\')],\n    \'\xe5\xae\x98\xe6\x96\xb9\xe8\xaf\xad\xe8\xa8\x80\': [(\'\xe8\xaf\xad\xe8\xa8\x80\', \'\xe5\x9b\xbd\xe5\xae\xb6\')],\n    \'\xe9\x82\xae\xe6\x94\xbf\xe7\xbc\x96\xe7\xa0\x81\': [(\'Text\', \'\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\')],\n    \'\xe4\xba\xba\xe5\x8f\xa3\xe6\x95\xb0\xe9\x87\x8f\': [(\'Number\', \'\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\')],\n    \'\xe6\x89\x80\xe5\x9c\xa8\xe5\x9f\x8e\xe5\xb8\x82\': [(\'\xe5\x9f\x8e\xe5\xb8\x82\', \'\xe6\x99\xaf\xe7\x82\xb9\')],\n    \'\xe4\xbd\x9c\xe8\x80\x85\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe5\x9b\xbe\xe4\xb9\xa6\xe4\xbd\x9c\xe5\x93\x81\')],\n    \'\xe4\xbd\x9c\xe6\x9b\xb2\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe6\xad\x8c\xe6\x9b\xb2\')],\n    \'\xe6\xb0\x94\xe5\x80\x99\': [(\'\xe6\xb0\x94\xe5\x80\x99\', \'\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\')],\n    \'\xe5\x98\x89\xe5\xae\xbe\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe7\x94\xb5\xe8\xa7\x86\xe7\xbb\xbc\xe8\x89\xba\')],\n    \'\xe4\xb8\xbb\xe6\xbc\x94\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe5\xbd\xb1\xe8\xa7\x86\xe4\xbd\x9c\xe5\x93\x81\')],\n    \'\xe6\x94\xb9\xe7\xbc\x96\xe8\x87\xaa\': [(\'\xe4\xbd\x9c\xe5\x93\x81\', \'\xe5\xbd\xb1\xe8\xa7\x86\xe4\xbd\x9c\xe5\x93\x81\')],\n    \'\xe5\x88\x9b\xe5\xa7\x8b\xe4\xba\xba\': [(\'\xe4\xba\xba\xe7\x89\xa9\', \'\xe4\xbc\x81\xe4\xb8\x9a\')]}\n\nclass File_Management(object):\n    """"""\xe8\xaf\xbb\xe5\x8f\x96TXT\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe4\xbb\xa5\xe5\x88\x97\xe8\xa1\xa8\xe5\xbd\xa2\xe5\xbc\x8f\xe8\xbf\x94\xe5\x9b\x9e\xe6\x96\x87\xe4\xbb\xb6\xe5\x86\x85\xe5\xae\xb9""""""\n    def __init__(self, TEST_DATA_DIR=None, MODEL_OUTPUT_DIR=None, Competition_Mode=True):\n        self.TEST_DATA_DIR = TEST_DATA_DIR\n        self.MODEL_OUTPUT_DIR = get_latest_model_predict_data_dir(MODEL_OUTPUT_DIR)\n        self.Competition_Mode = Competition_Mode\n\n    def file_path_and_name(self):\n        text_sentence_file_path = os.path.join(self.TEST_DATA_DIR, ""text_and_one_predicate.txt"")\n        token_in_file_path = os.path.join(self.TEST_DATA_DIR, ""token_in_not_UNK_and_one_predicate.txt"")\n        predicate_token_label_file_path = os.path.join(self.MODEL_OUTPUT_DIR, ""token_label_predictions.txt"")\n\n        file_path_list = [text_sentence_file_path, token_in_file_path, predicate_token_label_file_path]\n        file_name_list = [""text_sentence_list"", ""token_in_not_NUK_list "", ""token_label_list"",]\n        if not self.Competition_Mode:\n            spo_out_file_path = os.path.join(self.TEST_DATA_DIR, ""spo_out.txt"")\n            if os.path.exists(spo_out_file_path):\n                file_path_list.append(spo_out_file_path)\n                file_name_list.append(""reference_spo_list"")\n        return file_path_list, file_name_list\n\n    def read_file_return_content_list(self):\n        file_path_list, file_name_list = self.file_path_and_name()\n        content_list_summary = []\n        for file_path in file_path_list:\n            with open(file_path, ""r"", encoding=\'utf-8\') as f:\n                content_list = f.readlines()\n                content_list = [content.replace(""\\n"", """") for content in content_list]\n                content_list_summary.append(content_list)\n\n        if self.Competition_Mode:\n            content_list_length_summary = [(file_name, len(content_list)) for content_list, file_name in\n                                           zip(content_list_summary, file_name_list)]\n            file_line_number = self._check_file_line_numbers(content_list_length_summary)\n            print(""Competition_Mode=True, check file line pass!"")\n            print(""\xe8\xbe\x93\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6\xe8\xa1\x8c\xe6\x95\xb0\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe8\xa1\x8c\xe6\x95\xb0\xe6\x98\xaf: "", file_line_number)\n        else:\n            file_line_number = len(content_list_summary[0])\n            print(""first file line number: "", file_line_number)\n            print(""do not check file line! if you need check file line, set Competition_Mode=True"")\n        print(""\\n"")\n        return content_list_summary, file_line_number\n\n    def _check_file_line_numbers(self, content_list_length_summary):\n        content_list_length_file_one = content_list_length_summary[0][1]\n        for file_name, file_line_number in content_list_length_summary:\n            assert file_line_number == content_list_length_file_one\n        return content_list_length_file_one\n\n\nclass Sorted_relation_and_entity_list_Management(File_Management):\n    """"""\n    \xe7\x94\x9f\xe6\x88\x90\xe6\x8c\x89\xe6\xa6\x82\xe7\x8e\x87\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x8e\x92\xe5\xba\x8f\xe7\x9a\x84\xe5\x8f\xaf\xe8\x83\xbd\xe5\x85\xb3\xe7\xb3\xbb\xe5\x88\x97\xe8\xa1\xa8\xe5\x92\x8c\xe6\x8c\x89\xe7\x85\xa7\xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xa5\xe5\xad\x90\xe4\xb8\xad\xe9\xa1\xba\xe5\xba\x8f\xe6\x8e\x92\xe5\xba\x8f\xe7\x9a\x84\xe5\xae\x9e\xe4\xbd\x93\xe5\x88\x97\xe8\xa1\xa8\n    """"""\n    def __init__(self, TEST_DATA_DIR, MODEL_OUTPUT_DIR, Competition_Mode=False):\n        File_Management.__init__(self, TEST_DATA_DIR=TEST_DATA_DIR, MODEL_OUTPUT_DIR=MODEL_OUTPUT_DIR, Competition_Mode=Competition_Mode)\n        # \xe5\x85\xb3\xe7\xb3\xbb\xe5\x88\x97\xe8\xa1\xa8 \xe6\x8a\x8a\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe5\xae\x9e\xe6\x95\xb0\xe5\x80\xbc\xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\xba\xe6\xa0\x87\xe7\xad\xbe\n        self.relationship_label_list = [\'\xe4\xb8\x88\xe5\xa4\xab\', \'\xe4\xb8\x8a\xe6\x98\xa0\xe6\x97\xb6\xe9\x97\xb4\', \'\xe4\xb8\x93\xe4\xb8\x9a\xe4\xbb\xa3\xe7\xa0\x81\', \'\xe4\xb8\xbb\xe6\x8c\x81\xe4\xba\xba\', \'\xe4\xb8\xbb\xe6\xbc\x94\', \'\xe4\xb8\xbb\xe8\xa7\x92\', \'\xe4\xba\xba\xe5\x8f\xa3\xe6\x95\xb0\xe9\x87\x8f\', \'\xe4\xbd\x9c\xe6\x9b\xb2\', \'\xe4\xbd\x9c\xe8\x80\x85\', \'\xe4\xbd\x9c\xe8\xaf\x8d\', \'\xe4\xbf\xae\xe4\xb8\x9a\xe5\xb9\xb4\xe9\x99\x90\', \'\xe5\x87\xba\xe5\x93\x81\xe5\x85\xac\xe5\x8f\xb8\', \'\xe5\x87\xba\xe7\x89\x88\xe7\xa4\xbe\', \'\xe5\x87\xba\xe7\x94\x9f\xe5\x9c\xb0\', \'\xe5\x87\xba\xe7\x94\x9f\xe6\x97\xa5\xe6\x9c\x9f\', \'\xe5\x88\x9b\xe5\xa7\x8b\xe4\xba\xba\', \'\xe5\x88\xb6\xe7\x89\x87\xe4\xba\xba\', \'\xe5\x8d\xa0\xe5\x9c\xb0\xe9\x9d\xa2\xe7\xa7\xaf\', \'\xe5\x8f\xb7\', \'\xe5\x98\x89\xe5\xae\xbe\', \'\xe5\x9b\xbd\xe7\xb1\x8d\', \'\xe5\xa6\xbb\xe5\xad\x90\', \'\xe5\xad\x97\', \'\xe5\xae\x98\xe6\x96\xb9\xe8\xaf\xad\xe8\xa8\x80\', \'\xe5\xaf\xbc\xe6\xbc\x94\', \'\xe6\x80\xbb\xe9\x83\xa8\xe5\x9c\xb0\xe7\x82\xb9\', \'\xe6\x88\x90\xe7\xab\x8b\xe6\x97\xa5\xe6\x9c\x9f\', \'\xe6\x89\x80\xe5\x9c\xa8\xe5\x9f\x8e\xe5\xb8\x82\', \'\xe6\x89\x80\xe5\xb1\x9e\xe4\xb8\x93\xe8\xbe\x91\', \'\xe6\x94\xb9\xe7\xbc\x96\xe8\x87\xaa\', \'\xe6\x9c\x9d\xe4\xbb\xa3\', \'\xe6\xad\x8c\xe6\x89\x8b\', \'\xe6\xaf\x8d\xe4\xba\xb2\', \'\xe6\xaf\x95\xe4\xb8\x9a\xe9\x99\xa2\xe6\xa0\xa1\', \'\xe6\xb0\x91\xe6\x97\x8f\', \'\xe6\xb0\x94\xe5\x80\x99\', \'\xe6\xb3\xa8\xe5\x86\x8c\xe8\xb5\x84\xe6\x9c\xac\', \'\xe6\xb5\xb7\xe6\x8b\x94\', \'\xe7\x88\xb6\xe4\xba\xb2\', \'\xe7\x9b\xae\', \'\xe7\xa5\x96\xe7\xb1\x8d\', \'\xe7\xae\x80\xe7\xa7\xb0\', \'\xe7\xbc\x96\xe5\x89\xa7\', \'\xe8\x91\xa3\xe4\xba\x8b\xe9\x95\xbf\', \'\xe8\xba\xab\xe9\xab\x98\', \'\xe8\xbf\x9e\xe8\xbd\xbd\xe7\xbd\x91\xe7\xab\x99\', \'\xe9\x82\xae\xe6\x94\xbf\xe7\xbc\x96\xe7\xa0\x81\', \'\xe9\x9d\xa2\xe7\xa7\xaf\', \'\xe9\xa6\x96\xe9\x83\xbd\']\n        self.Competition_Mode = Competition_Mode\n        print(""test\xe6\x95\xb0\xe6\x8d\xae\xe8\xbe\x93\xe5\x85\xa5\xe8\xb7\xaf\xe5\xbe\x84\xe6\x98\xaf:\\t{}"".format(self.TEST_DATA_DIR))\n        print(""\xe6\x9c\x80\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xb7\xaf\xe5\xbe\x84\xe6\x98\xaf:\\t{}"".format(self.MODEL_OUTPUT_DIR))\n\n    def get_input_list(self,):\n        content_list_summary, self.file_line_number = self.read_file_return_content_list()\n        if len(content_list_summary) == 4:\n            [text_sentence_list, token_in_not_NUK_list, token_label_list, reference_spo_list] = content_list_summary\n        elif len(content_list_summary) == 3:\n            [text_sentence_list, token_in_not_NUK_list, token_label_list] = content_list_summary\n            reference_spo_list = [None] * len(text_sentence_list)\n        else:\n            raise ValueError(""check code!"")\n        return text_sentence_list, token_in_not_NUK_list, token_label_list, reference_spo_list\n\n\n    #\xe5\x90\x88\xe5\xb9\xb6\xe7\x94\xb1WordPiece\xe5\x88\x87\xe5\x88\x86\xe7\x9a\x84\xe8\xaf\x8d\xe5\x92\x8c\xe5\x8d\x95\xe5\xad\x97\n    def _merge_WordPiece_and_single_word(self, entity_sort_list):\n        # [..[\'B-SUB\', \'\xe6\x96\xb0\', \'\xe5\x9c\xb0\', \'\xe7\x90\x83\', \'ge\', \'##nes\', \'##is\'] ..]---> [..(\'SUB\', \'\xe6\x96\xb0\xe5\x9c\xb0\xe7\x90\x83genesis\')..]\n        entity_sort_tuple_list = []\n        for a_entity_list in entity_sort_list:\n            entity_content = """"\n            entity_type = None\n            for idx, entity_part in enumerate(a_entity_list):\n                if idx == 0:\n                    entity_type = entity_part\n                    if entity_type[:2] not in [""B-"", ""I-""]:\n                        break\n                else:\n                    if entity_part.startswith(""##""):\n                        entity_content += entity_part.replace(""##"", """")\n                    else:\n                        entity_content += entity_part\n            if entity_content != """":\n                entity_sort_tuple_list.append((entity_type[2:], entity_content))\n        return entity_sort_tuple_list\n\n    # \xe6\x8a\x8aspo_out.txt \xe7\x9a\x84[SPO_SEP] \xe5\x88\x86\xe5\x89\xb2\xe5\xbd\xa2\xe5\xbc\x8f\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe6\xa0\x87\xe5\x87\x86\xe5\x88\x97\xe8\xa1\xa8\xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\n    # \xe5\xa6\xbb\xe5\xad\x90 \xe4\xba\xba\xe7\x89\xa9 \xe4\xba\xba\xe7\x89\xa9 \xe6\x9d\xa8\xe6\xb7\x91\xe6\x85\xa7 \xe5\x91\xa8\xe4\xbd\x9b\xe6\xb5\xb7[SPO_SEP]\xe4\xb8\x88\xe5\xa4\xab \xe4\xba\xba\xe7\x89\xa9 \xe4\xba\xba\xe7\x89\xa9 \xe5\x91\xa8\xe4\xbd\x9b\xe6\xb5\xb7 \xe6\x9d\xa8\xe6\xb7\x91\xe6\x85\xa7 ---> dict\n    def preprocessing_reference_spo_list(self, refer_spo_str):\n        refer_spo_list = refer_spo_str.split(""[SPO_SEP]"")\n        refer_spo_list = [spo.split("" "") for spo in refer_spo_list]\n        refer_spo_list = [dict([(\'predicate\', spo[0]),\n                                (\'object_type\', spo[2]), (\'subject_type\', spo[1]),\n                                (\'object\', spo[4]), (\'subject\', spo[3])]) for spo in refer_spo_list]\n        refer_spo_list.sort(key= lambda item:item[\'predicate\'])\n        return refer_spo_list\n\n    # \xe6\x8a\x8a\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbe\x93\xe5\x87\xba\xe5\xae\x9e\xe4\xbd\x93\xe6\xa0\x87\xe7\xad\xbe\xe6\x8c\x89\xe7\x85\xa7\xe5\x8e\x9f\xe5\x8f\xa5\xe4\xb8\xad\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xbd\x8d\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\n    def model_token_label_2_entity_sort_tuple_list(self, token_in_not_UNK_list, predicate_token_label_list):\n        """"""\n        :param token_in_not_UNK:  [\'\xe7\xb4\xab\', \'\xe8\x8f\x8a\', \'\xe8\x8a\xb1\', \'\xe8\x8d\x89\', \'\xe6\x98\xaf\', \'\xe8\x8f\x8a\', \'\xe7\x9b\xae\', \'\xef\xbc\x8c\', \'\xe8\x8f\x8a\', \'\xe7\xa7\x91\', \'\xef\xbc\x8c\', \'\xe6\x9d\xbe\', \'\xe6\x9e\x9c\', \'\xe8\x8f\x8a\', \'\xe5\xb1\x9e\', \'\xe7\x9a\x84\', \'\xe6\xa4\x8d\', \'\xe7\x89\xa9\']\n        :param predicate_token_label: [\'B-SUB\', \'I-SUB\', \'I-SUB\', \'I-SUB\', \'O\', \'B-OBJ\', \'I-OBJ\', \'O\', \'O\', \'O\', \'O\', \'O\', \'O\', \'O\', \'O\', \'O\', \'O\', \'O\']\n        :return: [(\'SUB\', \'\xe7\xb4\xab\xe8\x8f\x8a\xe8\x8a\xb1\xe8\x8d\x89\'), (\'OBJ\', \'\xe8\x8f\x8a\xe7\x9b\xae\')]\n        """"""\n        # \xe9\x99\xa4\xe5\x8e\xbb\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe7\x89\xb9\xe6\xae\x8a\xe7\xac\xa6\xe5\x8f\xb7\n        def preprocessing_model_token_lable(predicate_token_label_list, token_in_list_lenth):\n            # ToDo:\xe6\xa3\x80\xe6\x9f\xa5\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe7\xba\xa0\xe9\x94\x99\n            if predicate_token_label_list[0] == ""[CLS]"":\n                predicate_token_label_list = predicate_token_label_list[1:]  # y_predict.remove(\'[CLS]\')\n            if len(predicate_token_label_list) > token_in_list_lenth:  # \xe5\x8f\xaa\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xe5\x8d\xb3\xe5\x8f\xaf\n                predicate_token_label_list = predicate_token_label_list[:token_in_list_lenth]\n            return predicate_token_label_list\n        # \xe9\xa2\x84\xe5\xa4\x84\xe7\x90\x86\xe6\xa0\x87\xe6\xb3\xa8\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x97\xe8\xa1\xa8\n        predicate_token_label_list = preprocessing_model_token_lable(predicate_token_label_list, len(token_in_not_UNK_list))\n        entity_sort_list = []\n        entity_part_list = []\n        #TODO:\xe9\x9c\x80\xe8\xa6\x81\xe6\xa3\x80\xe6\x9f\xa5\xe4\xbb\xa5\xe4\xb8\x8b\xe7\x9a\x84\xe9\x80\xbb\xe8\xbe\x91\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c\xe5\x8f\xaf\xe8\x83\xbd\xe5\x86\x99\xe7\x9a\x84\xe4\xb8\x8d\xe5\xa4\x9f\xe5\xae\x8c\xe5\xa4\x87\xe5\x85\x85\xe5\x88\x86\n        for idx, token_label in enumerate(predicate_token_label_list):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xa0\x87\xe7\xad\xbe\xe4\xb8\xba ""O""\n            if token_label == ""O"":\n                # entity_part_list \xe4\xb8\x8d\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe5\x88\x99\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x8f\x90\xe4\xba\xa4\n                if len(entity_part_list) > 0:\n                    entity_sort_list.append(entity_part_list)\n                    entity_part_list = []\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xa0\x87\xe7\xad\xbe\xe4\xbb\xa5\xe5\xad\x97\xe7\xac\xa6 ""B-"" \xe5\xbc\x80\xe5\xa7\x8b\n            if token_label.startswith(""B-""):\n                # \xe5\xa6\x82\xe6\x9e\x9c entity_part_list \xe4\xb8\x8d\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe5\x88\x99\xe5\x85\x88\xe6\x8f\x90\xe4\xba\xa4\xe5\x8e\x9f\xe6\x9d\xa5 entity_part_list\n                if len(entity_part_list) > 0:\n                    entity_sort_list.append(entity_part_list)\n                    entity_part_list = []\n                entity_part_list.append(token_label)\n                entity_part_list.append(token_in_not_UNK_list[idx])\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x88\xb0\xe4\xba\x86\xe6\xa0\x87\xe7\xad\xbe\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa0\x87\xe7\xad\xbe\xe5\xa4\x84\n                if idx == len(predicate_token_label_list) - 1:\n                    entity_sort_list.append(entity_part_list)\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xa0\x87\xe7\xad\xbe\xe4\xbb\xa5\xe5\xad\x97\xe7\xac\xa6 ""I-""  \xe5\xbc\x80\xe5\xa7\x8b \xe6\x88\x96\xe8\x80\x85\xe7\xad\x89\xe4\xba\x8e ""[##WordPiece]""\n            if token_label.startswith(""I-"") or token_label == ""[##WordPiece]"":\n                # entity_part_list \xe4\xb8\x8d\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe5\x88\x99\xe6\x8a\x8a\xe8\xaf\xa5\xe6\xa0\x87\xe7\xad\xbe\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe5\xb9\xb6\xe5\x85\xa5 entity_part_list\n                if len(entity_part_list) > 0:\n                    entity_part_list.append(token_in_not_UNK_list[idx])\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x88\xb0\xe4\xba\x86\xe6\xa0\x87\xe7\xad\xbe\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa0\x87\xe7\xad\xbe\xe5\xa4\x84\n                    if idx == len(predicate_token_label_list) - 1:\n                        entity_sort_list.append(entity_part_list)\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x81\x87\xe5\x88\xb0 [SEP] \xe5\x88\x86\xe9\x9a\x94\xe7\xac\xa6\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\x84\xe7\x90\x86\xe7\x9a\x84\xe6\xa0\x87\xe6\xb3\xa8\xe9\x83\xa8\xe5\x88\x86\xe5\xb7\xb2\xe7\xbb\x8f\xe7\xbb\x93\xe6\x9d\x9f\n            if token_label == ""[SEP]"":\n                break\n        entity_sort_tuple_list = self._merge_WordPiece_and_single_word(entity_sort_list)\n        return entity_sort_tuple_list\n\n    # \xe7\x94\x9f\xe6\x88\x90\xe6\x8e\x92\xe5\xa5\xbd\xe5\xba\x8f\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\xe5\x88\x97\xe8\xa1\xa8\xe5\x92\x8c\xe5\xae\x9e\xe4\xbd\x93\xe5\x88\x97\xe8\xa1\xa8\n    def produce_relationship_and_entity_sort_list(self):\n        text_sentence_list, token_in_not_NUK_list, token_label_list, reference_spo_list = self.get_input_list()\n        for [text_sentence, token_in_not_UNK, token_label, refer_spo_str] in\\\n                zip(text_sentence_list, token_in_not_NUK_list, token_label_list, reference_spo_list):\n            text = text_sentence.split(""\\t"")[0]\n            text_predicate = text_sentence.split(""\\t"")[1]\n            token_in = token_in_not_UNK.split(""\\t"")[0].split("" "")\n            token_in_predicate = token_in_not_UNK.split(""\\t"")[1]\n            assert text_predicate == token_in_predicate\n            token_label_out = token_label.split("" "")\n            entity_sort_tuple_list = self.model_token_label_2_entity_sort_tuple_list(token_in, token_label_out)\n            if self.Competition_Mode:\n                yield text, text_predicate, entity_sort_tuple_list, None\n            else:\n                if refer_spo_str is not None:\n                    refer_spo_list = self.preprocessing_reference_spo_list(refer_spo_str)\n                else:\n                    refer_spo_list = []\n                yield text, text_predicate, entity_sort_tuple_list, refer_spo_list\n\n    # \xe6\x89\x93\xe5\x8d\xb0\xe6\x8e\x92\xe5\xa5\xbd\xe5\xba\x8f\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\xe5\x88\x97\xe8\xa1\xa8\xe5\x92\x8c\xe5\xae\x9e\xe4\xbd\x93\xe5\x88\x97\xe8\xa1\xa8\n    def show_produce_relationship_and_entity_sort_list(self):\n        idx = 0\n        for text, text_predicate, entity_sort_tuple_list, refer_spo_list in self.produce_relationship_and_entity_sort_list():\n            print(""\xe5\xba\x8f\xe5\x8f\xb7\xef\xbc\x9a           "", idx + 1)\n            print(""\xe5\x8e\x9f\xe5\x8f\xa5\xef\xbc\x9a           "", text)\n            print(""\xe9\xa2\x84\xe6\xb5\x8b\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\xef\xbc\x9a     "", text_predicate)\n            print(""\xe9\xa2\x84\xe6\xb5\x8b\xe7\x9a\x84\xe5\xae\x9e\xe4\xbd\x93\xef\xbc\x9a     "", entity_sort_tuple_list)\n            print(""\xe5\x8f\x82\xe8\x80\x83\xe7\x9a\x84 spo_slit\xef\xbc\x9a"", refer_spo_list)\n            print(""\\n"")\n            idx += 1\n            if idx == 100:\n                break\n\n    def produce_output_file(self, OUT_RESULTS_DIR=None, keep_empty_spo_list=False):\n        filename = ""subject_predicate_object_predict_output.json""\n        output_dict = dict()\n        for text, text_predicate, entity_sort_tuple_list, refer_spo_list in self.produce_relationship_and_entity_sort_list():\n            object_type, subject_type = schemas_dict_relation_2_object_subject_type[text_predicate][0]\n            subject_list = [value for name, value in entity_sort_tuple_list if name == ""SUB""]\n            subject_list = list(set(subject_list))\n            subject_list = [value for value in subject_list if len(value) >= 2]\n            object_list = [value for name, value in entity_sort_tuple_list if name == ""OBJ""]\n            object_list = list(set(object_list))\n            object_list = [value for value in object_list if len(value) >= 2]\n            if len(subject_list) == 0 or len(object_list) == 0:\n                output_dict.setdefault(text, [])\n            for subject_value in subject_list:\n                for object_value in object_list:\n                    output_dict.setdefault(text, []).append({""object_type"": object_type, ""predicate"": text_predicate,\n                                                             ""object"": object_value, ""subject_type"": subject_type,\n                                                             ""subject"": subject_value})\n        if keep_empty_spo_list:\n            filename = ""keep_empty_spo_list_"" + filename\n        if OUT_RESULTS_DIR is None:\n            out_path = filename\n        else:\n            out_path = os.path.join(OUT_RESULTS_DIR, filename)\n        print(""\xe7\x94\x9f\xe6\x88\x90\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe8\xb7\xaf\xe5\xbe\x84\xe6\x98\xaf:\\t{}"".format(out_path))\n        if not os.path.exists(OUT_RESULTS_DIR):\n            os.makedirs(OUT_RESULTS_DIR)\n        result_json_write_f = open(out_path, ""w"", encoding=\'utf-8\')\n        count_line_number = 0\n        count_empty_line_number = 0\n        for text, spo_list in output_dict.items():\n            count_line_number += 1\n            line_dict = dict()\n            line_dict[""text""] = text\n            line_dict[""spo_list""] = spo_list\n            line_json = json.dumps(line_dict, ensure_ascii=False)\n            if len(spo_list) == 0:\n                count_empty_line_number += 1\n            if keep_empty_spo_list:\n                result_json_write_f.write(line_json + ""\\n"")\n            else:\n                if len(spo_list) > 0:\n                    result_json_write_f.write(line_json + ""\\n"")\n        print(""empty_line: {}, line: {}, percentage: {:.2f}%"".format(count_empty_line_number, count_line_number,\n                                                                     (count_empty_line_number / count_line_number) * 100))\n\n\nif __name__==\'__main__\':\n    TEST_DATA_DIR = ""bin/subject_object_labeling/sequence_labeling_data/test""\n    # MODEL_OUTPUT_DIR = ""output/sequnce_infer_out/epochs9/ckpt20000""\n    MODEL_OUTPUT_DIR = None\n    OUT_RESULTS_DIR = ""output/final_text_spo_list_result""\n    Competition_Mode = True\n    spo_list_manager = Sorted_relation_and_entity_list_Management(TEST_DATA_DIR, MODEL_OUTPUT_DIR, Competition_Mode=Competition_Mode)\n    spo_list_manager.produce_output_file(OUT_RESULTS_DIR=OUT_RESULTS_DIR, keep_empty_spo_list=True)'"
run_predicate_classification.py,89,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n""""""BERT finetuning runner.""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport csv\nimport os\nimport sys\nimport tensorflow as tf\n\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../bert"")))\nfrom bert import modeling\nfrom bert import optimization\nfrom bert import tokenization\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    ""data_dir"", None,\n    ""The input data dir. Should contain the .tsv files (or other data files) ""\n    ""for the task."")\n\nflags.DEFINE_string(\n    ""bert_config_file"", None,\n    ""The config json file corresponding to the pre-trained BERT model. ""\n    ""This specifies the model architecture."")\n\nflags.DEFINE_string(""task_name"", None, ""The name of the task to train."")\n\nflags.DEFINE_string(""vocab_file"", None,\n                    ""The vocabulary file that the BERT model was trained on."")\n\nflags.DEFINE_string(\n    ""output_dir"", None,\n    ""The output directory where the model checkpoints will be written."")\n\n## Other parameters\n\nflags.DEFINE_string(\n    ""init_checkpoint"", None,\n    ""Initial checkpoint (usually from a pre-trained BERT model)."")\n\nflags.DEFINE_bool(\n    ""do_lower_case"", True,\n    ""Whether to lower case the input text. Should be True for uncased ""\n    ""models and False for cased models."")\n\nflags.DEFINE_integer(\n    ""max_seq_length"", 128,\n    ""The maximum total input sequence length after WordPiece tokenization. ""\n    ""Sequences longer than this will be truncated, and sequences shorter ""\n    ""than this will be padded."")\n\nflags.DEFINE_bool(""do_train"", False, ""Whether to run training."")\n\nflags.DEFINE_bool(""do_eval"", False, ""Whether to run eval on the dev set."")\n\nflags.DEFINE_bool(\n    ""do_predict"", False,\n    ""Whether to run the model in inference mode on the test set."")\n\nflags.DEFINE_integer(""train_batch_size"", 32, ""Total batch size for training."")\n\nflags.DEFINE_integer(""eval_batch_size"", 8, ""Total batch size for eval."")\n\nflags.DEFINE_integer(""predict_batch_size"", 8, ""Total batch size for predict."")\n\nflags.DEFINE_float(""learning_rate"", 5e-5, ""The initial learning rate for Adam."")\n\nflags.DEFINE_float(""num_train_epochs"", 3.0,\n                   ""Total number of training epochs to perform."")\n\nflags.DEFINE_float(\n    ""warmup_proportion"", 0.1,\n    ""Proportion of training to perform linear learning rate warmup for. ""\n    ""E.g., 0.1 = 10% of training."")\n\nflags.DEFINE_integer(""save_checkpoints_steps"", 1000,\n                     ""How often to save the model checkpoint."")\n\nflags.DEFINE_integer(""iterations_per_loop"", 1000,\n                     ""How many steps to make in each estimator call."")\n\nflags.DEFINE_bool(""use_tpu"", False, ""Whether to use TPU or GPU/CPU."")\n\ntf.flags.DEFINE_string(\n    ""tpu_name"", None,\n    ""The Cloud TPU to use for training. This should be either the name ""\n    ""used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 ""\n    ""url."")\n\ntf.flags.DEFINE_string(\n    ""tpu_zone"", None,\n    ""[Optional] GCE zone where the Cloud TPU is located in. If not ""\n    ""specified, we will attempt to automatically detect the GCE project from ""\n    ""metadata."")\n\ntf.flags.DEFINE_string(\n    ""gcp_project"", None,\n    ""[Optional] Project name for the Cloud TPU-enabled project. If not ""\n    ""specified, we will attempt to automatically detect the GCE project from ""\n    ""metadata."")\n\ntf.flags.DEFINE_string(""master"", None, ""[Optional] TensorFlow master URL."")\n\nflags.DEFINE_integer(\n    ""num_tpu_cores"", 8,\n    ""Only used if `use_tpu` is True. Total number of TPU cores to use."")\n\n\nclass InputExample(object):\n    """"""A single training/test example for simple sequence classification.""""""\n\n    def __init__(self, guid, text_a, text_b=None, label=None):\n        """"""Constructs a InputExample.\n\n        Args:\n          guid: Unique id for the example.\n          text_a: string. The untokenized text of the first sequence. For single\n            sequence tasks, only this sequence must be specified.\n          text_b: (Optional) string. The untokenized text of the second sequence.\n            Only must be specified for sequence pair tasks.\n          label: (Optional) string. The label of the example. This should be\n            specified for train and dev examples, but not for test examples.\n        """"""\n        self.guid = guid\n        self.text_a = text_a\n        self.text_b = text_b\n        self.label = label\n\n\nclass PaddingInputExample(object):\n    """"""Fake example so the num input examples is a multiple of the batch size.\n\n    When running eval/predict on the TPU, we need to pad the number of examples\n    to be a multiple of the batch size, because the TPU requires a fixed batch\n    size. The alternative is to drop the last batch, which is bad because it means\n    the entire output data won\'t be generated.\n\n    We use this class instead of `None` because treating `None` as padding\n    battches could cause silent errors.\n    """"""\n\n\nclass InputFeatures(object):\n    """"""A single set of features of data.""""""\n\n    def __init__(self,\n                 input_ids,\n                 input_mask,\n                 segment_ids,\n                 label_ids,\n                 is_real_example=True):\n        self.input_ids = input_ids\n        self.input_mask = input_mask\n        self.segment_ids = segment_ids\n        self.label_ids = label_ids\n        self.is_real_example = is_real_example\n\n\nclass DataProcessor(object):\n    """"""Base class for data converters for sequence classification data sets.""""""\n\n    def get_train_examples(self, data_dir):\n        """"""Gets a collection of `InputExample`s for the train set.""""""\n        raise NotImplementedError()\n\n    def get_dev_examples(self, data_dir):\n        """"""Gets a collection of `InputExample`s for the dev set.""""""\n        raise NotImplementedError()\n\n    def get_test_examples(self, data_dir):\n        """"""Gets a collection of `InputExample`s for prediction.""""""\n        raise NotImplementedError()\n\n    def get_labels(self):\n        """"""Gets the list of labels for this data set.""""""\n        raise NotImplementedError()\n\n    @classmethod\n    def _read_tsv(cls, input_file, quotechar=None):\n        """"""Reads a tab separated value file.""""""\n        with tf.gfile.Open(input_file, ""r"") as f:\n            reader = csv.reader(f, delimiter=""\\t"", quotechar=quotechar)\n            lines = []\n            for line in reader:\n                lines.append(line)\n            return lines\n\n\nclass SKE_2019_Multi_Label_Classification_Processor(DataProcessor):\n    """"""Processor for the SKE_2019 data set""""""\n\n    # SKE_2019 data from http://lic2019.ccf.org.cn/kg\n    def __init__(self):\n        self.language = ""zh""\n\n    def get_examples(self, data_dir):\n        with open(os.path.join(data_dir, ""token_in.txt""), encoding=\'utf-8\') as token_in_f:\n            with open(os.path.join(data_dir, ""predicate_out.txt""), encoding=\'utf-8\') as predicate_out_f:\n                token_in_list = [seq.replace(""\\n"", \'\') for seq in token_in_f.readlines()]\n                predicate_label_list = [seq.replace(""\\n"", \'\') for seq in predicate_out_f.readlines()]\n                assert len(token_in_list) == len(predicate_label_list)\n                examples = list(zip(token_in_list, predicate_label_list))\n                return examples\n\n    def get_train_examples(self, data_dir):\n        return self._create_example(self.get_examples(os.path.join(data_dir, ""train"")), ""train"")\n\n    def get_dev_examples(self, data_dir):\n        return self._create_example(self.get_examples(os.path.join(data_dir, ""valid"")), ""valid"")\n\n    def get_test_examples(self, data_dir):\n        with open(os.path.join(data_dir, os.path.join(""test"", ""token_in.txt"")), encoding=\'utf-8\') as token_in_f:\n            token_in_list = [seq.replace(""\\n"", \'\') for seq in token_in_f.readlines()]\n            examples = token_in_list\n            return self._create_example(examples, ""test"")\n\n    def get_labels(self):\n        return [\'\xe4\xb8\x88\xe5\xa4\xab\', \'\xe4\xb8\x8a\xe6\x98\xa0\xe6\x97\xb6\xe9\x97\xb4\', \'\xe4\xb8\x93\xe4\xb8\x9a\xe4\xbb\xa3\xe7\xa0\x81\', \'\xe4\xb8\xbb\xe6\x8c\x81\xe4\xba\xba\', \'\xe4\xb8\xbb\xe6\xbc\x94\', \'\xe4\xb8\xbb\xe8\xa7\x92\', \'\xe4\xba\xba\xe5\x8f\xa3\xe6\x95\xb0\xe9\x87\x8f\', \'\xe4\xbd\x9c\xe6\x9b\xb2\', \'\xe4\xbd\x9c\xe8\x80\x85\', \'\xe4\xbd\x9c\xe8\xaf\x8d\', \'\xe4\xbf\xae\xe4\xb8\x9a\xe5\xb9\xb4\xe9\x99\x90\', \'\xe5\x87\xba\xe5\x93\x81\xe5\x85\xac\xe5\x8f\xb8\', \'\xe5\x87\xba\xe7\x89\x88\xe7\xa4\xbe\', \'\xe5\x87\xba\xe7\x94\x9f\xe5\x9c\xb0\', \'\xe5\x87\xba\xe7\x94\x9f\xe6\x97\xa5\xe6\x9c\x9f\',\n                \'\xe5\x88\x9b\xe5\xa7\x8b\xe4\xba\xba\', \'\xe5\x88\xb6\xe7\x89\x87\xe4\xba\xba\', \'\xe5\x8d\xa0\xe5\x9c\xb0\xe9\x9d\xa2\xe7\xa7\xaf\', \'\xe5\x8f\xb7\', \'\xe5\x98\x89\xe5\xae\xbe\', \'\xe5\x9b\xbd\xe7\xb1\x8d\', \'\xe5\xa6\xbb\xe5\xad\x90\', \'\xe5\xad\x97\', \'\xe5\xae\x98\xe6\x96\xb9\xe8\xaf\xad\xe8\xa8\x80\', \'\xe5\xaf\xbc\xe6\xbc\x94\', \'\xe6\x80\xbb\xe9\x83\xa8\xe5\x9c\xb0\xe7\x82\xb9\', \'\xe6\x88\x90\xe7\xab\x8b\xe6\x97\xa5\xe6\x9c\x9f\', \'\xe6\x89\x80\xe5\x9c\xa8\xe5\x9f\x8e\xe5\xb8\x82\', \'\xe6\x89\x80\xe5\xb1\x9e\xe4\xb8\x93\xe8\xbe\x91\', \'\xe6\x94\xb9\xe7\xbc\x96\xe8\x87\xaa\',\n                \'\xe6\x9c\x9d\xe4\xbb\xa3\', \'\xe6\xad\x8c\xe6\x89\x8b\', \'\xe6\xaf\x8d\xe4\xba\xb2\', \'\xe6\xaf\x95\xe4\xb8\x9a\xe9\x99\xa2\xe6\xa0\xa1\', \'\xe6\xb0\x91\xe6\x97\x8f\', \'\xe6\xb0\x94\xe5\x80\x99\', \'\xe6\xb3\xa8\xe5\x86\x8c\xe8\xb5\x84\xe6\x9c\xac\', \'\xe6\xb5\xb7\xe6\x8b\x94\', \'\xe7\x88\xb6\xe4\xba\xb2\', \'\xe7\x9b\xae\', \'\xe7\xa5\x96\xe7\xb1\x8d\', \'\xe7\xae\x80\xe7\xa7\xb0\', \'\xe7\xbc\x96\xe5\x89\xa7\', \'\xe8\x91\xa3\xe4\xba\x8b\xe9\x95\xbf\', \'\xe8\xba\xab\xe9\xab\x98\', \'\xe8\xbf\x9e\xe8\xbd\xbd\xe7\xbd\x91\xe7\xab\x99\',\n                \'\xe9\x82\xae\xe6\x94\xbf\xe7\xbc\x96\xe7\xa0\x81\', \'\xe9\x9d\xa2\xe7\xa7\xaf\', \'\xe9\xa6\x96\xe9\x83\xbd\']\n\n    def _create_example(self, lines, set_type):\n        """"""Creates examples for the training and dev sets.""""""\n        examples = []\n        for (i, line) in enumerate(lines):\n            guid = ""%s-%s"" % (set_type, i)\n            if set_type == ""test"":\n                text_str = line\n                predicate_label_str = \'\xe4\xb8\x88\xe5\xa4\xab\'\n            else:\n                text_str = line[0]\n                predicate_label_str = line[1]\n            examples.append(\n                InputExample(guid=guid, text_a=text_str, text_b=None, label=predicate_label_str))\n        return examples\n\n\ndef convert_single_example(ex_index, example, label_list, max_seq_length,\n                           tokenizer):\n    """"""Converts a single `InputExample` into a single `InputFeatures`.""""""\n\n    if isinstance(example, PaddingInputExample):\n        return InputFeatures(\n            input_ids=[0] * max_seq_length,\n            input_mask=[0] * max_seq_length,\n            segment_ids=[0] * max_seq_length,\n            label_ids=[0] * len(label_list),\n            is_real_example=False)\n\n    label_map = {}\n    for (i, label) in enumerate(label_list):\n        label_map[label] = i\n\n    tokens_a = example.text_a.split("" "")\n    tokens_b = None\n    if example.text_b:\n        tokens_b = tokenizer.tokenize(example.text_b)\n\n    if tokens_b:\n        # Modifies `tokens_a` and `tokens_b` in place so that the total\n        # length is less than the specified length.\n        # Account for [CLS], [SEP], [SEP] with ""- 3""\n        _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n    else:\n        # Account for [CLS] and [SEP] with ""- 2""\n        if len(tokens_a) > max_seq_length - 2:\n            tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n    # The convention in BERT is:\n    # (a) For sequence pairs:\n    #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n    #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n    # (b) For single sequences:\n    #  tokens:   [CLS] the dog is hairy . [SEP]\n    #  type_ids: 0     0   0   0  0     0 0\n    #\n    # Where ""type_ids"" are used to indicate whether this is the first\n    # sequence or the second sequence. The embedding vectors for `type=0` and\n    # `type=1` were learned during pre-training and are added to the wordpiece\n    # embedding vector (and position vector). This is not *strictly* necessary\n    # since the [SEP] token unambiguously separates the sequences, but it makes\n    # it easier for the model to learn the concept of sequences.\n    #\n    # For classification tasks, the first vector (corresponding to [CLS]) is\n    # used as the ""sentence vector"". Note that this only makes sense because\n    # the entire model is fine-tuned.\n    tokens = []\n    segment_ids = []\n    tokens.append(""[CLS]"")\n    segment_ids.append(0)\n    for token in tokens_a:\n        tokens.append(token)\n        segment_ids.append(0)\n    tokens.append(""[SEP]"")\n    segment_ids.append(0)\n\n    if tokens_b:\n        for token in tokens_b:\n            tokens.append(token)\n            segment_ids.append(1)\n        tokens.append(""[SEP]"")\n        segment_ids.append(1)\n\n    input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n    # The mask has 1 for real tokens and 0 for padding tokens. Only real\n    # tokens are attended to.\n    input_mask = [1] * len(input_ids)\n\n    # Zero-pad up to the sequence length.\n    while len(input_ids) < max_seq_length:\n        input_ids.append(0)\n        input_mask.append(0)\n        segment_ids.append(0)\n\n    assert len(input_ids) == max_seq_length\n    assert len(input_mask) == max_seq_length\n    assert len(segment_ids) == max_seq_length\n\n    label_list = example.label.split("" "")\n    label_ids = _predicate_label_to_id(label_list, label_map)\n\n    if ex_index < 5:\n        tf.logging.info(""*** Example ***"")\n        tf.logging.info(""guid: %s"" % (example.guid))\n        tf.logging.info(""tokens: %s"" % "" "".join(\n            [tokenization.printable_text(x) for x in tokens]))\n        tf.logging.info(""input_ids: %s"" % "" "".join([str(x) for x in input_ids]))\n        tf.logging.info(""input_mask: %s"" % "" "".join([str(x) for x in input_mask]))\n        tf.logging.info(""segment_ids: %s"" % "" "".join([str(x) for x in segment_ids]))\n        tf.logging.info(""label_ids: %s"" % "" "".join([str(x) for x in label_ids]))\n\n    feature = InputFeatures(\n        input_ids=input_ids,\n        input_mask=input_mask,\n        segment_ids=segment_ids,\n        label_ids=label_ids,\n        is_real_example=True)\n    return feature\n\ndef _predicate_label_to_id(predicate_label, predicate_label_map):\n    predicate_label_map_length = len(predicate_label_map)\n    predicate_label_ids = [0] * predicate_label_map_length\n    for label in predicate_label:\n        predicate_label_ids[predicate_label_map[label]] = 1\n    return predicate_label_ids\n\ndef file_based_convert_examples_to_features(\n        examples, label_list, max_seq_length, tokenizer, output_file):\n    """"""Convert a set of `InputExample`s to a TFRecord file.""""""\n\n    writer = tf.python_io.TFRecordWriter(output_file)\n\n    for (ex_index, example) in enumerate(examples):\n        if ex_index % 10000 == 0:\n            tf.logging.info(""Writing example %d of %d"" % (ex_index, len(examples)))\n\n        feature = convert_single_example(ex_index, example, label_list,\n                                         max_seq_length, tokenizer)\n\n        def create_int_feature(values):\n            f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n            return f\n\n        features = collections.OrderedDict()\n        features[""input_ids""] = create_int_feature(feature.input_ids)\n        features[""input_mask""] = create_int_feature(feature.input_mask)\n        features[""segment_ids""] = create_int_feature(feature.segment_ids)\n        features[""label_ids""] = create_int_feature(feature.label_ids)\n        features[""is_real_example""] = create_int_feature(\n            [int(feature.is_real_example)])\n\n        tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n        writer.write(tf_example.SerializeToString())\n    writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length, label_length,\n                                is_training, drop_remainder):\n    """"""Creates an `input_fn` closure to be passed to TPUEstimator.""""""\n\n    name_to_features = {\n        ""input_ids"": tf.FixedLenFeature([seq_length], tf.int64),\n        ""input_mask"": tf.FixedLenFeature([seq_length], tf.int64),\n        ""segment_ids"": tf.FixedLenFeature([seq_length], tf.int64),\n        ""label_ids"": tf.FixedLenFeature([label_length], tf.int64),\n        ""is_real_example"": tf.FixedLenFeature([], tf.int64),\n    }\n\n    def _decode_record(record, name_to_features):\n        """"""Decodes a record to a TensorFlow example.""""""\n        example = tf.parse_single_example(record, name_to_features)\n\n        # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n        # So cast all int64 to int32.\n        for name in list(example.keys()):\n            t = example[name]\n            if t.dtype == tf.int64:\n                t = tf.to_int32(t)\n            example[name] = t\n\n        return example\n\n    def input_fn(params):\n        """"""The actual input function.""""""\n        batch_size = params[""batch_size""]\n\n        # For training, we want a lot of parallel reading and shuffling.\n        # For eval, we want no shuffling and parallel reading doesn\'t matter.\n        d = tf.data.TFRecordDataset(input_file)\n        if is_training:\n            d = d.repeat()\n            d = d.shuffle(buffer_size=100)\n\n        d = d.apply(\n            tf.contrib.data.map_and_batch(\n                lambda record: _decode_record(record, name_to_features),\n                batch_size=batch_size,\n                drop_remainder=drop_remainder))\n\n        return d\n\n    return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n    """"""Truncates a sequence pair in place to the maximum length.""""""\n\n    # This is a simple heuristic which will always truncate the longer sequence\n    # one token at a time. This makes more sense than truncating an equal percent\n    # of tokens from each, since if one sequence is very short then each token\n    # that\'s truncated likely contains more information than a longer sequence.\n    while True:\n        total_length = len(tokens_a) + len(tokens_b)\n        if total_length <= max_length:\n            break\n        if len(tokens_a) > len(tokens_b):\n            tokens_a.pop()\n        else:\n            tokens_b.pop()\n\n\ndef create_model(bert_config, is_training, input_ids, input_mask, segment_ids,\n                 labels, num_labels, use_one_hot_embeddings):\n    """"""Creates a classification model.""""""\n    model = modeling.BertModel(\n        config=bert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n\n    # In the demo, we are doing a simple classification task on the entire\n    # segment.\n    #\n    # If you want to use the token-level output, use model.get_sequence_output()\n    # instead.\n    output_layer = model.get_pooled_output()\n\n    hidden_size = output_layer.shape[-1].value\n\n    output_weights = tf.get_variable(\n        ""output_weights"", [num_labels, hidden_size],\n        initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n    output_bias = tf.get_variable(\n        ""output_bias"", [num_labels], initializer=tf.zeros_initializer())\n\n    with tf.variable_scope(""loss""):\n        if is_training:\n            # I.e., 0.1 dropout\n            output_layer = tf.nn.dropout(output_layer, keep_prob=0.9)\n\n        logits_wx = tf.matmul(output_layer, output_weights, transpose_b=True)\n        logits = tf.nn.bias_add(logits_wx, output_bias)\n        probabilities = tf.sigmoid(logits)\n        label_ids = tf.cast(labels, tf.float32)\n        per_example_loss = tf.reduce_sum(\n            tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=label_ids), axis=-1)\n        loss = tf.reduce_mean(per_example_loss)\n\n        return loss, per_example_loss, logits, probabilities\n\n\ndef model_fn_builder(bert_config, num_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n    """"""Returns `model_fn` closure for TPUEstimator.""""""\n\n    def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n        """"""The `model_fn` for TPUEstimator.""""""\n\n        tf.logging.info(""*** Features ***"")\n        for name in sorted(features.keys()):\n            tf.logging.info(""  name = %s, shape = %s"" % (name, features[name].shape))\n\n        input_ids = features[""input_ids""]\n        input_mask = features[""input_mask""]\n        segment_ids = features[""segment_ids""]\n        label_ids = features[""label_ids""]\n        is_real_example = None\n        if ""is_real_example"" in features:\n            is_real_example = tf.cast(features[""is_real_example""], dtype=tf.float32)\n        else:\n            is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n        is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n        (total_loss, per_example_loss, logits, probabilities) = create_model(\n            bert_config, is_training, input_ids, input_mask, segment_ids, label_ids,\n            num_labels, use_one_hot_embeddings)\n\n        tvars = tf.trainable_variables()\n        initialized_variable_names = {}\n        scaffold_fn = None\n        if init_checkpoint:\n            (assignment_map, initialized_variable_names\n             ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n            if use_tpu:\n\n                def tpu_scaffold():\n                    tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n                    return tf.train.Scaffold()\n\n                scaffold_fn = tpu_scaffold\n            else:\n                tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n        tf.logging.info(""**** Trainable Variables ****"")\n        for var in tvars:\n            init_string = """"\n            if var.name in initialized_variable_names:\n                init_string = "", *INIT_FROM_CKPT*""\n            tf.logging.info(""  name = %s, shape = %s%s"", var.name, var.shape,\n                            init_string)\n\n        output_spec = None\n        if mode == tf.estimator.ModeKeys.TRAIN:\n\n            train_op = optimization.create_optimizer(\n                total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n            output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n                mode=mode,\n                loss=total_loss,\n                train_op=train_op,\n                scaffold_fn=scaffold_fn)\n        elif mode == tf.estimator.ModeKeys.EVAL:\n\n            def metric_fn(per_example_loss, label_ids, probabilities, is_real_example):\n                predict_ids = tf.cast(probabilities > 0.5, tf.int32)\n                label_ids = tf.cast(label_ids, tf.int32)\n                elements_equal = tf.cast(tf.equal(predict_ids, label_ids), tf.int32)\n                # change [batch_size, class_numbers] to [1, batch_size]\n                row_predict_ids = tf.reduce_sum(elements_equal, -1)\n                row_label_ids = tf.reduce_sum(tf.ones_like(label_ids), -1)\n                accuracy = tf.metrics.accuracy(\n                    labels=row_label_ids, predictions=row_predict_ids)\n                loss = tf.metrics.mean(values=per_example_loss, weights=is_real_example)\n                return {\n                    ""eval_accuracy"": accuracy,\n                    ""eval_loss"": loss,\n                }\n\n            eval_metrics = (metric_fn,\n                            [per_example_loss, label_ids, probabilities, is_real_example])\n            output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n                mode=mode,\n                loss=total_loss,\n                eval_metrics=eval_metrics,\n                scaffold_fn=scaffold_fn)\n        else:\n            output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n                mode=mode,\n                predictions={""probabilities"": probabilities},\n                scaffold_fn=scaffold_fn)\n        return output_spec\n\n    return model_fn\n\n\ndef main(_):\n    tf.logging.set_verbosity(tf.logging.INFO)\n\n    processors = {\n        ""ske_2019"": SKE_2019_Multi_Label_Classification_Processor,\n    }\n\n    tokenization.validate_case_matches_checkpoint(FLAGS.do_lower_case,\n                                                  FLAGS.init_checkpoint)\n\n    if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n        raise ValueError(\n            ""At least one of `do_train`, `do_eval` or `do_predict\' must be True."")\n\n    bert_config = modeling.BertConfig.from_json_file(FLAGS.bert_config_file)\n\n    if FLAGS.max_seq_length > bert_config.max_position_embeddings:\n        raise ValueError(\n            ""Cannot use sequence length %d because the BERT model ""\n            ""was only trained up to sequence length %d"" %\n            (FLAGS.max_seq_length, bert_config.max_position_embeddings))\n\n    tf.gfile.MakeDirs(FLAGS.output_dir)\n\n    task_name = FLAGS.task_name.lower()\n\n    if task_name not in processors:\n        raise ValueError(""Task not found: %s"" % (task_name))\n\n    processor = processors[task_name]()\n\n    label_list = processor.get_labels()\n    label_length = len(label_list)\n\n    tokenizer = tokenization.FullTokenizer(\n        vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case)\n\n    tpu_cluster_resolver = None\n    if FLAGS.use_tpu and FLAGS.tpu_name:\n        tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n            FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n    is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n    run_config = tf.contrib.tpu.RunConfig(\n        cluster=tpu_cluster_resolver,\n        master=FLAGS.master,\n        model_dir=FLAGS.output_dir,\n        save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n        tpu_config=tf.contrib.tpu.TPUConfig(\n            iterations_per_loop=FLAGS.iterations_per_loop,\n            num_shards=FLAGS.num_tpu_cores,\n            per_host_input_for_training=is_per_host))\n\n    train_examples = None\n    num_train_steps = None\n    num_warmup_steps = None\n    if FLAGS.do_train:\n        train_examples = processor.get_train_examples(FLAGS.data_dir)\n        num_train_steps = int(\n            len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)\n        num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n    model_fn = model_fn_builder(\n        bert_config=bert_config,\n        num_labels=len(label_list),\n        init_checkpoint=FLAGS.init_checkpoint,\n        learning_rate=FLAGS.learning_rate,\n        num_train_steps=num_train_steps,\n        num_warmup_steps=num_warmup_steps,\n        use_tpu=FLAGS.use_tpu,\n        use_one_hot_embeddings=FLAGS.use_tpu)\n\n    # If TPU is not available, this will fall back to normal Estimator on CPU\n    # or GPU.\n    estimator = tf.contrib.tpu.TPUEstimator(\n        use_tpu=FLAGS.use_tpu,\n        model_fn=model_fn,\n        config=run_config,\n        train_batch_size=FLAGS.train_batch_size,\n        eval_batch_size=FLAGS.eval_batch_size,\n        predict_batch_size=FLAGS.predict_batch_size)\n\n    if FLAGS.do_train:\n        train_file = os.path.join(FLAGS.output_dir, ""train.tf_record"")\n        file_based_convert_examples_to_features(\n            train_examples, label_list, FLAGS.max_seq_length, tokenizer, train_file)\n        tf.logging.info(""***** Running training *****"")\n        tf.logging.info(""  Num examples = %d"", len(train_examples))\n        tf.logging.info(""  Batch size = %d"", FLAGS.train_batch_size)\n        tf.logging.info(""  Num steps = %d"", num_train_steps)\n        train_input_fn = file_based_input_fn_builder(\n            input_file=train_file,\n            seq_length=FLAGS.max_seq_length,\n            label_length=label_length,\n            is_training=True,\n            drop_remainder=True)\n        estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n    if FLAGS.do_eval:\n        eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n        num_actual_eval_examples = len(eval_examples)\n        if FLAGS.use_tpu:\n            # TPU requires a fixed batch size for all batches, therefore the number\n            # of examples must be a multiple of the batch size, or else examples\n            # will get dropped. So we pad with fake examples which are ignored\n            # later on. These do NOT count towards the metric (all tf.metrics\n            # support a per-instance weight, and these get a weight of 0.0).\n            while len(eval_examples) % FLAGS.eval_batch_size != 0:\n                eval_examples.append(PaddingInputExample())\n\n        eval_file = os.path.join(FLAGS.output_dir, ""eval.tf_record"")\n        file_based_convert_examples_to_features(\n            eval_examples, label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n\n        tf.logging.info(""***** Running evaluation *****"")\n        tf.logging.info(""  Num examples = %d (%d actual, %d padding)"",\n                        len(eval_examples), num_actual_eval_examples,\n                        len(eval_examples) - num_actual_eval_examples)\n        tf.logging.info(""  Batch size = %d"", FLAGS.eval_batch_size)\n\n        # This tells the estimator to run through the entire set.\n        eval_steps = None\n        # However, if running eval on the TPU, you will need to specify the\n        # number of steps.\n        if FLAGS.use_tpu:\n            assert len(eval_examples) % FLAGS.eval_batch_size == 0\n            eval_steps = int(len(eval_examples) // FLAGS.eval_batch_size)\n\n        eval_drop_remainder = True if FLAGS.use_tpu else False\n        eval_input_fn = file_based_input_fn_builder(\n            input_file=eval_file,\n            seq_length=FLAGS.max_seq_length,\n            label_length=label_length,\n            is_training=False,\n            drop_remainder=eval_drop_remainder)\n\n        result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n\n        output_eval_file = os.path.join(FLAGS.output_dir, ""eval_results.txt"")\n        with tf.gfile.GFile(output_eval_file, ""w"") as writer:\n            tf.logging.info(""***** Eval results *****"")\n            for key in sorted(result.keys()):\n                tf.logging.info(""  %s = %s"", key, str(result[key]))\n                writer.write(""%s = %s\\n"" % (key, str(result[key])))\n\n    if FLAGS.do_predict:\n        predict_examples = processor.get_test_examples(FLAGS.data_dir)\n        num_actual_predict_examples = len(predict_examples)\n        if FLAGS.use_tpu:\n            # TPU requires a fixed batch size for all batches, therefore the number\n            # of examples must be a multiple of the batch size, or else examples\n            # will get dropped. So we pad with fake examples which are ignored\n            # later on.\n            while len(predict_examples) % FLAGS.predict_batch_size != 0:\n                predict_examples.append(PaddingInputExample())\n\n        predict_file = os.path.join(FLAGS.output_dir, ""predict.tf_record"")\n        file_based_convert_examples_to_features(predict_examples, label_list,\n                                                FLAGS.max_seq_length, tokenizer,\n                                                predict_file)\n\n        tf.logging.info(""***** Running prediction*****"")\n        tf.logging.info(""  Num examples = %d (%d actual, %d padding)"",\n                        len(predict_examples), num_actual_predict_examples,\n                        len(predict_examples) - num_actual_predict_examples)\n        tf.logging.info(""  Batch size = %d"", FLAGS.predict_batch_size)\n\n        predict_drop_remainder = True if FLAGS.use_tpu else False\n        predict_input_fn = file_based_input_fn_builder(\n            input_file=predict_file,\n            seq_length=FLAGS.max_seq_length,\n            label_length=label_length,\n            is_training=False,\n            drop_remainder=predict_drop_remainder)\n\n        result = estimator.predict(input_fn=predict_input_fn)\n\n        output_score_value_file = os.path.join(FLAGS.output_dir, ""predicate_score_value.txt"")\n        output_predicate_predict_file = os.path.join(FLAGS.output_dir, ""predicate_predict.txt"")\n        with tf.gfile.GFile(output_score_value_file, ""w"") as score_value_writer:\n            with tf.gfile.GFile(output_predicate_predict_file, ""w"") as predicate_predict_writer:\n                num_written_lines = 0\n                tf.logging.info(""***** Predict results *****"")\n                for (i, prediction) in enumerate(result):\n                    probabilities = prediction[""probabilities""]\n                    if i >= num_actual_predict_examples:\n                        break\n                    output_line_score_value = "" "".join(\n                        str(class_probability)\n                        for class_probability in probabilities) + ""\\n""\n                    predicate_predict = []\n                    for idx, class_probability in enumerate(probabilities):\n                        if class_probability > 0.5:\n                            predicate_predict.append(label_list[idx])\n                    output_line_predicate_predict = "" "".join(predicate_predict) + ""\\n""\n                    predicate_predict_writer.write(output_line_predicate_predict)\n                    score_value_writer.write(output_line_score_value)\n                    num_written_lines += 1\n        assert num_written_lines == num_actual_predict_examples\n\n\nif __name__ == ""__main__"":\n    flags.mark_flag_as_required(""data_dir"")\n    flags.mark_flag_as_required(""task_name"")\n    flags.mark_flag_as_required(""vocab_file"")\n    flags.mark_flag_as_required(""bert_config_file"")\n    flags.mark_flag_as_required(""output_dir"")\n    tf.app.run()\n'"
run_sequnce_labeling.py,102,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n""""""BERT finetuning runner.""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport csv\nimport os\nimport sys\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../bert"")))\nfrom bert import modeling\nfrom bert import optimization\nfrom bert import tokenization\nfrom bert import tf_metrics\nimport tensorflow as tf\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    ""data_dir"", None,\n    ""The input data dir. Should contain the .tsv files (or other data files) ""\n    ""for the task."")\n\nflags.DEFINE_string(\n    ""bert_config_file"", None,\n    ""The config json file corresponding to the pre-trained BERT model. ""\n    ""This specifies the model architecture."")\n\nflags.DEFINE_string(""task_name"", None, ""The name of the task to train."")\n\nflags.DEFINE_string(""vocab_file"", None,\n                    ""The vocabulary file that the BERT model was trained on."")\n\nflags.DEFINE_string(\n    ""output_dir"", None,\n    ""The output directory where the model checkpoints will be written."")\n\n## Other parameters\n\nflags.DEFINE_string(\n    ""init_checkpoint"", None,\n    ""Initial checkpoint (usually from a pre-trained BERT model)."")\n\nflags.DEFINE_bool(\n    ""do_lower_case"", True,\n    ""Whether to lower case the input text. Should be True for uncased ""\n    ""models and False for cased models."")\n\nflags.DEFINE_integer(\n    ""max_seq_length"", 128,\n    ""The maximum total input sequence length after WordPiece tokenization. ""\n    ""Sequences longer than this will be truncated, and sequences shorter ""\n    ""than this will be padded."")\n\nflags.DEFINE_bool(""do_train"", False, ""Whether to run training."")\n\nflags.DEFINE_bool(""do_eval"", False, ""Whether to run eval on the dev set."")\n\nflags.DEFINE_bool(\n    ""do_predict"", False,\n    ""Whether to run the model in inference mode on the test set."")\n\nflags.DEFINE_integer(""train_batch_size"", 32, ""Total batch size for training."")\n\nflags.DEFINE_integer(""eval_batch_size"", 8, ""Total batch size for eval."")\n\nflags.DEFINE_integer(""predict_batch_size"", 8, ""Total batch size for predict."")\n\nflags.DEFINE_float(""learning_rate"", 5e-5, ""The initial learning rate for Adam."")\n\nflags.DEFINE_float(""num_train_epochs"", 3.0,\n                   ""Total number of training epochs to perform."")\n\nflags.DEFINE_float(\n    ""warmup_proportion"", 0.1,\n    ""Proportion of training to perform linear learning rate warmup for. ""\n    ""E.g., 0.1 = 10% of training."")\n\nflags.DEFINE_integer(""save_checkpoints_steps"", 1000,\n                     ""How often to save the model checkpoint."")\n\nflags.DEFINE_integer(""iterations_per_loop"", 1000,\n                     ""How many steps to make in each estimator call."")\n\nflags.DEFINE_bool(""use_tpu"", False, ""Whether to use TPU or GPU/CPU."")\n\ntf.flags.DEFINE_string(\n    ""tpu_name"", None,\n    ""The Cloud TPU to use for training. This should be either the name ""\n    ""used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 ""\n    ""url."")\n\ntf.flags.DEFINE_string(\n    ""tpu_zone"", None,\n    ""[Optional] GCE zone where the Cloud TPU is located in. If not ""\n    ""specified, we will attempt to automatically detect the GCE project from ""\n    ""metadata."")\n\ntf.flags.DEFINE_string(\n    ""gcp_project"", None,\n    ""[Optional] Project name for the Cloud TPU-enabled project. If not ""\n    ""specified, we will attempt to automatically detect the GCE project from ""\n    ""metadata."")\n\ntf.flags.DEFINE_string(""master"", None, ""[Optional] TensorFlow master URL."")\n\nflags.DEFINE_integer(\n    ""num_tpu_cores"", 8,\n    ""Only used if `use_tpu` is True. Total number of TPU cores to use."")\n\n\nclass InputExample(object):\n    """"""A single training/test example for simple sequence classification.""""""\n\n    def __init__(self, guid, text_token, token_label):\n        """"""Constructs a InputExample.\n\n        Args:\n          guid: Unique id for the example.\n          text_a: string. The untokenized text of the first sequence. For single\n            sequence tasks, only this sequence must be specified.\n          text_b: (Optional) string. The untokenized text of the second sequence.\n            Only must be specified for sequence pair tasks.\n          label: (Optional) string. The label of the example. This should be\n            specified for train and dev examples, but not for test examples.\n        """"""\n        self.guid = guid\n        self.text_token = text_token\n        self.token_label = token_label\n\n\nclass PaddingInputExample(object):\n    """"""Fake example so the num input examples is a multiple of the batch size.\n\n    When running eval/predict on the TPU, we need to pad the number of examples\n    to be a multiple of the batch size, because the TPU requires a fixed batch\n    size. The alternative is to drop the last batch, which is bad because it means\n    the entire output data won\'t be generated.\n\n    We use this class instead of `None` because treating `None` as padding\n    battches could cause silent errors.\n    """"""\n\n\nclass InputFeatures(object):\n    """"""A single set of features of data.""""""\n\n    def __init__(self,\n                 input_ids,\n                 input_mask,\n                 segment_ids,\n                 token_label_ids,\n                 predicate_label_id,\n                 is_real_example=True):\n        self.input_ids = input_ids\n        self.input_mask = input_mask\n        self.segment_ids = segment_ids\n        self.token_label_ids = token_label_ids\n        self.predicate_label_id = predicate_label_id\n        self.is_real_example = is_real_example\n\n\nclass DataProcessor(object):\n    """"""Base class for data converters for sequence classification data sets.""""""\n\n    def get_train_examples(self, data_dir):\n        """"""Gets a collection of `InputExample`s for the train set.""""""\n        raise NotImplementedError()\n\n    def get_dev_examples(self, data_dir):\n        """"""Gets a collection of `InputExample`s for the dev set.""""""\n        raise NotImplementedError()\n\n    def get_test_examples(self, data_dir):\n        """"""Gets a collection of `InputExample`s for prediction.""""""\n        raise NotImplementedError()\n\n    def get_labels(self):\n        """"""Gets the list of labels for this data set.""""""\n        raise NotImplementedError()\n\n    @classmethod\n    def _read_tsv(cls, input_file, quotechar=None):\n        """"""Reads a tab separated value file.""""""\n        with tf.gfile.Open(input_file, ""r"") as f:\n            reader = csv.reader(f, delimiter=""\\t"", quotechar=quotechar)\n            lines = []\n            for line in reader:\n                lines.append(line)\n            return lines\n\n\nclass SKE_2019_Sequence_labeling_Processor(DataProcessor):\n    """"""Processor for the SKE_2019 data set""""""\n\n    # SKE_2019 data from http://lic2019.ccf.org.cn/kg\n\n    def __init__(self):\n        self.language = ""zh""\n\n    def get_examples(self, data_dir):\n        with open(os.path.join(data_dir, ""token_in.txt""), encoding=\'utf-8\') as token_in_f:\n            with open(os.path.join(data_dir, ""token_label_and_one_prdicate_out.txt""), encoding=\'utf-8\') as token_label_out_f:\n                    token_in_list = [seq.replace(""\\n"", \'\') for seq in token_in_f.readlines()]\n                    token_label_out_list = [seq.replace(""\\n"", \'\') for seq in token_label_out_f.readlines()]\n                    assert len(token_in_list) == len(token_label_out_list)\n                    examples = list(zip(token_in_list, token_label_out_list))\n                    return examples\n\n    def get_train_examples(self, data_dir):\n        return self._create_example(self.get_examples(os.path.join(data_dir, ""train"")), ""train"")\n\n    def get_dev_examples(self, data_dir):\n        return self._create_example(self.get_examples(os.path.join(data_dir, ""valid"")), ""valid"")\n\n    def get_test_examples(self, data_dir):\n        with open(os.path.join(data_dir, os.path.join(""test"", ""token_in_and_one_predicate.txt"")), encoding=\'utf-8\') as token_in_f:\n            token_in_list = [seq.replace(""\\n"", \'\') for seq in token_in_f.readlines()]\n            examples = token_in_list\n            return self._create_example(examples, ""test"")\n\n\n    def get_token_labels(self):\n        BIO_token_labels = [""[Padding]"", ""[category]"", ""[##WordPiece]"", ""[CLS]"", ""[SEP]"", ""B-SUB"", ""I-SUB"", ""B-OBJ"", ""I-OBJ"", ""O""]  #id 0 --> [Paddding]\n        return BIO_token_labels\n\n    def get_predicate_labels(self):\n        return [\'\xe4\xb8\x88\xe5\xa4\xab\', \'\xe4\xb8\x8a\xe6\x98\xa0\xe6\x97\xb6\xe9\x97\xb4\', \'\xe4\xb8\x93\xe4\xb8\x9a\xe4\xbb\xa3\xe7\xa0\x81\', \'\xe4\xb8\xbb\xe6\x8c\x81\xe4\xba\xba\', \'\xe4\xb8\xbb\xe6\xbc\x94\', \'\xe4\xb8\xbb\xe8\xa7\x92\', \'\xe4\xba\xba\xe5\x8f\xa3\xe6\x95\xb0\xe9\x87\x8f\', \'\xe4\xbd\x9c\xe6\x9b\xb2\', \'\xe4\xbd\x9c\xe8\x80\x85\', \'\xe4\xbd\x9c\xe8\xaf\x8d\', \'\xe4\xbf\xae\xe4\xb8\x9a\xe5\xb9\xb4\xe9\x99\x90\', \'\xe5\x87\xba\xe5\x93\x81\xe5\x85\xac\xe5\x8f\xb8\', \'\xe5\x87\xba\xe7\x89\x88\xe7\xa4\xbe\', \'\xe5\x87\xba\xe7\x94\x9f\xe5\x9c\xb0\', \'\xe5\x87\xba\xe7\x94\x9f\xe6\x97\xa5\xe6\x9c\x9f\', \'\xe5\x88\x9b\xe5\xa7\x8b\xe4\xba\xba\', \'\xe5\x88\xb6\xe7\x89\x87\xe4\xba\xba\', \'\xe5\x8d\xa0\xe5\x9c\xb0\xe9\x9d\xa2\xe7\xa7\xaf\', \'\xe5\x8f\xb7\', \'\xe5\x98\x89\xe5\xae\xbe\', \'\xe5\x9b\xbd\xe7\xb1\x8d\', \'\xe5\xa6\xbb\xe5\xad\x90\', \'\xe5\xad\x97\', \'\xe5\xae\x98\xe6\x96\xb9\xe8\xaf\xad\xe8\xa8\x80\', \'\xe5\xaf\xbc\xe6\xbc\x94\', \'\xe6\x80\xbb\xe9\x83\xa8\xe5\x9c\xb0\xe7\x82\xb9\', \'\xe6\x88\x90\xe7\xab\x8b\xe6\x97\xa5\xe6\x9c\x9f\', \'\xe6\x89\x80\xe5\x9c\xa8\xe5\x9f\x8e\xe5\xb8\x82\', \'\xe6\x89\x80\xe5\xb1\x9e\xe4\xb8\x93\xe8\xbe\x91\', \'\xe6\x94\xb9\xe7\xbc\x96\xe8\x87\xaa\', \'\xe6\x9c\x9d\xe4\xbb\xa3\', \'\xe6\xad\x8c\xe6\x89\x8b\', \'\xe6\xaf\x8d\xe4\xba\xb2\', \'\xe6\xaf\x95\xe4\xb8\x9a\xe9\x99\xa2\xe6\xa0\xa1\', \'\xe6\xb0\x91\xe6\x97\x8f\', \'\xe6\xb0\x94\xe5\x80\x99\', \'\xe6\xb3\xa8\xe5\x86\x8c\xe8\xb5\x84\xe6\x9c\xac\', \'\xe6\xb5\xb7\xe6\x8b\x94\', \'\xe7\x88\xb6\xe4\xba\xb2\', \'\xe7\x9b\xae\', \'\xe7\xa5\x96\xe7\xb1\x8d\', \'\xe7\xae\x80\xe7\xa7\xb0\', \'\xe7\xbc\x96\xe5\x89\xa7\', \'\xe8\x91\xa3\xe4\xba\x8b\xe9\x95\xbf\', \'\xe8\xba\xab\xe9\xab\x98\', \'\xe8\xbf\x9e\xe8\xbd\xbd\xe7\xbd\x91\xe7\xab\x99\', \'\xe9\x82\xae\xe6\x94\xbf\xe7\xbc\x96\xe7\xa0\x81\', \'\xe9\x9d\xa2\xe7\xa7\xaf\', \'\xe9\xa6\x96\xe9\x83\xbd\']\n\n    def _create_example(self, lines, set_type):\n        """"""Creates examples for the training and dev sets.""""""\n        examples = []\n        for (i, line) in enumerate(lines):\n            guid = ""%s-%s"" % (set_type, i)\n            if set_type == ""test"":\n                text_token = line\n                token_label = None\n            else:\n                text_token = line[0]\n                token_label = line[1]\n            examples.append(\n                InputExample(guid=guid, text_token=text_token, token_label=token_label))\n        return examples\n\n\ndef convert_single_example(ex_index, example, token_label_list, predicate_label_list, max_seq_length,\n                           tokenizer):\n    """"""Converts a single `InputExample` into a single `InputFeatures`.""""""\n    if isinstance(example, PaddingInputExample):\n        return InputFeatures(\n            input_ids=[0] * max_seq_length,\n            input_mask=[0] * max_seq_length,\n            segment_ids=[0] * max_seq_length,\n            token_label_ids=[0] * max_seq_length,\n            predicate_label_id = [0],\n            is_real_example=False)\n\n    token_label_map = {}\n    for (i, label) in enumerate(token_label_list):\n        token_label_map[label] = i\n\n    predicate_label_map = {}\n    for (i, label) in enumerate(predicate_label_list):\n        predicate_label_map[label] = i\n\n    text_token = example.text_token.split(""\\t"")[0].split("" "")\n    if example.token_label is not None:\n        token_label = example.token_label.split(""\\t"")[0].split("" "")\n    else:\n        token_label = [""O""] * len(text_token)\n    assert len(text_token) == len(token_label)\n\n    text_predicate = example.text_token.split(""\\t"")[1]\n    if example.token_label is not None:\n        token_predicate = example.token_label.split(""\\t"")[1]\n    else:\n        token_predicate = text_predicate\n    assert text_predicate == token_predicate\n\n    tokens_b = [text_predicate] * len(text_token)\n    predicate_id = predicate_label_map[text_predicate]\n\n\n    _truncate_seq_pair(text_token, tokens_b, max_seq_length - 3)\n\n    tokens = []\n    token_label_ids = []\n    segment_ids = []\n    tokens.append(""[CLS]"")\n    segment_ids.append(0)\n    token_label_ids.append(token_label_map[""[CLS]""])\n\n    for token, label in zip(text_token, token_label):\n        tokens.append(token)\n        segment_ids.append(0)\n        token_label_ids.append(token_label_map[label])\n\n    tokens.append(""[SEP]"")\n    segment_ids.append(0)\n    token_label_ids.append(token_label_map[""[SEP]""])\n\n    input_ids = tokenizer.convert_tokens_to_ids(tokens)\n    #bert_tokenizer.convert_tokens_to_ids([""[SEP]""]) --->[102]\n    bias = 1 #1-100 dict index not used\n    for token in tokens_b:\n      input_ids.append(predicate_id + bias) #add  bias for different from word dict\n      segment_ids.append(1)\n      token_label_ids.append(token_label_map[""[category]""])\n\n    input_ids.append(tokenizer.convert_tokens_to_ids([""[SEP]""])[0]) #102\n    segment_ids.append(1)\n    token_label_ids.append(token_label_map[""[SEP]""])\n\n    # The mask has 1 for real tokens and 0 for padding tokens. Only real\n    # tokens are attended to.\n    input_mask = [1] * len(input_ids)\n\n    # Zero-pad up to the sequence length.\n    while len(input_ids) < max_seq_length:\n        input_ids.append(0)\n        input_mask.append(0)\n        segment_ids.append(0)\n        token_label_ids.append(0)\n        tokens.append(""[Padding]"")\n\n    assert len(input_ids) == max_seq_length\n    assert len(input_mask) == max_seq_length\n    assert len(segment_ids) == max_seq_length\n    assert len(token_label_ids) == max_seq_length\n\n    if ex_index < 5:\n        tf.logging.info(""*** Example ***"")\n        tf.logging.info(""guid: %s"" % (example.guid))\n        tf.logging.info(""tokens: %s"" % "" "".join(\n            [tokenization.printable_text(x) for x in tokens]))\n        tf.logging.info(""input_ids: %s"" % "" "".join([str(x) for x in input_ids]))\n        tf.logging.info(""input_mask: %s"" % "" "".join([str(x) for x in input_mask]))\n        tf.logging.info(""segment_ids: %s"" % "" "".join([str(x) for x in segment_ids]))\n        tf.logging.info(""token_label_ids: %s"" % "" "".join([str(x) for x in token_label_ids]))\n        tf.logging.info(""predicate_id: %s"" % str(predicate_id))\n\n    feature = InputFeatures(\n        input_ids=input_ids,\n        input_mask=input_mask,\n        segment_ids=segment_ids,\n        token_label_ids=token_label_ids,\n        predicate_label_id=[predicate_id],\n        is_real_example=True)\n    return feature\n\n\ndef file_based_convert_examples_to_features(\n        examples, token_label_list, predicate_label_list, max_seq_length, tokenizer, output_file):\n    """"""Convert a set of `InputExample`s to a TFRecord file.""""""\n\n    writer = tf.python_io.TFRecordWriter(output_file)\n\n    for (ex_index, example) in enumerate(examples):\n        if ex_index % 10000 == 0:\n            tf.logging.info(""Writing example %d of %d"" % (ex_index, len(examples)))\n\n        feature = convert_single_example(ex_index, example, token_label_list, predicate_label_list,\n                                         max_seq_length, tokenizer)\n\n        def create_int_feature(values):\n            f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n            return f\n\n        features = collections.OrderedDict()\n        features[""input_ids""] = create_int_feature(feature.input_ids)\n        features[""input_mask""] = create_int_feature(feature.input_mask)\n        features[""segment_ids""] = create_int_feature(feature.segment_ids)\n        features[""token_label_ids""] = create_int_feature(feature.token_label_ids)\n        features[""predicate_label_id""] = create_int_feature(feature.predicate_label_id)\n        features[""is_real_example""] = create_int_feature(\n            [int(feature.is_real_example)])\n\n        tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n        writer.write(tf_example.SerializeToString())\n    writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length,is_training,\n                                drop_remainder):\n    """"""Creates an `input_fn` closure to be passed to TPUEstimator.""""""\n\n    name_to_features = {\n        ""input_ids"": tf.FixedLenFeature([seq_length], tf.int64),\n        ""input_mask"": tf.FixedLenFeature([seq_length], tf.int64),\n        ""segment_ids"": tf.FixedLenFeature([seq_length], tf.int64),\n        ""token_label_ids"": tf.FixedLenFeature([seq_length], tf.int64),\n        ""predicate_label_id"": tf.FixedLenFeature([], tf.int64),\n        ""is_real_example"": tf.FixedLenFeature([], tf.int64),\n    }\n\n    def _decode_record(record, name_to_features):\n        """"""Decodes a record to a TensorFlow example.""""""\n        example = tf.parse_single_example(record, name_to_features)\n\n        # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n        # So cast all int64 to int32.\n        for name in list(example.keys()):\n            t = example[name]\n            if t.dtype == tf.int64:\n                t = tf.to_int32(t)\n            example[name] = t\n\n        return example\n\n    def input_fn(params):\n        """"""The actual input function.""""""\n        batch_size = params[""batch_size""]\n\n        # For training, we want a lot of parallel reading and shuffling.\n        # For eval, we want no shuffling and parallel reading doesn\'t matter.\n        d = tf.data.TFRecordDataset(input_file)\n        if is_training:\n            d = d.repeat()\n            d = d.shuffle(buffer_size=100)\n\n        d = d.apply(\n            tf.contrib.data.map_and_batch(\n                lambda record: _decode_record(record, name_to_features),\n                batch_size=batch_size,\n                drop_remainder=drop_remainder))\n\n        return d\n\n    return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n    """"""Truncates a sequence pair in place to the maximum length.""""""\n\n    # This is a simple heuristic which will always truncate the longer sequence\n    # one token at a time. This makes more sense than truncating an equal percent\n    # of tokens from each, since if one sequence is very short then each token\n    # that\'s truncated likely contains more information than a longer sequence.\n    while True:\n        total_length = len(tokens_a) + len(tokens_b)\n        if total_length <= max_length:\n            break\n        if len(tokens_a) > len(tokens_b):\n            tokens_a.pop()\n        else:\n            tokens_b.pop()\n\n\ndef create_model(bert_config, is_training, input_ids, input_mask, segment_ids,\n                 token_label_ids, predicate_label_id, num_token_labels, num_predicate_labels,\n                 use_one_hot_embeddings):\n    """"""Creates a classification model.""""""\n    model = modeling.BertModel(\n        config=bert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n\n    # We ""pool"" the model by simply taking the hidden state corresponding\n    # to the first token. float Tensor of shape [batch_size, hidden_size]\n    predicate_output_layer = model.get_pooled_output()\n\n    intent_hidden_size = predicate_output_layer.shape[-1].value\n\n    predicate_output_weights = tf.get_variable(\n        ""predicate_output_weights"", [num_predicate_labels, intent_hidden_size],\n        initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n    predicate_output_bias = tf.get_variable(\n        ""predicate_output_bias"", [num_predicate_labels], initializer=tf.zeros_initializer())\n\n    with tf.variable_scope(""predicate_loss""):\n        if is_training:\n            # I.e., 0.1 dropout\n            predicate_output_layer = tf.nn.dropout(predicate_output_layer, keep_prob=0.9)\n\n        predicate_logits = tf.matmul(predicate_output_layer, predicate_output_weights, transpose_b=True)\n        predicate_logits = tf.nn.bias_add(predicate_logits, predicate_output_bias)\n        predicate_probabilities = tf.nn.softmax(predicate_logits, axis=-1)\n        predicate_prediction = tf.argmax(predicate_probabilities, axis=-1, output_type=tf.int32)\n        predicate_labels = tf.one_hot(predicate_label_id, depth=num_predicate_labels, dtype=tf.float32)\n        predicate_per_example_loss = tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(logits=predicate_logits, labels=predicate_labels), -1)\n        predicate_loss = tf.reduce_mean(predicate_per_example_loss)\n\n\n    #     """"""Gets final hidden layer of encoder.\n    #\n    #     Returns:\n    #       float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n    #       to the final hidden of the transformer encoder.\n    #     """"""\n    token_label_output_layer = model.get_sequence_output()\n\n    token_label_hidden_size = token_label_output_layer.shape[-1].value\n\n    token_label_output_weight = tf.get_variable(\n        ""token_label_output_weights"", [num_token_labels, token_label_hidden_size],\n        initializer=tf.truncated_normal_initializer(stddev=0.02)\n    )\n    token_label_output_bias = tf.get_variable(\n        ""token_label_output_bias"", [num_token_labels], initializer=tf.zeros_initializer()\n    )\n    with tf.variable_scope(""token_label_loss""):\n        if is_training:\n            token_label_output_layer = tf.nn.dropout(token_label_output_layer, keep_prob=0.9)\n        token_label_output_layer = tf.reshape(token_label_output_layer, [-1, token_label_hidden_size])\n        token_label_logits = tf.matmul(token_label_output_layer, token_label_output_weight, transpose_b=True)\n        token_label_logits = tf.nn.bias_add(token_label_logits, token_label_output_bias)\n\n        token_label_logits = tf.reshape(token_label_logits, [-1, FLAGS.max_seq_length, num_token_labels])\n        token_label_log_probs = tf.nn.log_softmax(token_label_logits, axis=-1)\n        token_label_one_hot_labels = tf.one_hot(token_label_ids, depth=num_token_labels, dtype=tf.float32)\n        token_label_per_example_loss = -tf.reduce_sum(token_label_one_hot_labels * token_label_log_probs, axis=-1)\n        token_label_loss = tf.reduce_sum(token_label_per_example_loss)\n        token_label_probabilities = tf.nn.softmax(token_label_logits, axis=-1)\n        token_label_predictions = tf.argmax(token_label_probabilities, axis=-1)\n        # return (token_label_loss, token_label_per_example_loss, token_label_logits, token_label_predict)\n\n    loss = 0.5 * predicate_loss + token_label_loss\n    return (loss,\n            predicate_loss, predicate_per_example_loss, predicate_probabilities, predicate_prediction,\n            token_label_loss, token_label_per_example_loss, token_label_logits, token_label_predictions)\n\n\n\ndef model_fn_builder(bert_config,num_token_labels, num_predicate_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n    """"""Returns `model_fn` closure for TPUEstimator.""""""\n\n    def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n        """"""The `model_fn` for TPUEstimator.""""""\n\n        tf.logging.info(""*** Features ***"")\n        for name in sorted(features.keys()):\n            tf.logging.info(""  name = %s, shape = %s"" % (name, features[name].shape))\n\n        input_ids = features[""input_ids""]\n        input_mask = features[""input_mask""]\n        segment_ids = features[""segment_ids""]\n        token_label_ids = features[""token_label_ids""]\n        predicate_label_id = features[""predicate_label_id""]\n        is_real_example = None\n        if ""is_real_example"" in features:\n            is_real_example = tf.cast(features[""is_real_example""], dtype=tf.float32)\n        else:\n            is_real_example = tf.ones(tf.shape(token_label_ids), dtype=tf.float32) #TO DO\n\n        is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n        (total_loss,\n         predicate_loss, predicate_per_example_loss, predicate_probabilities, predicate_prediction,\n         token_label_loss, token_label_per_example_loss, token_label_logits, token_label_predictions) = create_model(\n            bert_config, is_training, input_ids, input_mask, segment_ids,\n            token_label_ids, predicate_label_id, num_token_labels, num_predicate_labels,\n            use_one_hot_embeddings)\n\n        tvars = tf.trainable_variables()\n        initialized_variable_names = {}\n        scaffold_fn = None\n        if init_checkpoint:\n            (assignment_map, initialized_variable_names\n             ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n            if use_tpu:\n\n                def tpu_scaffold():\n                    tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n                    return tf.train.Scaffold()\n\n                scaffold_fn = tpu_scaffold\n            else:\n                tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n        tf.logging.info(""**** Trainable Variables ****"")\n        for var in tvars:\n            init_string = """"\n            if var.name in initialized_variable_names:\n                init_string = "", *INIT_FROM_CKPT*""\n            tf.logging.info(""  name = %s, shape = %s%s"", var.name, var.shape,\n                            init_string)\n\n        output_spec = None\n        if mode == tf.estimator.ModeKeys.TRAIN:\n\n            train_op = optimization.create_optimizer(\n                total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n            output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n                mode=mode,\n                loss=total_loss,\n                train_op=train_op,\n                scaffold_fn=scaffold_fn)\n        elif mode == tf.estimator.ModeKeys.EVAL:\n\n            def metric_fn(predicate_loss, token_label_per_example_loss, predicate_probabilities, token_label_ids, token_label_logits, is_real_example):\n                predicate_prediction = tf.argmax(predicate_probabilities, axis=-1, output_type=tf.int32)\n                token_label_predictions = tf.argmax(token_label_logits, axis=-1, output_type=tf.int32)\n                token_label_pos_indices_list = list(range(num_token_labels))[4:]  # [""[Padding]"",""[##WordPiece]"", ""[CLS]"", ""[SEP]""] + seq_out_set\n                pos_indices_list = token_label_pos_indices_list[:-1]  # do not care ""O""\n                token_label_precision_macro = tf_metrics.precision(token_label_ids, token_label_predictions, num_token_labels,\n                                                                   pos_indices_list, average=""macro"")\n                token_label_recall_macro = tf_metrics.recall(token_label_ids, token_label_predictions, num_token_labels,\n                                                             pos_indices_list, average=""macro"")\n                token_label_f_macro = tf_metrics.f1(token_label_ids, token_label_predictions, num_token_labels, pos_indices_list,\n                                             average=""macro"")\n                token_label_precision_micro = tf_metrics.precision(token_label_ids, token_label_predictions, num_token_labels,\n                                                                   pos_indices_list, average=""micro"")\n                token_label_recall_micro = tf_metrics.recall(token_label_ids, token_label_predictions, num_token_labels,\n                                                             pos_indices_list, average=""micro"")\n                token_label_f_micro = tf_metrics.f1(token_label_ids, token_label_predictions, num_token_labels, pos_indices_list,\n                                             average=""micro"")\n                token_label_loss = tf.metrics.mean(values=token_label_per_example_loss, weights=is_real_example)\n                predicate_loss = tf.metrics.mean(values=predicate_loss)\n                return {\n                    ""eval_predicate_loss"": predicate_loss,\n                    ""predicate_prediction"": predicate_prediction,\n                    ""eval_token_label_precision(macro)"": token_label_precision_macro,\n                    ""eval_token_label_recall(macro)"": token_label_recall_macro,\n                    ""eval_token_label_f(macro)"": token_label_f_macro,\n                    ""eval_token_label_precision(micro)"": token_label_precision_micro,\n                    ""eval_token_label_recall(micro)"": token_label_recall_micro,\n                    ""eval_token_label_f(micro)"": token_label_f_micro,\n                    ""eval_token_label_loss"": token_label_loss,\n                }\n\n            eval_metrics = (metric_fn,\n                            [predicate_loss, token_label_per_example_loss, predicate_probabilities,\n                             token_label_ids, token_label_logits, is_real_example])\n\n            output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n                mode=mode,\n                loss=total_loss,\n                eval_metrics=eval_metrics,\n                scaffold_fn=scaffold_fn)\n        else:\n            output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n                mode=mode,\n                predictions={""predicate_probabilities"": predicate_probabilities,\n                             ""predicate_prediction"":   predicate_prediction,\n                             ""token_label_predictions"": token_label_predictions},\n                scaffold_fn=scaffold_fn)\n\n        return output_spec\n\n    return model_fn\n\n\n\n\ndef main(_):\n\n    tf.logging.set_verbosity(tf.logging.INFO)\n\n    processors = {\n        ""ske_2019"": SKE_2019_Sequence_labeling_Processor,\n    }\n\n    tokenization.validate_case_matches_checkpoint(FLAGS.do_lower_case,\n                                                  FLAGS.init_checkpoint)\n\n    if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n        raise ValueError(\n            ""At least one of `do_train`, `do_eval` or `do_predict\' must be True."")\n\n    bert_config = modeling.BertConfig.from_json_file(FLAGS.bert_config_file)\n\n    if FLAGS.max_seq_length > bert_config.max_position_embeddings:\n        raise ValueError(\n            ""Cannot use sequence length %d because the BERT model ""\n            ""was only trained up to sequence length %d"" %\n            (FLAGS.max_seq_length, bert_config.max_position_embeddings))\n\n    tf.gfile.MakeDirs(FLAGS.output_dir)\n\n    task_name = FLAGS.task_name.lower()\n\n    if task_name not in processors:\n        raise ValueError(""Task not found: %s"" % (task_name))\n\n    processor = processors[task_name]()\n\n    token_label_list = processor.get_token_labels()\n    predicate_label_list = processor.get_predicate_labels()\n\n    num_token_labels = len(token_label_list)\n    num_predicate_labels = len(predicate_label_list)\n\n    token_label_id2label = {}\n    for (i, label) in enumerate(token_label_list):\n        token_label_id2label[i] = label\n    predicate_label_id2label = {}\n    for (i, label) in enumerate(predicate_label_list):\n        predicate_label_id2label[i] = label\n\n    tokenizer = tokenization.FullTokenizer(\n        vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case)\n\n    tpu_cluster_resolver = None\n    if FLAGS.use_tpu and FLAGS.tpu_name:\n        tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n            FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n    is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n    run_config = tf.contrib.tpu.RunConfig(\n        cluster=tpu_cluster_resolver,\n        master=FLAGS.master,\n        model_dir=FLAGS.output_dir,\n        save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n        tpu_config=tf.contrib.tpu.TPUConfig(\n            iterations_per_loop=FLAGS.iterations_per_loop,\n            num_shards=FLAGS.num_tpu_cores,\n            per_host_input_for_training=is_per_host))\n\n    train_examples = None\n    num_train_steps = None\n    num_warmup_steps = None\n    if FLAGS.do_train:\n        train_examples = processor.get_train_examples(FLAGS.data_dir)\n        num_train_steps = int(\n            len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)\n        num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n    model_fn = model_fn_builder(\n        bert_config=bert_config,\n        num_token_labels=num_token_labels,\n        num_predicate_labels=num_predicate_labels,\n        init_checkpoint=FLAGS.init_checkpoint,\n        learning_rate=FLAGS.learning_rate,\n        num_train_steps=num_train_steps,\n        num_warmup_steps=num_warmup_steps,\n        use_tpu=FLAGS.use_tpu,\n        use_one_hot_embeddings=FLAGS.use_tpu)\n\n    # If TPU is not available, this will fall back to normal Estimator on CPU\n    # or GPU.\n    estimator = tf.contrib.tpu.TPUEstimator(\n        use_tpu=FLAGS.use_tpu,\n        model_fn=model_fn,\n        config=run_config,\n        train_batch_size=FLAGS.train_batch_size,\n        eval_batch_size=FLAGS.eval_batch_size,\n        predict_batch_size=FLAGS.predict_batch_size)\n\n    if FLAGS.do_train:\n        train_file = os.path.join(FLAGS.output_dir, ""train.tf_record"")\n        file_based_convert_examples_to_features(\n            train_examples, token_label_list, predicate_label_list, FLAGS.max_seq_length, tokenizer, train_file)\n        tf.logging.info(""***** Running training *****"")\n        tf.logging.info(""  Num examples = %d"", len(train_examples))\n        tf.logging.info(""  Batch size = %d"", FLAGS.train_batch_size)\n        tf.logging.info(""  Num steps = %d"", num_train_steps)\n        train_input_fn = file_based_input_fn_builder(\n            input_file=train_file,\n            seq_length=FLAGS.max_seq_length,\n            is_training=True,\n            drop_remainder=True)\n        estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n    if FLAGS.do_eval:\n        eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n        num_actual_eval_examples = len(eval_examples)\n        if FLAGS.use_tpu:\n            # TPU requires a fixed batch size for all batches, therefore the number\n            # of examples must be a multiple of the batch size, or else examples\n            # will get dropped. So we pad with fake examples which are ignored\n            # later on. These do NOT count towards the metric (all tf.metrics\n            # support a per-instance weight, and these get a weight of 0.0).\n            while len(eval_examples) % FLAGS.eval_batch_size != 0:\n                eval_examples.append(PaddingInputExample())\n\n        eval_file = os.path.join(FLAGS.output_dir, ""eval.tf_record"")\n        file_based_convert_examples_to_features(\n            eval_examples, token_label_list, predicate_label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n\n        tf.logging.info(""***** Running evaluation *****"")\n        tf.logging.info(""  Num examples = %d (%d actual, %d padding)"",\n                        len(eval_examples), num_actual_eval_examples,\n                        len(eval_examples) - num_actual_eval_examples)\n        tf.logging.info(""  Batch size = %d"", FLAGS.eval_batch_size)\n\n        # This tells the estimator to run through the entire set.\n        eval_steps = None\n        # However, if running eval on the TPU, you will need to specify the\n        # number of steps.\n        if FLAGS.use_tpu:\n            assert len(eval_examples) % FLAGS.eval_batch_size == 0\n            eval_steps = int(len(eval_examples) // FLAGS.eval_batch_size)\n\n        eval_drop_remainder = True if FLAGS.use_tpu else False\n        eval_input_fn = file_based_input_fn_builder(\n            input_file=eval_file,\n            seq_length=FLAGS.max_seq_length,\n            is_training=False,\n            drop_remainder=eval_drop_remainder)\n\n        result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n\n        output_eval_file = os.path.join(FLAGS.output_dir, ""eval_results.txt"")\n        with tf.gfile.GFile(output_eval_file, ""w"") as writer:\n            tf.logging.info(""***** Eval results *****"")\n            for key in sorted(result.keys()):\n                tf.logging.info(""  %s = %s"", key, str(result[key]))\n                writer.write(""%s = %s\\n"" % (key, str(result[key])))\n\n    if FLAGS.do_predict:\n        predict_examples = processor.get_test_examples(FLAGS.data_dir)\n        num_actual_predict_examples = len(predict_examples)\n        if FLAGS.use_tpu:\n            # TPU requires a fixed batch size for all batches, therefore the number\n            # of examples must be a multiple of the batch size, or else examples\n            # will get dropped. So we pad with fake examples which are ignored\n            # later on.\n            while len(predict_examples) % FLAGS.predict_batch_size != 0:\n                predict_examples.append(PaddingInputExample())\n\n        predict_file = os.path.join(FLAGS.output_dir, ""predict.tf_record"")\n        file_based_convert_examples_to_features(predict_examples, token_label_list, predicate_label_list,\n                                                FLAGS.max_seq_length, tokenizer,\n                                                predict_file)\n\n        tf.logging.info(""***** Running prediction*****"")\n        tf.logging.info(""  Num examples = %d (%d actual, %d padding)"",\n                        len(predict_examples), num_actual_predict_examples,\n                        len(predict_examples) - num_actual_predict_examples)\n        tf.logging.info(""  Batch size = %d"", FLAGS.predict_batch_size)\n\n        predict_drop_remainder = True if FLAGS.use_tpu else False\n        predict_input_fn = file_based_input_fn_builder(\n            input_file=predict_file,\n            seq_length=FLAGS.max_seq_length,\n            is_training=False,\n            drop_remainder=predict_drop_remainder)\n\n        result = estimator.predict(input_fn=predict_input_fn)\n        token_label_output_predict_file = os.path.join(FLAGS.output_dir, ""token_label_predictions.txt"")\n        predicate_output_predict_file = os.path.join(FLAGS.output_dir, ""predicate_predict.txt"")\n        predicate_output_probabilities_file = os.path.join(FLAGS.output_dir, ""predicate_probabilities.txt"")\n        with open(token_label_output_predict_file, ""w"", encoding=\'utf-8\') as token_label_writer:\n            with open(predicate_output_predict_file, ""w"", encoding=\'utf-8\') as predicate_predict_writer:\n                with open(predicate_output_probabilities_file, ""w"", encoding=\'utf-8\') as predicate_probabilities_writer:\n                    num_written_lines = 0\n                    tf.logging.info(""***** token_label predict and predicate labeling results *****"")\n                    for (i, prediction) in enumerate(result):\n                        token_label_prediction = prediction[""token_label_predictions""]\n                        predicate_probabilities = prediction[""predicate_probabilities""]\n                        predicate_prediction = prediction[""predicate_prediction""]\n                        if i >= num_actual_predict_examples:\n                            break\n                        token_label_output_line = "" "".join(token_label_id2label[id] for id in token_label_prediction) + ""\\n""\n                        token_label_writer.write(token_label_output_line)\n                        predicate_predict_line = predicate_label_id2label[predicate_prediction]\n                        predicate_predict_writer.write(predicate_predict_line + ""\\n"")\n                        predicate_probabilities_line = "" "".join(str(sigmoid_logit) for sigmoid_logit in predicate_probabilities) + ""\\n""\n                        predicate_probabilities_writer.write(predicate_probabilities_line)\n                        num_written_lines += 1\n        assert num_written_lines == num_actual_predict_examples\n\n\nif __name__ == ""__main__"":\n    flags.mark_flag_as_required(""data_dir"")\n    flags.mark_flag_as_required(""task_name"")\n    flags.mark_flag_as_required(""vocab_file"")\n    flags.mark_flag_as_required(""bert_config_file"")\n    flags.mark_flag_as_required(""output_dir"")\n    tf.app.run()\n'"
bert/__init__.py,0,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n'"
bert/modeling.py,81,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n""""""The main BERT model and related functions.""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\nimport numpy as np\nimport six\nimport tensorflow as tf\n\n\nclass BertConfig(object):\n  """"""Configuration for `BertModel`.""""""\n\n  def __init__(self,\n               vocab_size,\n               hidden_size=768,\n               num_hidden_layers=12,\n               num_attention_heads=12,\n               intermediate_size=3072,\n               hidden_act=""gelu"",\n               hidden_dropout_prob=0.1,\n               attention_probs_dropout_prob=0.1,\n               max_position_embeddings=512,\n               type_vocab_size=16,\n               initializer_range=0.02):\n    """"""Constructs BertConfig.\n\n    Args:\n      vocab_size: Vocabulary size of `inputs_ids` in `BertModel`.\n      hidden_size: Size of the encoder layers and the pooler layer.\n      num_hidden_layers: Number of hidden layers in the Transformer encoder.\n      num_attention_heads: Number of attention heads for each attention layer in\n        the Transformer encoder.\n      intermediate_size: The size of the ""intermediate"" (i.e., feed-forward)\n        layer in the Transformer encoder.\n      hidden_act: The non-linear activation function (function or string) in the\n        encoder and pooler.\n      hidden_dropout_prob: The dropout probability for all fully connected\n        layers in the embeddings, encoder, and pooler.\n      attention_probs_dropout_prob: The dropout ratio for the attention\n        probabilities.\n      max_position_embeddings: The maximum sequence length that this model might\n        ever be used with. Typically set this to something large just in case\n        (e.g., 512 or 1024 or 2048).\n      type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n        `BertModel`.\n      initializer_range: The stdev of the truncated_normal_initializer for\n        initializing all weight matrices.\n    """"""\n    self.vocab_size = vocab_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_attention_heads = num_attention_heads\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n\n  @classmethod\n  def from_dict(cls, json_object):\n    """"""Constructs a `BertConfig` from a Python dictionary of parameters.""""""\n    config = BertConfig(vocab_size=None)\n    for (key, value) in six.iteritems(json_object):\n      config.__dict__[key] = value\n    return config\n\n  @classmethod\n  def from_json_file(cls, json_file):\n    """"""Constructs a `BertConfig` from a json file of parameters.""""""\n    with tf.gfile.GFile(json_file, ""r"") as reader:\n      text = reader.read()\n    return cls.from_dict(json.loads(text))\n\n  def to_dict(self):\n    """"""Serializes this instance to a Python dictionary.""""""\n    output = copy.deepcopy(self.__dict__)\n    return output\n\n  def to_json_string(self):\n    """"""Serializes this instance to a JSON string.""""""\n    return json.dumps(self.to_dict(), indent=2, sort_keys=True) + ""\\n""\n\n\nclass BertModel(object):\n  """"""BERT model (""Bidirectional Encoder Representations from Transformers"").\n\n  Example usage:\n\n  ```python\n  # Already been converted into WordPiece token ids\n  input_ids = tf.constant([[31, 51, 99], [15, 5, 0]])\n  input_mask = tf.constant([[1, 1, 1], [1, 1, 0]])\n  token_type_ids = tf.constant([[0, 0, 1], [0, 2, 0]])\n\n  config = modeling.BertConfig(vocab_size=32000, hidden_size=512,\n    num_hidden_layers=8, num_attention_heads=6, intermediate_size=1024)\n\n  model = modeling.BertModel(config=config, is_training=True,\n    input_ids=input_ids, input_mask=input_mask, token_type_ids=token_type_ids)\n\n  label_embeddings = tf.get_variable(...)\n  pooled_output = model.get_pooled_output()\n  logits = tf.matmul(pooled_output, label_embeddings)\n  ...\n  ```\n  """"""\n\n  def __init__(self,\n               config,\n               is_training,\n               input_ids,\n               input_mask=None,\n               token_type_ids=None,\n               use_one_hot_embeddings=False,\n               scope=None):\n    """"""Constructor for BertModel.\n\n    Args:\n      config: `BertConfig` instance.\n      is_training: bool. true for training model, false for eval model. Controls\n        whether dropout will be applied.\n      input_ids: int32 Tensor of shape [batch_size, seq_length].\n      input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n        embeddings or tf.embedding_lookup() for the word embeddings.\n      scope: (optional) variable scope. Defaults to ""bert"".\n\n    Raises:\n      ValueError: The config is invalid or one of the input tensor shapes\n        is invalid.\n    """"""\n    config = copy.deepcopy(config)\n    if not is_training:\n      config.hidden_dropout_prob = 0.0\n      config.attention_probs_dropout_prob = 0.0\n\n    input_shape = get_shape_list(input_ids, expected_rank=2)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n\n    if input_mask is None:\n      input_mask = tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    if token_type_ids is None:\n      token_type_ids = tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    with tf.variable_scope(scope, default_name=""bert""):\n      with tf.variable_scope(""embeddings""):\n        # Perform embedding lookup on the word ids.\n        (self.embedding_output, self.embedding_table) = embedding_lookup(\n            input_ids=input_ids,\n            vocab_size=config.vocab_size,\n            embedding_size=config.hidden_size,\n            initializer_range=config.initializer_range,\n            word_embedding_name=""word_embeddings"",\n            use_one_hot_embeddings=use_one_hot_embeddings)\n\n        # Add positional embeddings and token type embeddings, then layer\n        # normalize and perform dropout.\n        self.embedding_output = embedding_postprocessor(\n            input_tensor=self.embedding_output,\n            use_token_type=True,\n            token_type_ids=token_type_ids,\n            token_type_vocab_size=config.type_vocab_size,\n            token_type_embedding_name=""token_type_embeddings"",\n            use_position_embeddings=True,\n            position_embedding_name=""position_embeddings"",\n            initializer_range=config.initializer_range,\n            max_position_embeddings=config.max_position_embeddings,\n            dropout_prob=config.hidden_dropout_prob)\n\n      with tf.variable_scope(""encoder""):\n        # This converts a 2D mask of shape [batch_size, seq_length] to a 3D\n        # mask of shape [batch_size, seq_length, seq_length] which is used\n        # for the attention scores.\n        attention_mask = create_attention_mask_from_input_mask(\n            input_ids, input_mask)\n\n        # Run the stacked transformer.\n        # `sequence_output` shape = [batch_size, seq_length, hidden_size].\n        self.all_encoder_layers = transformer_model(\n            input_tensor=self.embedding_output,\n            attention_mask=attention_mask,\n            hidden_size=config.hidden_size,\n            num_hidden_layers=config.num_hidden_layers,\n            num_attention_heads=config.num_attention_heads,\n            intermediate_size=config.intermediate_size,\n            intermediate_act_fn=get_activation(config.hidden_act),\n            hidden_dropout_prob=config.hidden_dropout_prob,\n            attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n            initializer_range=config.initializer_range,\n            do_return_all_layers=True)\n\n      self.sequence_output = self.all_encoder_layers[-1]\n      # The ""pooler"" converts the encoded sequence tensor of shape\n      # [batch_size, seq_length, hidden_size] to a tensor of shape\n      # [batch_size, hidden_size]. This is necessary for segment-level\n      # (or segment-pair-level) classification tasks where we need a fixed\n      # dimensional representation of the segment.\n      with tf.variable_scope(""pooler""):\n        # We ""pool"" the model by simply taking the hidden state corresponding\n        # to the first token. We assume that this has been pre-trained\n        first_token_tensor = tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)\n        self.pooled_output = tf.layers.dense(\n            first_token_tensor,\n            config.hidden_size,\n            activation=tf.tanh,\n            kernel_initializer=create_initializer(config.initializer_range))\n\n  def get_pooled_output(self):\n    return self.pooled_output\n\n  def get_sequence_output(self):\n    """"""Gets final hidden layer of encoder.\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the final hidden of the transformer encoder.\n    """"""\n    return self.sequence_output\n\n  def get_all_encoder_layers(self):\n    return self.all_encoder_layers\n\n  def get_embedding_output(self):\n    """"""Gets output of the embedding lookup (i.e., input to the transformer).\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the output of the embedding layer, after summing the word\n      embeddings with the positional embeddings and the token type embeddings,\n      then performing layer normalization. This is the input to the transformer.\n    """"""\n    return self.embedding_output\n\n  def get_embedding_table(self):\n    return self.embedding_table\n\n\ndef gelu(x):\n  """"""Gaussian Error Linear Unit.\n\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1606.08415\n  Args:\n    x: float Tensor to perform activation.\n\n  Returns:\n    `x` with the GELU activation applied.\n  """"""\n  cdf = 0.5 * (1.0 + tf.tanh(\n      (np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3)))))\n  return x * cdf\n\n\ndef get_activation(activation_string):\n  """"""Maps a string to a Python function, e.g., ""relu"" => `tf.nn.relu`.\n\n  Args:\n    activation_string: String name of the activation function.\n\n  Returns:\n    A Python function corresponding to the activation function. If\n    `activation_string` is None, empty, or ""linear"", this will return None.\n    If `activation_string` is not a string, it will return `activation_string`.\n\n  Raises:\n    ValueError: The `activation_string` does not correspond to a known\n      activation.\n  """"""\n\n  # We assume that anything that""s not a string is already an activation\n  # function, so we just return it.\n  if not isinstance(activation_string, six.string_types):\n    return activation_string\n\n  if not activation_string:\n    return None\n\n  act = activation_string.lower()\n  if act == ""linear"":\n    return None\n  elif act == ""relu"":\n    return tf.nn.relu\n  elif act == ""gelu"":\n    return gelu\n  elif act == ""tanh"":\n    return tf.tanh\n  else:\n    raise ValueError(""Unsupported activation: %s"" % act)\n\n\ndef get_assignment_map_from_checkpoint(tvars, init_checkpoint):\n  """"""Compute the union of the current variables and checkpoint variables.""""""\n  assignment_map = {}\n  initialized_variable_names = {}\n\n  name_to_variable = collections.OrderedDict()\n  for var in tvars:\n    name = var.name\n    m = re.match(""^(.*):\\\\d+$"", name)\n    if m is not None:\n      name = m.group(1)\n    name_to_variable[name] = var\n\n  init_vars = tf.train.list_variables(init_checkpoint)\n\n  assignment_map = collections.OrderedDict()\n  for x in init_vars:\n    (name, var) = (x[0], x[1])\n    if name not in name_to_variable:\n      continue\n    assignment_map[name] = name\n    initialized_variable_names[name] = 1\n    initialized_variable_names[name + "":0""] = 1\n\n  return (assignment_map, initialized_variable_names)\n\n\ndef dropout(input_tensor, dropout_prob):\n  """"""Perform dropout.\n\n  Args:\n    input_tensor: float Tensor.\n    dropout_prob: Python float. The probability of dropping out a value (NOT of\n      *keeping* a dimension as in `tf.nn.dropout`).\n\n  Returns:\n    A version of `input_tensor` with dropout applied.\n  """"""\n  if dropout_prob is None or dropout_prob == 0.0:\n    return input_tensor\n\n  output = tf.nn.dropout(input_tensor, 1.0 - dropout_prob)\n  return output\n\n\ndef layer_norm(input_tensor, name=None):\n  """"""Run layer normalization on the last dimension of the tensor.""""""\n  return tf.contrib.layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef layer_norm_and_dropout(input_tensor, dropout_prob, name=None):\n  """"""Runs layer normalization followed by dropout.""""""\n  output_tensor = layer_norm(input_tensor, name)\n  output_tensor = dropout(output_tensor, dropout_prob)\n  return output_tensor\n\n\ndef create_initializer(initializer_range=0.02):\n  """"""Creates a `truncated_normal_initializer` with the given range.""""""\n  return tf.truncated_normal_initializer(stddev=initializer_range)\n\n\ndef embedding_lookup(input_ids,\n                     vocab_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=""word_embeddings"",\n                     use_one_hot_embeddings=False):\n  """"""Looks up words embeddings for id tensor.\n\n  Args:\n    input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n      ids.\n    vocab_size: int. Size of the embedding vocabulary.\n    embedding_size: int. Width of the word embeddings.\n    initializer_range: float. Embedding initialization range.\n    word_embedding_name: string. Name of the embedding table.\n    use_one_hot_embeddings: bool. If True, use one-hot method for word\n      embeddings. If False, use `tf.gather()`.\n\n  Returns:\n    float Tensor of shape [batch_size, seq_length, embedding_size].\n  """"""\n  # This function assumes that the input is of shape [batch_size, seq_length,\n  # num_inputs].\n  #\n  # If the input is a 2D tensor of shape [batch_size, seq_length], we\n  # reshape to [batch_size, seq_length, 1].\n  if input_ids.shape.ndims == 2:\n    input_ids = tf.expand_dims(input_ids, axis=[-1])\n\n  embedding_table = tf.get_variable(\n      name=word_embedding_name,\n      shape=[vocab_size, embedding_size],\n      initializer=create_initializer(initializer_range))\n\n  flat_input_ids = tf.reshape(input_ids, [-1])\n  if use_one_hot_embeddings:\n    one_hot_input_ids = tf.one_hot(flat_input_ids, depth=vocab_size)\n    output = tf.matmul(one_hot_input_ids, embedding_table)\n  else:\n    output = tf.gather(embedding_table, flat_input_ids)\n\n  input_shape = get_shape_list(input_ids)\n\n  output = tf.reshape(output,\n                      input_shape[0:-1] + [input_shape[-1] * embedding_size])\n  return (output, embedding_table)\n\n\ndef embedding_postprocessor(input_tensor,\n                            use_token_type=False,\n                            token_type_ids=None,\n                            token_type_vocab_size=16,\n                            token_type_embedding_name=""token_type_embeddings"",\n                            use_position_embeddings=True,\n                            position_embedding_name=""position_embeddings"",\n                            initializer_range=0.02,\n                            max_position_embeddings=512,\n                            dropout_prob=0.1):\n  """"""Performs various post-processing on a word embedding tensor.\n\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length,\n      embedding_size].\n    use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n    token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      Must be specified if `use_token_type` is True.\n    token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n    token_type_embedding_name: string. The name of the embedding table variable\n      for token type ids.\n    use_position_embeddings: bool. Whether to add position embeddings for the\n      position of each token in the sequence.\n    position_embedding_name: string. The name of the embedding table variable\n      for positional embeddings.\n    initializer_range: float. Range of the weight initialization.\n    max_position_embeddings: int. Maximum sequence length that might ever be\n      used with this model. This can be longer than the sequence length of\n      input_tensor, but cannot be shorter.\n    dropout_prob: float. Dropout probability applied to the final output tensor.\n\n  Returns:\n    float tensor with same shape as `input_tensor`.\n\n  Raises:\n    ValueError: One of the tensor shapes or input values is invalid.\n  """"""\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  width = input_shape[2]\n\n  output = input_tensor\n\n  if use_token_type:\n    if token_type_ids is None:\n      raise ValueError(""`token_type_ids` must be specified if""\n                       ""`use_token_type` is True."")\n    token_type_table = tf.get_variable(\n        name=token_type_embedding_name,\n        shape=[token_type_vocab_size, width],\n        initializer=create_initializer(initializer_range))\n    # This vocab will be small so we always do one-hot here, since it is always\n    # faster for a small vocabulary.\n    flat_token_type_ids = tf.reshape(token_type_ids, [-1])\n    one_hot_ids = tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)\n    token_type_embeddings = tf.matmul(one_hot_ids, token_type_table)\n    token_type_embeddings = tf.reshape(token_type_embeddings,\n                                       [batch_size, seq_length, width])\n    output += token_type_embeddings\n\n  if use_position_embeddings:\n    assert_op = tf.assert_less_equal(seq_length, max_position_embeddings)\n    with tf.control_dependencies([assert_op]):\n      full_position_embeddings = tf.get_variable(\n          name=position_embedding_name,\n          shape=[max_position_embeddings, width],\n          initializer=create_initializer(initializer_range))\n      # Since the position embedding table is a learned variable, we create it\n      # using a (long) sequence length `max_position_embeddings`. The actual\n      # sequence length might be shorter than this, for faster training of\n      # tasks that do not have long sequences.\n      #\n      # So `full_position_embeddings` is effectively an embedding table\n      # for position [0, 1, 2, ..., max_position_embeddings-1], and the current\n      # sequence has positions [0, 1, 2, ... seq_length-1], so we can just\n      # perform a slice.\n      position_embeddings = tf.slice(full_position_embeddings, [0, 0],\n                                     [seq_length, -1])\n      num_dims = len(output.shape.as_list())\n\n      # Only the last two dimensions are relevant (`seq_length` and `width`), so\n      # we broadcast among the first dimensions, which is typically just\n      # the batch size.\n      position_broadcast_shape = []\n      for _ in range(num_dims - 2):\n        position_broadcast_shape.append(1)\n      position_broadcast_shape.extend([seq_length, width])\n      position_embeddings = tf.reshape(position_embeddings,\n                                       position_broadcast_shape)\n      output += position_embeddings\n\n  output = layer_norm_and_dropout(output, dropout_prob)\n  return output\n\n\ndef create_attention_mask_from_input_mask(from_tensor, to_mask):\n  """"""Create 3D attention mask from a 2D tensor mask.\n\n  Args:\n    from_tensor: 2D or 3D Tensor of shape [batch_size, from_seq_length, ...].\n    to_mask: int32 Tensor of shape [batch_size, to_seq_length].\n\n  Returns:\n    float Tensor of shape [batch_size, from_seq_length, to_seq_length].\n  """"""\n  from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n  batch_size = from_shape[0]\n  from_seq_length = from_shape[1]\n\n  to_shape = get_shape_list(to_mask, expected_rank=2)\n  to_seq_length = to_shape[1]\n\n  to_mask = tf.cast(\n      tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)\n\n  # We don\'t assume that `from_tensor` is a mask (although it could be). We\n  # don\'t actually care if we attend *from* padding tokens (only *to* padding)\n  # tokens so we create a tensor of all ones.\n  #\n  # `broadcast_ones` = [batch_size, from_seq_length, 1]\n  broadcast_ones = tf.ones(\n      shape=[batch_size, from_seq_length, 1], dtype=tf.float32)\n\n  # Here we broadcast along two dimensions to create the mask.\n  mask = broadcast_ones * to_mask\n\n  return mask\n\n\ndef attention_layer(from_tensor,\n                    to_tensor,\n                    attention_mask=None,\n                    num_attention_heads=1,\n                    size_per_head=512,\n                    query_act=None,\n                    key_act=None,\n                    value_act=None,\n                    attention_probs_dropout_prob=0.0,\n                    initializer_range=0.02,\n                    do_return_2d_tensor=False,\n                    batch_size=None,\n                    from_seq_length=None,\n                    to_seq_length=None):\n  """"""Performs multi-headed attention from `from_tensor` to `to_tensor`.\n\n  This is an implementation of multi-headed attention based on ""Attention\n  is all you Need"". If `from_tensor` and `to_tensor` are the same, then\n  this is self-attention. Each timestep in `from_tensor` attends to the\n  corresponding sequence in `to_tensor`, and returns a fixed-with vector.\n\n  This function first projects `from_tensor` into a ""query"" tensor and\n  `to_tensor` into ""key"" and ""value"" tensors. These are (effectively) a list\n  of tensors of length `num_attention_heads`, where each tensor is of shape\n  [batch_size, seq_length, size_per_head].\n\n  Then, the query and key tensors are dot-producted and scaled. These are\n  softmaxed to obtain attention probabilities. The value tensors are then\n  interpolated by these probabilities, then concatenated back to a single\n  tensor and returned.\n\n  In practice, the multi-headed attention are done with transposes and\n  reshapes rather than actual separate tensors.\n\n  Args:\n    from_tensor: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    to_tensor: float Tensor of shape [batch_size, to_seq_length, to_width].\n    attention_mask: (optional) int32 Tensor of shape [batch_size,\n      from_seq_length, to_seq_length]. The values should be 1 or 0. The\n      attention scores will effectively be set to -infinity for any positions in\n      the mask that are 0, and will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    size_per_head: int. Size of each attention head.\n    query_act: (optional) Activation function for the query transform.\n    key_act: (optional) Activation function for the key transform.\n    value_act: (optional) Activation function for the value transform.\n    attention_probs_dropout_prob: (optional) float. Dropout probability of the\n      attention probabilities.\n    initializer_range: float. Range of the weight initializer.\n    do_return_2d_tensor: bool. If True, the output will be of shape [batch_size\n      * from_seq_length, num_attention_heads * size_per_head]. If False, the\n      output will be of shape [batch_size, from_seq_length, num_attention_heads\n      * size_per_head].\n    batch_size: (Optional) int. If the input is 2D, this might be the batch size\n      of the 3D version of the `from_tensor` and `to_tensor`.\n    from_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `from_tensor`.\n    to_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `to_tensor`.\n\n  Returns:\n    float Tensor of shape [batch_size, from_seq_length,\n      num_attention_heads * size_per_head]. (If `do_return_2d_tensor` is\n      true, this will be of shape [batch_size * from_seq_length,\n      num_attention_heads * size_per_head]).\n\n  Raises:\n    ValueError: Any of the arguments or tensor shapes are invalid.\n  """"""\n\n  def transpose_for_scores(input_tensor, batch_size, num_attention_heads,\n                           seq_length, width):\n    output_tensor = tf.reshape(\n        input_tensor, [batch_size, seq_length, num_attention_heads, width])\n\n    output_tensor = tf.transpose(output_tensor, [0, 2, 1, 3])\n    return output_tensor\n\n  from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n  to_shape = get_shape_list(to_tensor, expected_rank=[2, 3])\n\n  if len(from_shape) != len(to_shape):\n    raise ValueError(\n        ""The rank of `from_tensor` must match the rank of `to_tensor`."")\n\n  if len(from_shape) == 3:\n    batch_size = from_shape[0]\n    from_seq_length = from_shape[1]\n    to_seq_length = to_shape[1]\n  elif len(from_shape) == 2:\n    if (batch_size is None or from_seq_length is None or to_seq_length is None):\n      raise ValueError(\n          ""When passing in rank 2 tensors to attention_layer, the values ""\n          ""for `batch_size`, `from_seq_length`, and `to_seq_length` ""\n          ""must all be specified."")\n\n  # Scalar dimensions referenced here:\n  #   B = batch size (number of sequences)\n  #   F = `from_tensor` sequence length\n  #   T = `to_tensor` sequence length\n  #   N = `num_attention_heads`\n  #   H = `size_per_head`\n\n  from_tensor_2d = reshape_to_matrix(from_tensor)\n  to_tensor_2d = reshape_to_matrix(to_tensor)\n\n  # `query_layer` = [B*F, N*H]\n  query_layer = tf.layers.dense(\n      from_tensor_2d,\n      num_attention_heads * size_per_head,\n      activation=query_act,\n      name=""query"",\n      kernel_initializer=create_initializer(initializer_range))\n\n  # `key_layer` = [B*T, N*H]\n  key_layer = tf.layers.dense(\n      to_tensor_2d,\n      num_attention_heads * size_per_head,\n      activation=key_act,\n      name=""key"",\n      kernel_initializer=create_initializer(initializer_range))\n\n  # `value_layer` = [B*T, N*H]\n  value_layer = tf.layers.dense(\n      to_tensor_2d,\n      num_attention_heads * size_per_head,\n      activation=value_act,\n      name=""value"",\n      kernel_initializer=create_initializer(initializer_range))\n\n  # `query_layer` = [B, N, F, H]\n  query_layer = transpose_for_scores(query_layer, batch_size,\n                                     num_attention_heads, from_seq_length,\n                                     size_per_head)\n\n  # `key_layer` = [B, N, T, H]\n  key_layer = transpose_for_scores(key_layer, batch_size, num_attention_heads,\n                                   to_seq_length, size_per_head)\n\n  # Take the dot product between ""query"" and ""key"" to get the raw\n  # attention scores.\n  # `attention_scores` = [B, N, F, T]\n  attention_scores = tf.matmul(query_layer, key_layer, transpose_b=True)\n  attention_scores = tf.multiply(attention_scores,\n                                 1.0 / math.sqrt(float(size_per_head)))\n\n  if attention_mask is not None:\n    # `attention_mask` = [B, 1, F, T]\n    attention_mask = tf.expand_dims(attention_mask, axis=[1])\n\n    # Since attention_mask is 1.0 for positions we want to attend and 0.0 for\n    # masked positions, this operation will create a tensor which is 0.0 for\n    # positions we want to attend and -10000.0 for masked positions.\n    adder = (1.0 - tf.cast(attention_mask, tf.float32)) * -10000.0\n\n    # Since we are adding it to the raw scores before the softmax, this is\n    # effectively the same as removing these entirely.\n    attention_scores += adder\n\n  # Normalize the attention scores to probabilities.\n  # `attention_probs` = [B, N, F, T]\n  attention_probs = tf.nn.softmax(attention_scores)\n\n  # This is actually dropping out entire tokens to attend to, which might\n  # seem a bit unusual, but is taken from the original Transformer paper.\n  attention_probs = dropout(attention_probs, attention_probs_dropout_prob)\n\n  # `value_layer` = [B, T, N, H]\n  value_layer = tf.reshape(\n      value_layer,\n      [batch_size, to_seq_length, num_attention_heads, size_per_head])\n\n  # `value_layer` = [B, N, T, H]\n  value_layer = tf.transpose(value_layer, [0, 2, 1, 3])\n\n  # `context_layer` = [B, N, F, H]\n  context_layer = tf.matmul(attention_probs, value_layer)\n\n  # `context_layer` = [B, F, N, H]\n  context_layer = tf.transpose(context_layer, [0, 2, 1, 3])\n\n  if do_return_2d_tensor:\n    # `context_layer` = [B*F, N*H]\n    context_layer = tf.reshape(\n        context_layer,\n        [batch_size * from_seq_length, num_attention_heads * size_per_head])\n  else:\n    # `context_layer` = [B, F, N*H]\n    context_layer = tf.reshape(\n        context_layer,\n        [batch_size, from_seq_length, num_attention_heads * size_per_head])\n\n  return context_layer\n\n\ndef transformer_model(input_tensor,\n                      attention_mask=None,\n                      hidden_size=768,\n                      num_hidden_layers=12,\n                      num_attention_heads=12,\n                      intermediate_size=3072,\n                      intermediate_act_fn=gelu,\n                      hidden_dropout_prob=0.1,\n                      attention_probs_dropout_prob=0.1,\n                      initializer_range=0.02,\n                      do_return_all_layers=False):\n  """"""Multi-headed, multi-layer Transformer from ""Attention is All You Need"".\n\n  This is almost an exact implementation of the original Transformer encoder.\n\n  See the original paper:\n  https://arxiv.org/abs/1706.03762\n\n  Also see:\n  https://github.com/tensorflow/tensor2tensor/blob/master/tensor2tensor/models/transformer.py\n\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n    attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length,\n      seq_length], with 1 for positions that can be attended to and 0 in\n      positions that should not be.\n    hidden_size: int. Hidden size of the Transformer.\n    num_hidden_layers: int. Number of layers (blocks) in the Transformer.\n    num_attention_heads: int. Number of attention heads in the Transformer.\n    intermediate_size: int. The size of the ""intermediate"" (a.k.a., feed\n      forward) layer.\n    intermediate_act_fn: function. The non-linear activation function to apply\n      to the output of the intermediate/feed-forward layer.\n    hidden_dropout_prob: float. Dropout probability for the hidden layers.\n    attention_probs_dropout_prob: float. Dropout probability of the attention\n      probabilities.\n    initializer_range: float. Range of the initializer (stddev of truncated\n      normal).\n    do_return_all_layers: Whether to also return all layers or just the final\n      layer.\n\n  Returns:\n    float Tensor of shape [batch_size, seq_length, hidden_size], the final\n    hidden layer of the Transformer.\n\n  Raises:\n    ValueError: A Tensor shape or parameter is invalid.\n  """"""\n  if hidden_size % num_attention_heads != 0:\n    raise ValueError(\n        ""The hidden size (%d) is not a multiple of the number of attention ""\n        ""heads (%d)"" % (hidden_size, num_attention_heads))\n\n  attention_head_size = int(hidden_size / num_attention_heads)\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  input_width = input_shape[2]\n\n  # The Transformer performs sum residuals on all layers so the input needs\n  # to be the same as the hidden size.\n  if input_width != hidden_size:\n    raise ValueError(""The width of the input tensor (%d) != hidden size (%d)"" %\n                     (input_width, hidden_size))\n\n  # We keep the representation as a 2D tensor to avoid re-shaping it back and\n  # forth from a 3D tensor to a 2D tensor. Re-shapes are normally free on\n  # the GPU/CPU but may not be free on the TPU, so we want to minimize them to\n  # help the optimizer.\n  prev_output = reshape_to_matrix(input_tensor)\n\n  all_layer_outputs = []\n  for layer_idx in range(num_hidden_layers):\n    with tf.variable_scope(""layer_%d"" % layer_idx):\n      layer_input = prev_output\n\n      with tf.variable_scope(""attention""):\n        attention_heads = []\n        with tf.variable_scope(""self""):\n          attention_head = attention_layer(\n              from_tensor=layer_input,\n              to_tensor=layer_input,\n              attention_mask=attention_mask,\n              num_attention_heads=num_attention_heads,\n              size_per_head=attention_head_size,\n              attention_probs_dropout_prob=attention_probs_dropout_prob,\n              initializer_range=initializer_range,\n              do_return_2d_tensor=True,\n              batch_size=batch_size,\n              from_seq_length=seq_length,\n              to_seq_length=seq_length)\n          attention_heads.append(attention_head)\n\n        attention_output = None\n        if len(attention_heads) == 1:\n          attention_output = attention_heads[0]\n        else:\n          # In the case where we have other sequences, we just concatenate\n          # them to the self-attention head before the projection.\n          attention_output = tf.concat(attention_heads, axis=-1)\n\n        # Run a linear projection of `hidden_size` then add a residual\n        # with `layer_input`.\n        with tf.variable_scope(""output""):\n          attention_output = tf.layers.dense(\n              attention_output,\n              hidden_size,\n              kernel_initializer=create_initializer(initializer_range))\n          attention_output = dropout(attention_output, hidden_dropout_prob)\n          attention_output = layer_norm(attention_output + layer_input)\n\n      # The activation is only applied to the ""intermediate"" hidden layer.\n      with tf.variable_scope(""intermediate""):\n        intermediate_output = tf.layers.dense(\n            attention_output,\n            intermediate_size,\n            activation=intermediate_act_fn,\n            kernel_initializer=create_initializer(initializer_range))\n\n      # Down-project back to `hidden_size` then add the residual.\n      with tf.variable_scope(""output""):\n        layer_output = tf.layers.dense(\n            intermediate_output,\n            hidden_size,\n            kernel_initializer=create_initializer(initializer_range))\n        layer_output = dropout(layer_output, hidden_dropout_prob)\n        layer_output = layer_norm(layer_output + attention_output)\n        prev_output = layer_output\n        all_layer_outputs.append(layer_output)\n\n  if do_return_all_layers:\n    final_outputs = []\n    for layer_output in all_layer_outputs:\n      final_output = reshape_from_matrix(layer_output, input_shape)\n      final_outputs.append(final_output)\n    return final_outputs\n  else:\n    final_output = reshape_from_matrix(prev_output, input_shape)\n    return final_output\n\n\ndef get_shape_list(tensor, expected_rank=None, name=None):\n  """"""Returns a list of the shape of tensor, preferring static dimensions.\n\n  Args:\n    tensor: A tf.Tensor object to find the shape of.\n    expected_rank: (optional) int. The expected rank of `tensor`. If this is\n      specified and the `tensor` has a different rank, and exception will be\n      thrown.\n    name: Optional name of the tensor for the error message.\n\n  Returns:\n    A list of dimensions of the shape of tensor. All static dimensions will\n    be returned as python integers, and dynamic dimensions will be returned\n    as tf.Tensor scalars.\n  """"""\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n\n\ndef reshape_to_matrix(input_tensor):\n  """"""Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).""""""\n  ndims = input_tensor.shape.ndims\n  if ndims < 2:\n    raise ValueError(""Input tensor must have at least rank 2. Shape = %s"" %\n                     (input_tensor.shape))\n  if ndims == 2:\n    return input_tensor\n\n  width = input_tensor.shape[-1]\n  output_tensor = tf.reshape(input_tensor, [-1, width])\n  return output_tensor\n\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n  """"""Reshapes a rank 2 tensor back to its original rank >= 2 tensor.""""""\n  if len(orig_shape_list) == 2:\n    return output_tensor\n\n  output_shape = get_shape_list(output_tensor)\n\n  orig_dims = orig_shape_list[0:-1]\n  width = output_shape[-1]\n\n  return tf.reshape(output_tensor, orig_dims + [width])\n\n\ndef assert_rank(tensor, expected_rank, name=None):\n  """"""Raises an exception if the tensor rank is not of the expected rank.\n\n  Args:\n    tensor: A tf.Tensor to check the rank of.\n    expected_rank: Python integer or list of integers, expected rank.\n    name: Optional name of the tensor for the error message.\n\n  Raises:\n    ValueError: If the expected shape doesn\'t match the actual shape.\n  """"""\n  if name is None:\n    name = tensor.name\n\n  expected_rank_dict = {}\n  if isinstance(expected_rank, six.integer_types):\n    expected_rank_dict[expected_rank] = True\n  else:\n    for x in expected_rank:\n      expected_rank_dict[x] = True\n\n  actual_rank = tensor.shape.ndims\n  if actual_rank not in expected_rank_dict:\n    scope_name = tf.get_variable_scope().name\n    raise ValueError(\n        ""For the tensor `%s` in scope `%s`, the actual rank ""\n        ""`%d` (shape = %s) is not equal to the expected rank `%s`"" %\n        (name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))\n'"
bert/optimization.py,25,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n""""""Functions and classes related to optimization (weight updates).""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport re\nimport tensorflow as tf\n\n\ndef create_optimizer(loss, init_lr, num_train_steps, num_warmup_steps, use_tpu):\n  """"""Creates an optimizer training op.""""""\n  global_step = tf.train.get_or_create_global_step()\n\n  learning_rate = tf.constant(value=init_lr, shape=[], dtype=tf.float32)\n\n  # Implements linear decay of the learning rate.\n  learning_rate = tf.train.polynomial_decay(\n      learning_rate,\n      global_step,\n      num_train_steps,\n      end_learning_rate=0.0,\n      power=1.0,\n      cycle=False)\n\n  # Implements linear warmup. I.e., if global_step < num_warmup_steps, the\n  # learning rate will be `global_step/num_warmup_steps * init_lr`.\n  if num_warmup_steps:\n    global_steps_int = tf.cast(global_step, tf.int32)\n    warmup_steps_int = tf.constant(num_warmup_steps, dtype=tf.int32)\n\n    global_steps_float = tf.cast(global_steps_int, tf.float32)\n    warmup_steps_float = tf.cast(warmup_steps_int, tf.float32)\n\n    warmup_percent_done = global_steps_float / warmup_steps_float\n    warmup_learning_rate = init_lr * warmup_percent_done\n\n    is_warmup = tf.cast(global_steps_int < warmup_steps_int, tf.float32)\n    learning_rate = (\n        (1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate)\n\n  # It is recommended that you use this optimizer for fine tuning, since this\n  # is how the model was trained (note that the Adam m/v variables are NOT\n  # loaded from init_checkpoint.)\n  optimizer = AdamWeightDecayOptimizer(\n      learning_rate=learning_rate,\n      weight_decay_rate=0.01,\n      beta_1=0.9,\n      beta_2=0.999,\n      epsilon=1e-6,\n      exclude_from_weight_decay=[""LayerNorm"", ""layer_norm"", ""bias""])\n\n  if use_tpu:\n    optimizer = tf.contrib.tpu.CrossShardOptimizer(optimizer)\n\n  tvars = tf.trainable_variables()\n  grads = tf.gradients(loss, tvars)\n\n  # This is how the model was pre-trained.\n  (grads, _) = tf.clip_by_global_norm(grads, clip_norm=1.0)\n\n  train_op = optimizer.apply_gradients(\n      zip(grads, tvars), global_step=global_step)\n\n  # Normally the global step update is done inside of `apply_gradients`.\n  # However, `AdamWeightDecayOptimizer` doesn\'t do this. But if you use\n  # a different optimizer, you should probably take this line out.\n  new_global_step = global_step + 1\n  train_op = tf.group(train_op, [global_step.assign(new_global_step)])\n  return train_op\n\n\nclass AdamWeightDecayOptimizer(tf.train.Optimizer):\n  """"""A basic Adam optimizer that includes ""correct"" L2 weight decay.""""""\n\n  def __init__(self,\n               learning_rate,\n               weight_decay_rate=0.0,\n               beta_1=0.9,\n               beta_2=0.999,\n               epsilon=1e-6,\n               exclude_from_weight_decay=None,\n               name=""AdamWeightDecayOptimizer""):\n    """"""Constructs a AdamWeightDecayOptimizer.""""""\n    super(AdamWeightDecayOptimizer, self).__init__(False, name)\n\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    """"""See base class.""""""\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(\n          name=param_name + ""/adam_m"",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n      v = tf.get_variable(\n          name=param_name + ""/adam_v"",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn\'t interact\n      # with the m/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n\n      update_with_lr = self.learning_rate * update\n\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    """"""Whether to use L2 weight decay for `param_name`.""""""\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    """"""Get the variable name from the tensor name.""""""\n    m = re.match(""^(.*):\\\\d+$"", param_name)\n    if m is not None:\n      param_name = m.group(1)\n    return param_name\n'"
bert/run_classifier.py,94,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n""""""BERT finetuning runner.""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport csv\nimport os\nimport modeling\nimport optimization\nimport tokenization\nimport tensorflow as tf\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    ""data_dir"", None,\n    ""The input data dir. Should contain the .tsv files (or other data files) ""\n    ""for the task."")\n\nflags.DEFINE_string(\n    ""bert_config_file"", None,\n    ""The config json file corresponding to the pre-trained BERT model. ""\n    ""This specifies the model architecture."")\n\nflags.DEFINE_string(""task_name"", None, ""The name of the task to train."")\n\nflags.DEFINE_string(""vocab_file"", None,\n                    ""The vocabulary file that the BERT model was trained on."")\n\nflags.DEFINE_string(\n    ""output_dir"", None,\n    ""The output directory where the model checkpoints will be written."")\n\n## Other parameters\n\nflags.DEFINE_string(\n    ""init_checkpoint"", None,\n    ""Initial checkpoint (usually from a pre-trained BERT model)."")\n\nflags.DEFINE_bool(\n    ""do_lower_case"", True,\n    ""Whether to lower case the input text. Should be True for uncased ""\n    ""models and False for cased models."")\n\nflags.DEFINE_integer(\n    ""max_seq_length"", 128,\n    ""The maximum total input sequence length after WordPiece tokenization. ""\n    ""Sequences longer than this will be truncated, and sequences shorter ""\n    ""than this will be padded."")\n\nflags.DEFINE_bool(""do_train"", False, ""Whether to run training."")\n\nflags.DEFINE_bool(""do_eval"", False, ""Whether to run eval on the dev set."")\n\nflags.DEFINE_bool(\n    ""do_predict"", False,\n    ""Whether to run the model in inference mode on the test set."")\n\nflags.DEFINE_integer(""train_batch_size"", 32, ""Total batch size for training."")\n\nflags.DEFINE_integer(""eval_batch_size"", 8, ""Total batch size for eval."")\n\nflags.DEFINE_integer(""predict_batch_size"", 8, ""Total batch size for predict."")\n\nflags.DEFINE_float(""learning_rate"", 5e-5, ""The initial learning rate for Adam."")\n\nflags.DEFINE_float(""num_train_epochs"", 3.0,\n                   ""Total number of training epochs to perform."")\n\nflags.DEFINE_float(\n    ""warmup_proportion"", 0.1,\n    ""Proportion of training to perform linear learning rate warmup for. ""\n    ""E.g., 0.1 = 10% of training."")\n\nflags.DEFINE_integer(""save_checkpoints_steps"", 1000,\n                     ""How often to save the model checkpoint."")\n\nflags.DEFINE_integer(""iterations_per_loop"", 1000,\n                     ""How many steps to make in each estimator call."")\n\nflags.DEFINE_bool(""use_tpu"", False, ""Whether to use TPU or GPU/CPU."")\n\ntf.flags.DEFINE_string(\n    ""tpu_name"", None,\n    ""The Cloud TPU to use for training. This should be either the name ""\n    ""used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 ""\n    ""url."")\n\ntf.flags.DEFINE_string(\n    ""tpu_zone"", None,\n    ""[Optional] GCE zone where the Cloud TPU is located in. If not ""\n    ""specified, we will attempt to automatically detect the GCE project from ""\n    ""metadata."")\n\ntf.flags.DEFINE_string(\n    ""gcp_project"", None,\n    ""[Optional] Project name for the Cloud TPU-enabled project. If not ""\n    ""specified, we will attempt to automatically detect the GCE project from ""\n    ""metadata."")\n\ntf.flags.DEFINE_string(""master"", None, ""[Optional] TensorFlow master URL."")\n\nflags.DEFINE_integer(\n    ""num_tpu_cores"", 8,\n    ""Only used if `use_tpu` is True. Total number of TPU cores to use."")\n\n\nclass InputExample(object):\n  """"""A single training/test example for simple sequence classification.""""""\n\n  def __init__(self, guid, text_a, text_b=None, label=None):\n    """"""Constructs a InputExample.\n\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    """"""\n    self.guid = guid\n    self.text_a = text_a\n    self.text_b = text_b\n    self.label = label\n\n\nclass PaddingInputExample(object):\n  """"""Fake example so the num input examples is a multiple of the batch size.\n\n  When running eval/predict on the TPU, we need to pad the number of examples\n  to be a multiple of the batch size, because the TPU requires a fixed batch\n  size. The alternative is to drop the last batch, which is bad because it means\n  the entire output data won\'t be generated.\n\n  We use this class instead of `None` because treating `None` as padding\n  battches could cause silent errors.\n  """"""\n\n\nclass InputFeatures(object):\n  """"""A single set of features of data.""""""\n\n  def __init__(self,\n               input_ids,\n               input_mask,\n               segment_ids,\n               label_id,\n               is_real_example=True):\n    self.input_ids = input_ids\n    self.input_mask = input_mask\n    self.segment_ids = segment_ids\n    self.label_id = label_id\n    self.is_real_example = is_real_example\n\n\nclass DataProcessor(object):\n  """"""Base class for data converters for sequence classification data sets.""""""\n\n  def get_train_examples(self, data_dir):\n    """"""Gets a collection of `InputExample`s for the train set.""""""\n    raise NotImplementedError()\n\n  def get_dev_examples(self, data_dir):\n    """"""Gets a collection of `InputExample`s for the dev set.""""""\n    raise NotImplementedError()\n\n  def get_test_examples(self, data_dir):\n    """"""Gets a collection of `InputExample`s for prediction.""""""\n    raise NotImplementedError()\n\n  def get_labels(self):\n    """"""Gets the list of labels for this data set.""""""\n    raise NotImplementedError()\n\n  @classmethod\n  def _read_tsv(cls, input_file, quotechar=None):\n    """"""Reads a tab separated value file.""""""\n    with tf.gfile.Open(input_file, ""r"") as f:\n      reader = csv.reader(f, delimiter=""\\t"", quotechar=quotechar)\n      lines = []\n      for line in reader:\n        lines.append(line)\n      return lines\n\n\nclass XnliProcessor(DataProcessor):\n  """"""Processor for the XNLI data set.""""""\n\n  def __init__(self):\n    self.language = ""zh""\n\n  def get_train_examples(self, data_dir):\n    """"""See base class.""""""\n    lines = self._read_tsv(\n        os.path.join(data_dir, ""multinli"",\n                     ""multinli.train.%s.tsv"" % self.language))\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = ""train-%d"" % (i)\n      text_a = tokenization.convert_to_unicode(line[0])\n      text_b = tokenization.convert_to_unicode(line[1])\n      label = tokenization.convert_to_unicode(line[2])\n      if label == tokenization.convert_to_unicode(""contradictory""):\n        label = tokenization.convert_to_unicode(""contradiction"")\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n  def get_dev_examples(self, data_dir):\n    """"""See base class.""""""\n    lines = self._read_tsv(os.path.join(data_dir, ""xnli.dev.tsv""))\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = ""dev-%d"" % (i)\n      language = tokenization.convert_to_unicode(line[0])\n      if language != tokenization.convert_to_unicode(self.language):\n        continue\n      text_a = tokenization.convert_to_unicode(line[6])\n      text_b = tokenization.convert_to_unicode(line[7])\n      label = tokenization.convert_to_unicode(line[1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n  def get_labels(self):\n    """"""See base class.""""""\n    return [""contradiction"", ""entailment"", ""neutral""]\n\n\nclass MnliProcessor(DataProcessor):\n  """"""Processor for the MultiNLI data set (GLUE version).""""""\n\n  def get_train_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""train.tsv"")), ""train"")\n\n  def get_dev_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""dev_matched.tsv"")),\n        ""dev_matched"")\n\n  def get_test_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""test_matched.tsv"")), ""test"")\n\n  def get_labels(self):\n    """"""See base class.""""""\n    return [""contradiction"", ""entailment"", ""neutral""]\n\n  def _create_examples(self, lines, set_type):\n    """"""Creates examples for the training and dev sets.""""""\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = ""%s-%s"" % (set_type, tokenization.convert_to_unicode(line[0]))\n      text_a = tokenization.convert_to_unicode(line[8])\n      text_b = tokenization.convert_to_unicode(line[9])\n      if set_type == ""test"":\n        label = ""contradiction""\n      else:\n        label = tokenization.convert_to_unicode(line[-1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass MrpcProcessor(DataProcessor):\n  """"""Processor for the MRPC data set (GLUE version).""""""\n\n  def get_train_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""train.tsv"")), ""train"")\n\n  def get_dev_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""dev.tsv"")), ""dev"")\n\n  def get_test_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""test.tsv"")), ""test"")\n\n  def get_labels(self):\n    """"""See base class.""""""\n    return [""0"", ""1""]\n\n  def _create_examples(self, lines, set_type):\n    """"""Creates examples for the training and dev sets.""""""\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = ""%s-%s"" % (set_type, i)\n      text_a = tokenization.convert_to_unicode(line[3])\n      text_b = tokenization.convert_to_unicode(line[4])\n      if set_type == ""test"":\n        label = ""0""\n      else:\n        label = tokenization.convert_to_unicode(line[0])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass ColaProcessor(DataProcessor):\n  """"""Processor for the CoLA data set (GLUE version).""""""\n\n  def get_train_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""train.tsv"")), ""train"")\n\n  def get_dev_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""dev.tsv"")), ""dev"")\n\n  def get_test_examples(self, data_dir):\n    """"""See base class.""""""\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, ""test.tsv"")), ""test"")\n\n  def get_labels(self):\n    """"""See base class.""""""\n    return [""0"", ""1""]\n\n  def _create_examples(self, lines, set_type):\n    """"""Creates examples for the training and dev sets.""""""\n    examples = []\n    for (i, line) in enumerate(lines):\n      # Only the test set has a header\n      if set_type == ""test"" and i == 0:\n        continue\n      guid = ""%s-%s"" % (set_type, i)\n      if set_type == ""test"":\n        text_a = tokenization.convert_to_unicode(line[1])\n        label = ""0""\n      else:\n        text_a = tokenization.convert_to_unicode(line[3])\n        label = tokenization.convert_to_unicode(line[1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=None, label=label))\n    return examples\n\n\ndef convert_single_example(ex_index, example, label_list, max_seq_length,\n                           tokenizer):\n  """"""Converts a single `InputExample` into a single `InputFeatures`.""""""\n\n  if isinstance(example, PaddingInputExample):\n    return InputFeatures(\n        input_ids=[0] * max_seq_length,\n        input_mask=[0] * max_seq_length,\n        segment_ids=[0] * max_seq_length,\n        label_id=0,\n        is_real_example=False)\n\n  label_map = {}\n  for (i, label) in enumerate(label_list):\n    label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with ""- 3""\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with ""- 2""\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in BERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where ""type_ids"" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the wordpiece\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the ""sentence vector"". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(""[CLS]"")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(""[SEP]"")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(""[SEP]"")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  label_id = label_map[example.label]\n  if ex_index < 5:\n    tf.logging.info(""*** Example ***"")\n    tf.logging.info(""guid: %s"" % (example.guid))\n    tf.logging.info(""tokens: %s"" % "" "".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(""input_ids: %s"" % "" "".join([str(x) for x in input_ids]))\n    tf.logging.info(""input_mask: %s"" % "" "".join([str(x) for x in input_mask]))\n    tf.logging.info(""segment_ids: %s"" % "" "".join([str(x) for x in segment_ids]))\n    tf.logging.info(""label: %s (id = %d)"" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)\n  return feature\n\n\ndef file_based_convert_examples_to_features(\n    examples, label_list, max_seq_length, tokenizer, output_file):\n  """"""Convert a set of `InputExample`s to a TFRecord file.""""""\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(""Writing example %d of %d"" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    features[""input_ids""] = create_int_feature(feature.input_ids)\n    features[""input_mask""] = create_int_feature(feature.input_mask)\n    features[""segment_ids""] = create_int_feature(feature.segment_ids)\n    features[""label_ids""] = create_int_feature([feature.label_id])\n    features[""is_real_example""] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())\n  writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length, is_training,\n                                drop_remainder):\n  """"""Creates an `input_fn` closure to be passed to TPUEstimator.""""""\n\n  name_to_features = {\n      ""input_ids"": tf.FixedLenFeature([seq_length], tf.int64),\n      ""input_mask"": tf.FixedLenFeature([seq_length], tf.int64),\n      ""segment_ids"": tf.FixedLenFeature([seq_length], tf.int64),\n      ""label_ids"": tf.FixedLenFeature([], tf.int64),\n      ""is_real_example"": tf.FixedLenFeature([], tf.int64),\n  }\n\n  def _decode_record(record, name_to_features):\n    """"""Decodes a record to a TensorFlow example.""""""\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n\n  def input_fn(params):\n    """"""The actual input function.""""""\n    batch_size = params[""batch_size""]\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn\'t matter.\n    d = tf.data.TFRecordDataset(input_file)\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.apply(\n        tf.contrib.data.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            drop_remainder=drop_remainder))\n\n    return d\n\n  return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n  """"""Truncates a sequence pair in place to the maximum length.""""""\n\n  # This is a simple heuristic which will always truncate the longer sequence\n  # one token at a time. This makes more sense than truncating an equal percent\n  # of tokens from each, since if one sequence is very short then each token\n  # that\'s truncated likely contains more information than a longer sequence.\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_length:\n      break\n    if len(tokens_a) > len(tokens_b):\n      tokens_a.pop()\n    else:\n      tokens_b.pop()\n\n\ndef create_model(bert_config, is_training, input_ids, input_mask, segment_ids,\n                 labels, num_labels, use_one_hot_embeddings):\n  """"""Creates a classification model.""""""\n  model = modeling.BertModel(\n      config=bert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings)\n\n  # In the demo, we are doing a simple classification task on the entire\n  # segment.\n  #\n  # If you want to use the token-level output, use model.get_sequence_output()\n  # instead.\n  output_layer = model.get_pooled_output()\n\n  hidden_size = output_layer.shape[-1].value\n\n  output_weights = tf.get_variable(\n      ""output_weights"", [num_labels, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      ""output_bias"", [num_labels], initializer=tf.zeros_initializer())\n\n  with tf.variable_scope(""loss""):\n    if is_training:\n      # I.e., 0.1 dropout\n      output_layer = tf.nn.dropout(output_layer, keep_prob=0.9)\n\n    logits = tf.matmul(output_layer, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    probabilities = tf.nn.softmax(logits, axis=-1)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    one_hot_labels = tf.one_hot(labels, depth=num_labels, dtype=tf.float32)\n\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n\n    return (loss, per_example_loss, logits, probabilities)\n\n\ndef model_fn_builder(bert_config, num_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  """"""Returns `model_fn` closure for TPUEstimator.""""""\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    """"""The `model_fn` for TPUEstimator.""""""\n\n    tf.logging.info(""*** Features ***"")\n    for name in sorted(features.keys()):\n      tf.logging.info(""  name = %s, shape = %s"" % (name, features[name].shape))\n\n    input_ids = features[""input_ids""]\n    input_mask = features[""input_mask""]\n    segment_ids = features[""segment_ids""]\n    label_ids = features[""label_ids""]\n    is_real_example = None\n    if ""is_real_example"" in features:\n      is_real_example = tf.cast(features[""is_real_example""], dtype=tf.float32)\n    else:\n      is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    (total_loss, per_example_loss, logits, probabilities) = create_model(\n        bert_config, is_training, input_ids, input_mask, segment_ids, label_ids,\n        num_labels, use_one_hot_embeddings)\n\n    tvars = tf.trainable_variables()\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(""**** Trainable Variables ****"")\n    for var in tvars:\n      init_string = """"\n      if var.name in initialized_variable_names:\n        init_string = "", *INIT_FROM_CKPT*""\n      tf.logging.info(""  name = %s, shape = %s%s"", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(per_example_loss, label_ids, logits, is_real_example):\n        predictions = tf.argmax(logits, axis=-1, output_type=tf.int32)\n        accuracy = tf.metrics.accuracy(\n            labels=label_ids, predictions=predictions, weights=is_real_example)\n        loss = tf.metrics.mean(values=per_example_loss, weights=is_real_example)\n        return {\n            ""eval_accuracy"": accuracy,\n            ""eval_loss"": loss,\n        }\n\n      eval_metrics = (metric_fn,\n                      [per_example_loss, label_ids, logits, is_real_example])\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          predictions={""probabilities"": probabilities},\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef input_fn_builder(features, seq_length, is_training, drop_remainder):\n  """"""Creates an `input_fn` closure to be passed to TPUEstimator.""""""\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    """"""The actual input function.""""""\n    batch_size = params[""batch_size""]\n\n    num_examples = len(features)\n\n    # This is for demo purposes and does NOT scale to large data sets. We do\n    # not use Dataset.from_generator() because that uses tf.py_func which is\n    # not TPU compatible. The right way to load data is with TFRecordReader.\n    d = tf.data.Dataset.from_tensor_slices({\n        ""input_ids"":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        ""input_mask"":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        ""segment_ids"":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        ""label_ids"":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef convert_examples_to_features(examples, label_list, max_seq_length,\n                                 tokenizer):\n  """"""Convert a set of `InputExample`s to a list of `InputFeatures`.""""""\n\n  features = []\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(""Writing example %d of %d"" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    features.append(feature)\n  return features\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  processors = {\n      ""cola"": ColaProcessor,\n      ""mnli"": MnliProcessor,\n      ""mrpc"": MrpcProcessor,\n      ""xnli"": XnliProcessor,\n  }\n\n  tokenization.validate_case_matches_checkpoint(FLAGS.do_lower_case,\n                                                FLAGS.init_checkpoint)\n\n  if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n    raise ValueError(\n        ""At least one of `do_train`, `do_eval` or `do_predict\' must be True."")\n\n  bert_config = modeling.BertConfig.from_json_file(FLAGS.bert_config_file)\n\n  if FLAGS.max_seq_length > bert_config.max_position_embeddings:\n    raise ValueError(\n        ""Cannot use sequence length %d because the BERT model ""\n        ""was only trained up to sequence length %d"" %\n        (FLAGS.max_seq_length, bert_config.max_position_embeddings))\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  task_name = FLAGS.task_name.lower()\n\n  if task_name not in processors:\n    raise ValueError(""Task not found: %s"" % (task_name))\n\n  processor = processors[task_name]()\n\n  label_list = processor.get_labels()\n\n  tokenizer = tokenization.FullTokenizer(\n      vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  if FLAGS.do_train:\n    train_examples = processor.get_train_examples(FLAGS.data_dir)\n    num_train_steps = int(\n        len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)\n    num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n  model_fn = model_fn_builder(\n      bert_config=bert_config,\n      num_labels=len(label_list),\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=num_train_steps,\n      num_warmup_steps=num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    train_file = os.path.join(FLAGS.output_dir, ""train.tf_record"")\n    file_based_convert_examples_to_features(\n        train_examples, label_list, FLAGS.max_seq_length, tokenizer, train_file)\n    tf.logging.info(""***** Running training *****"")\n    tf.logging.info(""  Num examples = %d"", len(train_examples))\n    tf.logging.info(""  Batch size = %d"", FLAGS.train_batch_size)\n    tf.logging.info(""  Num steps = %d"", num_train_steps)\n    train_input_fn = file_based_input_fn_builder(\n        input_file=train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_eval:\n    eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n    num_actual_eval_examples = len(eval_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on. These do NOT count towards the metric (all tf.metrics\n      # support a per-instance weight, and these get a weight of 0.0).\n      while len(eval_examples) % FLAGS.eval_batch_size != 0:\n        eval_examples.append(PaddingInputExample())\n\n    eval_file = os.path.join(FLAGS.output_dir, ""eval.tf_record"")\n    file_based_convert_examples_to_features(\n        eval_examples, label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n\n    tf.logging.info(""***** Running evaluation *****"")\n    tf.logging.info(""  Num examples = %d (%d actual, %d padding)"",\n                    len(eval_examples), num_actual_eval_examples,\n                    len(eval_examples) - num_actual_eval_examples)\n    tf.logging.info(""  Batch size = %d"", FLAGS.eval_batch_size)\n\n    # This tells the estimator to run through the entire set.\n    eval_steps = None\n    # However, if running eval on the TPU, you will need to specify the\n    # number of steps.\n    if FLAGS.use_tpu:\n      assert len(eval_examples) % FLAGS.eval_batch_size == 0\n      eval_steps = int(len(eval_examples) // FLAGS.eval_batch_size)\n\n    eval_drop_remainder = True if FLAGS.use_tpu else False\n    eval_input_fn = file_based_input_fn_builder(\n        input_file=eval_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=eval_drop_remainder)\n\n    result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n\n    output_eval_file = os.path.join(FLAGS.output_dir, ""eval_results.txt"")\n    with tf.gfile.GFile(output_eval_file, ""w"") as writer:\n      tf.logging.info(""***** Eval results *****"")\n      for key in sorted(result.keys()):\n        tf.logging.info(""  %s = %s"", key, str(result[key]))\n        writer.write(""%s = %s\\n"" % (key, str(result[key])))\n\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(PaddingInputExample())\n\n    predict_file = os.path.join(FLAGS.output_dir, ""predict.tf_record"")\n    file_based_convert_examples_to_features(predict_examples, label_list,\n                                            FLAGS.max_seq_length, tokenizer,\n                                            predict_file)\n\n    tf.logging.info(""***** Running prediction*****"")\n    tf.logging.info(""  Num examples = %d (%d actual, %d padding)"",\n                    len(predict_examples), num_actual_predict_examples,\n                    len(predict_examples) - num_actual_predict_examples)\n    tf.logging.info(""  Batch size = %d"", FLAGS.predict_batch_size)\n\n    predict_drop_remainder = True if FLAGS.use_tpu else False\n    predict_input_fn = file_based_input_fn_builder(\n        input_file=predict_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=predict_drop_remainder)\n\n    result = estimator.predict(input_fn=predict_input_fn)\n\n    output_predict_file = os.path.join(FLAGS.output_dir, ""test_results.tsv"")\n    with tf.gfile.GFile(output_predict_file, ""w"") as writer:\n      num_written_lines = 0\n      tf.logging.info(""***** Predict results *****"")\n      for (i, prediction) in enumerate(result):\n        probabilities = prediction[""probabilities""]\n        if i >= num_actual_predict_examples:\n          break\n        output_line = ""\\t"".join(\n            str(class_probability)\n            for class_probability in probabilities) + ""\\n""\n        writer.write(output_line)\n        num_written_lines += 1\n    assert num_written_lines == num_actual_predict_examples\n\n\nif __name__ == ""__main__"":\n  flags.mark_flag_as_required(""data_dir"")\n  flags.mark_flag_as_required(""task_name"")\n  flags.mark_flag_as_required(""vocab_file"")\n  flags.mark_flag_as_required(""bert_config_file"")\n  flags.mark_flag_as_required(""output_dir"")\n  tf.app.run()\n'"
bert/run_pretraining.py,97,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n""""""Run masked LM/next sentence masked_lm pre-training for BERT.""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport modeling\nimport optimization\nimport tensorflow as tf\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    ""bert_config_file"", None,\n    ""The config json file corresponding to the pre-trained BERT model. ""\n    ""This specifies the model architecture."")\n\nflags.DEFINE_string(\n    ""input_file"", None,\n    ""Input TF example files (can be a glob or comma separated)."")\n\nflags.DEFINE_string(\n    ""output_dir"", None,\n    ""The output directory where the model checkpoints will be written."")\n\n## Other parameters\nflags.DEFINE_string(\n    ""init_checkpoint"", None,\n    ""Initial checkpoint (usually from a pre-trained BERT model)."")\n\nflags.DEFINE_integer(\n    ""max_seq_length"", 128,\n    ""The maximum total input sequence length after WordPiece tokenization. ""\n    ""Sequences longer than this will be truncated, and sequences shorter ""\n    ""than this will be padded. Must match data generation."")\n\nflags.DEFINE_integer(\n    ""max_predictions_per_seq"", 20,\n    ""Maximum number of masked LM predictions per sequence. ""\n    ""Must match data generation."")\n\nflags.DEFINE_bool(""do_train"", False, ""Whether to run training."")\n\nflags.DEFINE_bool(""do_eval"", False, ""Whether to run eval on the dev set."")\n\nflags.DEFINE_integer(""train_batch_size"", 32, ""Total batch size for training."")\n\nflags.DEFINE_integer(""eval_batch_size"", 8, ""Total batch size for eval."")\n\nflags.DEFINE_float(""learning_rate"", 5e-5, ""The initial learning rate for Adam."")\n\nflags.DEFINE_integer(""num_train_steps"", 100000, ""Number of training steps."")\n\nflags.DEFINE_integer(""num_warmup_steps"", 10000, ""Number of warmup steps."")\n\nflags.DEFINE_integer(""save_checkpoints_steps"", 1000,\n                     ""How often to save the model checkpoint."")\n\nflags.DEFINE_integer(""iterations_per_loop"", 1000,\n                     ""How many steps to make in each estimator call."")\n\nflags.DEFINE_integer(""max_eval_steps"", 100, ""Maximum number of eval steps."")\n\nflags.DEFINE_bool(""use_tpu"", False, ""Whether to use TPU or GPU/CPU."")\n\ntf.flags.DEFINE_string(\n    ""tpu_name"", None,\n    ""The Cloud TPU to use for training. This should be either the name ""\n    ""used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 ""\n    ""url."")\n\ntf.flags.DEFINE_string(\n    ""tpu_zone"", None,\n    ""[Optional] GCE zone where the Cloud TPU is located in. If not ""\n    ""specified, we will attempt to automatically detect the GCE project from ""\n    ""metadata."")\n\ntf.flags.DEFINE_string(\n    ""gcp_project"", None,\n    ""[Optional] Project name for the Cloud TPU-enabled project. If not ""\n    ""specified, we will attempt to automatically detect the GCE project from ""\n    ""metadata."")\n\ntf.flags.DEFINE_string(""master"", None, ""[Optional] TensorFlow master URL."")\n\nflags.DEFINE_integer(\n    ""num_tpu_cores"", 8,\n    ""Only used if `use_tpu` is True. Total number of TPU cores to use."")\n\n\ndef model_fn_builder(bert_config, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  """"""Returns `model_fn` closure for TPUEstimator.""""""\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    """"""The `model_fn` for TPUEstimator.""""""\n\n    tf.logging.info(""*** Features ***"")\n    for name in sorted(features.keys()):\n      tf.logging.info(""  name = %s, shape = %s"" % (name, features[name].shape))\n\n    input_ids = features[""input_ids""]\n    input_mask = features[""input_mask""]\n    segment_ids = features[""segment_ids""]\n    masked_lm_positions = features[""masked_lm_positions""]\n    masked_lm_ids = features[""masked_lm_ids""]\n    masked_lm_weights = features[""masked_lm_weights""]\n    next_sentence_labels = features[""next_sentence_labels""]\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    model = modeling.BertModel(\n        config=bert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n\n    (masked_lm_loss,\n     masked_lm_example_loss, masked_lm_log_probs) = get_masked_lm_output(\n         bert_config, model.get_sequence_output(), model.get_embedding_table(),\n         masked_lm_positions, masked_lm_ids, masked_lm_weights)\n\n    (next_sentence_loss, next_sentence_example_loss,\n     next_sentence_log_probs) = get_next_sentence_output(\n         bert_config, model.get_pooled_output(), next_sentence_labels)\n\n    total_loss = masked_lm_loss + next_sentence_loss\n\n    tvars = tf.trainable_variables()\n\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(""**** Trainable Variables ****"")\n    for var in tvars:\n      init_string = """"\n      if var.name in initialized_variable_names:\n        init_string = "", *INIT_FROM_CKPT*""\n      tf.logging.info(""  name = %s, shape = %s%s"", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n                    masked_lm_weights, next_sentence_example_loss,\n                    next_sentence_log_probs, next_sentence_labels):\n        """"""Computes the loss and accuracy of the model.""""""\n        masked_lm_log_probs = tf.reshape(masked_lm_log_probs,\n                                         [-1, masked_lm_log_probs.shape[-1]])\n        masked_lm_predictions = tf.argmax(\n            masked_lm_log_probs, axis=-1, output_type=tf.int32)\n        masked_lm_example_loss = tf.reshape(masked_lm_example_loss, [-1])\n        masked_lm_ids = tf.reshape(masked_lm_ids, [-1])\n        masked_lm_weights = tf.reshape(masked_lm_weights, [-1])\n        masked_lm_accuracy = tf.metrics.accuracy(\n            labels=masked_lm_ids,\n            predictions=masked_lm_predictions,\n            weights=masked_lm_weights)\n        masked_lm_mean_loss = tf.metrics.mean(\n            values=masked_lm_example_loss, weights=masked_lm_weights)\n\n        next_sentence_log_probs = tf.reshape(\n            next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])\n        next_sentence_predictions = tf.argmax(\n            next_sentence_log_probs, axis=-1, output_type=tf.int32)\n        next_sentence_labels = tf.reshape(next_sentence_labels, [-1])\n        next_sentence_accuracy = tf.metrics.accuracy(\n            labels=next_sentence_labels, predictions=next_sentence_predictions)\n        next_sentence_mean_loss = tf.metrics.mean(\n            values=next_sentence_example_loss)\n\n        return {\n            ""masked_lm_accuracy"": masked_lm_accuracy,\n            ""masked_lm_loss"": masked_lm_mean_loss,\n            ""next_sentence_accuracy"": next_sentence_accuracy,\n            ""next_sentence_loss"": next_sentence_mean_loss,\n        }\n\n      eval_metrics = (metric_fn, [\n          masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n          masked_lm_weights, next_sentence_example_loss,\n          next_sentence_log_probs, next_sentence_labels\n      ])\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(""Only TRAIN and EVAL modes are supported: %s"" % (mode))\n\n    return output_spec\n\n  return model_fn\n\n\ndef get_masked_lm_output(bert_config, input_tensor, output_weights, positions,\n                         label_ids, label_weights):\n  """"""Get loss and log probs for the masked LM.""""""\n  input_tensor = gather_indexes(input_tensor, positions)\n\n  with tf.variable_scope(""cls/predictions""):\n    # We apply one more non-linear transformation before the output layer.\n    # This matrix is not used after pre-training.\n    with tf.variable_scope(""transform""):\n      input_tensor = tf.layers.dense(\n          input_tensor,\n          units=bert_config.hidden_size,\n          activation=modeling.get_activation(bert_config.hidden_act),\n          kernel_initializer=modeling.create_initializer(\n              bert_config.initializer_range))\n      input_tensor = modeling.layer_norm(input_tensor)\n\n    # The output weights are the same as the input embeddings, but there is\n    # an output-only bias for each token.\n    output_bias = tf.get_variable(\n        ""output_bias"",\n        shape=[bert_config.vocab_size],\n        initializer=tf.zeros_initializer())\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    label_ids = tf.reshape(label_ids, [-1])\n    label_weights = tf.reshape(label_weights, [-1])\n\n    one_hot_labels = tf.one_hot(\n        label_ids, depth=bert_config.vocab_size, dtype=tf.float32)\n\n    # The `positions` tensor might be zero-padded (if the sequence is too\n    # short to have the maximum number of predictions). The `label_weights`\n    # tensor has a value of 1.0 for every real prediction and 0.0 for the\n    # padding predictions.\n    per_example_loss = -tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])\n    numerator = tf.reduce_sum(label_weights * per_example_loss)\n    denominator = tf.reduce_sum(label_weights) + 1e-5\n    loss = numerator / denominator\n\n  return (loss, per_example_loss, log_probs)\n\n\ndef get_next_sentence_output(bert_config, input_tensor, labels):\n  """"""Get loss and log probs for the next sentence prediction.""""""\n\n  # Simple binary classification. Note that 0 is ""next sentence"" and 1 is\n  # ""random sentence"". This weight matrix is not used after pre-training.\n  with tf.variable_scope(""cls/seq_relationship""):\n    output_weights = tf.get_variable(\n        ""output_weights"",\n        shape=[2, bert_config.hidden_size],\n        initializer=modeling.create_initializer(bert_config.initializer_range))\n    output_bias = tf.get_variable(\n        ""output_bias"", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n    labels = tf.reshape(labels, [-1])\n    one_hot_labels = tf.one_hot(labels, depth=2, dtype=tf.float32)\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n    return (loss, per_example_loss, log_probs)\n\n\ndef gather_indexes(sequence_tensor, positions):\n  """"""Gathers the vectors at the specific positions over a minibatch.""""""\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef input_fn_builder(input_files,\n                     max_seq_length,\n                     max_predictions_per_seq,\n                     is_training,\n                     num_cpu_threads=4):\n  """"""Creates an `input_fn` closure to be passed to TPUEstimator.""""""\n\n  def input_fn(params):\n    """"""The actual input function.""""""\n    batch_size = params[""batch_size""]\n\n    name_to_features = {\n        ""input_ids"":\n            tf.FixedLenFeature([max_seq_length], tf.int64),\n        ""input_mask"":\n            tf.FixedLenFeature([max_seq_length], tf.int64),\n        ""segment_ids"":\n            tf.FixedLenFeature([max_seq_length], tf.int64),\n        ""masked_lm_positions"":\n            tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n        ""masked_lm_ids"":\n            tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n        ""masked_lm_weights"":\n            tf.FixedLenFeature([max_predictions_per_seq], tf.float32),\n        ""next_sentence_labels"":\n            tf.FixedLenFeature([1], tf.int64),\n    }\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn\'t matter.\n    if is_training:\n      d = tf.data.Dataset.from_tensor_slices(tf.constant(input_files))\n      d = d.repeat()\n      d = d.shuffle(buffer_size=len(input_files))\n\n      # `cycle_length` is the number of parallel files that get read.\n      cycle_length = min(num_cpu_threads, len(input_files))\n\n      # `sloppy` mode means that the interleaving is not exact. This adds\n      # even more randomness to the training pipeline.\n      d = d.apply(\n          tf.contrib.data.parallel_interleave(\n              tf.data.TFRecordDataset,\n              sloppy=is_training,\n              cycle_length=cycle_length))\n      d = d.shuffle(buffer_size=100)\n    else:\n      d = tf.data.TFRecordDataset(input_files)\n      # Since we evaluate for a fixed number of steps we don\'t want to encounter\n      # out-of-range exceptions.\n      d = d.repeat()\n\n    # We must `drop_remainder` on training because the TPU requires fixed\n    # size dimensions. For eval, we assume we are evaluating on the CPU or GPU\n    # and we *don\'t* want to drop the remainder, otherwise we wont cover\n    # every sample.\n    d = d.apply(\n        tf.contrib.data.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            num_parallel_batches=num_cpu_threads,\n            drop_remainder=True))\n    return d\n\n  return input_fn\n\n\ndef _decode_record(record, name_to_features):\n  """"""Decodes a record to a TensorFlow example.""""""\n  example = tf.parse_single_example(record, name_to_features)\n\n  # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n  # So cast all int64 to int32.\n  for name in list(example.keys()):\n    t = example[name]\n    if t.dtype == tf.int64:\n      t = tf.to_int32(t)\n    example[name] = t\n\n  return example\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  if not FLAGS.do_train and not FLAGS.do_eval:\n    raise ValueError(""At least one of `do_train` or `do_eval` must be True."")\n\n  bert_config = modeling.BertConfig.from_json_file(FLAGS.bert_config_file)\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  input_files = []\n  for input_pattern in FLAGS.input_file.split("",""):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(""*** Input Files ***"")\n  for input_file in input_files:\n    tf.logging.info(""  %s"" % input_file)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  model_fn = model_fn_builder(\n      bert_config=bert_config,\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.num_train_steps,\n      num_warmup_steps=FLAGS.num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size)\n\n  if FLAGS.do_train:\n    tf.logging.info(""***** Running training *****"")\n    tf.logging.info(""  Batch size = %d"", FLAGS.train_batch_size)\n    train_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=True)\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)\n\n  if FLAGS.do_eval:\n    tf.logging.info(""***** Running evaluation *****"")\n    tf.logging.info(""  Batch size = %d"", FLAGS.eval_batch_size)\n\n    eval_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=False)\n\n    result = estimator.evaluate(\n        input_fn=eval_input_fn, steps=FLAGS.max_eval_steps)\n\n    output_eval_file = os.path.join(FLAGS.output_dir, ""eval_results.txt"")\n    with tf.gfile.GFile(output_eval_file, ""w"") as writer:\n      tf.logging.info(""***** Eval results *****"")\n      for key in sorted(result.keys()):\n        tf.logging.info(""  %s = %s"", key, str(result[key]))\n        writer.write(""%s = %s\\n"" % (key, str(result[key])))\n\n\nif __name__ == ""__main__"":\n  flags.mark_flag_as_required(""input_file"")\n  flags.mark_flag_as_required(""bert_config_file"")\n  flags.mark_flag_as_required(""output_dir"")\n  tf.app.run()\n'"
bert/tf_metrics.py,22,"b'import numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.ops.metrics_impl import _streaming_confusion_matrix\n\n""""""\nMulticlass tf_metrics\nfrom: \nhttps://github.com/guillaumegenthial/tf_metrics/blob/master/tf_metrics/__init__.py\n__author__ = ""Guillaume Genthial""\n""""""\n\ndef precision(labels, predictions, num_classes, pos_indices=None,\n              weights=None, average=\'micro\'):\n    """"""Multi-class precision metric for Tensorflow\n    Parameters\n    ----------\n    labels : Tensor of tf.int32 or tf.int64\n        The true labels\n    predictions : Tensor of tf.int32 or tf.int64\n        The predictions, same shape as labels\n    num_classes : int\n        The number of classes\n    pos_indices : list of int, optional\n        The indices of the positive classes, default is all\n    weights : Tensor of tf.int32, optional\n        Mask, must be of compatible shape with labels\n    average : str, optional\n        \'micro\': counts the total number of true positives, false\n            positives, and false negatives for the classes in\n            `pos_indices` and infer the metric from it.\n        \'macro\': will compute the metric separately for each class in\n            `pos_indices` and average. Will not account for class\n            imbalance.\n        \'weighted\': will compute the metric separately for each class in\n            `pos_indices` and perform a weighted average by the total\n            number of true labels for each class.\n    Returns\n    -------\n    tuple of (scalar float Tensor, update_op)\n    """"""\n    cm, op = _streaming_confusion_matrix(\n        labels, predictions, num_classes, weights)\n    pr, _, _ = metrics_from_confusion_matrix(\n        cm, pos_indices, average=average)\n    op, _, _ = metrics_from_confusion_matrix(\n        op, pos_indices, average=average)\n    return (pr, op)\n\n\ndef recall(labels, predictions, num_classes, pos_indices=None, weights=None,\n           average=\'micro\'):\n    """"""Multi-class recall metric for Tensorflow\n    Parameters\n    ----------\n    labels : Tensor of tf.int32 or tf.int64\n        The true labels\n    predictions : Tensor of tf.int32 or tf.int64\n        The predictions, same shape as labels\n    num_classes : int\n        The number of classes\n    pos_indices : list of int, optional\n        The indices of the positive classes, default is all\n    weights : Tensor of tf.int32, optional\n        Mask, must be of compatible shape with labels\n    average : str, optional\n        \'micro\': counts the total number of true positives, false\n            positives, and false negatives for the classes in\n            `pos_indices` and infer the metric from it.\n        \'macro\': will compute the metric separately for each class in\n            `pos_indices` and average. Will not account for class\n            imbalance.\n        \'weighted\': will compute the metric separately for each class in\n            `pos_indices` and perform a weighted average by the total\n            number of true labels for each class.\n    Returns\n    -------\n    tuple of (scalar float Tensor, update_op)\n    """"""\n    cm, op = _streaming_confusion_matrix(\n        labels, predictions, num_classes, weights)\n    _, re, _ = metrics_from_confusion_matrix(\n        cm, pos_indices, average=average)\n    _, op, _ = metrics_from_confusion_matrix(\n        op, pos_indices, average=average)\n    return (re, op)\n\n\ndef f1(labels, predictions, num_classes, pos_indices=None, weights=None,\n       average=\'micro\'):\n    return fbeta(labels, predictions, num_classes, pos_indices, weights,\n                 average)\n\n\ndef fbeta(labels, predictions, num_classes, pos_indices=None, weights=None,\n          average=\'micro\', beta=1):\n    """"""Multi-class fbeta metric for Tensorflow\n    Parameters\n    ----------\n    labels : Tensor of tf.int32 or tf.int64\n        The true labels\n    predictions : Tensor of tf.int32 or tf.int64\n        The predictions, same shape as labels\n    num_classes : int\n        The number of classes\n    pos_indices : list of int, optional\n        The indices of the positive classes, default is all\n    weights : Tensor of tf.int32, optional\n        Mask, must be of compatible shape with labels\n    average : str, optional\n        \'micro\': counts the total number of true positives, false\n            positives, and false negatives for the classes in\n            `pos_indices` and infer the metric from it.\n        \'macro\': will compute the metric separately for each class in\n            `pos_indices` and average. Will not account for class\n            imbalance.\n        \'weighted\': will compute the metric separately for each class in\n            `pos_indices` and perform a weighted average by the total\n            number of true labels for each class.\n    beta : int, optional\n        Weight of precision in harmonic mean\n    Returns\n    -------\n    tuple of (scalar float Tensor, update_op)\n    """"""\n    cm, op = _streaming_confusion_matrix(\n        labels, predictions, num_classes, weights)\n    _, _, fbeta = metrics_from_confusion_matrix(\n        cm, pos_indices, average=average, beta=beta)\n    _, _, op = metrics_from_confusion_matrix(\n        op, pos_indices, average=average, beta=beta)\n    return (fbeta, op)\n\n\ndef safe_div(numerator, denominator):\n    """"""Safe division, return 0 if denominator is 0""""""\n    numerator, denominator = tf.to_float(numerator), tf.to_float(denominator)\n    zeros = tf.zeros_like(numerator, dtype=numerator.dtype)\n    denominator_is_zero = tf.equal(denominator, zeros)\n    return tf.where(denominator_is_zero, zeros, numerator / denominator)\n\n\ndef pr_re_fbeta(cm, pos_indices, beta=1):\n    """"""Uses a confusion matrix to compute precision, recall and fbeta""""""\n    num_classes = cm.shape[0]\n    neg_indices = [i for i in range(num_classes) if i not in pos_indices]\n    cm_mask = np.ones([num_classes, num_classes])\n    cm_mask[neg_indices, neg_indices] = 0\n    diag_sum = tf.reduce_sum(tf.diag_part(cm * cm_mask))\n\n    cm_mask = np.ones([num_classes, num_classes])\n    cm_mask[:, neg_indices] = 0\n    tot_pred = tf.reduce_sum(cm * cm_mask)\n\n    cm_mask = np.ones([num_classes, num_classes])\n    cm_mask[neg_indices, :] = 0\n    tot_gold = tf.reduce_sum(cm * cm_mask)\n\n    pr = safe_div(diag_sum, tot_pred)\n    re = safe_div(diag_sum, tot_gold)\n    fbeta = safe_div((1. + beta ** 2) * pr * re, beta ** 2 * pr + re)\n\n    return pr, re, fbeta\n\n\ndef metrics_from_confusion_matrix(cm, pos_indices=None, average=\'micro\',\n                                  beta=1):\n    """"""Precision, Recall and F1 from the confusion matrix\n    Parameters\n    ----------\n    cm : tf.Tensor of type tf.int32, of shape (num_classes, num_classes)\n        The streaming confusion matrix.\n    pos_indices : list of int, optional\n        The indices of the positive classes\n    beta : int, optional\n        Weight of precision in harmonic mean\n    average : str, optional\n        \'micro\', \'macro\' or \'weighted\'\n    """"""\n    num_classes = cm.shape[0]\n    if pos_indices is None:\n        pos_indices = [i for i in range(num_classes)]\n\n    if average == \'micro\':\n        return pr_re_fbeta(cm, pos_indices, beta)\n    elif average in {\'macro\', \'weighted\'}:\n        precisions, recalls, fbetas, n_golds = [], [], [], []\n        for idx in pos_indices:\n            pr, re, fbeta = pr_re_fbeta(cm, [idx], beta)\n            precisions.append(pr)\n            recalls.append(re)\n            fbetas.append(fbeta)\n            cm_mask = np.zeros([num_classes, num_classes])\n            cm_mask[idx, :] = 1\n            n_golds.append(tf.to_float(tf.reduce_sum(cm * cm_mask)))\n\n        if average == \'macro\':\n            pr = tf.reduce_mean(precisions)\n            re = tf.reduce_mean(recalls)\n            fbeta = tf.reduce_mean(fbetas)\n            return pr, re, fbeta\n        if average == \'weighted\':\n            n_gold = tf.reduce_sum(n_golds)\n            pr_sum = sum(p * n for p, n in zip(precisions, n_golds))\n            pr = safe_div(pr_sum, n_gold)\n            re_sum = sum(r * n for r, n in zip(recalls, n_golds))\n            re = safe_div(re_sum, n_gold)\n            fbeta_sum = sum(f * n for f, n in zip(fbetas, n_golds))\n            fbeta = safe_div(fbeta_sum, n_gold)\n            return pr, re, fbeta\n\n    else:\n        raise NotImplementedError()\n'"
bert/tokenization.py,2,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n""""""Tokenization classes.""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport re\nimport unicodedata\nimport six\nimport tensorflow as tf\n\n\ndef validate_case_matches_checkpoint(do_lower_case, init_checkpoint):\n  """"""Checks whether the casing config is consistent with the checkpoint name.""""""\n\n  # The casing has to be passed in by the user and there is no explicit check\n  # as to whether it matches the checkpoint. The casing information probably\n  # should have been stored in the bert_config.json file, but it\'s not, so\n  # we have to heuristically detect it to validate.\n\n  if not init_checkpoint:\n    return\n\n  m = re.match(""^.*?([A-Za-z0-9_-]+)/bert_model.ckpt"", init_checkpoint)\n  if m is None:\n    return\n\n  model_name = m.group(1)\n\n  lower_models = [\n      ""uncased_L-24_H-1024_A-16"", ""uncased_L-12_H-768_A-12"",\n      ""multilingual_L-12_H-768_A-12"", ""chinese_L-12_H-768_A-12""\n  ]\n\n  cased_models = [\n      ""cased_L-12_H-768_A-12"", ""cased_L-24_H-1024_A-16"",\n      ""multi_cased_L-12_H-768_A-12""\n  ]\n\n  is_bad_config = False\n  if model_name in lower_models and not do_lower_case:\n    is_bad_config = True\n    actual_flag = ""False""\n    case_name = ""lowercased""\n    opposite_flag = ""True""\n\n  if model_name in cased_models and do_lower_case:\n    is_bad_config = True\n    actual_flag = ""True""\n    case_name = ""cased""\n    opposite_flag = ""False""\n\n  if is_bad_config:\n    raise ValueError(\n        ""You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. ""\n        ""However, `%s` seems to be a %s model, so you ""\n        ""should pass in `--do_lower_case=%s` so that the fine-tuning matches ""\n        ""how the model was pre-training. If this error is wrong, please ""\n        ""just comment out this check."" % (actual_flag, init_checkpoint,\n                                          model_name, case_name, opposite_flag))\n\n\ndef convert_to_unicode(text):\n  """"""Converts `text` to Unicode (if it\'s not already), assuming utf-8 input.""""""\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return text.decode(""utf-8"", ""ignore"")\n    else:\n      raise ValueError(""Unsupported string type: %s"" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text.decode(""utf-8"", ""ignore"")\n    elif isinstance(text, unicode):\n      return text\n    else:\n      raise ValueError(""Unsupported string type: %s"" % (type(text)))\n  else:\n    raise ValueError(""Not running on Python2 or Python 3?"")\n\n\ndef printable_text(text):\n  """"""Returns text encoded in a way suitable for print or `tf.logging`.""""""\n\n  # These functions want `str` for both Python2 and Python3, but in one case\n  # it\'s a Unicode string and in the other it\'s a byte string.\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return text.decode(""utf-8"", ""ignore"")\n    else:\n      raise ValueError(""Unsupported string type: %s"" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, unicode):\n      return text.encode(""utf-8"")\n    else:\n      raise ValueError(""Unsupported string type: %s"" % (type(text)))\n  else:\n    raise ValueError(""Not running on Python2 or Python 3?"")\n\n\ndef load_vocab(vocab_file):\n  """"""Loads a vocabulary file into a dictionary.""""""\n  vocab = collections.OrderedDict()\n  index = 0\n  with tf.gfile.GFile(vocab_file, ""r"") as reader:\n    while True:\n      token = convert_to_unicode(reader.readline())\n      if not token:\n        break\n      token = token.strip()\n      vocab[token] = index\n      index += 1\n  return vocab\n\n\ndef convert_by_vocab(vocab, items):\n  """"""Converts a sequence of [tokens|ids] using the vocab.""""""\n  output = []\n  for item in items:\n    output.append(vocab[item])\n  return output\n\n\ndef convert_tokens_to_ids(vocab, tokens):\n  return convert_by_vocab(vocab, tokens)\n\n\ndef convert_ids_to_tokens(inv_vocab, ids):\n  return convert_by_vocab(inv_vocab, ids)\n\n\ndef whitespace_tokenize(text):\n  """"""Runs basic whitespace cleaning and splitting on a piece of text.""""""\n  text = text.strip()\n  if not text:\n    return []\n  tokens = text.split()\n  return tokens\n\n\nclass FullTokenizer(object):\n  """"""Runs end-to-end tokenziation.""""""\n\n  def __init__(self, vocab_file, do_lower_case=True):\n    self.vocab = load_vocab(vocab_file)\n    self.inv_vocab = {v: k for k, v in self.vocab.items()}\n    self.basic_tokenizer = BasicTokenizer(do_lower_case=do_lower_case)\n    self.wordpiece_tokenizer = WordpieceTokenizer(vocab=self.vocab)\n    self.wordpiece_tokenizer_not_UNK = WordpieceTokenizer_not_UNK(vocab=self.vocab)\n\n  def tokenize(self, text):\n    split_tokens = []\n    for token in self.basic_tokenizer.tokenize(text):\n      for sub_token in self.wordpiece_tokenizer.tokenize(token):\n        split_tokens.append(sub_token)\n\n    return split_tokens\n\n  def tokenize_not_UNK(self, text):\n      split_tokens = []\n      for token in self.basic_tokenizer.tokenize(text):\n          for sub_token in self.wordpiece_tokenizer_not_UNK.tokenize(token):\n              split_tokens.append(sub_token)\n\n      return split_tokens\n\n  def convert_tokens_to_ids(self, tokens):\n    return convert_by_vocab(self.vocab, tokens)\n\n  def convert_ids_to_tokens(self, ids):\n    return convert_by_vocab(self.inv_vocab, ids)\n\n\nclass BasicTokenizer(object):\n  """"""Runs basic tokenization (punctuation splitting, lower casing, etc.).""""""\n\n  def __init__(self, do_lower_case=True):\n    """"""Constructs a BasicTokenizer.\n\n    Args:\n      do_lower_case: Whether to lower case the input.\n    """"""\n    self.do_lower_case = do_lower_case\n\n  def tokenize(self, text):\n    """"""Tokenizes a piece of text.""""""\n    text = convert_to_unicode(text)\n    text = self._clean_text(text)\n\n    # This was added on November 1st, 2018 for the multilingual and Chinese\n    # models. This is also applied to the English models now, but it doesn\'t\n    # matter since the English models were not trained on any Chinese data\n    # and generally don\'t have any Chinese data in them (there are Chinese\n    # characters in the vocabulary because Wikipedia does have some Chinese\n    # words in the English Wikipedia.).\n    text = self._tokenize_chinese_chars(text)\n\n    orig_tokens = whitespace_tokenize(text)\n    split_tokens = []\n    for token in orig_tokens:\n      if self.do_lower_case:\n        token = token.lower()\n        token = self._run_strip_accents(token)\n      split_tokens.extend(self._run_split_on_punc(token))\n\n    output_tokens = whitespace_tokenize("" "".join(split_tokens))\n    return output_tokens\n\n  def _run_strip_accents(self, text):\n    """"""Strips accents from a piece of text.""""""\n    text = unicodedata.normalize(""NFD"", text)\n    output = []\n    for char in text:\n      cat = unicodedata.category(char)\n      if cat == ""Mn"":\n        continue\n      output.append(char)\n    return """".join(output)\n\n  def _run_split_on_punc(self, text):\n    """"""Splits punctuation on a piece of text.""""""\n    chars = list(text)\n    i = 0\n    start_new_word = True\n    output = []\n    while i < len(chars):\n      char = chars[i]\n      if _is_punctuation(char):\n        output.append([char])\n        start_new_word = True\n      else:\n        if start_new_word:\n          output.append([])\n        start_new_word = False\n        output[-1].append(char)\n      i += 1\n\n    return ["""".join(x) for x in output]\n\n  def _tokenize_chinese_chars(self, text):\n    """"""Adds whitespace around any CJK character.""""""\n    output = []\n    for char in text:\n      cp = ord(char)\n      if self._is_chinese_char(cp):\n        output.append("" "")\n        output.append(char)\n        output.append("" "")\n      else:\n        output.append(char)\n    return """".join(output)\n\n  def _is_chinese_char(self, cp):\n    """"""Checks whether CP is the codepoint of a CJK character.""""""\n    # This defines a ""chinese character"" as anything in the CJK Unicode block:\n    #   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n    #\n    # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n    # despite its name. The modern Korean Hangul alphabet is a different block,\n    # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n    # space-separated words, so they are not treated specially and handled\n    # like the all of the other languages.\n    if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n        (cp >= 0x3400 and cp <= 0x4DBF) or  #\n        (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n        (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n        (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n        (cp >= 0x2B820 and cp <= 0x2CEAF) or\n        (cp >= 0xF900 and cp <= 0xFAFF) or  #\n        (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n      return True\n\n    return False\n\n  def _clean_text(self, text):\n    """"""Performs invalid character removal and whitespace cleanup on text.""""""\n    output = []\n    for char in text:\n      cp = ord(char)\n      if cp == 0 or cp == 0xfffd or _is_control(char):\n        continue\n      if _is_whitespace(char):\n        output.append("" "")\n      else:\n        output.append(char)\n    return """".join(output)\n\n\nclass WordpieceTokenizer_not_UNK(object):\n  """"""Runs WordPiece tokenziation.""""""\n  def __init__(self, vocab, unk_token=""[UNK]"", max_input_chars_per_word=200):\n    self.vocab = vocab\n    self.unk_token = unk_token\n    self.max_input_chars_per_word = max_input_chars_per_word\n\n  def tokenize(self, text):\n    """"""Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = ""unaffable""\n      output = [""un"", ""##aff"", ""##able""]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    """"""\n\n    text = convert_to_unicode(text)\n\n    output_tokens = []\n    for token in whitespace_tokenize(text):\n      chars = list(token)\n      if len(chars) > self.max_input_chars_per_word:\n        output_tokens.append(self.unk_token)\n        continue\n\n      is_bad = False\n      start = 0\n      sub_tokens = []\n      while start < len(chars):\n        end = len(chars)\n        cur_substr = None\n        while start < end:\n          substr = """".join(chars[start:end])\n          if start > 0:\n            substr = ""##"" + substr\n          if substr in self.vocab:\n            cur_substr = substr\n            break\n          end -= 1\n        if cur_substr is None:\n          is_bad = True\n          break\n        sub_tokens.append(cur_substr)\n        start = end\n\n      if is_bad:\n        #output_tokens.append(self.unk_token)\n        output_tokens.append(token)\n      else:\n        output_tokens.extend(sub_tokens)\n    return output_tokens\n\n\nclass WordpieceTokenizer(object):\n  """"""Runs WordPiece tokenziation.""""""\n\n  def __init__(self, vocab, unk_token=""[UNK]"", max_input_chars_per_word=200):\n    self.vocab = vocab\n    self.unk_token = unk_token\n    self.max_input_chars_per_word = max_input_chars_per_word\n\n  def tokenize(self, text):\n    """"""Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = ""unaffable""\n      output = [""un"", ""##aff"", ""##able""]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    """"""\n\n    text = convert_to_unicode(text)\n\n    output_tokens = []\n    for token in whitespace_tokenize(text):\n      chars = list(token)\n      if len(chars) > self.max_input_chars_per_word:\n        output_tokens.append(self.unk_token)\n        continue\n\n      is_bad = False\n      start = 0\n      sub_tokens = []\n      while start < len(chars):\n        end = len(chars)\n        cur_substr = None\n        while start < end:\n          substr = """".join(chars[start:end])\n          if start > 0:\n            substr = ""##"" + substr\n          if substr in self.vocab:\n            cur_substr = substr\n            break\n          end -= 1\n        if cur_substr is None:\n          is_bad = True\n          break\n        sub_tokens.append(cur_substr)\n        start = end\n\n      if is_bad:\n        output_tokens.append(self.unk_token)\n      else:\n        output_tokens.extend(sub_tokens)\n    return output_tokens\n\n\ndef _is_whitespace(char):\n  """"""Checks whether `chars` is a whitespace character.""""""\n  # \\t, \\n, and \\r are technically contorl characters but we treat them\n  # as whitespace since they are generally considered as such.\n  if char == "" "" or char == ""\\t"" or char == ""\\n"" or char == ""\\r"":\n    return True\n  cat = unicodedata.category(char)\n  if cat == ""Zs"":\n    return True\n  return False\n\n\ndef _is_control(char):\n  """"""Checks whether `chars` is a control character.""""""\n  # These are technically control characters but we count them as whitespace\n  # characters.\n  if char == ""\\t"" or char == ""\\n"" or char == ""\\r"":\n    return False\n  cat = unicodedata.category(char)\n  if cat.startswith(""C""):\n    return True\n  return False\n\n\ndef _is_punctuation(char):\n  """"""Checks whether `chars` is a punctuation character.""""""\n  cp = ord(char)\n  # We treat all non-letter/number ASCII as punctuation.\n  # Characters such as ""^"", ""$"", and ""`"" are not in the Unicode\n  # Punctuation class but we treat them as punctuation anyways, for\n  # consistency.\n  if ((cp >= 33 and cp <= 47) or (cp >= 58 and cp <= 64) or\n      (cp >= 91 and cp <= 96) or (cp >= 123 and cp <= 126)):\n    return True\n  cat = unicodedata.category(char)\n  if cat.startswith(""P""):\n    return True\n  return False\n'"
bin/bert_tokenizer_test.py,0,"b'import sys\nimport os\n\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ""../bert"")))\nimport tokenization\n\n\ndef get_vocab_file_path(vocab_file_path):\n    vocab_file_path = os.path.join(\n        os.path.abspath(os.path.join(os.path.dirname(__file__), ""../pretrained_model/chinese_L-12_H-768_A-12"")),\n        vocab_file_path)\n    return vocab_file_path\n\nvocab_file_path = ""vocab.txt""\n\n# BERT \xe8\x87\xaa\xe5\xb8\xa6WordPiece\xe5\x88\x86\xe8\xaf\x8d\xe5\xb7\xa5\xe5\x85\xb7\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e\xe4\xb8\xad\xe6\x96\x87\xe9\x83\xbd\xe6\x98\xaf\xe5\x88\x86\xe6\x88\x90\xe5\x8d\x95\xe5\xad\x97\nbert_tokenizer = tokenization.FullTokenizer(vocab_file=get_vocab_file_path(vocab_file_path), do_lower_case=True)  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96 bert_token \xe5\xb7\xa5\xe5\x85\xb7\n\nprint(bert_tokenizer.convert_tokens_to_ids([""[SEP]""]))'"
bin/evaluation/calc_pr.py,0,"b'# -*- coding: utf-8 -*-\n########################################################\n# Copyright (c) 2019, Baidu Inc. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# imitations under the License.\n########################################################\n""""""\nThis module to calculate precision, recall and f1-value\nof the predicated results.\n""""""\nimport sys\nimport json\nimport os\nimport zipfile\nimport traceback\nimport argparse\nimport io\nimport configparser\n\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=\'utf8\')\nSUCCESS = 0\nFILE_ERROR = 1\nENCODING_ERROR = 2\nJSON_ERROR = 3\nSCHEMA_ERROR = 4\nTEXT_ERROR = 5\nCODE_INFO = [\'success\', \'file_reading_error\', \'encoding_error\', \'json_parse_error\',\n             \'schema_error\', \'input_text_not_in_dataset\']\n\n\ndef del_bookname(entity_name):\n    """"""delete the book name""""""\n    if entity_name.startswith(u\'\xe3\x80\x8a\') and entity_name.endswith(u\'\xe3\x80\x8b\'):\n        entity_name = entity_name[1:-1]\n    return entity_name\n\n\ndef load_predict_result(predict_filename):\n    """"""Loads the file to be predicted""""""\n    predict_result = {}\n    ret_code = SUCCESS\n    try:\n        predict_file_zip = zipfile.ZipFile(predict_filename)\n    except:\n        ret_code = FILE_ERROR\n        return predict_result, ret_code\n    for predict_file in predict_file_zip.namelist():\n        for line in predict_file_zip.open(predict_file):\n            try:\n                line = line.strip()\n            except:\n                ret_code = ENCODING_ERROR\n                return predict_result, ret_code\n            try:\n                json_info = json.loads(line)\n            except:\n                ret_code = JSON_ERROR\n                return predict_result, ret_code\n            if \'text\' not in json_info or \'spo_list\' not in json_info:\n                ret_code = SCHEMA_ERROR\n                return predict_result, ret_code\n            sent = json_info[\'text\']\n            spo_set = set()\n            for spo_item in json_info[\'spo_list\']:\n                if type(spo_item) is not dict or \'subject\' not in spo_item \\\n                        or \'predicate\' not in spo_item \\\n                        or \'object\' not in spo_item or \\\n                        not isinstance(spo_item[\'subject\'], str) or \\\n                        not isinstance(spo_item[\'object\'], str):\n                    ret_code = SCHEMA_ERROR\n                    return predict_result, ret_code\n                s = del_bookname(spo_item[\'subject\'].lower())\n                o = del_bookname(spo_item[\'object\'].lower())\n                spo_set.add((s, spo_item[\'predicate\'], o))\n            predict_result[sent] = spo_set\n    return predict_result, ret_code\n\n\ndef load_test_dataset(golden_filename):\n    """"""load golden file""""""\n    golden_dict = {}\n    ret_code = SUCCESS\n    with open(golden_filename, \'r\', encoding=\'utf-8\') as gf:\n        for line in gf:\n            try:\n                line = line.strip()\n            except:\n                ret_code = ENCODING_ERROR\n                return golden_dict, ret_code\n            try:\n                json_info = json.loads(line)\n            except:\n                ret_code = JSON_ERROR\n                return golden_dict, ret_code\n            try:\n                sent = json_info[\'text\']\n                spo_list = json_info[\'spo_list\']\n            except:\n                ret_code = SCHEMA_ERROR\n                return golden_dict, ret_code\n\n            spo_result = []\n            for item in spo_list:\n                o = del_bookname(item[\'object\'].lower())\n                s = del_bookname(item[\'subject\'].lower())\n                spo_result.append((s, item[\'predicate\'], o))\n            spo_result = set(spo_result)\n            golden_dict[sent] = spo_result\n    return golden_dict, ret_code\n\n\ndef load_dict(dict_filename):\n    """"""load alias dict""""""\n    alias_dict = {}\n    ret_code = SUCCESS\n    if dict_filename == """":\n        return alias_dict, ret_code\n    try:\n        with open(dict_filename, \'r\', encoding=\'utf-8\') as af:\n            for line in af:\n                line = line.strip()\n                words = line.split(\'\\t\')\n                alias_dict[words[0].lower()] = set()\n                for alias_word in words[1:]:\n                    alias_dict[words[0].lower()].add(alias_word.lower())\n    except:\n        ret_code = FILE_ERROR\n    return alias_dict, ret_code\n\n\ndef is_spo_correct(spo, golden_spo_set, alias_dict, loc_dict):\n    """"""if the spo is correct""""""\n    if spo in golden_spo_set:\n        return True\n    (s, p, o) = spo\n    # alias dictionary\n    s_alias_set = alias_dict.get(s, set())\n    s_alias_set.add(s)\n    o_alias_set = alias_dict.get(o, set())\n    o_alias_set.add(o)\n    for s_a in s_alias_set:\n        for o_a in o_alias_set:\n            if (s_a, p, o_a) in golden_spo_set:\n                return True\n    for golden_spo in golden_spo_set:\n        (golden_s, golden_p, golden_o) = golden_spo\n        golden_o_set = loc_dict.get(golden_o, set())\n        for g_o in golden_o_set:\n            if s == golden_s and p == golden_p and o == g_o:\n                return True\n    return False\n\n\ndef calc_pr(predict_filename, alias_filename, location_filename, golden_filename):\n    """"""calculate precision, recall, f1""""""\n    ret_info = {}\n    # load location dict\n    loc_dict, ret_code = load_dict(location_filename)\n    if ret_code != SUCCESS:\n        ret_info[\'errorCode\'] = ret_code\n        ret_info[\'errorMsg\'] = CODE_INFO[ret_code]\n        print(\'loc file is error\')\n        return ret_info\n\n    # load alias dict\n    alias_dict, ret_code = load_dict(alias_filename)\n    if ret_code != SUCCESS:\n        ret_info[\'errorCode\'] = ret_code\n        ret_info[\'errorMsg\'] = CODE_INFO[ret_code]\n        print(\'alias file is error\')\n        return ret_info\n    # load test dataset\n    golden_dict, ret_code = load_test_dataset(golden_filename)\n    if ret_code != SUCCESS:\n        ret_info[\'errorCode\'] = ret_code\n        ret_info[\'errorMsg\'] = CODE_INFO[ret_code]\n        print(\'golden file is error\')\n        return ret_info\n    # load predict result\n    predict_result, ret_code = load_predict_result(predict_filename)\n    if ret_code != SUCCESS:\n        ret_info[\'errorCode\'] = ret_code\n        ret_info[\'errorMsg\'] = CODE_INFO[ret_code]\n        print(\'predict file is error\')\n        return ret_info\n\n    # evaluation\n    correct_sum, predict_sum, recall_sum = 0.0, 0.0, 0.0\n    for sent in golden_dict:\n        golden_spo_set = golden_dict[sent]\n        predict_spo_set = predict_result.get(sent, set())\n\n        recall_sum += len(golden_spo_set)\n        predict_sum += len(predict_spo_set)\n        for spo in predict_spo_set:\n            if is_spo_correct(spo, golden_spo_set, alias_dict, loc_dict):\n                correct_sum += 1\n    print(sys.stderr, \'correct spo num = \', correct_sum)\n    print(sys.stderr, \'submitted spo num = \', predict_sum)\n    print(sys.stderr, \'golden set spo num = \', recall_sum)\n    precision = correct_sum / predict_sum if predict_sum > 0 else 0.0\n    recall = correct_sum / recall_sum if recall_sum > 0 else 0.0\n    f1 = 2 * precision * recall / (precision + recall) \\\n        if precision + recall > 0 else 0.0\n    precision = round(precision, 4)\n    recall = round(recall, 4)\n    f1 = round(f1, 4)\n    ret_info[\'errorCode\'] = SUCCESS\n    ret_info[\'errorMsg\'] = CODE_INFO[SUCCESS]\n    ret_info[\'data\'] = []\n    ret_info[\'data\'].append({\'name\': \'precision\', \'value\': precision})\n    ret_info[\'data\'].append({\'name\': \'recall\', \'value\': recall})\n    ret_info[\'data\'].append({\'name\': \'f1-score\', \'value\': f1})\n    return ret_info\n\n\nif __name__ == \'__main__\':\n    parser = argparse.ArgumentParser()\n    parser.add_argument(""--golden_file"", type=str,\n                        help=""true spo results"", required=True)\n    parser.add_argument(""--predict_file"", type=str,\n                        help=""spo results predicted"", required=True)\n    parser.add_argument(""--loc_file"", type=str,\n                        default=\'\', help=""location entities of various granularity"")\n    parser.add_argument(""--alias_file"", type=str,\n                        default=\'\', help=""entities alias dictionary"")\n    args = parser.parse_args()\n    golden_filename = args.golden_file\n    predict_filename = args.predict_file\n    location_filename = args.loc_file\n    alias_filename = args.alias_file\n    ret_info = calc_pr(predict_filename, alias_filename, location_filename, golden_filename)\n    print(json.dumps(ret_info))\n'"
bin/evaluation/evaluate_classifiction.py,0,"b'import os\n\ngolden_file_path = None\npredicate_predict_file_path = None\n\n#\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa0\x87\xe5\x87\x86\xe7\xad\x94\xe6\xa1\x88\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\ndef get_golden_file_path(golden_file_path=None):\n    if golden_file_path is None:\n        golden_file_dir = os.path.join(\n                os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                             ""../predicate_classifiction/classification_data"")), ""test"")\n        golden_file_path = os.path.join(golden_file_dir, ""predicate_out.txt"")\n    return golden_file_path\n\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe9\xa2\x84\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe8\xb7\xaf\xe5\xbe\x84\ndef get_latest_model_predict_data_path(predicate_predict_file_path=None):\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\x8b\xe6\x9c\x80\xe6\x96\xb0\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n    def new_report(test_report):\n        lists = os.listdir(test_report)  # \xe5\x88\x97\xe5\x87\xba\xe7\x9b\xae\xe5\xbd\x95\xe7\x9a\x84\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x92\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0lists\n        lists.sort(key=lambda fn: os.path.getmtime(test_report + ""/"" + fn))  # \xe6\x8c\x89\xe6\x97\xb6\xe9\x97\xb4\xe6\x8e\x92\xe5\xba\x8f\n        file_new = os.path.join(test_report, lists[-1])  # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0file_new\n        return file_new\n    if predicate_predict_file_path is None:\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\xbe\x93\xe5\x87\xba\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        input_new_epochs = os.path.join(\n                os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../output"")), ""predicate_infer_out"")\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe5\x91\xa8\xe6\x9c\x9f\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        new_ckpt_dir = new_report(input_new_epochs)\n        input_new_epochs_ckpt = os.path.join(input_new_epochs, new_ckpt_dir)\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\x8b\xe6\x9c\x80\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        input_new_epochs_ckpt_dir = new_report(input_new_epochs_ckpt)\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe9\xa2\x84\xe6\xb5\x8b\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n        predicate_predict_file_path = os.path.join(input_new_epochs_ckpt_dir, ""predicate_predict.txt"")\n    if not os.path.exists(new_ckpt_dir):\n        raise ValueError(""\xe8\xb7\xaf\xe5\xbe\x84\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81{}"".format(new_ckpt_dir))\n    return predicate_predict_file_path\n\n\npredicate_predict_file_path = get_latest_model_predict_data_path()\nprint(""predicate_predict_file_path:\\t"", predicate_predict_file_path)\n\ngolden_file_path = get_golden_file_path()\nprint(""golden_file_path:\\t"", golden_file_path)\n\n\ngolden_data = open(golden_file_path, ""r"", encoding=\'utf-8\').readlines()\npredict_data = open(predicate_predict_file_path, \'r\', encoding=\'utf-8\').readlines()\ngolden_data_list = [line.strip() for line in golden_data]\npredict_data_list = [line.strip() for line in predict_data]\nassert len(golden_data) == len(predict_data)\n\ncount_line = 0\ncorrect_number = 0\nsubset_number = 0\nsuperset_number = 0\nfor golden_str, predict_str in zip(golden_data_list, predict_data_list):\n    count_line += 1\n    golden_set = set(golden_str.split("" ""))\n    predict_set = set(predict_str.split("" ""))\n    if golden_set == predict_set:\n        correct_number += 1\n    elif predict_set.issubset(golden_set):\n        subset_number += 1\n    elif predict_set.issuperset(golden_set):\n        superset_number +=1\n\nprint(""correct_line: {}, line: {}, percentage: {:.4f}%"".format(correct_number, count_line,\n                                                                   (correct_number / count_line) * 100))\nprint(""superset_line: {}, line: {}, percentage: {:.4f}%"".format(superset_number, count_line,\n                                                                   (superset_number / count_line) * 100))\nprint(""subset_line: {}, line: {}, percentage: {:.4f}%"".format(subset_number, count_line,\n                                                                   (subset_number / count_line) * 100))\n'"
bin/evaluation/evaluate_labeling.py,0,"b'import sys\nimport json\nimport os\n\ndef del_bookname(entity_name):\n    """"""delete the book name""""""\n    if entity_name.startswith(u\'\xe3\x80\x8a\') and entity_name.endswith(u\'\xe3\x80\x8b\'):\n        entity_name = entity_name[1:-1]\n    return entity_name\n\n\n\n\ndef load_result(predict_filename):\n    result_dict = {}\n    with open(predict_filename) as gf:\n        for line in gf:\n            json_info = json.loads(line)\n            sent = json_info[\'text\']\n            spo_list = json_info[\'spo_list\']\n            spo_result = []\n            for item in spo_list:\n                o = del_bookname(item[\'object\'].lower())\n                s = del_bookname(item[\'subject\'].lower())\n                spo_result.append((s, item[\'predicate\'], o))\n            spo_result = set(spo_result)\n            result_dict[sent] = spo_result\n    return result_dict\n\n\ndef load_dict(dict_filename):\n    """"""load alias dict""""""\n    alias_dict = {}\n    with open(dict_filename) as af:\n        for line in af:\n            line = line.strip()\n            words = line.split(\'\\t\')\n            alias_dict[words[0].lower()] = set()\n            for alias_word in words[1:]:\n                alias_dict[words[0].lower()].add(alias_word.lower())\n    return alias_dict\n\n\ndef is_spo_correct(spo, golden_spo_set, alias_dict, loc_dict):\n    """"""if the spo is correct""""""\n    if spo in golden_spo_set:\n        return True\n    (s, p, o) = spo\n    # alias dictionary\n    s_alias_set = alias_dict.get(s, set())\n    s_alias_set.add(s)\n    o_alias_set = alias_dict.get(o, set())\n    o_alias_set.add(o)\n    for s_a in s_alias_set:\n        for o_a in o_alias_set:\n            if (s_a, p, o_a) in golden_spo_set:\n                return True\n    for golden_spo in golden_spo_set:\n        (golden_s, golden_p, golden_o) = golden_spo\n        golden_o_set = loc_dict.get(golden_o, set())\n        for g_o in golden_o_set:\n            if s == golden_s and p == golden_p and o == g_o:\n                return True\n    return False\n\n\ndef calc_pr(predict_filename, golden_filename):\n    """"""calculate precision, recall, f1""""""\n    alias_dict, loc_dict = dict(), dict()\n    ret_info = {}\n    # load test dataset\n    golden_dict= load_result(golden_filename)\n    # load predict result\n    predict_result = load_result(predict_filename)\n    # evaluation\n    correct_sum, predict_sum, recall_sum = 0.0, 0.0, 0.0\n    for sent in golden_dict:\n        golden_spo_set = golden_dict[sent]\n        predict_spo_set = predict_result.get(sent, set())\n\n        recall_sum += len(golden_spo_set)\n        predict_sum += len(predict_spo_set)\n        for spo in predict_spo_set:\n            if is_spo_correct(spo, golden_spo_set, alias_dict, loc_dict):\n                correct_sum += 1\n    print(\'correct spo num = \', correct_sum)\n    print(\'submitted spo num = \', predict_sum)\n    print(\'golden set spo num = \', recall_sum)\n    precision = correct_sum / predict_sum if predict_sum > 0 else 0.0\n    recall = correct_sum / recall_sum if recall_sum > 0 else 0.0\n    f1 = 2 * precision * recall / (precision + recall) \\\n        if precision + recall > 0 else 0.0\n    precision = round(precision, 4)\n    recall = round(recall, 4)\n    f1 = round(f1, 4)\n    ret_info[\'data\'] = []\n    ret_info[\'data\'].append({\'name\': \'precision\', \'value\': precision})\n    ret_info[\'data\'].append({\'name\': \'recall\', \'value\': recall})\n    ret_info[\'data\'].append({\'name\': \'f1-score\', \'value\': f1})\n    return ret_info\n\nif __name__ == \'__main__\':\n    golden_filename = None\n    predict_filename = None\n    golden_filename = os.path.join(\n        os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../raw_data"")), ""dev_data.json"")\n    predict_filename = os.path.join(\n        os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../output/final_text_spo_list_result"")),\n        ""keep_empty_spo_list_subject_predicate_object_predict_output.json"")\n    ret_info = calc_pr(predict_filename, golden_filename)\n    print(json.dumps(ret_info))'"
bin/predicate_classifiction/predicate_data_manager.py,0,"b'import os\nimport sys\nimport json\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../bert"")))\nimport tokenization\n\nprint(""if not have raw data, please dowload data from http://lic2019.ccf.org.cn/kg !"")\n\ndef unzip_and_move_files():\n    ""\xe8\xa7\xa3\xe5\x8e\x8b\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe4\xb8\x94\xe6\x94\xbe\xe5\x85\xa5 raw_data \xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\x8b\xe9\x9d\xa2""\n    os.system(""unzip dev_data.json.zip"")\n    os.system(""mv dev_data.json raw_data/dev_data.json"")\n    os.system(""unzip train_data.json.zip"")\n    os.system(""mv train_data.json raw_data/train_data.json"")\n\n\nclass Model_data_preparation(object):\n\n    def __init__(self, RAW_DATA_INPUT_DIR=""raw_data"", DATA_OUTPUT_DIR=""classfication_data"",\n                 vocab_file_path=""vocab.txt"", do_lower_case=True, Competition_Mode=False, Valid_Model=False):\n        \'\'\'\n        :param RAW_DATA_INPUT_DIR: \xe8\xbe\x93\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6\xe7\x9b\xae\xe5\xbd\x95\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe6\x98\xaf\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x95\xb0\xe6\x8d\xae\xe7\x9b\xae\xe5\xbd\x95\n        :param DATA_OUTPUT_DIR: \xe8\xbe\x93\xe5\x87\xba\xe6\x96\x87\xe4\xbb\xb6\xe7\x9b\xae\xe5\xbd\x95\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe6\x98\xaf\xe5\x88\x86\xe7\xb1\xbb\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\n        :param vocab_file_path: \xe8\xaf\x8d\xe8\xa1\xa8\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe6\x98\xaf\xe9\xa2\x84\xe5\x85\x88\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe8\xaf\x8d\xe8\xa1\xa8\xe8\xb7\xaf\xe5\xbe\x84\n        :param do_lower_case: \xe9\xbb\x98\xe8\xae\xa4TRUE\n        :param Competition_Mode: \xe9\x9d\x9e\xe6\xaf\x94\xe8\xb5\x9b\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe4\xbc\x9a\xe6\x8a\x8a\xe9\xaa\x8c\xe8\xaf\x81valid\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\x9c\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95test\xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\n        :param Valid_Model: \xe9\xaa\x8c\xe8\xaf\x81\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe4\xbb\x85\xe4\xbb\x85\xe4\xbc\x9a\xe7\x94\x9f\xe6\x88\x90test\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\n        \'\'\'\n        # BERT \xe8\x87\xaa\xe5\xb8\xa6WordPiece\xe5\x88\x86\xe8\xaf\x8d\xe5\xb7\xa5\xe5\x85\xb7\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e\xe4\xb8\xad\xe6\x96\x87\xe9\x83\xbd\xe6\x98\xaf\xe5\x88\x86\xe6\x88\x90\xe5\x8d\x95\xe5\xad\x97\n        self.bert_tokenizer = tokenization.FullTokenizer(vocab_file=self.get_vocab_file_path(vocab_file_path),\n                                                         do_lower_case=do_lower_case)  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96 bert_token \xe5\xb7\xa5\xe5\x85\xb7\n        self.DATA_INPUT_DIR = self.get_data_input_dir(RAW_DATA_INPUT_DIR)\n        self.DATA_OUTPUT_DIR = os.path.join(os.path.dirname(__file__), DATA_OUTPUT_DIR)\n        self.Competition_Mode = Competition_Mode\n        self.Valid_Model= Valid_Model\n        print(""\xe6\x95\xb0\xe6\x8d\xae\xe8\xbe\x93\xe5\x85\xa5\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x9a"", self.DATA_INPUT_DIR)\n        print(""\xe6\x95\xb0\xe6\x8d\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x9a"", self.DATA_OUTPUT_DIR)\n        print(""\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe6\xaf\x94\xe8\xb5\x9b\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x88\xe9\x9d\x9e\xe6\xaf\x94\xe8\xb5\x9b\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe4\xbc\x9a\xe6\x8a\x8a\xe9\xaa\x8c\xe8\xaf\x81valid\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\x9c\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95test\xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xef\xbc\x89\xef\xbc\x9a"", self.Competition_Mode)\n        print(""\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe9\xaa\x8c\xe8\xaf\x81\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x88\xe9\xaa\x8c\xe8\xaf\x81\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe4\xbb\x85\xe4\xbb\x85\xe4\xbc\x9a\xe7\x94\x9f\xe6\x88\x90test\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x89\xef\xbc\x9a"", self.Valid_Model)\n\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n    def get_data_input_dir(self, DATA_INPUT_DIR):\n        DATA_INPUT_DIR = os.path.join(\n            os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../"")), DATA_INPUT_DIR)\n        return DATA_INPUT_DIR\n\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe8\xaf\x8d\xe6\xb1\x87\xe8\xa1\xa8\xe8\xb7\xaf\xe5\xbe\x84\n    def get_vocab_file_path(self, vocab_file_path):\n        vocab_file_path = os.path.join(\n            os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../pretrained_model/chinese_L-12_H-768_A-12"")), vocab_file_path)\n        return vocab_file_path\n\n    # \xe5\xa4\x84\xe7\x90\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x95\xb0\xe6\x8d\xae\n    def separate_raw_data_and_token_labeling(self):\n        if not os.path.exists(self.DATA_OUTPUT_DIR):\n            os.makedirs(os.path.join(self.DATA_OUTPUT_DIR, ""train""))\n            os.makedirs(os.path.join(self.DATA_OUTPUT_DIR, ""valid""))\n            os.makedirs(os.path.join(self.DATA_OUTPUT_DIR, ""test""))\n\n        file_set_type_list = [""train"", ""valid"", ""test""]\n        if self.Valid_Model:\n            file_set_type_list = [""test""]\n        for file_set_type in file_set_type_list:\n            print(""produce data will store in: "", os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type)))\n            if file_set_type in [""train"", ""valid""] or not self.Competition_Mode:\n                predicate_out_f = open(\n                    os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""predicate_out.txt""), ""w"",\n                    encoding=\'utf-8\')\n            text_f = open(os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""text.txt""), ""w"",\n                          encoding=\'utf-8\')\n            token_in_f = open(os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""token_in.txt""), ""w"",\n                              encoding=\'utf-8\')\n            token_in_not_UNK_f = open(\n                os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""token_in_not_UNK.txt""), ""w"",\n                encoding=\'utf-8\')\n\n            def predicate_to_predicate_file(spo_list):\n                predicate_list = [spo[\'predicate\'] for spo in spo_list]\n                predicate_list_str = "" "".join(predicate_list)\n                predicate_out_f.write(predicate_list_str + ""\\n"")\n\n            if file_set_type == ""train"":\n                path_to_raw_data_file = ""train_data.json""\n            elif file_set_type == ""valid"":\n                path_to_raw_data_file = ""dev_data.json""\n            else:\n                if self.Competition_Mode == True:\n                    path_to_raw_data_file = ""test1_data_postag.json""\n                else:\n                    path_to_raw_data_file = ""dev_data.json""\n\n            with open(os.path.join(self.DATA_INPUT_DIR, path_to_raw_data_file), \'r\', encoding=\'utf-8\') as f:\n                count_numbers = 0\n                while True:\n                    line = f.readline()\n                    if line:\n                        count_numbers += 1\n                        r = json.loads(line)\n                        if (not self.Competition_Mode) or file_set_type in [""train"", ""valid""]:\n                            spo_list = r[""spo_list""]\n                        else:\n                            spo_list = []\n                        text = r[""text""]\n                        text_tokened = self.bert_tokenizer.tokenize(text)\n                        text_tokened_not_UNK = self.bert_tokenizer.tokenize_not_UNK(text)\n\n                        if (not self.Competition_Mode) or file_set_type in [""train"", ""valid""]:\n                            predicate_to_predicate_file(spo_list)\n                        text_f.write(text + ""\\n"")\n                        token_in_f.write("" "".join(text_tokened) + ""\\n"")\n                        token_in_not_UNK_f.write("" "".join(text_tokened_not_UNK) + ""\\n"")\n                    else:\n                        break\n            print(""all numbers"", count_numbers)\n            print(""\\n"")\n            text_f.close()\n            token_in_f.close()\n            token_in_not_UNK_f.close()\n\nif __name__ == ""__main__"":\n    RAW_DATA_DIR = ""raw_data""\n    DATA_OUTPUT_DIR = ""classification_data""\n    Competition_Mode = True\n    Valid_Mode = False\n    model_data = Model_data_preparation(\n        RAW_DATA_INPUT_DIR=RAW_DATA_DIR, DATA_OUTPUT_DIR=DATA_OUTPUT_DIR, Competition_Mode=Competition_Mode, Valid_Model=Valid_Mode)\n    model_data.separate_raw_data_and_token_labeling()\n'"
bin/predicate_classifiction/prepare_data_for_labeling_infer.py,0,"b'import os\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe9\xa2\x84\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\ndef get_latest_model_predict_data_dir(new_epochs_ckpt_dir=None):\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\x8b\xe6\x9c\x80\xe6\x96\xb0\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n    def new_report(test_report):\n        lists = os.listdir(test_report)  # \xe5\x88\x97\xe5\x87\xba\xe7\x9b\xae\xe5\xbd\x95\xe7\x9a\x84\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x92\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0lists\n        lists.sort(key=lambda fn: os.path.getmtime(test_report + ""/"" + fn))  # \xe6\x8c\x89\xe6\x97\xb6\xe9\x97\xb4\xe6\x8e\x92\xe5\xba\x8f\n        file_new = os.path.join(test_report, lists[-1])  # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0file_new\n        return file_new\n    if new_epochs_ckpt_dir is None:\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\xbe\x93\xe5\x87\xba\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        input_new_epochs = os.path.join(\n                os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../output"")), ""predicate_infer_out"")\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe5\x91\xa8\xe6\x9c\x9f\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        new_ckpt_dir = new_report(input_new_epochs)\n        input_new_epochs_ckpt = os.path.join(input_new_epochs, new_ckpt_dir)\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe6\x96\xb0\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\x8b\xe6\x9c\x80\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        new_epochs_ckpt_dir = new_report(input_new_epochs_ckpt)\n    return new_epochs_ckpt_dir\n\n#\xe5\xaf\xb9\xe4\xba\x8e\xe6\xb2\xa1\xe6\x9c\x89\xe9\xa2\x84\xe6\xb5\x8b\xe5\x87\xba\xe5\x85\xb3\xe7\xb3\xbb\xe7\x9a\x84\xe5\x8f\xa5\xe5\xad\x90\xef\xbc\x8c\xe5\x90\xaf\xe5\x8f\x91\xe5\xbc\x8f\xe5\x9c\xb0\xe9\x80\x89\xe6\x8b\xa9\xe7\x9b\xb8\xe5\xaf\xb9\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x8410\xe4\xb8\xaa\xe5\x85\xb3\xe7\xb3\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe8\xbe\x93\xe5\x87\xba\ndef replace_empty_infer_predicate_to_three_possible_values(predicate_score_value):\n    label_list = [\'\xe4\xb8\x88\xe5\xa4\xab\', \'\xe4\xb8\x8a\xe6\x98\xa0\xe6\x97\xb6\xe9\x97\xb4\', \'\xe4\xb8\x93\xe4\xb8\x9a\xe4\xbb\xa3\xe7\xa0\x81\', \'\xe4\xb8\xbb\xe6\x8c\x81\xe4\xba\xba\', \'\xe4\xb8\xbb\xe6\xbc\x94\', \'\xe4\xb8\xbb\xe8\xa7\x92\', \'\xe4\xba\xba\xe5\x8f\xa3\xe6\x95\xb0\xe9\x87\x8f\', \'\xe4\xbd\x9c\xe6\x9b\xb2\', \'\xe4\xbd\x9c\xe8\x80\x85\', \'\xe4\xbd\x9c\xe8\xaf\x8d\', \'\xe4\xbf\xae\xe4\xb8\x9a\xe5\xb9\xb4\xe9\x99\x90\', \'\xe5\x87\xba\xe5\x93\x81\xe5\x85\xac\xe5\x8f\xb8\', \'\xe5\x87\xba\xe7\x89\x88\xe7\xa4\xbe\', \'\xe5\x87\xba\xe7\x94\x9f\xe5\x9c\xb0\', \'\xe5\x87\xba\xe7\x94\x9f\xe6\x97\xa5\xe6\x9c\x9f\',\n              \'\xe5\x88\x9b\xe5\xa7\x8b\xe4\xba\xba\', \'\xe5\x88\xb6\xe7\x89\x87\xe4\xba\xba\', \'\xe5\x8d\xa0\xe5\x9c\xb0\xe9\x9d\xa2\xe7\xa7\xaf\', \'\xe5\x8f\xb7\', \'\xe5\x98\x89\xe5\xae\xbe\', \'\xe5\x9b\xbd\xe7\xb1\x8d\', \'\xe5\xa6\xbb\xe5\xad\x90\', \'\xe5\xad\x97\', \'\xe5\xae\x98\xe6\x96\xb9\xe8\xaf\xad\xe8\xa8\x80\', \'\xe5\xaf\xbc\xe6\xbc\x94\', \'\xe6\x80\xbb\xe9\x83\xa8\xe5\x9c\xb0\xe7\x82\xb9\', \'\xe6\x88\x90\xe7\xab\x8b\xe6\x97\xa5\xe6\x9c\x9f\', \'\xe6\x89\x80\xe5\x9c\xa8\xe5\x9f\x8e\xe5\xb8\x82\', \'\xe6\x89\x80\xe5\xb1\x9e\xe4\xb8\x93\xe8\xbe\x91\', \'\xe6\x94\xb9\xe7\xbc\x96\xe8\x87\xaa\',\n              \'\xe6\x9c\x9d\xe4\xbb\xa3\', \'\xe6\xad\x8c\xe6\x89\x8b\', \'\xe6\xaf\x8d\xe4\xba\xb2\', \'\xe6\xaf\x95\xe4\xb8\x9a\xe9\x99\xa2\xe6\xa0\xa1\', \'\xe6\xb0\x91\xe6\x97\x8f\', \'\xe6\xb0\x94\xe5\x80\x99\', \'\xe6\xb3\xa8\xe5\x86\x8c\xe8\xb5\x84\xe6\x9c\xac\', \'\xe6\xb5\xb7\xe6\x8b\x94\', \'\xe7\x88\xb6\xe4\xba\xb2\', \'\xe7\x9b\xae\', \'\xe7\xa5\x96\xe7\xb1\x8d\', \'\xe7\xae\x80\xe7\xa7\xb0\', \'\xe7\xbc\x96\xe5\x89\xa7\', \'\xe8\x91\xa3\xe4\xba\x8b\xe9\x95\xbf\', \'\xe8\xba\xab\xe9\xab\x98\', \'\xe8\xbf\x9e\xe8\xbd\xbd\xe7\xbd\x91\xe7\xab\x99\',\n              \'\xe9\x82\xae\xe6\x94\xbf\xe7\xbc\x96\xe7\xa0\x81\', \'\xe9\x9d\xa2\xe7\xa7\xaf\', \'\xe9\xa6\x96\xe9\x83\xbd\']\n    predicate_score_value_list = predicate_score_value.split("" "")\n    predicate_score_name_value_list = [(label, value) for label, value in zip(label_list, predicate_score_value_list)]\n    predicate_score_name_value_sort_list = sorted(predicate_score_name_value_list, key=lambda x: x[1], reverse=True)\n    name_value_three_items = predicate_score_name_value_sort_list[:10]\n    three_predicate_list = [name for name, value in name_value_three_items]\n    return three_predicate_list\n\n\ndef prepare_data_for_subject_object_labeling_infer(predicate_classifiction_input_file_dir,\n                                                   predicate_classifiction_infer_file_dir, out_file):\n    """"""\n    Converting the predicted results of the multi-label classification model\n    into the input format required by the sequential label model\n    :param predicate_classifiction_input_file_dir: Path of Input file of classification model\n    :param predicate_classifiction_infer_file_dir: Path of Predictive Output of Classification Model\n    :param out_file: Path of Input file of sequential labeling model\n    :return: Input file of sequential labeling model\n    """"""\n    text_file = open(os.path.join(predicate_classifiction_input_file_dir, ""text.txt""),\n                     ""r"", encoding=\'utf-8\').readlines()\n    token_in_file = open(os.path.join(predicate_classifiction_input_file_dir, ""token_in.txt""),\n                         ""r"", encoding=\'utf-8\').readlines()\n    token_in_not_UNK_file = open(os.path.join(predicate_classifiction_input_file_dir, ""token_in_not_UNK.txt""),\n                         ""r"", encoding=\'utf-8\').readlines()\n    new_epochs_ckpt_dir = get_latest_model_predict_data_dir(predicate_classifiction_infer_file_dir)\n    predicate_predict_file = open(os.path.join(new_epochs_ckpt_dir, ""predicate_predict.txt""),\n                                  ""r"", encoding=\'utf-8\').readlines()\n    predicate_score_value_file = open(os.path.join(new_epochs_ckpt_dir, ""predicate_score_value.txt""),\n                                      ""r"", encoding=\'utf-8\').readlines()\n    output_text_file_write = open(os.path.join(out_file, ""text_and_one_predicate.txt""), ""w"", encoding=\'utf-8\')\n    output_token_in_file_write = open(os.path.join(out_file, ""token_in_and_one_predicate.txt""), ""w"", encoding=\'utf-8\')\n    output_token_in_not_UNK_file_write = open(os.path.join(out_file, ""token_in_not_UNK_and_one_predicate.txt""), ""w"", encoding=\'utf-8\')\n    count_line = 0\n    count_empty_line = 0\n    count_temporary_one_predicate_line = 0\n    for text, token_in, token_in_not_UNK, predicate_predict, predicate_score_value in zip(text_file, token_in_file, token_in_not_UNK_file,\n                                                                        predicate_predict_file, predicate_score_value_file):\n        count_line += 1\n        predicate_list = predicate_predict.replace(""\\n"", """").split("" "")\n        if predicate_predict == ""\\n"":\n            count_empty_line += 1\n            predicate_list = replace_empty_infer_predicate_to_three_possible_values(predicate_score_value)\n        for predicate in predicate_list:\n            count_temporary_one_predicate_line += 1\n            output_text_file_write.write(text.replace(""\\n"", """") + ""\\t"" + predicate + ""\\n"")\n            output_token_in_file_write.write(token_in.replace(""\\n"", """") + ""\\t"" + predicate + ""\\n"")\n            output_token_in_not_UNK_file_write.write(token_in_not_UNK.replace(""\\n"", """") + ""\\t"" + predicate + ""\\n"")\n    print(""empty_line: {}, line: {}, empty percentage: {:.2f}%"".format(count_empty_line, count_line, (count_empty_line/count_line) *100))\n    print(""temporary_one_predicate_line: "", count_temporary_one_predicate_line)\n    print(""\xe8\xbe\x93\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6\xe8\xa1\x8c\xe6\x95\xb0\xef\xbc\x9a"", count_line)\n    print(""\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaatext \xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\x80\xe4\xb8\xaa predicate \xe4\xb9\x8b\xe5\x90\x8e\xe8\xa1\x8c\xe6\x95\xb0\xe5\x8f\x98\xe4\xb8\xba\xef\xbc\x9a"", count_temporary_one_predicate_line)\n\n\nif __name__==""__main__"":\n    predicate_classifiction_input_file_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ""../predicate_classifiction/classification_data/test""))\n    #predicate_classifiction_infer_file_dir = ""output/predicate_infer_out/epochs6/ckpt23000""\n    predicate_classifiction_infer_file_dir = None #None\xe8\xa1\xa8\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbe\x93\xe5\x87\xba\n    out_file = os.path.abspath(os.path.join(os.path.dirname(__file__), ""../subject_object_labeling/sequence_labeling_data/test""))\n    prepare_data_for_subject_object_labeling_infer(predicate_classifiction_input_file_dir,\n                                                   predicate_classifiction_infer_file_dir, out_file)\n'"
bin/subject_object_labeling/sequence_labeling_data_manager.py,0,"b'import os\nimport sys\nimport json\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../bert"")))\nimport tokenization\n\nprint(""if not have raw data, please dowload data from http://lic2019.ccf.org.cn/kg !"")\n\nclass Model_data_preparation(object):\n\n    def __init__(self, DATA_INPUT_DIR=""raw_data"", DATA_OUTPUT_DIR=""SKE_2019_tokened_labeling"",\n                 vocab_file_path=""vocab.txt"", do_lower_case=True):\n        # BERT \xe8\x87\xaa\xe5\xb8\xa6WordPiece\xe5\x88\x86\xe8\xaf\x8d\xe5\xb7\xa5\xe5\x85\xb7\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e\xe4\xb8\xad\xe6\x96\x87\xe9\x83\xbd\xe6\x98\xaf\xe5\x88\x86\xe6\x88\x90\xe5\x8d\x95\xe5\xad\x97\n        self.bert_tokenizer = tokenization.FullTokenizer(vocab_file=self.get_vocab_file_path(vocab_file_path),\n                                                         do_lower_case=do_lower_case)  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96 bert_token \xe5\xb7\xa5\xe5\x85\xb7\n        self.DATA_INPUT_DIR = self.get_data_input_dir(DATA_INPUT_DIR)\n        self.DATA_OUTPUT_DIR = os.path.join(os.path.dirname(__file__), DATA_OUTPUT_DIR)\n        print(""\xe6\x95\xb0\xe6\x8d\xae\xe8\xbe\x93\xe5\x85\xa5\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x9a"", self.DATA_INPUT_DIR)\n        print(""\xe6\x95\xb0\xe6\x8d\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x9a"", self.DATA_OUTPUT_DIR)\n\n    def get_data_input_dir(self, DATA_INPUT_DIR):\n        DATA_INPUT_DIR = os.path.join(\n            os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../"")), DATA_INPUT_DIR)\n        return DATA_INPUT_DIR\n\n    def get_vocab_file_path(self, vocab_file_path):\n        vocab_file_path = os.path.join(\n            os.path.abspath(os.path.join(os.path.dirname(__file__), ""../../pretrained_model/chinese_L-12_H-768_A-12"")), vocab_file_path)\n        return vocab_file_path\n\n    #\xe5\xba\x8f\xe5\x88\x97\xe6\xa0\x87\xe6\xb3\xa8\xe5\xaf\xb9\xe9\xbd\x90\xef\xbc\x9a\xe7\x94\xb1\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe7\x94\x9f\xe6\x88\x90\xe6\xa0\x87\xe6\xb3\xa8\xe5\xa5\xbd\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe6\x96\x87\xe4\xbb\xb6\n    def subject_object_labeling(self, spo_list, text):\n        #\xe4\xbb\xa5\xe5\x85\xb3\xe7\xb3\xbb\xe4\xb8\xba key \xe5\x88\x86\xe7\xbb\x84spo_list\n        def _spo_list_to_spo_predicate_dict(spo_list):\n            spo_predicate_dict = dict()\n            for spo_item in spo_list:\n                predicate = spo_item[""predicate""]\n                subject = spo_item[""subject""]\n                object = spo_item[""object""]\n                spo_predicate_dict.setdefault(predicate, []).append((subject, object))\n            return spo_predicate_dict\n\n        # \xe5\x9c\xa8\xe5\x88\x97\xe8\xa1\xa8 k \xe4\xb8\xad\xe7\xa1\xae\xe5\xae\x9a\xe5\x88\x97\xe8\xa1\xa8 q \xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n        def _index_q_list_in_k_list(q_list, k_list):\n            """"""Known q_list in k_list, find index(first time) of q_list in k_list""""""\n            q_list_length = len(q_list)\n            k_list_length = len(k_list)\n            for idx in range(k_list_length - q_list_length + 1):\n                t = [q == k for q, k in zip(q_list, k_list[idx: idx + q_list_length])]\n                # print(idx, t)\n                if all(t):\n                    # print(idx)\n                    idx_start = idx\n                    return idx_start\n\n        # \xe7\xbb\x99\xe4\xb8\xbb\xe4\xbd\x93\xe5\x92\x8c\xe5\xae\xa2\xe4\xbd\x93\xe8\xa1\xa8\xe4\xb8\x8aBIO\xe5\x88\x86\xe5\x89\xb2\xe5\xbc\x8f\xe7\xb1\xbb\xe5\x9e\x8b\xe6\xa0\x87\xe7\xad\xbe\n        def _labeling_type(subject_object, so_type):\n            tokener_error_flag = False\n            so_tokened = self.bert_tokenizer.tokenize(subject_object)\n            so_tokened_length = len(so_tokened)\n            idx_start = _index_q_list_in_k_list(q_list=so_tokened, k_list=text_tokened)\n            if idx_start is None:\n                tokener_error_flag = True\n                \'\'\'\n                \xe5\xae\x9e\xe4\xbd\x93: ""1981\xe5\xb9\xb4""  \xe5\x8e\x9f\xe5\x8f\xa5: ""\xe2\x97\x8f1981\xe5\xb9\xb42\xe6\x9c\x8827\xe6\x97\xa5\xef\xbc\x8c\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\xba\xe5\x8f\xa3\xe5\xad\xa6\xe4\xbc\x9a\xe6\x88\x90\xe7\xab\x8b""\n                so_tokened [\'1981\', \'\xe5\xb9\xb4\']  text_tokened [\'\xe2\x97\x8f\', \'##19\', \'##81\', \'\xe5\xb9\xb4\', \'2\', \'\xe6\x9c\x88\', \'27\', \'\xe6\x97\xa5\', \'\xef\xbc\x8c\', \'\xe4\xb8\xad\', \'\xe5\x9b\xbd\', \'\xe4\xba\xba\', \'\xe5\x8f\xa3\', \'\xe5\xad\xa6\', \'\xe4\xbc\x9a\', \'\xe6\x88\x90\', \'\xe7\xab\x8b\']\n                so_tokened \xe6\x97\xa0\xe6\xb3\x95\xe5\x9c\xa8 text_tokened \xe6\x89\xbe\xe5\x88\xb0\xef\xbc\x81\xe5\x8e\x9f\xe5\x9b\xa0\xe6\x98\xafbert_tokenizer.tokenize \xe5\x88\x86\xe8\xaf\x8d\xe5\xa2\x9e\xe6\xb7\xbb \xe2\x80\x9c##\xe2\x80\x9d \xe6\x89\x80\xe8\x87\xb4\xef\xbc\x81\n                \'\'\'\n                self.bert_tokener_error_log_f.write(subject_object + "" @@ "" + text + ""\\n"")\n                self.bert_tokener_error_log_f.write(str(so_tokened) + "" @@ "" + str(text_tokened) + ""\\n"")\n            else: #\xe7\xbb\x99\xe5\xae\x9e\xe4\xbd\x93\xe5\xbc\x80\xe5\xa7\x8b\xe5\xa4\x84\xe6\xa0\x87 B \xe5\x85\xb6\xe5\xae\x83\xe4\xbd\x8d\xe7\xbd\xae\xe6\xa0\x87 I\n                labeling_list[idx_start] = ""B-"" + so_type\n                if so_tokened_length == 2:\n                    labeling_list[idx_start + 1] = ""I-"" + so_type\n                elif so_tokened_length >= 3:\n                    labeling_list[idx_start + 1: idx_start + so_tokened_length] = [""I-"" + so_type] * (so_tokened_length - 1)\n            return tokener_error_flag\n\n        text_tokened = self.bert_tokenizer.tokenize(text)\n        text_tokened_not_UNK = self.bert_tokenizer.tokenize_not_UNK(text)\n\n        spo_predicate_dict = _spo_list_to_spo_predicate_dict(spo_list)\n        for predicate, spo_list_form in spo_predicate_dict.items():\n            tokener_error_flag = False\n            labeling_list = [""O""] * len(text_tokened)\n            for (spo_subject, spo_object) in spo_list_form:\n                flag_A = _labeling_type(spo_subject, ""SUB"")\n                flag_B = _labeling_type(spo_object, ""OBJ"")\n                if flag_A or flag_B:\n                    tokener_error_flag = True\n\n            #\xe7\xbb\x99\xe8\xa2\xabbert_tokenizer.tokenize \xe6\x8b\x86\xe5\x88\x86\xe7\x9a\x84\xe8\xaf\x8d\xe8\xaf\xad\xe6\x89\x93\xe4\xb8\x8a\xe7\x89\xb9\xe6\xae\x8a\xe6\xa0\x87\xe7\xad\xbe[##WordPiece]\n            for idx, token in enumerate(text_tokened):\n                """"""\xe6\xa0\x87\xe6\xb3\xa8\xe8\xa2\xab bert_tokenizer.tokenize \xe6\x8b\x86\xe5\x88\x86\xe7\x9a\x84\xe8\xaf\x8d\xe8\xaf\xad""""""\n                if token.startswith(""##""):\n                    labeling_list[idx] = ""[##WordPiece]""\n            if not tokener_error_flag:\n                self.token_label_and_one_prdicate_out_f.write("" "".join(labeling_list)+""\\t""+predicate+""\\n"")\n                self.text_f.write(text + ""\\n"")\n                self.token_in_f.write("" "".join(text_tokened)+""\\t""+predicate+""\\n"")\n                self.token_in_not_UNK_f.write("" "".join(text_tokened_not_UNK) + ""\\n"")\n\n\n\n    #\xe5\xa4\x84\xe7\x90\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x95\xb0\xe6\x8d\xae\n    def separate_raw_data_and_token_labeling(self):\n        if not os.path.exists(self.DATA_OUTPUT_DIR):\n            os.makedirs(os.path.join(self.DATA_OUTPUT_DIR, ""train""))\n            os.makedirs(os.path.join(self.DATA_OUTPUT_DIR, ""valid""))\n            os.makedirs(os.path.join(self.DATA_OUTPUT_DIR, ""test""))\n\n        for file_set_type in [""train"", ""valid""]:\n            print(os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type)))\n            self.token_label_and_one_prdicate_out_f = open(os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""token_label_and_one_prdicate_out.txt""), ""w"", encoding=\'utf-8\')\n            self.bert_tokener_error_log_f = open(os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""bert_tokener_error_log.txt""), ""w"", encoding=\'utf-8\')\n\n            self.text_f = open(os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""text.txt""), ""w"", encoding=\'utf-8\')\n            self.token_in_f = open(os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""token_in.txt""), ""w"", encoding=\'utf-8\')\n            self.token_in_not_UNK_f = open(os.path.join(os.path.join(self.DATA_OUTPUT_DIR, file_set_type), ""token_in_not_UNK.txt""), ""w"", encoding=\'utf-8\')\n\n            if file_set_type == ""train"":\n                path_to_raw_data_file = ""train_data.json""\n            elif file_set_type == ""valid"":\n                path_to_raw_data_file = ""dev_data.json""\n            else:\n                pass\n            with open(os.path.join(self.DATA_INPUT_DIR, path_to_raw_data_file), \'r\', encoding=\'utf-8\') as f:\n                count_numbers = 0\n                while True:\n                    line = f.readline()\n                    if line:\n                        count_numbers += 1\n                        r = json.loads(line)\n                        spo_list = r[""spo_list""]\n                        text = r[""text""]\n                        self.subject_object_labeling(spo_list=spo_list, text=text)\n                    else:\n                        break\n            print(""all numbers"", count_numbers)\n            self.text_f.close()\n            self.token_in_f.close()\n            self.token_in_not_UNK_f.close()\n            self.token_label_and_one_prdicate_out_f.close()\n            self.bert_tokener_error_log_f.close()\n\nif __name__==""__main__"":\n    DATA_INPUT_DIR = ""raw_data""\n    DATA_OUTPUT_DIR = ""sequence_labeling_data""\n    model_data = Model_data_preparation(DATA_INPUT_DIR=DATA_INPUT_DIR, DATA_OUTPUT_DIR=DATA_OUTPUT_DIR)\n    model_data.separate_raw_data_and_token_labeling()\n\n'"
