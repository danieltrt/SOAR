file_path,api_count,code
C3D_model.py,1,"b'import torch.nn as nn\n\n\nclass C3D(nn.Module):\n    """"""\n    The C3D network as described in [1].\n    """"""\n\n    def __init__(self):\n        super(C3D, self).__init__()\n\n        self.conv1 = nn.Conv3d(3, 64, kernel_size=(3, 3, 3), padding=(1, 1, 1))\n        self.pool1 = nn.MaxPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2))\n\n        self.conv2 = nn.Conv3d(64, 128, kernel_size=(3, 3, 3), padding=(1, 1, 1))\n        self.pool2 = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))\n\n        self.conv3a = nn.Conv3d(128, 256, kernel_size=(3, 3, 3), padding=(1, 1, 1))\n        self.conv3b = nn.Conv3d(256, 256, kernel_size=(3, 3, 3), padding=(1, 1, 1))\n        self.pool3 = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))\n\n        self.conv4a = nn.Conv3d(256, 512, kernel_size=(3, 3, 3), padding=(1, 1, 1))\n        self.conv4b = nn.Conv3d(512, 512, kernel_size=(3, 3, 3), padding=(1, 1, 1))\n        self.pool4 = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))\n\n        self.conv5a = nn.Conv3d(512, 512, kernel_size=(3, 3, 3), padding=(1, 1, 1))\n        self.conv5b = nn.Conv3d(512, 512, kernel_size=(3, 3, 3), padding=(1, 1, 1))\n        self.pool5 = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2), padding=(0, 1, 1))\n\n        self.fc6 = nn.Linear(8192, 4096)\n        self.fc7 = nn.Linear(4096, 4096)\n        self.fc8 = nn.Linear(4096, 487)\n\n        self.dropout = nn.Dropout(p=0.5)\n\n        self.relu = nn.ReLU()\n        self.softmax = nn.Softmax()\n\n    def forward(self, x):\n\n        h = self.relu(self.conv1(x))\n        h = self.pool1(h)\n\n        h = self.relu(self.conv2(h))\n        h = self.pool2(h)\n\n        h = self.relu(self.conv3a(h))\n        h = self.relu(self.conv3b(h))\n        h = self.pool3(h)\n\n        h = self.relu(self.conv4a(h))\n        h = self.relu(self.conv4b(h))\n        h = self.pool4(h)\n\n        h = self.relu(self.conv5a(h))\n        h = self.relu(self.conv5b(h))\n        h = self.pool5(h)\n\n        h = h.view(-1, 8192)\n        h = self.relu(self.fc6(h))\n        h = self.dropout(h)\n        h = self.relu(self.fc7(h))\n        h = self.dropout(h)\n\n        logits = self.fc8(h)\n        probs = self.softmax(logits)\n\n        return probs\n\n""""""\nReferences\n----------\n[1] Tran, Du, et al. ""Learning spatiotemporal features with 3d convolutional networks."" \nProceedings of the IEEE international conference on computer vision. 2015.\n""""""'"
predict.py,3,"b'"""""" How to use C3D network. """"""\nimport numpy as np\n\nimport torch\nfrom torch.autograd import Variable\n\nfrom os.path import join\nfrom glob import glob\n\nimport skimage.io as io\nfrom skimage.transform import resize\n\nfrom C3D_model import C3D\n\n\ndef get_sport_clip(clip_name, verbose=True):\n    """"""\n    Loads a clip to be fed to C3D for classification.\n    TODO: should I remove mean here?\n    \n    Parameters\n    ----------\n    clip_name: str\n        the name of the clip (subfolder in \'data\').\n    verbose: bool\n        if True, shows the unrolled clip (default is True).\n\n    Returns\n    -------\n    Tensor\n        a pytorch batch (n, ch, fr, h, w).\n    """"""\n\n    clip = sorted(glob(join(\'data\', clip_name, \'*.png\')))\n    clip = np.array([resize(io.imread(frame), output_shape=(112, 200), preserve_range=True) for frame in clip])\n    clip = clip[:, :, 44:44+112, :]  # crop centrally\n\n    if verbose:\n        clip_img = np.reshape(clip.transpose(1, 0, 2, 3), (112, 16 * 112, 3))\n        io.imshow(clip_img.astype(np.uint8))\n        io.show()\n\n    clip = clip.transpose(3, 0, 1, 2)  # ch, fr, h, w\n    clip = np.expand_dims(clip, axis=0)  # batch axis\n    clip = np.float32(clip)\n\n    return torch.from_numpy(clip)\n\n\ndef read_labels_from_file(filepath):\n    """"""\n    Reads Sport1M labels from file\n    \n    Parameters\n    ----------\n    filepath: str\n        the file.\n        \n    Returns\n    -------\n    list\n        list of sport names.\n    """"""\n    with open(filepath, \'r\') as f:\n        labels = [line.strip() for line in f.readlines()]\n    return labels\n\n\ndef main():\n    """"""\n    Main function.\n    """"""\n\n    # load a clip to be predicted\n    X = get_sport_clip(\'roger\')\n    X = Variable(X)\n    X = X.cuda()\n\n    # get network pretrained model\n    net = C3D()\n    net.load_state_dict(torch.load(\'c3d.pickle\'))\n    net.cuda()\n    net.eval()\n\n    # perform prediction\n    prediction = net(X)\n    prediction = prediction.data.cpu().numpy()\n\n    # read labels\n    labels = read_labels_from_file(\'labels.txt\')\n\n    # print top predictions\n    top_inds = prediction[0].argsort()[::-1][:5]  # reverse sort and take five largest items\n    print(\'\\nTop 5:\')\n    for i in top_inds:\n        print(\'{:.5f} {}\'.format(prediction[0][i], labels[i]))\n\n\n# entry point\nif __name__ == \'__main__\':\n    main()\n'"
