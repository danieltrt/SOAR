file_path,api_count,code
demo.py,0,"b""import cv2\nimport matplotlib.pyplot as plt\nimport copy\nimport numpy as np\n\nfrom src import model\nfrom src import util\nfrom src.body import Body\nfrom src.hand import Hand\n\nbody_estimation = Body('model/body_pose_model.pth')\nhand_estimation = Hand('model/hand_pose_model.pth')\n\ntest_image = 'images/demo.jpg'\noriImg = cv2.imread(test_image)  # B,G,R order\ncandidate, subset = body_estimation(oriImg)\ncanvas = copy.deepcopy(oriImg)\ncanvas = util.draw_bodypose(canvas, candidate, subset)\n# detect hand\nhands_list = util.handDetect(candidate, subset, oriImg)\n\nall_hand_peaks = []\nfor x, y, w, is_left in hands_list:\n    # cv2.rectangle(canvas, (x, y), (x+w, y+w), (0, 255, 0), 2, lineType=cv2.LINE_AA)\n    # cv2.putText(canvas, 'left' if is_left else 'right', (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)\n\n    # if is_left:\n        # plt.imshow(oriImg[y:y+w, x:x+w, :][:, :, [2, 1, 0]])\n        # plt.show()\n    peaks = hand_estimation(oriImg[y:y+w, x:x+w, :])\n    peaks[:, 0] = np.where(peaks[:, 0]==0, peaks[:, 0], peaks[:, 0]+x)\n    peaks[:, 1] = np.where(peaks[:, 1]==0, peaks[:, 1], peaks[:, 1]+y)\n    # else:\n    #     peaks = hand_estimation(cv2.flip(oriImg[y:y+w, x:x+w, :], 1))\n    #     peaks[:, 0] = np.where(peaks[:, 0]==0, peaks[:, 0], w-peaks[:, 0]-1+x)\n    #     peaks[:, 1] = np.where(peaks[:, 1]==0, peaks[:, 1], peaks[:, 1]+y)\n    #     print(peaks)\n    all_hand_peaks.append(peaks)\n\ncanvas = util.draw_handpose(canvas, all_hand_peaks)\n\nplt.imshow(canvas[:, :, [2, 1, 0]])\nplt.axis('off')\nplt.show()\n"""
demo_camera.py,1,"b'import cv2\nimport matplotlib.pyplot as plt\nimport copy\nimport numpy as np\nimport torch\n\nfrom src import model\nfrom src import util\nfrom src.body import Body\nfrom src.hand import Hand\n\nbody_estimation = Body(\'model/body_pose_model.pth\')\nhand_estimation = Hand(\'model/hand_pose_model.pth\')\n\nprint(f""Torch device: {torch.cuda.get_device_name()}"")\n\ncap = cv2.VideoCapture(0)\ncap.set(3, 640)\ncap.set(4, 480)\nwhile True:\n    ret, oriImg = cap.read()\n    candidate, subset = body_estimation(oriImg)\n    canvas = copy.deepcopy(oriImg)\n    canvas = util.draw_bodypose(canvas, candidate, subset)\n\n    # detect hand\n    hands_list = util.handDetect(candidate, subset, oriImg)\n\n    all_hand_peaks = []\n    for x, y, w, is_left in hands_list:\n        peaks = hand_estimation(oriImg[y:y+w, x:x+w, :])\n        peaks[:, 0] = np.where(peaks[:, 0]==0, peaks[:, 0], peaks[:, 0]+x)\n        peaks[:, 1] = np.where(peaks[:, 1]==0, peaks[:, 1], peaks[:, 1]+y)\n        all_hand_peaks.append(peaks)\n\n    canvas = util.draw_handpose(canvas, all_hand_peaks)\n\n    cv2.imshow(\'demo\', canvas)#\xe4\xb8\x80\xe4\xb8\xaa\xe7\xaa\x97\xe5\x8f\xa3\xe7\x94\xa8\xe4\xbb\xa5\xe6\x98\xbe\xe7\xa4\xba\xe5\x8e\x9f\xe8\xa7\x86\xe9\xa2\x91\n    if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n\n'"
src/__init__.py,0,b''
src/body.py,5,"b'import cv2\nimport numpy as np\nimport math\nimport time\nfrom scipy.ndimage.filters import gaussian_filter\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport torch\nfrom torchvision import transforms\n\nfrom src import util\nfrom src.model import bodypose_model\n\nclass Body(object):\n    def __init__(self, model_path):\n        self.model = bodypose_model()\n        if torch.cuda.is_available():\n            self.model = self.model.cuda()\n        model_dict = util.transfer(self.model, torch.load(model_path))\n        self.model.load_state_dict(model_dict)\n        self.model.eval()\n\n    def __call__(self, oriImg):\n        # scale_search = [0.5, 1.0, 1.5, 2.0]\n        scale_search = [0.5]\n        boxsize = 368\n        stride = 8\n        padValue = 128\n        thre1 = 0.1\n        thre2 = 0.05\n        multiplier = [x * boxsize / oriImg.shape[0] for x in scale_search]\n        heatmap_avg = np.zeros((oriImg.shape[0], oriImg.shape[1], 19))\n        paf_avg = np.zeros((oriImg.shape[0], oriImg.shape[1], 38))\n\n        for m in range(len(multiplier)):\n            scale = multiplier[m]\n            imageToTest = cv2.resize(oriImg, (0, 0), fx=scale, fy=scale, interpolation=cv2.INTER_CUBIC)\n            imageToTest_padded, pad = util.padRightDownCorner(imageToTest, stride, padValue)\n            im = np.transpose(np.float32(imageToTest_padded[:, :, :, np.newaxis]), (3, 2, 0, 1)) / 256 - 0.5\n            im = np.ascontiguousarray(im)\n\n            data = torch.from_numpy(im).float()\n            if torch.cuda.is_available():\n                data = data.cuda()\n            # data = data.permute([2, 0, 1]).unsqueeze(0).float()\n            with torch.no_grad():\n                Mconv7_stage6_L1, Mconv7_stage6_L2 = self.model(data)\n            Mconv7_stage6_L1 = Mconv7_stage6_L1.cpu().numpy()\n            Mconv7_stage6_L2 = Mconv7_stage6_L2.cpu().numpy()\n\n            # extract outputs, resize, and remove padding\n            # heatmap = np.transpose(np.squeeze(net.blobs[output_blobs.keys()[1]].data), (1, 2, 0))  # output 1 is heatmaps\n            heatmap = np.transpose(np.squeeze(Mconv7_stage6_L2), (1, 2, 0))  # output 1 is heatmaps\n            heatmap = cv2.resize(heatmap, (0, 0), fx=stride, fy=stride, interpolation=cv2.INTER_CUBIC)\n            heatmap = heatmap[:imageToTest_padded.shape[0] - pad[2], :imageToTest_padded.shape[1] - pad[3], :]\n            heatmap = cv2.resize(heatmap, (oriImg.shape[1], oriImg.shape[0]), interpolation=cv2.INTER_CUBIC)\n\n            # paf = np.transpose(np.squeeze(net.blobs[output_blobs.keys()[0]].data), (1, 2, 0))  # output 0 is PAFs\n            paf = np.transpose(np.squeeze(Mconv7_stage6_L1), (1, 2, 0))  # output 0 is PAFs\n            paf = cv2.resize(paf, (0, 0), fx=stride, fy=stride, interpolation=cv2.INTER_CUBIC)\n            paf = paf[:imageToTest_padded.shape[0] - pad[2], :imageToTest_padded.shape[1] - pad[3], :]\n            paf = cv2.resize(paf, (oriImg.shape[1], oriImg.shape[0]), interpolation=cv2.INTER_CUBIC)\n\n            heatmap_avg += heatmap_avg + heatmap / len(multiplier)\n            paf_avg += + paf / len(multiplier)\n\n        all_peaks = []\n        peak_counter = 0\n\n        for part in range(18):\n            map_ori = heatmap_avg[:, :, part]\n            one_heatmap = gaussian_filter(map_ori, sigma=3)\n\n            map_left = np.zeros(one_heatmap.shape)\n            map_left[1:, :] = one_heatmap[:-1, :]\n            map_right = np.zeros(one_heatmap.shape)\n            map_right[:-1, :] = one_heatmap[1:, :]\n            map_up = np.zeros(one_heatmap.shape)\n            map_up[:, 1:] = one_heatmap[:, :-1]\n            map_down = np.zeros(one_heatmap.shape)\n            map_down[:, :-1] = one_heatmap[:, 1:]\n\n            peaks_binary = np.logical_and.reduce(\n                (one_heatmap >= map_left, one_heatmap >= map_right, one_heatmap >= map_up, one_heatmap >= map_down, one_heatmap > thre1))\n            peaks = list(zip(np.nonzero(peaks_binary)[1], np.nonzero(peaks_binary)[0]))  # note reverse\n            peaks_with_score = [x + (map_ori[x[1], x[0]],) for x in peaks]\n            peak_id = range(peak_counter, peak_counter + len(peaks))\n            peaks_with_score_and_id = [peaks_with_score[i] + (peak_id[i],) for i in range(len(peak_id))]\n\n            all_peaks.append(peaks_with_score_and_id)\n            peak_counter += len(peaks)\n\n        # find connection in the specified sequence, center 29 is in the position 15\n        limbSeq = [[2, 3], [2, 6], [3, 4], [4, 5], [6, 7], [7, 8], [2, 9], [9, 10], \\\n                   [10, 11], [2, 12], [12, 13], [13, 14], [2, 1], [1, 15], [15, 17], \\\n                   [1, 16], [16, 18], [3, 17], [6, 18]]\n        # the middle joints heatmap correpondence\n        mapIdx = [[31, 32], [39, 40], [33, 34], [35, 36], [41, 42], [43, 44], [19, 20], [21, 22], \\\n                  [23, 24], [25, 26], [27, 28], [29, 30], [47, 48], [49, 50], [53, 54], [51, 52], \\\n                  [55, 56], [37, 38], [45, 46]]\n\n        connection_all = []\n        special_k = []\n        mid_num = 10\n\n        for k in range(len(mapIdx)):\n            score_mid = paf_avg[:, :, [x - 19 for x in mapIdx[k]]]\n            candA = all_peaks[limbSeq[k][0] - 1]\n            candB = all_peaks[limbSeq[k][1] - 1]\n            nA = len(candA)\n            nB = len(candB)\n            indexA, indexB = limbSeq[k]\n            if (nA != 0 and nB != 0):\n                connection_candidate = []\n                for i in range(nA):\n                    for j in range(nB):\n                        vec = np.subtract(candB[j][:2], candA[i][:2])\n                        norm = math.sqrt(vec[0] * vec[0] + vec[1] * vec[1])\n                        vec = np.divide(vec, norm)\n\n                        startend = list(zip(np.linspace(candA[i][0], candB[j][0], num=mid_num), \\\n                                            np.linspace(candA[i][1], candB[j][1], num=mid_num)))\n\n                        vec_x = np.array([score_mid[int(round(startend[I][1])), int(round(startend[I][0])), 0] \\\n                                          for I in range(len(startend))])\n                        vec_y = np.array([score_mid[int(round(startend[I][1])), int(round(startend[I][0])), 1] \\\n                                          for I in range(len(startend))])\n\n                        score_midpts = np.multiply(vec_x, vec[0]) + np.multiply(vec_y, vec[1])\n                        score_with_dist_prior = sum(score_midpts) / len(score_midpts) + min(\n                            0.5 * oriImg.shape[0] / norm - 1, 0)\n                        criterion1 = len(np.nonzero(score_midpts > thre2)[0]) > 0.8 * len(score_midpts)\n                        criterion2 = score_with_dist_prior > 0\n                        if criterion1 and criterion2:\n                            connection_candidate.append(\n                                [i, j, score_with_dist_prior, score_with_dist_prior + candA[i][2] + candB[j][2]])\n\n                connection_candidate = sorted(connection_candidate, key=lambda x: x[2], reverse=True)\n                connection = np.zeros((0, 5))\n                for c in range(len(connection_candidate)):\n                    i, j, s = connection_candidate[c][0:3]\n                    if (i not in connection[:, 3] and j not in connection[:, 4]):\n                        connection = np.vstack([connection, [candA[i][3], candB[j][3], s, i, j]])\n                        if (len(connection) >= min(nA, nB)):\n                            break\n\n                connection_all.append(connection)\n            else:\n                special_k.append(k)\n                connection_all.append([])\n\n        # last number in each row is the total parts number of that person\n        # the second last number in each row is the score of the overall configuration\n        subset = -1 * np.ones((0, 20))\n        candidate = np.array([item for sublist in all_peaks for item in sublist])\n\n        for k in range(len(mapIdx)):\n            if k not in special_k:\n                partAs = connection_all[k][:, 0]\n                partBs = connection_all[k][:, 1]\n                indexA, indexB = np.array(limbSeq[k]) - 1\n\n                for i in range(len(connection_all[k])):  # = 1:size(temp,1)\n                    found = 0\n                    subset_idx = [-1, -1]\n                    for j in range(len(subset)):  # 1:size(subset,1):\n                        if subset[j][indexA] == partAs[i] or subset[j][indexB] == partBs[i]:\n                            subset_idx[found] = j\n                            found += 1\n\n                    if found == 1:\n                        j = subset_idx[0]\n                        if subset[j][indexB] != partBs[i]:\n                            subset[j][indexB] = partBs[i]\n                            subset[j][-1] += 1\n                            subset[j][-2] += candidate[partBs[i].astype(int), 2] + connection_all[k][i][2]\n                    elif found == 2:  # if found 2 and disjoint, merge them\n                        j1, j2 = subset_idx\n                        membership = ((subset[j1] >= 0).astype(int) + (subset[j2] >= 0).astype(int))[:-2]\n                        if len(np.nonzero(membership == 2)[0]) == 0:  # merge\n                            subset[j1][:-2] += (subset[j2][:-2] + 1)\n                            subset[j1][-2:] += subset[j2][-2:]\n                            subset[j1][-2] += connection_all[k][i][2]\n                            subset = np.delete(subset, j2, 0)\n                        else:  # as like found == 1\n                            subset[j1][indexB] = partBs[i]\n                            subset[j1][-1] += 1\n                            subset[j1][-2] += candidate[partBs[i].astype(int), 2] + connection_all[k][i][2]\n\n                    # if find no partA in the subset, create a new subset\n                    elif not found and k < 17:\n                        row = -1 * np.ones(20)\n                        row[indexA] = partAs[i]\n                        row[indexB] = partBs[i]\n                        row[-1] = 2\n                        row[-2] = sum(candidate[connection_all[k][i, :2].astype(int), 2]) + connection_all[k][i][2]\n                        subset = np.vstack([subset, row])\n        # delete some rows of subset which has few parts occur\n        deleteIdx = []\n        for i in range(len(subset)):\n            if subset[i][-1] < 4 or subset[i][-2] / subset[i][-1] < 0.4:\n                deleteIdx.append(i)\n        subset = np.delete(subset, deleteIdx, axis=0)\n\n        # subset: n*20 array, 0-17 is the index in candidate, 18 is the total score, 19 is the total parts\n        # candidate: x, y, score, id\n        return candidate, subset\n\nif __name__ == ""__main__"":\n    body_estimation = Body(\'../model/body_pose_model.pth\')\n\n    test_image = \'../images/ski.jpg\'\n    oriImg = cv2.imread(test_image)  # B,G,R order\n    candidate, subset = body_estimation(oriImg)\n    canvas = util.draw_bodypose(oriImg, candidate, subset)\n    plt.imshow(canvas[:, :, [2, 1, 0]])\n    plt.show()\n'"
src/hand.py,5,"b'import cv2\nimport json\nimport numpy as np\nimport math\nimport time\nfrom scipy.ndimage.filters import gaussian_filter\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport torch\nfrom skimage.measure import label\n\nfrom src.model import handpose_model\nfrom src import util\n\nclass Hand(object):\n    def __init__(self, model_path):\n        self.model = handpose_model()\n        if torch.cuda.is_available():\n            self.model = self.model.cuda()\n        model_dict = util.transfer(self.model, torch.load(model_path))\n        self.model.load_state_dict(model_dict)\n        self.model.eval()\n\n    def __call__(self, oriImg):\n        scale_search = [0.5, 1.0, 1.5, 2.0]\n        # scale_search = [0.5]\n        boxsize = 368\n        stride = 8\n        padValue = 128\n        thre = 0.05\n        multiplier = [x * boxsize / oriImg.shape[0] for x in scale_search]\n        heatmap_avg = np.zeros((oriImg.shape[0], oriImg.shape[1], 22))\n        # paf_avg = np.zeros((oriImg.shape[0], oriImg.shape[1], 38))\n\n        for m in range(len(multiplier)):\n            scale = multiplier[m]\n            imageToTest = cv2.resize(oriImg, (0, 0), fx=scale, fy=scale, interpolation=cv2.INTER_CUBIC)\n            imageToTest_padded, pad = util.padRightDownCorner(imageToTest, stride, padValue)\n            im = np.transpose(np.float32(imageToTest_padded[:, :, :, np.newaxis]), (3, 2, 0, 1)) / 256 - 0.5\n            im = np.ascontiguousarray(im)\n\n            data = torch.from_numpy(im).float()\n            if torch.cuda.is_available():\n                data = data.cuda()\n            # data = data.permute([2, 0, 1]).unsqueeze(0).float()\n            with torch.no_grad():\n                output = self.model(data).cpu().numpy()\n                # output = self.model(data).numpy()q\n\n            # extract outputs, resize, and remove padding\n            heatmap = np.transpose(np.squeeze(output), (1, 2, 0))  # output 1 is heatmaps\n            heatmap = cv2.resize(heatmap, (0, 0), fx=stride, fy=stride, interpolation=cv2.INTER_CUBIC)\n            heatmap = heatmap[:imageToTest_padded.shape[0] - pad[2], :imageToTest_padded.shape[1] - pad[3], :]\n            heatmap = cv2.resize(heatmap, (oriImg.shape[1], oriImg.shape[0]), interpolation=cv2.INTER_CUBIC)\n\n            heatmap_avg += heatmap / len(multiplier)\n\n        all_peaks = []\n        for part in range(21):\n            map_ori = heatmap_avg[:, :, part]\n            one_heatmap = gaussian_filter(map_ori, sigma=3)\n            binary = np.ascontiguousarray(one_heatmap > thre, dtype=np.uint8)\n            # \xe5\x85\xa8\xe9\x83\xa8\xe5\xb0\x8f\xe4\xba\x8e\xe9\x98\x88\xe5\x80\xbc\n            if np.sum(binary) == 0:\n                all_peaks.append([0, 0])\n                continue\n            label_img, label_numbers = label(binary, return_num=True, connectivity=binary.ndim)\n            max_index = np.argmax([np.sum(map_ori[label_img == i]) for i in range(1, label_numbers + 1)]) + 1\n            label_img[label_img != max_index] = 0\n            map_ori[label_img == 0] = 0\n\n            y, x = util.npmax(map_ori)\n            all_peaks.append([x, y])\n        return np.array(all_peaks)\n\nif __name__ == ""__main__"":\n    hand_estimation = Hand(\'../model/hand_pose_model.pth\')\n\n    # test_image = \'../images/hand.jpg\'\n    test_image = \'../images/hand.jpg\'\n    oriImg = cv2.imread(test_image)  # B,G,R order\n    peaks = hand_estimation(oriImg)\n    canvas = util.draw_handpose(oriImg, peaks, True)\n    cv2.imshow(\'\', canvas)\n    cv2.waitKey(0)'"
src/hand_model_outputsize.py,2,"b""import torch\nfrom tqdm import tqdm\nimport json\n\nfrom src.model import handpose_model\n\nmodel = handpose_model()\n\nsize = {}\nfor i in tqdm(range(10, 1000)):\n    data = torch.randn(1, 3, i, i)\n    if torch.cuda.is_available():\n        data = data.cuda()\n    size[i] = model(data).size(2)\n\nwith open('hand_model_output_size.json') as f:\n    json.dump(size, f)\n"""
src/model.py,11,"b""import torch\nfrom collections import OrderedDict\n\nimport torch\nimport torch.nn as nn\n\ndef make_layers(block, no_relu_layers):\n    layers = []\n    for layer_name, v in block.items():\n        if 'pool' in layer_name:\n            layer = nn.MaxPool2d(kernel_size=v[0], stride=v[1],\n                                    padding=v[2])\n            layers.append((layer_name, layer))\n        else:\n            conv2d = nn.Conv2d(in_channels=v[0], out_channels=v[1],\n                               kernel_size=v[2], stride=v[3],\n                               padding=v[4])\n            layers.append((layer_name, conv2d))\n            if layer_name not in no_relu_layers:\n                layers.append(('relu_'+layer_name, nn.ReLU(inplace=True)))\n\n    return nn.Sequential(OrderedDict(layers))\n\nclass bodypose_model(nn.Module):\n    def __init__(self):\n        super(bodypose_model, self).__init__()\n\n        # these layers have no relu layer\n        no_relu_layers = ['conv5_5_CPM_L1', 'conv5_5_CPM_L2', 'Mconv7_stage2_L1',\\\n                          'Mconv7_stage2_L2', 'Mconv7_stage3_L1', 'Mconv7_stage3_L2',\\\n                          'Mconv7_stage4_L1', 'Mconv7_stage4_L2', 'Mconv7_stage5_L1',\\\n                          'Mconv7_stage5_L2', 'Mconv7_stage6_L1', 'Mconv7_stage6_L1']\n        blocks = {}\n        block0 = OrderedDict([\n                      ('conv1_1', [3, 64, 3, 1, 1]),\n                      ('conv1_2', [64, 64, 3, 1, 1]),\n                      ('pool1_stage1', [2, 2, 0]),\n                      ('conv2_1', [64, 128, 3, 1, 1]),\n                      ('conv2_2', [128, 128, 3, 1, 1]),\n                      ('pool2_stage1', [2, 2, 0]),\n                      ('conv3_1', [128, 256, 3, 1, 1]),\n                      ('conv3_2', [256, 256, 3, 1, 1]),\n                      ('conv3_3', [256, 256, 3, 1, 1]),\n                      ('conv3_4', [256, 256, 3, 1, 1]),\n                      ('pool3_stage1', [2, 2, 0]),\n                      ('conv4_1', [256, 512, 3, 1, 1]),\n                      ('conv4_2', [512, 512, 3, 1, 1]),\n                      ('conv4_3_CPM', [512, 256, 3, 1, 1]),\n                      ('conv4_4_CPM', [256, 128, 3, 1, 1])\n                  ])\n\n\n        # Stage 1\n        block1_1 = OrderedDict([\n                        ('conv5_1_CPM_L1', [128, 128, 3, 1, 1]),\n                        ('conv5_2_CPM_L1', [128, 128, 3, 1, 1]),\n                        ('conv5_3_CPM_L1', [128, 128, 3, 1, 1]),\n                        ('conv5_4_CPM_L1', [128, 512, 1, 1, 0]),\n                        ('conv5_5_CPM_L1', [512, 38, 1, 1, 0])\n                    ])\n\n        block1_2 = OrderedDict([\n                        ('conv5_1_CPM_L2', [128, 128, 3, 1, 1]),\n                        ('conv5_2_CPM_L2', [128, 128, 3, 1, 1]),\n                        ('conv5_3_CPM_L2', [128, 128, 3, 1, 1]),\n                        ('conv5_4_CPM_L2', [128, 512, 1, 1, 0]),\n                        ('conv5_5_CPM_L2', [512, 19, 1, 1, 0])\n                    ])\n        blocks['block1_1'] = block1_1\n        blocks['block1_2'] = block1_2\n\n        self.model0 = make_layers(block0, no_relu_layers)\n\n        # Stages 2 - 6\n        for i in range(2, 7):\n            blocks['block%d_1' % i] = OrderedDict([\n                    ('Mconv1_stage%d_L1' % i, [185, 128, 7, 1, 3]),\n                    ('Mconv2_stage%d_L1' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv3_stage%d_L1' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv4_stage%d_L1' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv5_stage%d_L1' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv6_stage%d_L1' % i, [128, 128, 1, 1, 0]),\n                    ('Mconv7_stage%d_L1' % i, [128, 38, 1, 1, 0])\n                ])\n\n            blocks['block%d_2' % i] = OrderedDict([\n                    ('Mconv1_stage%d_L2' % i, [185, 128, 7, 1, 3]),\n                    ('Mconv2_stage%d_L2' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv3_stage%d_L2' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv4_stage%d_L2' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv5_stage%d_L2' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv6_stage%d_L2' % i, [128, 128, 1, 1, 0]),\n                    ('Mconv7_stage%d_L2' % i, [128, 19, 1, 1, 0])\n                ])\n\n        for k in blocks.keys():\n            blocks[k] = make_layers(blocks[k], no_relu_layers)\n\n        self.model1_1 = blocks['block1_1']\n        self.model2_1 = blocks['block2_1']\n        self.model3_1 = blocks['block3_1']\n        self.model4_1 = blocks['block4_1']\n        self.model5_1 = blocks['block5_1']\n        self.model6_1 = blocks['block6_1']\n\n        self.model1_2 = blocks['block1_2']\n        self.model2_2 = blocks['block2_2']\n        self.model3_2 = blocks['block3_2']\n        self.model4_2 = blocks['block4_2']\n        self.model5_2 = blocks['block5_2']\n        self.model6_2 = blocks['block6_2']\n\n\n    def forward(self, x):\n\n        out1 = self.model0(x)\n\n        out1_1 = self.model1_1(out1)\n        out1_2 = self.model1_2(out1)\n        out2 = torch.cat([out1_1, out1_2, out1], 1)\n\n        out2_1 = self.model2_1(out2)\n        out2_2 = self.model2_2(out2)\n        out3 = torch.cat([out2_1, out2_2, out1], 1)\n\n        out3_1 = self.model3_1(out3)\n        out3_2 = self.model3_2(out3)\n        out4 = torch.cat([out3_1, out3_2, out1], 1)\n\n        out4_1 = self.model4_1(out4)\n        out4_2 = self.model4_2(out4)\n        out5 = torch.cat([out4_1, out4_2, out1], 1)\n\n        out5_1 = self.model5_1(out5)\n        out5_2 = self.model5_2(out5)\n        out6 = torch.cat([out5_1, out5_2, out1], 1)\n\n        out6_1 = self.model6_1(out6)\n        out6_2 = self.model6_2(out6)\n\n        return out6_1, out6_2\n\nclass handpose_model(nn.Module):\n    def __init__(self):\n        super(handpose_model, self).__init__()\n\n        # these layers have no relu layer\n        no_relu_layers = ['conv6_2_CPM', 'Mconv7_stage2', 'Mconv7_stage3',\\\n                          'Mconv7_stage4', 'Mconv7_stage5', 'Mconv7_stage6']\n        # stage 1\n        block1_0 = OrderedDict([\n                ('conv1_1', [3, 64, 3, 1, 1]),\n                ('conv1_2', [64, 64, 3, 1, 1]),\n                ('pool1_stage1', [2, 2, 0]),\n                ('conv2_1', [64, 128, 3, 1, 1]),\n                ('conv2_2', [128, 128, 3, 1, 1]),\n                ('pool2_stage1', [2, 2, 0]),\n                ('conv3_1', [128, 256, 3, 1, 1]),\n                ('conv3_2', [256, 256, 3, 1, 1]),\n                ('conv3_3', [256, 256, 3, 1, 1]),\n                ('conv3_4', [256, 256, 3, 1, 1]),\n                ('pool3_stage1', [2, 2, 0]),\n                ('conv4_1', [256, 512, 3, 1, 1]),\n                ('conv4_2', [512, 512, 3, 1, 1]),\n                ('conv4_3', [512, 512, 3, 1, 1]),\n                ('conv4_4', [512, 512, 3, 1, 1]),\n                ('conv5_1', [512, 512, 3, 1, 1]),\n                ('conv5_2', [512, 512, 3, 1, 1]),\n                ('conv5_3_CPM', [512, 128, 3, 1, 1])\n            ])\n\n        block1_1 = OrderedDict([\n            ('conv6_1_CPM', [128, 512, 1, 1, 0]),\n            ('conv6_2_CPM', [512, 22, 1, 1, 0])\n        ])\n\n        blocks = {}\n        blocks['block1_0'] = block1_0\n        blocks['block1_1'] = block1_1\n\n        # stage 2-6\n        for i in range(2, 7):\n            blocks['block%d' % i] = OrderedDict([\n                    ('Mconv1_stage%d' % i, [150, 128, 7, 1, 3]),\n                    ('Mconv2_stage%d' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv3_stage%d' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv4_stage%d' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv5_stage%d' % i, [128, 128, 7, 1, 3]),\n                    ('Mconv6_stage%d' % i, [128, 128, 1, 1, 0]),\n                    ('Mconv7_stage%d' % i, [128, 22, 1, 1, 0])\n                ])\n\n        for k in blocks.keys():\n            blocks[k] = make_layers(blocks[k], no_relu_layers)\n\n        self.model1_0 = blocks['block1_0']\n        self.model1_1 = blocks['block1_1']\n        self.model2 = blocks['block2']\n        self.model3 = blocks['block3']\n        self.model4 = blocks['block4']\n        self.model5 = blocks['block5']\n        self.model6 = blocks['block6']\n\n    def forward(self, x):\n        out1_0 = self.model1_0(x)\n        out1_1 = self.model1_1(out1_0)\n        concat_stage2 = torch.cat([out1_1, out1_0], 1)\n        out_stage2 = self.model2(concat_stage2)\n        concat_stage3 = torch.cat([out_stage2, out1_0], 1)\n        out_stage3 = self.model3(concat_stage3)\n        concat_stage4 = torch.cat([out_stage3, out1_0], 1)\n        out_stage4 = self.model4(concat_stage4)\n        concat_stage5 = torch.cat([out_stage4, out1_0], 1)\n        out_stage5 = self.model5(concat_stage5)\n        concat_stage6 = torch.cat([out_stage5, out1_0], 1)\n        out_stage6 = self.model6(concat_stage6)\n        return out_stage6\n\n\n"""
src/util.py,0,"b'import numpy as np\nimport math\nimport cv2\nimport matplotlib\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\nfrom matplotlib.figure import Figure\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\n\n\ndef padRightDownCorner(img, stride, padValue):\n    h = img.shape[0]\n    w = img.shape[1]\n\n    pad = 4 * [None]\n    pad[0] = 0 # up\n    pad[1] = 0 # left\n    pad[2] = 0 if (h % stride == 0) else stride - (h % stride) # down\n    pad[3] = 0 if (w % stride == 0) else stride - (w % stride) # right\n\n    img_padded = img\n    pad_up = np.tile(img_padded[0:1, :, :]*0 + padValue, (pad[0], 1, 1))\n    img_padded = np.concatenate((pad_up, img_padded), axis=0)\n    pad_left = np.tile(img_padded[:, 0:1, :]*0 + padValue, (1, pad[1], 1))\n    img_padded = np.concatenate((pad_left, img_padded), axis=1)\n    pad_down = np.tile(img_padded[-2:-1, :, :]*0 + padValue, (pad[2], 1, 1))\n    img_padded = np.concatenate((img_padded, pad_down), axis=0)\n    pad_right = np.tile(img_padded[:, -2:-1, :]*0 + padValue, (1, pad[3], 1))\n    img_padded = np.concatenate((img_padded, pad_right), axis=1)\n\n    return img_padded, pad\n\n# transfer caffe model to pytorch which will match the layer name\ndef transfer(model, model_weights):\n    transfered_model_weights = {}\n    for weights_name in model.state_dict().keys():\n        transfered_model_weights[weights_name] = model_weights[\'.\'.join(weights_name.split(\'.\')[1:])]\n    return transfered_model_weights\n\n# draw the body keypoint and lims\ndef draw_bodypose(canvas, candidate, subset):\n    stickwidth = 4\n    limbSeq = [[2, 3], [2, 6], [3, 4], [4, 5], [6, 7], [7, 8], [2, 9], [9, 10], \\\n               [10, 11], [2, 12], [12, 13], [13, 14], [2, 1], [1, 15], [15, 17], \\\n               [1, 16], [16, 18], [3, 17], [6, 18]]\n\n    colors = [[255, 0, 0], [255, 85, 0], [255, 170, 0], [255, 255, 0], [170, 255, 0], [85, 255, 0], [0, 255, 0], \\\n              [0, 255, 85], [0, 255, 170], [0, 255, 255], [0, 170, 255], [0, 85, 255], [0, 0, 255], [85, 0, 255], \\\n              [170, 0, 255], [255, 0, 255], [255, 0, 170], [255, 0, 85]]\n    for i in range(18):\n        for n in range(len(subset)):\n            index = int(subset[n][i])\n            if index == -1:\n                continue\n            x, y = candidate[index][0:2]\n            cv2.circle(canvas, (int(x), int(y)), 4, colors[i], thickness=-1)\n    for i in range(17):\n        for n in range(len(subset)):\n            index = subset[n][np.array(limbSeq[i]) - 1]\n            if -1 in index:\n                continue\n            cur_canvas = canvas.copy()\n            Y = candidate[index.astype(int), 0]\n            X = candidate[index.astype(int), 1]\n            mX = np.mean(X)\n            mY = np.mean(Y)\n            length = ((X[0] - X[1]) ** 2 + (Y[0] - Y[1]) ** 2) ** 0.5\n            angle = math.degrees(math.atan2(X[0] - X[1], Y[0] - Y[1]))\n            polygon = cv2.ellipse2Poly((int(mY), int(mX)), (int(length / 2), stickwidth), int(angle), 0, 360, 1)\n            cv2.fillConvexPoly(cur_canvas, polygon, colors[i])\n            canvas = cv2.addWeighted(canvas, 0.4, cur_canvas, 0.6, 0)\n    # plt.imsave(""preview.jpg"", canvas[:, :, [2, 1, 0]])\n    # plt.imshow(canvas[:, :, [2, 1, 0]])\n    return canvas\n\ndef draw_handpose(canvas, all_hand_peaks, show_number=False):\n    edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], \\\n             [10, 11], [11, 12], [0, 13], [13, 14], [14, 15], [15, 16], [0, 17], [17, 18], [18, 19], [19, 20]]\n    fig = Figure(figsize=plt.figaspect(canvas))\n\n    fig.subplots_adjust(0, 0, 1, 1)\n    fig.subplots_adjust(bottom=0, top=1, left=0, right=1)\n    bg = FigureCanvas(fig)\n    ax = fig.subplots()\n    ax.axis(\'off\')\n    ax.imshow(canvas)\n\n    width, height = ax.figure.get_size_inches() * ax.figure.get_dpi()\n\n    for peaks in all_hand_peaks:\n        for ie, e in enumerate(edges):\n            if np.sum(np.all(peaks[e], axis=1)==0)==0:\n                x1, y1 = peaks[e[0]]\n                x2, y2 = peaks[e[1]]\n                ax.plot([x1, x2], [y1, y2], color=matplotlib.colors.hsv_to_rgb([ie/float(len(edges)), 1.0, 1.0]))\n\n        for i, keyponit in enumerate(peaks):\n            x, y = keyponit\n            ax.plot(x, y, \'r.\')\n            if show_number:\n                ax.text(x, y, str(i))\n    bg.draw()\n    canvas = np.fromstring(bg.tostring_rgb(), dtype=\'uint8\').reshape(int(height), int(width), 3)\n    return canvas\n\n# image drawed by opencv is not good.\ndef draw_handpose_by_opencv(canvas, peaks, show_number=False):\n    edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], \\\n             [10, 11], [11, 12], [0, 13], [13, 14], [14, 15], [15, 16], [0, 17], [17, 18], [18, 19], [19, 20]]\n    # cv2.rectangle(canvas, (x, y), (x+w, y+w), (0, 255, 0), 2, lineType=cv2.LINE_AA)\n    # cv2.putText(canvas, \'left\' if is_left else \'right\', (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)\n    for ie, e in enumerate(edges):\n        if np.sum(np.all(peaks[e], axis=1)==0)==0:\n            x1, y1 = peaks[e[0]]\n            x2, y2 = peaks[e[1]]\n            cv2.line(canvas, (x1, y1), (x2, y2), matplotlib.colors.hsv_to_rgb([ie/float(len(edges)), 1.0, 1.0])*255, thickness=2)\n\n    for i, keyponit in enumerate(peaks):\n        x, y = keyponit\n        cv2.circle(canvas, (x, y), 4, (0, 0, 255), thickness=-1)\n        if show_number:\n            cv2.putText(canvas, str(i), (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 0, 0), lineType=cv2.LINE_AA)\n    return canvas\n\n# detect hand according to body pose keypoints\n# please refer to https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/src/openpose/hand/handDetector.cpp\ndef handDetect(candidate, subset, oriImg):\n    # right hand: wrist 4, elbow 3, shoulder 2\n    # left hand: wrist 7, elbow 6, shoulder 5\n    ratioWristElbow = 0.33\n    detect_result = []\n    image_height, image_width = oriImg.shape[0:2]\n    for person in subset.astype(int):\n        # if any of three not detected\n        has_left = np.sum(person[[5, 6, 7]] == -1) == 0\n        has_right = np.sum(person[[2, 3, 4]] == -1) == 0\n        if not (has_left or has_right):\n            continue\n        hands = []\n        #left hand\n        if has_left:\n            left_shoulder_index, left_elbow_index, left_wrist_index = person[[5, 6, 7]]\n            x1, y1 = candidate[left_shoulder_index][:2]\n            x2, y2 = candidate[left_elbow_index][:2]\n            x3, y3 = candidate[left_wrist_index][:2]\n            hands.append([x1, y1, x2, y2, x3, y3, True])\n        # right hand\n        if has_right:\n            right_shoulder_index, right_elbow_index, right_wrist_index = person[[2, 3, 4]]\n            x1, y1 = candidate[right_shoulder_index][:2]\n            x2, y2 = candidate[right_elbow_index][:2]\n            x3, y3 = candidate[right_wrist_index][:2]\n            hands.append([x1, y1, x2, y2, x3, y3, False])\n\n        for x1, y1, x2, y2, x3, y3, is_left in hands:\n            # pos_hand = pos_wrist + ratio * (pos_wrist - pos_elbox) = (1 + ratio) * pos_wrist - ratio * pos_elbox\n            # handRectangle.x = posePtr[wrist*3] + ratioWristElbow * (posePtr[wrist*3] - posePtr[elbow*3]);\n            # handRectangle.y = posePtr[wrist*3+1] + ratioWristElbow * (posePtr[wrist*3+1] - posePtr[elbow*3+1]);\n            # const auto distanceWristElbow = getDistance(poseKeypoints, person, wrist, elbow);\n            # const auto distanceElbowShoulder = getDistance(poseKeypoints, person, elbow, shoulder);\n            # handRectangle.width = 1.5f * fastMax(distanceWristElbow, 0.9f * distanceElbowShoulder);\n            x = x3 + ratioWristElbow * (x3 - x2)\n            y = y3 + ratioWristElbow * (y3 - y2)\n            distanceWristElbow = math.sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2)\n            distanceElbowShoulder = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n            width = 1.5 * max(distanceWristElbow, 0.9 * distanceElbowShoulder)\n            # x-y refers to the center --> offset to topLeft point\n            # handRectangle.x -= handRectangle.width / 2.f;\n            # handRectangle.y -= handRectangle.height / 2.f;\n            x -= width / 2\n            y -= width / 2  # width = height\n            # overflow the image\n            if x < 0: x = 0\n            if y < 0: y = 0\n            width1 = width\n            width2 = width\n            if x + width > image_width: width1 = image_width - x\n            if y + width > image_height: width2 = image_height - y\n            width = min(width1, width2)\n            # the max hand box value is 20 pixels\n            if width >= 20:\n                detect_result.append([int(x), int(y), int(width), is_left])\n\n    \'\'\'\n    return value: [[x, y, w, True if left hand else False]].\n    width=height since the network require squared input.\n    x, y is the coordinate of top left \n    \'\'\'\n    return detect_result\n\n# get max index of 2d array\ndef npmax(array):\n    arrayindex = array.argmax(1)\n    arrayvalue = array.max(1)\n    i = arrayvalue.argmax()\n    j = arrayindex[i]\n    return i, j\n'"
