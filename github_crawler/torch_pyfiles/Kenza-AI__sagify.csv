file_path,api_count,code
setup.py,0,"b""from setuptools import find_packages, setup\n\nwith open('README.md') as f:\n    long_description = f.read()\n\nsetup(\n    name='sagify',\n    version='0.20.6',\n    setup_cfg=True,\n    python_requires='~=3.5',\n    packages=find_packages(where='.'),\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    setup_requires=['setuptools>=39.1.0'],\n    url='https://github.com/Kenza-AI/sagify',\n    package_data={\n        'sagify': [\n            'template/sagify_base/config.json',\n            'template/sagify_base/*.sh',\n            'template/sagify_base/Dockerfile',\n            'template/sagify_base/__init__.py',\n            'template/sagify_base/training/__init__.py',\n            'template/sagify_base/training/train',\n            'template/sagify_base/training/*.py',\n            'template/sagify_base/prediction/*.py',\n            'template/sagify_base/prediction/serve',\n            'template/sagify_base/prediction/nginx.conf',\n            'template/sagify_base/local_test/*.sh',\n            'template/sagify_base/local_test/test_dir/output/.gitkeep',\n            'template/sagify_base/local_test/test_dir/model/.gitkeep',\n            'template/sagify_base/local_test/test_dir/input/config/*.json',\n            'template/sagify_base/local_test/test_dir/input/data/training/'\n            '.gitkeep'\n        ]\n    },\n    install_requires=[\n        'boto3',\n        'click>=7.0, <7.0.99',\n        'docker>=3.7.0, <3.7.99',\n        'flask>=1.1.0, <1.1.99',\n        'paramiko>=2.4.2, <2.4.99',\n        'pathlib2>=2.3.0, <2.3.99',\n        'requests>=2.20.0, <2.20.99',\n        'sagemaker>=1.50.0, <1.50.99',\n        'six>=1.10, <1.11.99',\n        'future>=0.16.0, <0.17.99'\n    ],\n    test_suite='tests',\n    zip_safe=True,\n    entry_points={\n        'console_scripts': [\n            'sagify=sagify.__main__:cli',\n        ],\n    }\n)\n"""
sagify/__init__.py,0,b''
sagify/__main__.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\nimport click\n\nfrom sagify.commands.build import build\nfrom sagify.commands.cloud import cloud\nfrom sagify.commands.initialize import init\nfrom sagify.commands.local import local\nfrom sagify.commands.push import push\nfrom sagify.commands.configure import configure\nfrom sagify.log import configure_logger\n\n\n@click.group()\n@click.option(u""-v"", u""--verbose"", count=True, help=u""Turn on debug logging"")\n@click.option(u""-t"", u""--docker-tag"", default=u""latest"", help=u""Specify tag for Docker image"")\n@click.pass_context\ndef cli(ctx, verbose, docker_tag):\n    """"""\n    Sagify enables training and deploying machine learning models on AWS SageMaker in a few minutes!\n    """"""\n    configure_logger(verbose)\n    ctx.obj = {\'docker_tag\': docker_tag}\n\n\ndef add_commands(cli):\n    cli.add_command(init)\n    cli.add_command(build)\n    cli.add_command(local)\n    cli.add_command(push)\n    cli.add_command(cloud)\n    cli.add_command(configure)\n\n\nadd_commands(cli)\n'"
sagify/log.py,0,"b""# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport logging\nfrom future.moves import sys\n\nimport click\n\nlogger = logging.getLogger('sagify')\n\n_ctx = click.get_current_context\n\nLOGGER_KEY = __name__ + '.logger'\nDEFAULT_LEVEL = logging.INFO\n\nPY2 = sys.version_info[0] == 2\n\nif PY2:\n    text_type = unicode  # noqa\nelse:\n    text_type = str\n\n\ndef _meta():\n    return _ctx().meta.setdefault(LOGGER_KEY, {})\n\n\nclass ColorFormatter(logging.Formatter):\n    colors = {\n        'error': dict(fg='red'),\n        'exception': dict(fg='red'),\n        'critical': dict(fg='red'),\n        'debug': dict(fg='blue'),\n        'warning': dict(fg='yellow')\n    }\n\n    def format(self, record):\n        if not record.exc_info:\n            level = record.levelname.lower()\n            msg = record.msg\n            if level in self.colors:\n                prefix = click.style('{}: '.format(level),\n                                     **self.colors[level])\n\n                if not PY2 and isinstance(msg, bytes):\n                    msg = msg.decode(sys.getfilesystemencoding(),\n                                     'replace')\n                elif not isinstance(msg, (text_type, bytes)):\n                    msg = str(msg)\n                msg = '\\n'.join(prefix + x for x in msg.splitlines())\n            return msg\n        return logging.Formatter.format(self, record)\n\n\nclass ClickHandler(logging.Handler):\n    def emit(self, record):\n        try:\n            msg = self.format(record)\n            level = record.levelname.lower()\n            err = level in ('warning', 'error', 'exception', 'critical')\n            click.echo(msg, err=err)\n        except Exception:\n            self.handleError(record)\n\n\n_default_handler = ClickHandler()\n_default_handler.formatter = ColorFormatter()\n\n\ndef _normalize_logger(logger, log_level):\n    if not isinstance(logger, logging.Logger):\n        logger = logging.getLogger(logger)\n\n    logger.setLevel(log_level)\n    return logger\n\n\ndef configure_logger(verbose):\n    log_level = logging.DEBUG if verbose else logging.INFO\n    global logger\n\n    logger = _normalize_logger(logger, log_level)\n    logger.handlers = [_default_handler]\n    logger.propagate = False\n"""
tests/__init__.py,0,b''
sagify/api/__init__.py,0,b''
sagify/api/build.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport os\n\nfrom future.moves import subprocess\n\nfrom sagify.log import logger\n\n\ndef build(source_dir, requirements_dir, image_name, docker_tag, python_version):\n    """"""\n    Builds a Docker image that contains code under the given source root directory.\n\n    Assumes that Docker is installed and running locally.\n\n    :param source_dir: [str], source root directory\n    :param requirements_dir: [str], path to requirements.txt\n    :param image_name: [str], The name of the Docker image\n    :param docker_tag: [str], the Docker tag for the image\n    """"""\n    sagify_module_path = os.path.relpath(os.path.join(source_dir, \'sagify_base/\'))\n\n    build_script_path = os.path.join(sagify_module_path, \'build.sh\')\n    dockerfile_path = os.path.join(sagify_module_path, \'Dockerfile\')\n\n    train_file_path = os.path.join(sagify_module_path, \'training\', \'train\')\n    serve_file_path = os.path.join(sagify_module_path, \'prediction\', \'serve\')\n    executor_file_path = os.path.join(sagify_module_path, \'executor.sh\')\n\n    if not os.path.isfile(build_script_path) or not os.path.isfile(train_file_path) or not \\\n            os.path.isfile(serve_file_path):\n        raise ValueError(""This is not a sagify directory: {}"".format(source_dir))\n\n    os.chmod(train_file_path, 0o777)\n    os.chmod(serve_file_path, 0o777)\n    os.chmod(executor_file_path, 0o777)\n\n    target_dir_name = os.path.basename(os.path.normpath(source_dir))\n\n    output = subprocess.check_output(\n        [\n            ""{}"".format(build_script_path),\n            ""{}"".format(os.path.relpath(source_dir)),\n            ""{}"".format(os.path.relpath(target_dir_name)),\n            ""{}"".format(dockerfile_path),\n            ""{}"".format(os.path.relpath(requirements_dir)),\n            docker_tag,\n            image_name,\n            python_version\n        ]\n    )\n    logger.debug(output)\n'"
sagify/api/cloud.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport json\nimport os\n\nfrom sagemaker.parameter import CategoricalParameter, ContinuousParameter, IntegerParameter\n\nfrom sagify.config.config import ConfigManager\nfrom sagify.sagemaker import sagemaker\n\n\ndef _read_config(input_dir):\n    config_file_path = os.path.join(\'.sagify.json\')\n    if not os.path.isfile(config_file_path):\n        raise ValueError(""This is not a sagify directory: {}"".format(input_dir))\n\n    return ConfigManager(config_file_path).get_config()\n\n\ndef _read_hyperparams_config(hyperparams_file_path):\n    if not os.path.isfile(hyperparams_file_path):\n        raise ValueError(\n            ""The given hyperparams file {} doens\'t exist"".format(hyperparams_file_path)\n        )\n\n    with open(hyperparams_file_path) as _in_file:\n        return json.load(_in_file)\n\n\ndef _read_hyperparams_ranges_config(hyperparams_config_file_path):\n    if not os.path.isfile(hyperparams_config_file_path):\n        raise ValueError(\n            ""The given hyperparams file {} doens\'t exist"".format(hyperparams_config_file_path)\n        )\n\n    with open(hyperparams_config_file_path) as _in_file:\n        hyperparams_config_dict = json.load(_in_file)\n\n    if \'ParameterRanges\' not in hyperparams_config_dict:\n        raise ValueError(""ParameterRanges not in the hyperparams file"")\n\n    parameter_ranges_dict = hyperparams_config_dict[\'ParameterRanges\']\n\n    if not parameter_ranges_dict:\n        raise ValueError(""Empty ParameterRanges in the hyperparams file"")\n\n    if \'ObjectiveMetric\' not in hyperparams_config_dict and \'Name\' not in hyperparams_config_dict[\'ObjectiveMetric\']:\n        raise ValueError(""ObjectiveMetric not in the hyperparams file"")\n\n    objective_name = hyperparams_config_dict[\'ObjectiveMetric\'][\'Name\']\n    objective_type = hyperparams_config_dict[\'ObjectiveMetric\'][\'Type\']\n\n    hyperparameter_ranges = {}\n\n    categorical_param_ranges_dict = parameter_ranges_dict[\'CategoricalParameterRanges\']\n    for _dict in categorical_param_ranges_dict:\n        hyperparameter_ranges[_dict[\'Name\']] = CategoricalParameter(_dict[\'Values\'])\n\n    integer_param_ranges_dict = parameter_ranges_dict[\'IntegerParameterRanges\']\n    for _dict in integer_param_ranges_dict:\n        hyperparameter_ranges[_dict[\'Name\']] = IntegerParameter(_dict[\'MinValue\'], _dict[\'MaxValue\'])\n\n    continuous_param_ranges_dict = parameter_ranges_dict[\'ContinuousParameterRanges\']\n    for _dict in continuous_param_ranges_dict:\n        hyperparameter_ranges[_dict[\'Name\']] = ContinuousParameter(_dict[\'MinValue\'], _dict[\'MaxValue\'])\n\n    return objective_name, objective_type, hyperparameter_ranges\n\n\ndef upload_data(dir, input_dir, s3_dir):\n    """"""\n    Uploads data to S3\n\n    :param dir: [str], source root directory\n    :param input_dir: [str], path to local data input directory\n    :param s3_dir: [str], S3 location to upload data\n\n    :return: [str], S3 location to upload data\n    """"""\n    config = _read_config(dir)\n    sage_maker_client = sagemaker.SageMakerClient(config.aws_profile, config.aws_region)\n\n    return sage_maker_client.upload_data(input_dir, s3_dir)\n\n\ndef train(\n        dir,\n        input_s3_dir,\n        output_s3_dir,\n        hyperparams_file,\n        ec2_type,\n        volume_size,\n        time_out,\n        docker_tag,\n        aws_role,\n        external_id,\n        base_job_name,\n        job_name,\n        use_spot_instances=False,\n        metric_names=None,\n        tags=None\n):\n    """"""\n    Trains ML model(s) on SageMaker\n\n    :param dir: [str], source root directory\n    :param input_s3_dir: [str], S3 location to input data\n    :param output_s3_dir: [str], S3 location to save output (models, etc)\n    :param hyperparams_file: [str], path to hyperparams json file\n    :param ec2_type: [str], ec2 instance type. Refer to:\n    https://aws.amazon.com/sagemaker/pricing/instance-types/\n    :param volume_size: [int], size in GB of the EBS volume\n    :param time_out: [int], time-out in seconds\n    :param docker_tag: [str], the Docker tag for the image\n    :param aws_role: [str], the AWS role assumed by SageMaker while training\n    :param external_id: [str], Optional external id used when using an IAM role\n    :param base_job_name: [str], Optional prefix for the SageMaker training job\n    :param job_name: [str], Optional name for the SageMaker training job. Overrides `base_job_name`\n    :param use_spot_instances: bool, default=False], Specifies whether to use SageMaker\n                Managed Spot instances for training.\n\n                More information:\n                https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html\n                (default: ``False``).\n    :param metric_names: [list[str], default=None], Optional list of string metric names\n    :param tags: [optional[list[dict]], default: None], List of tags for labeling a training\n        job. For more, see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n    :return: [str], S3 model location\n    """"""\n    config = _read_config(dir)\n    hyperparams_dict = _read_hyperparams_config(hyperparams_file) if hyperparams_file else None\n    sage_maker_client = sagemaker.SageMakerClient(config.aws_profile, config.aws_region, aws_role, external_id)\n\n    image_name = config.image_name+\':\'+docker_tag\n\n    return sage_maker_client.train(\n        image_name=image_name,\n        input_s3_data_location=input_s3_dir,\n        train_instance_count=1,\n        train_instance_type=ec2_type,\n        train_volume_size=volume_size,\n        train_max_run=time_out,\n        output_path=output_s3_dir,\n        hyperparameters=hyperparams_dict,\n        base_job_name=base_job_name,\n        job_name=job_name,\n        use_spot_instances=use_spot_instances,\n        tags=tags,\n        metric_names=metric_names\n    )\n\n\ndef hyperparameter_optimization(\n        dir,\n        input_s3_dir,\n        output_s3_dir,\n        hyperparams_config_file,\n        ec2_type,\n        max_jobs,\n        max_parallel_jobs,\n        volume_size,\n        time_out,\n        docker_tag,\n        aws_role,\n        external_id,\n        base_job_name,\n        job_name,\n        wait,\n        use_spot_instances=False,\n        tags=None\n):\n    """"""\n    Hyperparameter Optimization on SageMaker\n\n    :param dir: [str], source root directory\n    :param input_s3_dir: [str], S3 location to input data\n    :param output_s3_dir: [str], S3 location to save the multiple trained models\n    :param hyperparams_config_file: [str], path to hyperparameters config json file\n    :param ec2_type: [str], ec2 instance type. Refer to:\n    https://aws.amazon.com/sagemaker/pricing/instance-types/\n    :param max_jobs: [int], Maximum total number of training jobs to start for the hyperparameter tuning job\n    :param max_parallel_jobs: [int], Maximum number of parallel training jobs to start\n    :param volume_size: [int], size in GB of the EBS volume\n    :param time_out: [int], time-out in seconds\n    :param docker_tag: [str], the Docker tag for the image\n    :param aws_role: [str], the AWS role assumed by SageMaker while training\n    :param external_id: [str], Optional external id used when using an IAM role\n    :param base_job_name: [str], Optional prefix for the SageMaker training job\n    :param job_name: [str], Optional name for the SageMaker tuning job. Overrides `base_job_name`\n    :param wait: [bool, default=False], Wait until hyperparameter tuning is done\n    :param use_spot_instances: bool, default=False], Specifies whether to use SageMaker\n                Managed Spot instances for training.\n\n                More information:\n                https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html\n                (default: ``False``).\n    :param tags: [optional[list[dict]], default: None], List of tags for labeling a training\n        job. For more, see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n    :return: [str], S3 model location\n    """"""\n    config = _read_config(dir)\n    objective_metric_name, objective_type, hyperparams_ranges_dict = _read_hyperparams_ranges_config(\n        hyperparams_config_file\n    )\n    sage_maker_client = sagemaker.SageMakerClient(config.aws_profile, config.aws_region, aws_role, external_id)\n\n    image_name = config.image_name+\':\'+docker_tag\n\n    return sage_maker_client.hyperparameter_optimization(\n        image_name=image_name,\n        input_s3_data_location=input_s3_dir,\n        instance_count=1,\n        instance_type=ec2_type,\n        volume_size=volume_size,\n        objective_type=objective_type,\n        objective_metric_name=objective_metric_name,\n        max_jobs=max_jobs,\n        max_parallel_jobs=max_parallel_jobs,\n        max_run=time_out,\n        output_path=output_s3_dir,\n        hyperparams_ranges_dict=hyperparams_ranges_dict,\n        base_job_name=base_job_name,\n        job_name=job_name,\n        use_spot_instances=use_spot_instances,\n        tags=tags,\n        wait=wait\n    )\n\n\ndef deploy(\n        dir,\n        s3_model_location,\n        num_instances,\n        ec2_type,\n        docker_tag,\n        aws_role=None,\n        external_id=None,\n        tags=None,\n        endpoint_name=None\n):\n    """"""\n    Deploys ML model(s) on SageMaker\n\n    :param dir: [str], source root directory\n    :param s3_model_location: [str], S3 model location\n    :param num_instances: [int], number of ec2 instances\n    :param ec2_type: [str], ec2 instance type. Refer to:\n    https://aws.amazon.com/sagemaker/pricing/instance-types/\n    :param docker_tag: [str], the Docker tag for the image\n    :param aws_role: [str], the AWS role assumed by SageMaker while deploying\n    :param external_id: [str], Optional external id used when using an IAM role\n    :param tags: [optional[list[dict]], default: None], List of tags for labeling a training\n        job. For more, see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n    :param endpoint_name: [optional[str]], Optional name for the SageMaker endpoint\n\n    :return: [str], endpoint name\n    """"""\n    config = _read_config(dir)\n    image_name = config.image_name+\':\'+docker_tag\n\n    sage_maker_client = sagemaker.SageMakerClient(config.aws_profile, config.aws_region, aws_role, external_id)\n    return sage_maker_client.deploy(\n        image_name=image_name,\n        s3_model_location=s3_model_location,\n        train_instance_count=num_instances,\n        train_instance_type=ec2_type,\n        tags=tags,\n        endpoint_name=endpoint_name\n    )\n\n\ndef batch_transform(\n        dir,\n        s3_model_location,\n        s3_input_location,\n        s3_output_location,\n        num_instances,\n        ec2_type,\n        docker_tag,\n        aws_role=None,\n        external_id=None,\n        tags=None,\n        wait=False,\n        job_name=None\n):\n    """"""\n    Executes a batch transform job given a trained ML model on SageMaker\n\n    :param dir: [str], source root directory\n    :param s3_model_location: [str], S3 model location\n    :param s3_input_location: [str], S3 input data location\n    :param s3_output_location: [str], S3 location to save predictions\n    :param num_instances: [int], number of ec2 instances\n    :param ec2_type: [str], ec2 instance type. Refer to:\n    https://aws.amazon.com/sagemaker/pricing/instance-types/\n    :param docker_tag: [str], the Docker tag for the image\n    :param aws_role: [str], the AWS role assumed by SageMaker while deploying\n    :param external_id: [str], Optional external id used when using an IAM role\n    :param tags: [optional[list[dict]], default: None], List of tags for labeling a training\n        job. For more, see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n    :param wait: [bool, default=False], wait or not for the batch transform to finish\n    :param job_name: [str, default=None], name for the SageMaker batch transform job\n\n    :return: [str], transform job status if wait=True.\n    Valid values: \'InProgress\'|\'Completed\'|\'Failed\'|\'Stopping\'|\'Stopped\'\n    """"""\n    config = _read_config(dir)\n    image_name = config.image_name + \':\' + docker_tag\n\n    sage_maker_client = sagemaker.SageMakerClient(config.aws_profile, config.aws_region, aws_role, external_id)\n    return sage_maker_client.batch_transform(\n        image_name=image_name,\n        s3_model_location=s3_model_location,\n        s3_input_location=s3_input_location,\n        s3_output_location=s3_output_location,\n        transform_instance_count=num_instances,\n        transform_instance_type=ec2_type,\n        tags=tags,\n        wait=wait,\n        job_name=job_name\n    )\n'"
sagify/api/hyperparameter_tuning.py,0,"b'def log_metric(name, val):\n    """"""\n    Log metric\n\n    :param name: [string], metric name\n    :param val: [float/int], value of metric\n    """"""\n    print(""{}: {}"".format(name, val))\n'"
sagify/api/initialize.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport os\ntry:\n    from pathlib import Path\nexcept ImportError:\n    from pathlib2 import Path\n\nfrom sagify.config.config import ConfigManager\nfrom distutils.dir_util import copy_tree\n\n_FILE_DIR_PATH = os.path.dirname(os.path.realpath(__file__))\n\n\ndef _template_creation(app_name, aws_profile, aws_region, python_version, output_dir, requirements_dir):\n    sagify_module_name = \'sagify_base\'\n\n    sagify_exists = os.path.exists(os.path.join(output_dir, sagify_module_name))\n    if sagify_exists:\n        raise ValueError(\n            ""There is a sagify directory/module already. ""\n            ""Please, rename it in order to use sagify.""\n        )\n\n    Path(output_dir).mkdir(exist_ok=True)\n    Path(os.path.join(output_dir, \'__init__.py\')).touch()\n\n    # Set \'sagify module\' directory up\n    copy_tree(os.path.join(_FILE_DIR_PATH, \'../template\'), output_dir)\n\n    # Set configuration file up\n    config_manager = ConfigManager(os.path.join(\'.sagify.json\'))\n    config = config_manager.get_config()\n\n    config.image_name = app_name\n    config.aws_region = aws_region\n    config.aws_profile = aws_profile\n    config.sagify_module_dir = output_dir\n    config.python_version = python_version\n    config.requirements_dir = requirements_dir\n    config_manager.set_config(config)\n\n\ndef init(sagify_app_name, aws_profile, aws_region, python_version, root_dir, requirements_dir):\n    """"""\n    Initializes a SageMaker template\n\n    :param dir: [str], source root directory\n    :param sagify_app_name: [str], name for sagify app\n    :param aws_profile: [str], preferred aws profile name on current host\n    :param aws_region: [str], preferred aws region. Example: \'us-east-1\'\n    :param python_version: [str], preferred Python version. Options: 3.6 or 2.7.\n    :param root_dir: [str], root source directory.\n    :param root_dir: [str], Path to requirements.txt.\n    """"""\n    if python_version not in {\'2.7\', \'3.6\'}:\n        raise ValueError(""Invalid Python version. Valid options: 2.7 or 3.6"")\n\n    _template_creation(\n        app_name=sagify_app_name,\n        aws_profile=aws_profile,\n        aws_region=aws_region,\n        python_version=python_version,\n        output_dir=root_dir,\n        requirements_dir=requirements_dir\n    )\n'"
sagify/api/local.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport os\n\nfrom future.moves import subprocess\n\nfrom sagify.log import logger\n\n\ndef train(dir, docker_tag, image_name):\n    """"""\n    Trains ML model(s) locally\n\n    :param dir: [str], source root directory\n    :param docker_tag: [str], the Docker tag for the image\n    :param image_name: [str], The name of the Docker image\n    """"""\n    sagify_module_path = os.path.join(dir, \'sagify_base\')\n    local_train_script_path = os.path.join(sagify_module_path, \'local_test\', \'train_local.sh\')\n    test_path = os.path.join(sagify_module_path, \'local_test\', \'test_dir\')\n\n    if not os.path.isdir(test_path):\n        raise ValueError(""This is not a sagify directory: {}"".format(dir))\n\n    output = subprocess.check_output(\n        [\n            ""{}"".format(local_train_script_path),\n            ""{}"".format(os.path.abspath(test_path)),\n            docker_tag,\n            image_name\n        ]\n    )\n    logger.debug(output)\n\n\ndef deploy(dir, docker_tag, image_name):\n    """"""\n    Deploys ML models(s) locally\n\n    :param dir: [str], source root directory\n    :param docker_tag: [str], the Docker tag for the image\n    :param image_name: [str], The name of the Docker image\n    """"""\n    sagify_module_path = os.path.join(dir, \'sagify_base\')\n    local_deploy_script_path = os.path.join(sagify_module_path, \'local_test\', \'deploy_local.sh\')\n    test_path = os.path.join(sagify_module_path, \'local_test\', \'test_dir\')\n\n    if not os.path.isdir(test_path):\n        raise ValueError(""This is not a sagify directory: {}"".format(dir))\n\n    output = subprocess.check_output(\n        [\n            ""{}"".format(local_deploy_script_path),\n            ""{}"".format(os.path.abspath(test_path)),\n            docker_tag,\n            image_name\n        ]\n    )\n    logger.debug(output)\n'"
sagify/api/push.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport os\n\nfrom future.moves import subprocess\n\nfrom sagify.log import logger\n\n\ndef push(dir, docker_tag, aws_region, iam_role_arn, aws_profile, external_id, image_name):\n    """"""\n    Push Docker image to AWS ECS\n\n    :param dir: [str], source root directory\n    :param docker_tag: [str], the Docker tag for the image\n    :param aws_region: [str], the AWS region to push the image to\n    :param iam_role_arn: [str], the AWS role used to push the image to ECR\n    :param aws_profile: [str], the AWS profile used to push the image to ECR\n    :param external_id: [str], Optional external id used when using an IAM role\n    :param image_name: [str], The name of the Docker image\n    """"""\n\n    sagify_module_path = os.path.relpath(os.path.join(dir, \'sagify_base/\'))\n    push_script_path = os.path.join(sagify_module_path, \'push.sh\')\n\n    if not os.path.isfile(push_script_path):\n        raise ValueError(""This is not a sagify directory: {}"".format(dir))\n\n    output = subprocess.check_output([\n                                     ""{}"".format(push_script_path),\n                                     docker_tag,\n                                     aws_region,\n                                     iam_role_arn,\n                                     aws_profile,\n                                     external_id,\n                                     image_name])\n    logger.debug(output)\n'"
sagify/commands/__init__.py,0,"b'ASCII_LOGO = """"""\n     ____              _  __\n    / ___|  __ _  __ _(_)/ _|_   _\n    \\___ \\ / _` |/ _` | | |_| | | |\n     ___) | (_| | (_| | |  _| |_| |\n    |____/ \\__,_|\\__, |_|_|  \\__, |\n                 |___/       |___/\n    """"""\n'"
sagify/commands/build.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport sys\n\nimport click\n\nfrom sagify.api import build as api_build\nfrom sagify.commands import ASCII_LOGO\nfrom sagify.log import logger\nfrom future.moves import subprocess\nfrom sagify.config.config import ConfigManager\nimport os\n\nclick.disable_unicode_literals_warning = True\n\n\n@click.command()\n@click.pass_obj\ndef build(obj):\n    """"""\n    Command to build SageMaker app\n    """"""\n    logger.info(ASCII_LOGO)\n    logger.info(""Started building SageMaker Docker image. It will take some minutes...\\n"")\n\n    try:\n        config_file_path = os.path.join(\'.sagify.json\')\n        if not os.path.isfile(config_file_path):\n            raise ValueError()\n\n        config = ConfigManager(config_file_path).get_config()\n        api_build.build(\n            source_dir=config.sagify_module_dir,\n            requirements_dir=config.requirements_dir,\n            docker_tag=obj[\'docker_tag\'],\n            image_name=config.image_name,\n            python_version=config.python_version)\n\n        logger.info(""Docker image built successfully!"")\n    except ValueError:\n        logger.info(""This is not a sagify directory: {}"".format(dir))\n        sys.exit(-1)\n    except subprocess.CalledProcessError as e:\n        logger.debug(e.output)\n        raise\n    except Exception as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n'"
sagify/commands/cloud.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport sys\n\nimport click\n\nfrom sagify.api import cloud as api_cloud\nfrom sagify.commands import ASCII_LOGO\nfrom sagify.commands.custom_validators.validators import validate_tags\nfrom sagify.log import logger\nfrom sagify.config.config import ConfigManager\n\nclick.disable_unicode_literals_warning = True\n\n\ndef _config():\n    return ConfigManager(\'.sagify.json\').get_config()\n\n\n@click.group()\ndef cloud():\n    """"""\n    Commands for AWS operations: upload data, train and deploy\n    """"""\n    pass\n\n\n@click.command(name=\'upload-data\')\n@click.option(u""-i"", u""--input-dir"", required=True, help=""Path to data input directory"")\n@click.option(\n    u""-s"", u""--s3-dir"",\n    required=True,\n    help=""s3 location to upload data"",\n    type=click.Path()\n)\ndef upload_data(input_dir, s3_dir):\n    """"""\n    Command to upload data to S3\n    """"""\n    logger.info(ASCII_LOGO)\n    logger.info(""Started uploading data to S3...\\n"")\n\n    try:\n        s3_path = api_cloud.upload_data(\n            dir=_config().sagify_module_dir,\n            input_dir=input_dir,\n            s3_dir=s3_dir\n        )\n\n        logger.info(""Data uploaded to {} successfully"".format(s3_path))\n    except ValueError as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n\n\n@click.command()\n@click.option(\n    u""-i"", u""--input-s3-dir"",\n    required=True,\n    help=""s3 location to input data"",\n    type=click.Path()\n)\n@click.option(\n    u""-o"", u""--output-s3-dir"",\n    required=True,\n    help=""s3 location to save output (models, etc)"",\n    type=click.Path()\n)\n@click.option(\n    u""-h"", u""--hyperparams-file"",\n    required=False,\n    help=""Path to hyperparams file"",\n    type=click.Path(resolve_path=True)\n)\n@click.option(u""-e"", u""--ec2-type"", required=True, help=""ec2 instance type"")\n@click.option(\n    u""-v"", u""--volume-size"",\n    required=False,\n    default=30,\n    help=""size in GB of the EBS volume (default: 30)""\n)\n@click.option(\n    u""-s"", u""--time-out"",\n    required=False,\n    default=24 * 60 * 60,\n    help=""time-out in seconds (default: 24 * 60 * 60)""\n)\n@click.option(\n    u""-a"", u""--aws-tags"",\n    callback=validate_tags,\n    required=False,\n    default=None,\n    help=\'Tags for labeling a training job of the form ""tag1=value1;tag2=value2"". For more, see \'\n         \'https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.\'\n)\n@click.option(\n    u""-r"",\n    u""--iam-role-arn"",\n    required=False,\n    help=""The AWS role to use for the push command""\n)\n@click.option(\n    u""-x"",\n    u""--external-id"",\n    required=False,\n    help=""Optional external id used when using an IAM role""\n)\n@click.option(\n    u""-n"",\n    u""--base-job-name"",\n    required=False,\n    help=""Optional prefix for the SageMaker training job.""\n    ""If not specified, the estimator generates a default job name, based on the training image name and current timestamp.""\n)\n@click.option(\n    u""--job-name"",\n    required=False,\n    help=""Optional name for the SageMaker training job.""\n    ""NOTE: if a `--base-job-name` is passed along with this option, it will be ignored.""\n)\n@click.option(\n    u""--use-spot-instances"",\n    default=False,\n    is_flag=True,\n    help=""Optional flag that specifies whether to use SageMaker Managed Spot instances for training. ""\n         ""It should be used only for training jobs that take less than 1 hour.""\n)\n@click.option(\n    u""--metric-names"",\n    required=False,\n    default=None,\n    help=\'Optional comma-separated metric names for tracking performance of training jobs. Example: Precision,Recall,AUC \'\n)\n@click.pass_obj\ndef train(\n        obj,\n        input_s3_dir,\n        output_s3_dir,\n        hyperparams_file,\n        ec2_type,\n        volume_size,\n        time_out,\n        aws_tags,\n        iam_role_arn,\n        external_id,\n        base_job_name,\n        job_name,\n        use_spot_instances,\n        metric_names\n):\n    """"""\n    Command to train ML model(s) on SageMaker\n    """"""\n    logger.info(ASCII_LOGO)\n    logger.info(""Started training on SageMaker...\\n"")\n\n    # Because MaxWaitTimeInSeconds is 3600 and cannot be less than training time out\n    if use_spot_instances:\n        time_out = 3600\n\n    try:\n        s3_model_location = api_cloud.train(\n            dir=_config().sagify_module_dir,\n            input_s3_dir=input_s3_dir,\n            output_s3_dir=output_s3_dir,\n            hyperparams_file=hyperparams_file,\n            ec2_type=ec2_type,\n            volume_size=volume_size,\n            time_out=time_out,\n            docker_tag=obj[\'docker_tag\'],\n            tags=aws_tags,\n            aws_role=iam_role_arn,\n            external_id=external_id,\n            base_job_name=base_job_name,\n            job_name=job_name,\n            use_spot_instances=use_spot_instances,\n            metric_names=[_val.strip() for _val in metric_names.split(\',\')] if metric_names else None\n        )\n\n        logger.info(""Training on SageMaker succeeded"")\n        logger.info(""Model S3 location: {}"".format(s3_model_location))\n    except ValueError as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n\n\n@click.command(name=\'hyperparameter-optimization\')\n@click.option(\n    u""-i"", u""--input-s3-dir"",\n    required=True,\n    help=""s3 location to input data"",\n    type=click.Path()\n)\n@click.option(\n    u""-o"", u""--output-s3-dir"",\n    required=True,\n    help=""s3 location to save the multiple trained models"",\n    type=click.Path()\n)\n@click.option(\n    u""-h"", u""--hyperparams-config-file"",\n    required=True,\n    help=""Local path to hyperparameters configuration file"",\n    type=click.Path(resolve_path=True)\n)\n@click.option(u""-e"", u""--ec2-type"", required=True, help=""ec2 instance type"")\n@click.option(\n    u""-m"", u""--max-jobs"",\n    required=False,\n    default=3,\n    help=""Maximum total number of training jobs to start for the hyperparameter tuning job (default: 3)""\n)\n@click.option(\n    u""-p"", u""--max-parallel-jobs"",\n    required=False,\n    default=1,\n    help=""Maximum number of parallel training jobs to start (default: 1)""\n)\n@click.option(\n    u""-v"", u""--volume-size"",\n    required=False,\n    default=30,\n    help=""size in GB of the EBS volume (default: 30)""\n)\n@click.option(\n    u""-s"", u""--time-out"",\n    required=False,\n    default=24 * 60 * 60,\n    help=""time-out in seconds (default: 24 * 60 * 60)""\n)\n@click.option(\n    u""-a"", u""--aws-tags"",\n    callback=validate_tags,\n    required=False,\n    default=None,\n    help=\'Tags for labeling a training job of the form ""tag1=value1;tag2=value2"". For more, see \'\n         \'https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.\'\n)\n@click.option(\n    u""-r"",\n    u""--iam-role-arn"",\n    required=False,\n    help=""The AWS role to use for the push command""\n)\n@click.option(\n    u""-x"",\n    u""--external-id"",\n    required=False,\n    help=""Optional external id used when using an IAM role""\n)\n@click.option(\n    u""-n"",\n    u""--base-job-name"",\n    required=False,\n    help=""Optional prefix for the SageMaker training job.""\n    ""If not specified, the estimator generates a default job name, ""\n    ""based on the training image name and current timestamp.""\n)\n@click.option(\n    u""--job-name"",\n    required=False,\n    help=""Optional name for the SageMaker tuning job.""\n    ""NOTE: if a `--base-job-name` is passed along with this option, it will be ignored.""\n)\n@click.option(\n    u""--use-spot-instances"",\n    default=False,\n    is_flag=True,\n    help=""Optional flag that specifies whether to use SageMaker Managed Spot instances for training. ""\n         ""It should be used only for training jobs that take less than 1 hour.""\n)\n@click.option(\n    u""-w"",\n    u""--wait"",\n    default=False,\n    is_flag=True,\n    help=""Wait until Hyperparameter Tuning is finished. ""\n         ""Default: don\'t wait""\n)\n@click.pass_obj\ndef hyperparameter_optimization(\n        obj,\n        input_s3_dir,\n        output_s3_dir,\n        hyperparams_config_file,\n        ec2_type,\n        max_jobs,\n        max_parallel_jobs,\n        volume_size,\n        time_out,\n        aws_tags,\n        iam_role_arn,\n        external_id,\n        base_job_name,\n        job_name,\n        use_spot_instances,\n        wait\n):\n    """"""\n    Command for hyperparameter optimization on SageMaker\n    """"""\n    logger.info(ASCII_LOGO)\n    logger.info(""Started hyperparameter optimization on SageMaker...\\n"")\n\n    # Because MaxWaitTimeInSeconds is 3600 and cannot be less than training time out\n    if use_spot_instances:\n        time_out = 3600\n\n    try:\n        best_job_name = api_cloud.hyperparameter_optimization(\n            dir=_config().sagify_module_dir,\n            input_s3_dir=input_s3_dir,\n            output_s3_dir=output_s3_dir,\n            hyperparams_config_file=hyperparams_config_file,\n            ec2_type=ec2_type,\n            max_jobs=max_jobs,\n            max_parallel_jobs=max_parallel_jobs,\n            volume_size=volume_size,\n            time_out=time_out,\n            docker_tag=obj[\'docker_tag\'],\n            tags=aws_tags,\n            aws_role=iam_role_arn,\n            external_id=external_id,\n            base_job_name=base_job_name,\n            job_name=job_name,\n            use_spot_instances=use_spot_instances,\n            wait=wait\n        )\n\n        logger.info(""Hyperparameter Optimization on SageMaker started successfully"")\n        if best_job_name:\n            logger.info(""Best job name: {}"".format(best_job_name))\n        else:\n            logger.info(\n                ""Hypeparameter Optimization takes time. ""\n                ""Please, go to SageMaker UI console to retrieve the status of this tuning job.""\n            )\n    except ValueError as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n\n\n@click.command()\n@click.option(\n    u""-m"", u""--s3-model-location"",\n    required=True,\n    help=""s3 location to model tar.gz"",\n    type=click.Path()\n)\n@click.option(u""-n"", u""--num-instances"", required=True, type=int, help=""Number of ec2 instances"")\n@click.option(u""-e"", u""--ec2-type"", required=True, help=""ec2 instance type"")\n@click.option(\n    u""-a"", u""--aws-tags"",\n    callback=validate_tags,\n    required=False,\n    default=None,\n    help=\'Tags for labeling a training job of the form ""tag1=value1;tag2=value2"". For more, see \'\n         \'https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.\'\n)\n@click.option(\n    u""-r"",\n    u""--iam-role-arn"",\n    required=False,\n    help=""The AWS role to use for the push command""\n)\n@click.option(\n    u""-x"",\n    u""--external-id"",\n    required=False,\n    help=""Optional external id used when using an IAM role""\n)\n@click.option(\n    u""--endpoint-name"",\n    required=False,\n    default=None,\n    help=""Optional name for the SageMaker endpoint""\n)\n@click.pass_obj\ndef deploy(\n        obj,\n        s3_model_location,\n        num_instances,\n        ec2_type,\n        aws_tags,\n        iam_role_arn,\n        external_id,\n        endpoint_name\n):\n    """"""\n    Command to deploy ML model(s) on SageMaker\n    """"""\n    logger.info(ASCII_LOGO)\n    logger.info(""Started deployment on SageMaker ...\\n"")\n\n    try:\n        endpoint_name = api_cloud.deploy(\n            dir=_config().sagify_module_dir,\n            s3_model_location=s3_model_location,\n            num_instances=num_instances,\n            ec2_type=ec2_type,\n            docker_tag=obj[\'docker_tag\'],\n            aws_role=iam_role_arn,\n            external_id=external_id,\n            tags=aws_tags,\n            endpoint_name=endpoint_name\n        )\n\n        logger.info(""Model deployed to SageMaker successfully"")\n        logger.info(""Endpoint name: {}"".format(endpoint_name))\n    except ValueError as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n\n\n@click.command(name=""batch-transform"")\n@click.option(\n    u""-m"", u""--s3-model-location"",\n    required=True,\n    help=""s3 location to model tar.gz"",\n    type=click.Path()\n)\n@click.option(\n    u""-i"", u""--s3-input-location"",\n    required=True,\n    help=""s3 input data location"",\n    type=click.Path()\n)\n@click.option(\n    u""-o"", u""--s3-output-location"",\n    required=True,\n    help=""s3 location to save predictions"",\n    type=click.Path()\n)\n@click.option(u""-n"", u""--num-instances"", required=True, type=int, help=""Number of ec2 instances"")\n@click.option(u""-e"", u""--ec2-type"", required=True, help=""ec2 instance type"")\n@click.option(\n    u""-a"", u""--aws-tags"",\n    callback=validate_tags,\n    required=False,\n    default=None,\n    help=\'Tags for labeling a training job of the form ""tag1=value1;tag2=value2"". For more, see \'\n         \'https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.\'\n)\n@click.option(\n    u""-r"",\n    u""--iam-role-arn"",\n    required=False,\n    help=""The AWS role to use for the push command""\n)\n@click.option(\n    u""-x"",\n    u""--external-id"",\n    required=False,\n    help=""Optional external id used when using an IAM role""\n)\n@click.option(\n    u""-w"",\n    u""--wait"",\n    default=False,\n    is_flag=True,\n    help=""Wait until Batch Transform is finished. ""\n         ""Default: don\'t wait""\n)\n@click.option(\n    u""--job-name"",\n    required=False,\n    default=None,\n    help=""Optional name for the SageMaker batch transform job.""\n)\n@click.pass_obj\ndef batch_transform(\n        obj,\n        s3_model_location,\n        s3_input_location,\n        s3_output_location,\n        num_instances,\n        ec2_type,\n        aws_tags,\n        iam_role_arn,\n        external_id,\n        wait,\n        job_name\n):\n    """"""\n    Command to execute a batch transform job given a trained ML model on SageMaker\n    """"""\n    logger.info(ASCII_LOGO)\n    logger.info(""Started configuration of batch transform on SageMaker ...\\n"")\n\n    try:\n        status = api_cloud.batch_transform(\n            dir=_config().sagify_module_dir,\n            s3_model_location=s3_model_location,\n            s3_input_location=s3_input_location,\n            s3_output_location=s3_output_location,\n            num_instances=num_instances,\n            ec2_type=ec2_type,\n            docker_tag=obj[\'docker_tag\'],\n            aws_role=iam_role_arn,\n            external_id=external_id,\n            tags=aws_tags,\n            wait=wait,\n            job_name=job_name\n        )\n\n        if wait:\n            logger.info(""Batch transform on SageMaker finished with status: {}"".format(status))\n            if status == ""Failed"":\n                sys.exit(1)\n        else:\n            logger.info(""Started batch transform on SageMaker successfully"")\n\n    except ValueError as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n\n\ncloud.add_command(upload_data)\ncloud.add_command(train)\ncloud.add_command(hyperparameter_optimization)\ncloud.add_command(deploy)\ncloud.add_command(batch_transform)\n'"
sagify/commands/configure.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport os\nimport sys\nimport click\n\nfrom sagify.log import logger\nfrom sagify.commands import ASCII_LOGO\nfrom sagify.config.config import ConfigManager\n\nclick.disable_unicode_literals_warning = True\n\n\n@click.command()\n@click.option(u""--image-name"", required=False, help=""Docker image name"")\n@click.option(u""--aws-region"", required=False, help=""AWS Region to use in operations"")\n@click.option(u""--aws-profile"", required=False, help=""AWS Profile to use in operations"")\n@click.option(u""--python-version"", required=False, help=""Python version used when building"")\n@click.option(u""--requirements-dir"", required=False, help=""Path to requirements.txt"")\ndef configure(image_name, aws_region, aws_profile, python_version, requirements_dir):\n    """"""\n    Command to configure SageMaker template\n    """"""\n    logger.info(ASCII_LOGO)\n    _configure(\'.\', image_name, aws_region, aws_profile, python_version, requirements_dir)\n\n\ndef _configure(config_dir, image_name, aws_region, aws_profile, python_version, requirements_dir):\n    try:\n        config_manager = ConfigManager(os.path.join(config_dir, \'.sagify.json\'))\n        config = config_manager.get_config()\n\n        if image_name is not None:\n            config.image_name = image_name\n\n        if aws_region is not None:\n            config.aws_region = aws_region\n\n        if aws_profile is not None:\n            config.aws_profile = aws_profile\n\n        if python_version is not None:\n            config.python_version = python_version\n\n        if requirements_dir is not None:\n            config.requirements_dir = requirements_dir\n\n        config_manager.set_config(config)\n\n        logger.info(""\\nConfiguration updated successfully!\\n"")\n    except ValueError as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n'"
sagify/commands/initialize.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport os\nimport sys\n\nimport boto3\nimport click\nfrom click import BadParameter\n\nfrom sagify.api import initialize as api_initialize\nfrom sagify.commands import ASCII_LOGO\nfrom sagify.log import logger\n\nclick.disable_unicode_literals_warning = True\n\n\n_FILE_DIR_PATH = os.path.dirname(os.path.realpath(__file__))\n\n\ndef _get_local_aws_profiles():\n    return boto3.Session().available_profiles\n\n\ndef ask_for_app_name():\n    return click.prompt(\n        text=""Type in a name for your SageMaker app (Only alphanumeric characters and - are allowed))"",\n        type=str\n    )\n\n\ndef ask_if_existing_project_exists():\n    return click.confirm(text=""Are you starting a new project?"")\n\n\ndef ask_for_root_dir():\n    return click.prompt(text=""Type in the directory where your code lives. Example: src"", type=str).strip(\'/\')\n\n\ndef ask_for_python_version():\n    logger.info(""Select Python interpreter:"")\n    logger.info(\'{}\'.format(\'\\n\'.join([\'1 - Python3\', \'2 - Python2\'])))\n\n    def _validate_python_option(input_value):\n        if int(input_value) not in {1, 2}:\n            raise BadParameter(\n                message=""invalid choice: {}. (choose from 1, 2)"".format(str(input_value))\n            )\n\n        return int(input_value)\n\n    chosen_python_index = click.prompt(\n        text=""Choose from 1, 2"",\n        default=1,\n        value_proc=lambda x: _validate_python_option(x)\n    )\n\n    return \'3.6\' if chosen_python_index == 1 else \'2.7\'\n\n\ndef ask_for_aws_details():\n    available_profiles = _get_local_aws_profiles()\n\n    if len(available_profiles) == 0:\n        logger.info(""aws cli is not configured!"")\n        return\n\n    valid_positions = list(range(1, len(available_profiles) + 1))\n    logger.info(""Select AWS profile:"")\n    logger.info(\'{}\'.format(\n            \'\\n\'.join(\n                [\n                    \'{} - {}\'.format(pos, profile)\n                    for pos, profile in zip(valid_positions, available_profiles)\n                ]\n            )\n        )\n    )\n\n    def _validate_profile_position(input_pos):\n        if int(input_pos) not in valid_positions:\n            raise BadParameter(\n                message=""invalid choice: {}. (choose from {})"".format(\n                    input_pos,\n                    \', \'.join([str(pos) for pos in valid_positions])\n                )\n            )\n        return int(input_pos) - 1\n\n    chosen_profile_index = click.prompt(\n        text=""Choose from {}"".format(\', \'.join([str(pos) for pos in valid_positions])),\n        default=1,\n        value_proc=lambda x: _validate_profile_position(x)\n    )\n\n    chosen_profile = available_profiles[chosen_profile_index]\n\n    chosen_region = click.prompt(\n        text=""Type in your preferred AWS region name"",\n        default=\'us-east-1\',\n        type=str\n    )\n\n    return chosen_profile, chosen_region\n\n\ndef ask_for_requirements_dir():\n    return click.prompt(text=""Type in the path to requirements.txt. Example: requirements.txt"", type=str).strip(\'/\')\n\n\n@click.command()\ndef init():\n    """"""\n    Command to initialize SageMaker template\n    """"""\n    logger.info(ASCII_LOGO)\n\n    sagify_app_name = ask_for_app_name()\n\n    is_new_project = ask_if_existing_project_exists()\n\n    root_dir = None\n    if not is_new_project:\n        root_dir = ask_for_root_dir()\n\n    python_version = ask_for_python_version()\n\n    aws_profile, aws_region = ask_for_aws_details()\n\n    requirements_dir = ask_for_requirements_dir()\n\n    try:\n        api_initialize.init(\n            sagify_app_name=sagify_app_name,\n            aws_profile=aws_profile,\n            aws_region=aws_region,\n            python_version=python_version,\n            root_dir=root_dir if root_dir else \'src\',\n            requirements_dir=requirements_dir\n        )\n\n        logger.info(""\\nsagify module is created! \xe3\x83\xbd(\xc2\xb4\xe2\x96\xbd`)/"")\n    except ValueError as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n'"
sagify/commands/local.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport os\nimport sys\nimport click\n\nfrom sagify.api import local as api_local\nfrom sagify.commands import ASCII_LOGO\nfrom sagify.log import logger\nfrom future.moves import subprocess\nfrom sagify.config.config import ConfigManager\n\nclick.disable_unicode_literals_warning = True\n\n\n@click.group()\ndef local():\n    """"""\n    Commands for local operations: train and deploy\n    """"""\n    pass\n\n\n@click.command()\n@click.pass_obj\ndef train(obj):\n    """"""\n    Command to train ML model(s) locally\n    """"""\n    logger.info(ASCII_LOGO)\n    logger.info(""Started local training...\\n"")\n\n    try:\n        config = ConfigManager(os.path.join(\'.sagify.json\')).get_config()\n        api_local.train(dir=config.sagify_module_dir, docker_tag=obj[\'docker_tag\'], image_name=config.image_name)\n\n        logger.info(""Local training completed successfully!"")\n    except ValueError:\n        logger.info(""This is not a sagify directory: {}"".format(dir))\n        sys.exit(-1)\n    except subprocess.CalledProcessError as e:\n        logger.debug(e.output)\n        raise\n    except Exception as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n\n\n@click.command()\n@click.pass_obj\ndef deploy(obj):\n    """"""\n    Command to deploy ML model(s) locally\n    """"""\n    logger.info(ASCII_LOGO)\n    logger.info(""Started local deployment at localhost:8080 ...\\n"")\n\n    try:\n        config = ConfigManager(os.path.join(\'.sagify.json\')).get_config()\n        api_local.deploy(dir=config.sagify_module_dir, docker_tag=obj[\'docker_tag\'], image_name=config.image_name)\n    except ValueError:\n        logger.info(""This is not a sagify directory: {}"".format(dir))\n        sys.exit(-1)\n    except subprocess.CalledProcessError as e:\n        logger.debug(e.output)\n        raise\n    except Exception as e:\n        logger.info(""{}"".format(e))\n        sys.exit(-1)\n\n\nlocal.add_command(train)\nlocal.add_command(deploy)\n'"
sagify/commands/push.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function, unicode_literals\n\nimport sys\n\nimport click\n\nfrom sagify.api import push as api_push\nfrom sagify.commands import ASCII_LOGO\nfrom sagify.log import logger\nfrom future.moves import subprocess\nfrom sagify.config.config import ConfigManager\nimport os\n\nclick.disable_unicode_literals_warning = True\n\n\n@click.command()\n@click.option(u""-r"", u""--aws-region"", required=False, help=""The AWS region to push the image to"")\n@click.option(u""-i"", u""--iam-role-arn"", required=False, help=""The AWS role to use for the push command"")\n@click.option(u""-p"", u""--aws-profile"", required=False, help=""The AWS profile to use for the push command"")\n@click.option(u""-e"", u""--external-id"", required=False, help=""Optional external id used when using an IAM role"")\n@click.pass_obj\ndef push(obj, aws_region, iam_role_arn, aws_profile, external_id):\n    """"""\n    Command to push Docker image to AWS ECS\n    """"""\n    logger.info(ASCII_LOGO)\n\n    if iam_role_arn is not None and aws_profile is not None:\n        logger.error(\'Only one of iam-role-arn and aws-profile can be used.\')\n        sys.exit(2)\n\n    if iam_role_arn is not None:\n        aws_profile = \'\'\n\n    try:\n        config_file_path = os.path.join(\'.sagify.json\')\n        if not os.path.isfile(config_file_path):\n            raise ValueError()\n\n        config = ConfigManager(config_file_path).get_config()\n        image_name = config.image_name\n        aws_region = config.aws_region if aws_region is None else aws_region\n        aws_profile = config.aws_profile if (aws_profile is None and iam_role_arn is None) else aws_profile\n        external_id = """" if external_id is None else external_id\n        iam_role_arn = """" if iam_role_arn is None else iam_role_arn\n\n        logger.info(""Started pushing Docker image to AWS ECS. It will take some time. Please, be patient...\\n"")\n\n        api_push.push(\n            dir=config.sagify_module_dir,\n            docker_tag=obj[\'docker_tag\'],\n            aws_region=aws_region,\n            iam_role_arn=iam_role_arn,\n            aws_profile=aws_profile,\n            external_id=external_id,\n            image_name=image_name)\n\n        logger.info(""Docker image pushed to ECS successfully!"")\n    except ValueError:\n        logger.info(""This is not a sagify directory: {}"".format(dir))\n        sys.exit(-1)\n    except subprocess.CalledProcessError as e:\n        logger.debug(e.output)\n        raise\n    except Exception as e:\n        logger.info(""{}"".format(e))\n        return\n'"
sagify/config/__init__.py,0,b''
sagify/config/config.py,0,"b""import os\nimport json\nfrom collections import OrderedDict\n\n\nclass Config(object):\n    def __init__(self, image_name, aws_profile, aws_region, python_version, sagify_module_dir, requirements_dir):\n        self.image_name = image_name\n        self.aws_profile = aws_profile\n        self.aws_region = aws_region\n        self.python_version = python_version\n        self.requirements_dir = requirements_dir\n        self.sagify_module_dir = sagify_module_dir\n\n    def to_dict(self):\n        return OrderedDict(self.__dict__.items())\n\n    @classmethod\n    def from_dict(cls, input_dict):\n        return Config(\n            image_name=input_dict['image_name'],\n            aws_profile=input_dict['aws_profile'],\n            aws_region=input_dict['aws_region'],\n            python_version=input_dict['python_version'],\n            sagify_module_dir=input_dict['sagify_module_dir'],\n            requirements_dir=input_dict['requirements_dir']\n        )\n\n\nclass ConfigManager(object):\n    def __init__(self, config_file_path):\n        self._config_file_path = config_file_path\n\n        if not os.path.isfile(config_file_path):\n            self.set_config(Config(\n                image_name='',\n                aws_profile='',\n                aws_region='',\n                python_version='',\n                sagify_module_dir='',\n                requirements_dir=''\n            ))\n\n    def get_config(self):\n        with open(self._config_file_path) as config_file:\n            config_content = config_file.read()\n\n        return Config.from_dict(json.loads(config_content))\n\n    def set_config(self, config):\n        with open(self._config_file_path, 'w') as config_file:\n            json.dump(config.to_dict(), config_file, indent=4)\n"""
sagify/sagemaker/__init__.py,0,b''
sagify/sagemaker/sagemaker.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\n\nimport os\n\nimport sagemaker as sage\nimport sagemaker.tuner\nfrom six.moves.urllib.parse import urlparse\n\nimport boto3\n\nfrom sagify.log import logger\n\n\n_METRIC_REGEX = ""([0-9\\\\.]+)""\n\n\nclass SageMakerClient(object):\n    def __init__(self, aws_profile, aws_region, aws_role=None, external_id=None):\n\n        if aws_role:\n            logger.info(""An IAM role and corresponding external id were provided. Attempting to assume that role..."")\n\n            sts_client = boto3.client(\'sts\')\n            if external_id is None:\n                assumedRoleObject = sts_client.assume_role(\n                    RoleArn=aws_role,\n                    RoleSessionName=""SagifySession""\n                )\n            else:\n                assumedRoleObject = sts_client.assume_role(\n                    RoleArn=aws_role,\n                    RoleSessionName=""SagifySession"",\n                    ExternalId=external_id\n                )\n\n            credentials = assumedRoleObject[\'Credentials\']\n            self.boto_session = boto3.Session(\n                aws_access_key_id=credentials[\'AccessKeyId\'],\n                aws_secret_access_key=credentials[\'SecretAccessKey\'],\n                aws_session_token=credentials[\'SessionToken\'],\n                region_name=aws_region\n            )\n        elif aws_profile:\n            logger.info(""No IAM role provided. Using profile {} instead."".format(aws_profile))\n            self.boto_session = boto3.Session(profile_name=aws_profile, region_name=aws_region)\n        else:\n            self.boto_session = boto3.Session(region_name=aws_region)\n\n        self.sagemaker_client = self.boto_session.client(\'sagemaker\')\n        self.sagemaker_session = sage.Session(boto_session=self.boto_session)\n        self.role = sage.get_execution_role(self.sagemaker_session) if aws_role is None else aws_role\n\n    def upload_data(self, input_dir, s3_dir):\n        """"""\n        Uploads data to S3\n        :param input_dir: [str], local input directory where files are located\n        :param s3_dir: [str], S3 directory to upload files\n        :return: [str], S3 path where data are uploaded\n        """"""\n        bucket = SageMakerClient._get_s3_bucket(s3_dir)\n        prefix = SageMakerClient._get_s3_key_prefix(s3_dir) or \'data\'\n        self.sagemaker_session.upload_data(path=input_dir, bucket=bucket, key_prefix=prefix)\n\n        return os.path.join(\'s3://\', bucket, prefix)\n\n    def train(\n            self,\n            image_name,\n            input_s3_data_location,\n            train_instance_count,\n            train_instance_type,\n            train_volume_size,\n            train_max_run,\n            output_path,\n            hyperparameters,\n            base_job_name,\n            job_name,\n            use_spot_instances=False,\n            metric_names=None,\n            tags=None\n    ):\n        """"""\n        Train model on SageMaker\n        :param image_name: [str], name of Docker image\n        :param input_s3_data_location: [str], S3 location to input data\n        :param train_instance_count: [str], number of ec2 instances\n        :param train_instance_type: [str], ec2 instance type\n        :param train_volume_size: [str], size in GB of the EBS volume to use for storing input data\n        :param train_max_run: [str], Timeout in seconds for training\n        :param output_path: [str], S3 location for saving the training\n        result (model artifacts and output files)\n        :param hyperparameters: [dict], Dictionary containing the hyperparameters to initialize\n        this estimator with\n        :param base_job_name: [str], Optional prefix for the SageMaker training job\n        :param job_name: [str], Optional name for the SageMaker training job. Overrides `base_job_name`\n        :param use_spot_instances: bool, default=False], Specifies whether to use SageMaker\n                Managed Spot instances for training.\n\n                More information:\n                https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html\n                (default: ``False``).\n        :param metric_names: [list[str], default=None], Optional list of string metric names\n        :param tags: [optional[list[dict]], default: None], List of tags for labeling a training\n        job. For more, see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n\n        :return: [str], the model location in S3\n        """"""\n        if metric_names is None:\n            metric_names = []\n        image = self._construct_image_location(image_name)\n\n        metric_definitions = [\n            {\'Name\': _name, \'Regex\': \'{}: {}\'.format(_name, _METRIC_REGEX)} for _name in metric_names\n        ] if metric_names else None\n\n        estimator = sage.estimator.Estimator(\n            image_name=image,\n            role=self.role,\n            train_instance_count=train_instance_count,\n            train_instance_type=train_instance_type,\n            train_volume_size=train_volume_size,\n            train_max_run=train_max_run,\n            input_mode=\'File\',\n            output_path=output_path,\n            hyperparameters=hyperparameters,\n            base_job_name=base_job_name,\n            sagemaker_session=self.sagemaker_session,\n            metric_definitions=metric_definitions,\n            train_use_spot_instances=use_spot_instances,\n            train_max_wait=3600 if use_spot_instances else None  # 1 hour\n        )\n        if tags:\n            estimator.tags = tags\n\n        estimator.fit(input_s3_data_location, job_name=job_name)\n\n        return estimator.model_data\n\n    def hyperparameter_optimization(\n            self,\n            image_name,\n            input_s3_data_location,\n            instance_count,\n            instance_type,\n            objective_type,\n            objective_metric_name,\n            max_jobs,\n            max_parallel_jobs,\n            volume_size,\n            max_run,\n            output_path,\n            hyperparams_ranges_dict,\n            base_job_name,\n            job_name,\n            use_spot_instances=False,\n            tags=None,\n            wait=False\n    ):\n        """"""\n        Hyperparameter Optimization on SageMaker\n\n        :param image_name: [str], name of Docker image\n        :param input_s3_data_location: [str], S3 location to input data\n        :param instance_count: [str], number of ec2 instances\n        :param instance_type: [str], ec2 instance type\n        :param objective_type: [str], The type of the objective metric for evaluating training jobs.\n        This value can be either \xe2\x80\x98Minimize\xe2\x80\x99 or \xe2\x80\x98Maximize\xe2\x80\x99\n        :param objective_metric_name: [str], Name of objective\n        :param max_jobs: [int], Maximum total number of training jobs to start for the hyperparameter tuning job\n        :param max_parallel_jobs: [int], Maximum number of parallel training jobs to start\n        :param volume_size: [str], size in GB of the EBS volume to use for storing input data\n        :param max_run: [str], Timeout in seconds for training\n        :param output_path: [str], S3 location to save the multiple trained models\n        :param hyperparams_ranges_dict: [dict], Dictionary containing the hyperparameters configuration\n        :param base_job_name: [str], Optional prefix for the SageMaker tuning job.\n        :param job_name: [str], Optional name for the SageMaker tuning job. Overrides `base_job_name`\n        :param use_spot_instances: bool, default=False], Specifies whether to use SageMaker\n                Managed Spot instances for training.\n\n                More information:\n                https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html\n                (default: ``False``).\n        :param tags: [optional[list[dict]], default: None], List of tags for labeling a training\n        job. For more, see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n        :param wait: [bool, default=False], Wait until hyperparameter tuning is done\n\n        :return: [str], the model location in S3\n        """"""\n        image = self._construct_image_location(image_name)\n\n        estimator = sage.estimator.Estimator(\n            image_name=image,\n            role=self.role,\n            train_instance_count=instance_count,\n            train_instance_type=instance_type,\n            train_volume_size=volume_size,\n            train_max_run=max_run,\n            input_mode=\'File\',\n            output_path=output_path,\n            sagemaker_session=self.sagemaker_session,\n            train_use_spot_instances=use_spot_instances,\n            train_max_wait=3600 if use_spot_instances else None  # 1 hour\n        )\n\n        metric_definitions = [\n            {\n                \'Name\': objective_metric_name,\n                \'Regex\': \'{}: {}\'.format(objective_metric_name, _METRIC_REGEX)\n            }\n        ]\n\n        tuner = sagemaker.tuner.HyperparameterTuner(\n            estimator=estimator,\n            objective_metric_name=objective_metric_name,\n            hyperparameter_ranges=hyperparams_ranges_dict,\n            metric_definitions=metric_definitions,\n            max_jobs=max_jobs,\n            max_parallel_jobs=max_parallel_jobs,\n            objective_type=objective_type,\n            base_tuning_job_name=base_job_name\n        )\n\n        if tags:\n            tuner.tags = tags\n\n        tuner.fit(input_s3_data_location, job_name=job_name)\n\n        if wait:\n            tuner.wait()\n\n            return tuner.best_training_job()\n\n        return None\n\n    def deploy(\n            self,\n            image_name,\n            s3_model_location,\n            train_instance_count,\n            train_instance_type,\n            tags=None,\n            endpoint_name=None,\n    ):\n        """"""\n        Deploy model to SageMaker\n        :param image_name: [str], name of Docker image\n        :param s3_model_location: [str], model location in S3\n        :param train_instance_count: [str],  number of ec2 instances\n        :param train_instance_type: [str], ec2 instance type\n        :param tags: [optional[list[dict]], default: None], List of tags for labeling a training\n        job. For more, see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n        :param endpoint_name: [optional[str]], Optional name for the SageMaker endpoint\n\n        :return: [str], endpoint name\n        """"""\n        image = self._construct_image_location(image_name)\n\n        model = sage.Model(\n            model_data=s3_model_location,\n            image=image,\n            role=self.role,\n            sagemaker_session=self.sagemaker_session\n        )\n\n        try:\n            model.deploy(\n                initial_instance_count=train_instance_count,\n                instance_type=train_instance_type,\n                tags=tags,\n                endpoint_name=endpoint_name,\n                update_endpoint=True\n            )\n        except ValueError:\n            # ValueError raised if there is no endpoint already\n            model.deploy(\n                initial_instance_count=train_instance_count,\n                instance_type=train_instance_type,\n                tags=tags,\n                endpoint_name=endpoint_name\n            )\n\n        return model.endpoint_name\n\n    def batch_transform(\n            self,\n            image_name,\n            s3_model_location,\n            s3_input_location,\n            s3_output_location,\n            transform_instance_count,\n            transform_instance_type,\n            tags=None,\n            wait=False,\n            job_name=None\n    ):\n        """"""\n        Execute batch transform on a trained model to SageMaker\n        :param image_name: [str], name of Docker image\n        :param s3_model_location: [str], model location in S3\n        :param s3_input_location: [str], S3 input data location\n        :param s3_output_location: [str], S3 output data location\n        :param transform_instance_count: [str],  number of ec2 instances\n        :param transform_instance_type: [str], ec2 instance type\n        :param tags: [optional[list[dict]], default: None], List of tags for labeling a training\n        job. For more, see https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n        :param wait: [bool, default=False], wait or not for the batch transform to finish\n        :param job_name: [str, default=None], name for the SageMaker batch transform job\n\n        :return: [str], transform job status if wait=True.\n        Valid values: \'InProgress\'|\'Completed\'|\'Failed\'|\'Stopping\'|\'Stopped\'\n        """"""\n        image = self._construct_image_location(image_name)\n\n        model = sage.Model(\n            model_data=s3_model_location,\n            image=image,\n            role=self.role,\n            sagemaker_session=self.sagemaker_session\n        )\n\n        content_type = ""application/json""\n\n        transformer = model.transformer(\n            instance_type=transform_instance_type,\n            instance_count=transform_instance_count,\n            assemble_with=\'Line\',\n            output_path=s3_output_location,\n            tags=tags,\n            accept=content_type,\n            strategy=""SingleRecord""\n        )\n\n        transformer.transform(data=s3_input_location, split_type=\'Line\', content_type=content_type, job_name=job_name)\n\n        if wait:\n            try:\n                transformer.wait()\n            except Exception:\n                # If there is an error, wait() throws an exception and we\'re not able to return a Failed status\n                pass\n            finally:\n                job_name = transformer.latest_transform_job.job_name\n                job_description = self.sagemaker_client.describe_transform_job(TransformJobName=job_name)\n\n            return job_description[\'TransformJobStatus\']\n\n    @staticmethod\n    def _get_s3_bucket(s3_dir):\n        """"""\n        Extract bucket from S3 dir\n        :param s3_dir: [str], input S3 directory\n        :return: [str], extracted bucket name\n        """"""\n        return urlparse(s3_dir).netloc\n\n    @staticmethod\n    def _get_s3_key_prefix(s3_dir):\n        """"""\n        Extract key prefix from S3 dir\n        :param s3_dir: [str], input S3 directory\n        :return: [str], extracted key prefix name\n        """"""\n        return urlparse(s3_dir).path.lstrip(\'/\').rstrip(\'/\')\n\n    def _construct_image_location(self, image_name):\n        account = self.boto_session.client(\'sts\').get_caller_identity()[\'Account\']\n        region = self.boto_session.region_name\n\n        return \'{account}.dkr.ecr.{region}.amazonaws.com/{image}\'.format(\n            account=account,\n            region=region,\n            image=image_name\n        )\n'"
tests/commands/__init__.py,0,b''
tests/commands/test_build.py,0,"b""try:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\nfrom click.testing import CliRunner\n\nfrom sagify.__main__ import cli\n\n\ndef test_build_happy_case():\n    runner = CliRunner()\n\n    with patch(\n            'sagify.commands.initialize._get_local_aws_profiles',\n            return_value=['default', 'sagemaker']\n    ):\n        with patch(\n                'future.moves.subprocess.check_output',\n                return_value=None\n        ):\n            with runner.isolated_filesystem():\n                runner.invoke(cli=cli, args=['init'], input='my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n')\n                result = runner.invoke(cli=cli, args=['build'])\n\n    assert result.exit_code == 0\n"""
tests/commands/test_cloud.py,0,"b'# -*- coding: utf-8 -*-\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\nfrom click.testing import CliRunner\n\nimport sagify\nfrom sagify.config.config import Config\nfrom sagify.__main__ import cli\n\n\nclass TestUploadData(object):\n    def test_upload_data_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    instance.upload_data.return_value = \'s3://path-to-data/data/\'\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'upload-data\',\n                                \'-i\', \'input_data/\',\n                                \'-s\', \'s3://path-to-data\'\n                            ]\n                        )\n                    instance.upload_data.assert_called_with(\'input_data/\', \'s3://path-to-data\')\n\n        assert result.exit_code == 0\n\n\nclass TestTrain(object):\n    def test_train_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'train\',\n                                \'-i\', \'s3://bucket/input\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-e\', \'ml.c4.2xlarge\'\n                            ]\n                        )\n\n                        assert instance.train.call_count == 1\n                        instance.train.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            input_s3_data_location=\'s3://bucket/input\',\n                            train_instance_count=1,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            train_volume_size=30,\n                            train_max_run=24 * 60 * 60,\n                            output_path=\'s3://bucket/output\',\n                            hyperparameters=None,\n                            base_job_name=None,\n                            job_name=None,\n                            use_spot_instances=False,\n                            metric_names=None,\n                            tags=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_train_with_base_job_name_and_role_and_external_id_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'train\',\n                                \'-i\', \'s3://bucket/input\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'-r\', \'some iam role\',\n                                \'-x\', \'some external id\',\n                                \'-n\', \'some job name prefix\'\n                            ]\n                        )\n\n                        assert instance.train.call_count == 1\n                        instance.train.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            input_s3_data_location=\'s3://bucket/input\',\n                            train_instance_count=1,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            train_volume_size=30,\n                            train_max_run=24 * 60 * 60,\n                            output_path=\'s3://bucket/output\',\n                            hyperparameters=None,\n                            base_job_name=\'some job name prefix\',\n                            job_name=None,\n                            use_spot_instances=False,\n                            metric_names=None,\n                            tags=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_train_with_job_name_and_base_job_name_and_role_and_external_id_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'train\',\n                                \'-i\', \'s3://bucket/input\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'-r\', \'some iam role\',\n                                \'-x\', \'some external id\',\n                                \'-n\', \'some job name prefix\',\n                                \'--job-name\', \'some job name\'\n                            ]\n                        )\n\n                        assert instance.train.call_count == 1\n                        instance.train.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            input_s3_data_location=\'s3://bucket/input\',\n                            train_instance_count=1,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            train_volume_size=30,\n                            train_max_run=24 * 60 * 60,\n                            output_path=\'s3://bucket/output\',\n                            hyperparameters=None,\n                            base_job_name=\'some job name prefix\',\n                            job_name=\'some job name\',\n                            use_spot_instances=False,\n                            metric_names=None,\n                            tags=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_train_with_tags_arg_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'train\',\n                                \'-i\', \'s3://bucket/input\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'-a\', \'key1=value1;key2=2\'\n                            ]\n                        )\n\n                        assert instance.train.call_count == 1\n                        instance.train.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            input_s3_data_location=\'s3://bucket/input\',\n                            train_instance_count=1,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            train_volume_size=30,\n                            train_max_run=24 * 60 * 60,\n                            output_path=\'s3://bucket/output\',\n                            hyperparameters=None,\n                            base_job_name=None,\n                            job_name=None,\n                            use_spot_instances=False,\n                            metric_names=None,\n                            tags=[\n                                {\n                                    \'Key\': \'key1\',\n                                    \'Value\': \'value1\',\n                                },\n                                {\n                                    \'Key\': \'key2\',\n                                    \'Value\': \'2\',\n                                },\n                            ]\n                        )\n\n        assert result.exit_code == 0\n\n    def test_train_with_docker_tag_arg_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'--docker-tag\', \'some-docker-tag\',\n                                \'cloud\', \'train\',\n                                \'-i\', \'s3://bucket/input\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-e\', \'ml.c4.2xlarge\'\n                            ]\n                        )\n\n                        assert instance.train.call_count == 1\n                        instance.train.assert_called_with(\n                            image_name=\'sagemaker-img:some-docker-tag\',\n                            input_s3_data_location=\'s3://bucket/input\',\n                            train_instance_count=1,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            train_volume_size=30,\n                            train_max_run=24 * 60 * 60,\n                            output_path=\'s3://bucket/output\',\n                            hyperparameters=None,\n                            base_job_name=None,\n                            job_name=None,\n                            use_spot_instances=False,\n                            metric_names=None,\n                            tags=None\n                        )\n\n        assert result.exit_code == 0\n\n\nclass TestDeploy(object):\n    def test_deploy_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'deploy\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\'\n                            ]\n                        )\n\n                        assert instance.deploy.call_count == 1\n                        instance.deploy.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            train_instance_count=2,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            endpoint_name=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_deploy_with_role_and_external_id_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'deploy\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'-r\', \'some iam role\',\n                                \'-x\', \'some external id\'\n                            ]\n                        )\n\n                        assert instance.deploy.call_count == 1\n                        instance.deploy.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            train_instance_count=2,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            endpoint_name=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_deploy_with_tags_arg_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'deploy\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'-a\', \'key1=value1;key2=2\'\n                            ]\n                        )\n\n                        assert instance.deploy.call_count == 1\n                        instance.deploy.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            train_instance_count=2,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            tags=[\n                                {\n                                    \'Key\': \'key1\',\n                                    \'Value\': \'value1\',\n                                },\n                                {\n                                    \'Key\': \'key2\',\n                                    \'Value\': \'2\',\n                                },\n                            ],\n                            endpoint_name=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_deploy_with_docker_tag_arg_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'-t\', \'some-docker-tag\',\n                                \'cloud\', \'deploy\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\'\n                            ]\n                        )\n\n                        assert instance.deploy.call_count == 1\n                        instance.deploy.assert_called_with(\n                            image_name=\'sagemaker-img:some-docker-tag\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            train_instance_count=2,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            endpoint_name=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_deploy_with_custom_endpoint_name(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'deploy\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'--endpoint-name\', \'my-endpoint\'\n                            ]\n                        )\n\n                        assert instance.deploy.call_count == 1\n                        instance.deploy.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            train_instance_count=2,\n                            train_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            endpoint_name=\'my-endpoint\'\n                        )\n\n        assert result.exit_code == 0\n\n\nclass TestBatchTransform(object):\n    def test_batch_transform_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'batch-transform\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-i\', \'s3://bucket/input_data\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\'\n                            ]\n                        )\n\n                        assert instance.batch_transform.call_count == 1\n                        instance.batch_transform.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output\',\n                            transform_instance_count=2,\n                            transform_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            wait=False,\n                            job_name=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_batch_transform_with_job_name_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'batch-transform\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-i\', \'s3://bucket/input_data\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'--job-name\', \'some-job-name\',\n                            ]\n                        )\n\n                        assert instance.batch_transform.call_count == 1\n                        instance.batch_transform.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output\',\n                            transform_instance_count=2,\n                            transform_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            wait=False,\n                            job_name=\'some-job-name\'\n                        )\n\n        assert result.exit_code == 0\n\n    def test_batch_transform_wait_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'batch-transform\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-i\', \'s3://bucket/input_data\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'--wait\'\n                            ]\n                        )\n\n                        assert instance.batch_transform.call_count == 1\n                        instance.batch_transform.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output\',\n                            transform_instance_count=2,\n                            transform_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            wait=True,\n                            job_name=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_batch_transform_with_role_and_external_id_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'batch-transform\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-i\', \'s3://bucket/input_data\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'-r\', \'some iam role\',\n                                \'-x\', \'some external id\'\n                            ]\n                        )\n\n                        assert instance.batch_transform.call_count == 1\n                        instance.batch_transform.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output\',\n                            transform_instance_count=2,\n                            transform_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            wait=False,\n                            job_name=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_batch_transform_with_tags_arg_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'batch-transform\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-i\', \'s3://bucket/input_data\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'-a\', \'key1=value1;key2=2\'\n                            ]\n                        )\n\n                        assert instance.batch_transform.call_count == 1\n                        instance.batch_transform.assert_called_with(\n                            image_name=\'sagemaker-img:latest\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output\',\n                            transform_instance_count=2,\n                            transform_instance_type=\'ml.c4.2xlarge\',\n                            tags=[\n                                {\n                                    \'Key\': \'key1\',\n                                    \'Value\': \'value1\',\n                                },\n                                {\n                                    \'Key\': \'key2\',\n                                    \'Value\': \'2\',\n                                },\n                            ],\n                            wait=False,\n                            job_name=None\n                        )\n\n        assert result.exit_code == 0\n\n    def test_batch_transform_with_docker_tag_arg_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'-t\', \'some-docker-tag\',\n                                \'cloud\', \'batch-transform\',\n                                \'-m\', \'s3://bucket/model/location/model.tar.gz\',\n                                \'-i\', \'s3://bucket/input_data\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-n\', \'2\',\n                                \'-e\', \'ml.c4.2xlarge\'\n                            ]\n                        )\n\n                        assert instance.batch_transform.call_count == 1\n                        instance.batch_transform.assert_called_with(\n                            image_name=\'sagemaker-img:some-docker-tag\',\n                            s3_model_location=\'s3://bucket/model/location/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output\',\n                            transform_instance_count=2,\n                            transform_instance_type=\'ml.c4.2xlarge\',\n                            tags=None,\n                            wait=False,\n                            job_name=None\n                        )\n\n        assert result.exit_code == 0\n\n\nclass TestHyperparameterOptimization(object):\n    def test_hyperparameter_optimization_happy_case(self):\n        hyperparams_ranges = """"""\n        {\n            ""ParameterRanges"": {\n                ""CategoricalParameterRanges"": [\n                    {\n                        ""Name"": ""kernel"",\n                        ""Values"": [""linear"", ""rbf""]\n                    }\n                ],\n                ""ContinuousParameterRanges"": [\n                {\n                  ""MinValue"": 0.001,\n                  ""MaxValue"": 10,\n                  ""Name"": ""gamma""\n                }\n                ],\n                ""IntegerParameterRanges"": [\n                    {\n                        ""Name"": ""C"",\n                        ""MinValue"": 1,\n                        ""MaxValue"": 10\n                    }\n                ]\n            },\n            ""ObjectiveMetric"": {\n                ""Name"": ""Precision"",\n                ""Type"": ""Maximize""\n            }\n        }\n        """"""\n\n        runner = CliRunner()\n\n        with patch(\n                \'sagify.commands.initialize._get_local_aws_profiles\',\n                return_value=[\'default\', \'sagify\']\n        ):\n            with patch.object(\n                    sagify.config.config.ConfigManager,\n                    \'get_config\',\n                    lambda _: Config(\n                        image_name=\'sagemaker-img\', aws_profile=\'sagify\', aws_region=\'us-east-1\', python_version=\'3.6\', sagify_module_dir=\'sage\',\n                        requirements_dir=\'requirements.txt\'\n                    )\n            ):\n                with patch(\n                        \'sagify.sagemaker.sagemaker.SageMakerClient\'\n                ) as mocked_sage_maker_client:\n                    instance = mocked_sage_maker_client.return_value\n                    with runner.isolated_filesystem():\n                        with open(\'hyperparams_ranges.json\', \'w\') as f:\n                            f.write(hyperparams_ranges)\n\n                        runner.invoke(cli=cli, args=[\'init\'], input=\'my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n\')\n                        result = runner.invoke(\n                            cli=cli,\n                            args=[\n                                \'cloud\', \'hyperparameter-optimization\',\n                                \'-i\', \'s3://bucket/input\',\n                                \'-o\', \'s3://bucket/output\',\n                                \'-e\', \'ml.c4.2xlarge\',\n                                \'-h\', \'hyperparams_ranges.json\'\n                            ]\n                        )\n\n                        assert instance.hyperparameter_optimization.call_count == 1\n\n        assert result.exit_code == 0\n'"
tests/commands/test_configure.py,0,"b""from collections import namedtuple\nfrom sagify.config.config import ConfigManager, Config\nimport os\nfrom backports import tempfile\n\nfrom unittest import TestCase\n\nfrom sagify.commands.configure import _configure\n\nCase = namedtuple('Case', 'description, image_name, aws_region, aws_profile, python_version, sagify_module_dir, requirements_dir, expected_config')\n\nt1 = Case('t1: Configure IMAGE NAME', 'new-image-name', None, None, None, None, None,\n          Config(image_name='new-image-name', aws_profile='', aws_region='',\n                 python_version='', sagify_module_dir='', requirements_dir=''))\n\nt2 = Case('t2: Configure AWS PROFILE', None, None, 'some-profile', None, None, None,\n          Config(image_name='new-image-name', aws_profile='some-profile', aws_region='',\n                 python_version='', sagify_module_dir='', requirements_dir=''))\n\nt3 = Case('t3: Configure AWS REGION', None, 'us-east-2', None, None, None, None,\n          Config(image_name='new-image-name', aws_profile='some-profile',\n                 aws_region='us-east-2', python_version='', sagify_module_dir='', requirements_dir=''))\n\nt4 = Case('t4: Configure PYTHON VERSION', None, None, None, '3.6', None, None,\n          Config(image_name='new-image-name', aws_profile='some-profile', aws_region='us-east-2',\n                 python_version='3.6', sagify_module_dir='', requirements_dir=''))\n\nt5 = Case('t5: Configure REQUIREMENTS DIR', None, None, None, None, None, 'requirements.txt',\n          Config(image_name='new-image-name', aws_profile='some-profile', aws_region='us-east-2',\n                 python_version='3.6', sagify_module_dir='', requirements_dir='requirements.txt'))\n\nt6 = Case('t6: Configure NOTHING', None, None, None, None, None, None,\n          Config(image_name='new-image-name', aws_profile='some-profile', aws_region='us-east-2',\n                 python_version='3.6', sagify_module_dir='', requirements_dir='requirements.txt'))\n\nt7 = Case('t7: Configure EVERYTHING', 'some-other-image-name', 'us-east-1', 'some-other-profile', '2.7', None, 'other-requirements.txt',\n          Config(image_name='some-other-image-name', aws_profile='some-other-profile', aws_region='us-east-1',\n                 python_version='2.7', sagify_module_dir='', requirements_dir='other-requirements.txt'))\n\ntest_cases = [t1, t2, t3, t4, t5, t6, t7]\n\n\nclass ConfigureCommandTests(TestCase):\n\n    def tests(self):\n        with tempfile.TemporaryDirectory() as tmpdir:\n            for case in test_cases:\n                try:\n                    updateConfig(tmpdir, case.image_name, case.aws_region, case.aws_profile, case.python_version, case.requirements_dir)\n                    config = ConfigManager(os.path.join(tmpdir, '.sagify.json')).get_config()\n                    assert config.to_dict() == case.expected_config.to_dict()\n\n                except AssertionError as e:\n                    e.args = ('Test Case: {}'.format(case.description), e.args)\n                    raise\n\n\ndef updateConfig(config_dir, image_name, aws_region, aws_profile, python_version, requirements_dir):\n    _configure(config_dir, image_name, aws_region, aws_profile, python_version, requirements_dir)\n"""
tests/commands/test_initialize.py,0,"b""import os\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\nfrom click.testing import CliRunner\n\nfrom sagify.__main__ import cli\n\n\ndef test_init_happy_case():\n    runner = CliRunner()\n\n    with patch(\n            'sagify.commands.initialize._get_local_aws_profiles',\n            return_value=['default', 'sagemaker']\n    ):\n        with runner.isolated_filesystem():\n            result = runner.invoke(cli=cli, args=['init'], input='my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n')\n\n            assert os.path.isfile('src/__init__.py')\n            assert os.path.isdir('src/sagify_base')\n            assert os.path.isdir('src/sagify_base/training')\n            assert os.path.isdir('src/sagify_base/prediction')\n            assert os.path.isfile('src/sagify_base/__init__.py')\n            assert os.path.isfile('src/sagify_base/build.sh')\n            assert os.path.isfile('src/sagify_base/push.sh')\n            assert os.path.isfile('src/sagify_base/Dockerfile')\n            assert os.path.isfile('src/sagify_base/training/__init__.py')\n            assert os.path.isfile('src/sagify_base/training/train')\n            assert os.path.isfile('src/sagify_base/training/training.py')\n            assert os.path.isfile('src/sagify_base/prediction/__init__.py')\n            assert os.path.isfile('src/sagify_base/prediction/nginx.conf')\n            assert os.path.isfile('src/sagify_base/prediction/predictor.py')\n            assert os.path.isfile('src/sagify_base/prediction/prediction.py')\n            assert os.path.isfile('src/sagify_base/prediction/wsgi.py')\n            assert os.path.isfile('src/sagify_base/prediction/serve')\n            assert os.path.isfile('src/sagify_base/local_test/train_local.sh')\n            assert os.path.isdir('src/sagify_base/local_test/test_dir/input/data/training')\n            assert os.path.isfile('src/sagify_base/local_test/test_dir/input/config/hyperparameters.json')\n            assert os.path.isdir('src/sagify_base/local_test/test_dir/model')\n            assert os.path.isdir('src/sagify_base/local_test/test_dir/output')\n\n    assert result.exit_code == 0\n\n\ndef test_init_when_directory_already_exists():\n    runner = CliRunner()\n    with patch(\n            'sagify.commands.initialize._get_local_aws_profiles',\n            return_value=['default', 'sagemaker']\n    ):\n        with runner.isolated_filesystem():\n            os.makedirs('my_app/sagify_base')\n\n            result = runner.invoke(\n                cli=cli,\n                args=['init'],\n                input='my_app\\nN\\nmy_app\\n1\\n2\\nus-east-1\\nrequirements.txt\\n'\n            )\n\n    assert result.exit_code == -1\n\n\ndef test_init_when_aws_cli_is_not_configure_locally():\n    runner = CliRunner()\n    with patch(\n            'sagify.commands.initialize._get_local_aws_profiles',\n            return_value=[]\n    ):\n        with runner.isolated_filesystem():\n            result = runner.invoke(cli=cli, args=['init'], input='my_app\\ny\\n1\\n2\\nrequirements.txt\\n')\n\n    assert result.exit_code == 1\n"""
tests/commands/test_local.py,0,"b""try:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\nfrom click.testing import CliRunner\n\nfrom sagify.__main__ import cli\n\n\nclass TestTrain(object):\n    def test_train_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                'sagify.commands.initialize._get_local_aws_profiles',\n                return_value=['default', 'sagemaker']\n        ):\n            with patch(\n                    'future.moves.subprocess.check_output',\n                    return_value=None\n            ):\n                with runner.isolated_filesystem():\n                    runner.invoke(cli=cli, args=['init'], input='my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n')\n                    result = runner.invoke(cli=cli, args=['local', 'train'])\n\n        assert result.exit_code == 0\n\n\nclass TestDeploy(object):\n    def test_deploy_happy_case(self):\n        runner = CliRunner()\n\n        with patch(\n                'sagify.commands.initialize._get_local_aws_profiles',\n                return_value=['default', 'sagemaker']\n        ):\n            with patch(\n                    'future.moves.subprocess.check_output',\n                    return_value=None\n            ):\n                with runner.isolated_filesystem():\n                    runner.invoke(cli=cli, args=['init'], input='my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n')\n                    result = runner.invoke(cli=cli, args=['local', 'deploy'])\n\n        assert result.exit_code == 0\n"""
tests/commands/test_push.py,0,"b""from collections import namedtuple\n\ntry:\n    from unittest import TestCase\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\nfrom click.testing import CliRunner\n\nfrom sagify.__main__ import cli\n\nCase = namedtuple('Case', 'description, init_cmd, push_cmd, expected_exit_code, expected_cli_call')\n\npush_script_path = 'src/sagify_base/push.sh'\n\nt1 = Case('t1: sagify push', ['init'], ['push'], 0,\n          lambda command_line: command_line.assert_called_once_with([push_script_path, 'latest', 'us-east-1', '', 'sagemaker', '', 'my_app']))\n\nt2 = Case('t2: sagify push -p profile', ['init'], ['push', '-p', 'some-profile'], 0,\n          lambda command_line: command_line.assert_called_once_with([push_script_path, 'latest', 'us-east-1', '', 'some-profile', '', 'my_app']))\n\nt3 = Case('t3: sagify push -r region', ['init'], ['push', '-r', 'some-region'], 0,\n          lambda command_line: command_line.assert_called_once_with([push_script_path, 'latest', 'some-region', '', 'sagemaker', '', 'my_app']))\n\nt4 = Case('t4: sagify push -r region -p profile', ['init'], ['push', '-r', 'some-region', '-p', 'prof'], 0,\n          lambda command_line: command_line.assert_called_once_with([push_script_path, 'latest', 'some-region', '', 'prof', '', 'my_app']))\n\nt5 = Case('t5: sagify push -i aws-role', ['init'], ['push', '-i', 'some-role-arn'], 0,\n          lambda command_line: command_line.assert_called_once_with([push_script_path, 'latest', 'us-east-1', 'some-role-arn', '', '', 'my_app']))\n\nt6 = Case('t6: sagify -p profile -i aws-role', ['init'], ['push', '-i', 'some-role-arn', '-p', 'some-profile'], 2,\n          lambda command_line: command_line.assert_not_called())\n\nt7 = Case('t7: sagify push -i aws-role -e some-id', ['init'], ['push', '-i', 'some-role-arn', '-e', 'some-id'], 0,\n          lambda command_line:\n          command_line.assert_called_once_with([push_script_path, 'latest', 'us-east-1', 'some-role-arn', '', 'some-id', 'my_app']))\n\ntest_cases = [t1, t2, t3, t4, t5, t6, t7]\n\n# Mocks\ncommand_line_mock = patch('future.moves.subprocess.check_output', return_value=None)\npatch('sagify.commands.initialize._get_local_aws_profiles', return_value=['default', 'sagemaker']).start()\n\n\nclass PushCommandTests(TestCase):\n\n    def tests(self):\n        for case in test_cases:\n            command_line = command_line_mock.start()\n\n            try:\n                assert runCommands(case.init_cmd, case.push_cmd).exit_code == case.expected_exit_code\n                case.expected_cli_call(command_line)\n            except AssertionError as e:\n                e.args = ('Test Case: {}'.format(case.description), e.args)\n                raise\n\n            command_line.stop()\n\n\ndef runCommands(init_command, push_command):\n    runner = CliRunner()\n    with runner.isolated_filesystem():\n        runner.invoke(cli=cli, args=init_command, input='my_app\\ny\\n1\\n2\\nus-east-1\\nrequirements.txt\\n')\n        return runner.invoke(cli=cli, args=push_command)\n"""
tests/config/__init__.py,0,b''
tests/config/test_config.py,0,"b'from sagify.config.config import ConfigManager, Config\n\n\ndef test_config(tmpdir):\n    config_file = tmpdir.join(\'config.json\')\n    config_file.write(""""""\n    {\n        ""image_name"": ""keras-app-img"",\n        ""aws_profile"": ""sagemaker"",\n        ""aws_region"": ""us-east-1"",\n        ""python_version"": ""3.6"",\n        ""sagify_module_dir"": ""keras-app-img"",\n        ""requirements_dir"": ""requirements.txt""\n    }\n    """""")\n    config_manager = ConfigManager(str(config_file))\n    actual_config_obj = config_manager.get_config()\n    assert actual_config_obj.to_dict() == Config(\n        image_name=""keras-app-img"", aws_profile=""sagemaker"", aws_region=""us-east-1"", python_version=""3.6"", sagify_module_dir=""keras-app-img"",\n        requirements_dir=""requirements.txt""\n    ).to_dict()\n'"
tests/sagemaker/__init__.py,0,b''
tests/sagemaker/test_sagemaker.py,0,"b'# -*- coding: utf-8 -*-\nfrom sagemaker.parameter import ContinuousParameter, CategoricalParameter\n\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\nfrom sagify.sagemaker import sagemaker\n\n\ndef test_upload_data_happy_case():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                sage_maker_client.upload_data(\n                    input_dir=\'/input/data\',\n                    s3_dir=\'s3://bucket/input_data\'\n                )\n                assert sagemaker_session_instance.upload_data.call_count == 1\n                sagemaker_session_instance.upload_data.assert_called_with(\n                    path=\'/input/data\',\n                    bucket=\'bucket\',\n                    key_prefix=\'input_data\'\n                )\n\n\ndef test_upload_data_with_s3_path_that_contains_only_bucket_name():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                sage_maker_client.upload_data(\n                    input_dir=\'/input/data\',\n                    s3_dir=\'s3://bucket/\'\n                )\n                assert sagemaker_session_instance.upload_data.call_count == 1\n                sagemaker_session_instance.upload_data.assert_called_with(\n                    path=\'/input/data\',\n                    bucket=\'bucket\',\n                    key_prefix=\'data\'\n                )\n\n\ndef test_train_happy_case():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.estimator.Estimator\'\n                ) as mocked_sagemaker_estimator:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                        sage_maker_client.train(\n                            image_name=\'image\',\n                            input_s3_data_location=\'s3://bucket/input\',\n                            train_instance_count=1,\n                            train_instance_type=\'m1.xlarge\',\n                            train_volume_size=30,\n                            train_max_run=60,\n                            output_path=\'s3://bucket/output\',\n                            hyperparameters={\'n_estimator\': 3},\n                            base_job_name=""Some-job-name-prefix"",\n                            job_name=""some job name""\n                        )\n                        mocked_sagemaker_estimator.assert_called_with(\n                            image_name=\'image-full-name\',\n                            role=\'arn_role\',\n                            train_instance_count=1,\n                            train_instance_type=\'m1.xlarge\',\n                            train_volume_size=30,\n                            train_max_run=60,\n                            input_mode=\'File\',\n                            base_job_name=""Some-job-name-prefix"",\n                            output_path=\'s3://bucket/output\',\n                            hyperparameters={\'n_estimator\': 3},\n                            sagemaker_session=sagemaker_session_instance,\n                            metric_definitions=None,\n                            train_use_spot_instances=False,\n                            train_max_wait=None\n                        )\n                        sagemaker_estimator_instance = mocked_sagemaker_estimator.return_value\n                        assert sagemaker_estimator_instance.fit.call_count == 1\n                        sagemaker_estimator_instance.fit.assert_called_with(\'s3://bucket/input\', job_name=\'some job name\')\n\n\ndef test_deploy_happy_case():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.Model\'\n                ) as mocked_sagemaker_model:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                        sage_maker_client.deploy(\n                            image_name=\'image\',\n                            s3_model_location=\'s3://bucket/model_input/model.tar.gz\',\n                            train_instance_count=1,\n                            train_instance_type=\'m1.xlarge\'\n                        )\n                        mocked_sagemaker_model.assert_called_with(\n                            model_data=\'s3://bucket/model_input/model.tar.gz\',\n                            image=\'image-full-name\',\n                            role=\'arn_role\',\n                            sagemaker_session=sagemaker_session_instance\n                        )\n                        sagemaker_model_instance = mocked_sagemaker_model.return_value\n                        assert sagemaker_model_instance.deploy.call_count == 1\n                        sagemaker_model_instance.deploy.assert_called_with(\n                            initial_instance_count=1,\n                            instance_type=\'m1.xlarge\',\n                            tags=None,\n                            endpoint_name=None,\n                            update_endpoint=True\n                        )\n\n\ndef test_deploy_with_tags():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.Model\'\n                ) as mocked_sagemaker_model:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n\n                        tags = [\n                            {\n                                \'Key\': \'key_name_1\',\n                                \'Value\': 1,\n                            },\n                            {\n                                \'Key\': \'key_name_2\',\n                                \'Value\': \'2\',\n                            },\n                        ]\n\n                        sage_maker_client.deploy(\n                            image_name=\'image\',\n                            s3_model_location=\'s3://bucket/model_input/model.tar.gz\',\n                            train_instance_count=1,\n                            train_instance_type=\'m1.xlarge\',\n                            tags=tags\n                        )\n                        mocked_sagemaker_model.assert_called_with(\n                            model_data=\'s3://bucket/model_input/model.tar.gz\',\n                            image=\'image-full-name\',\n                            role=\'arn_role\',\n                            sagemaker_session=sagemaker_session_instance\n                        )\n                        sagemaker_model_instance = mocked_sagemaker_model.return_value\n                        assert sagemaker_model_instance.deploy.call_count == 1\n                        sagemaker_model_instance.deploy.assert_called_with(\n                            initial_instance_count=1,\n                            instance_type=\'m1.xlarge\',\n                            tags=tags,\n                            endpoint_name=None,\n                            update_endpoint=True\n                        )\n\n\ndef test_deploy_with_custom_endpoint_name():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.Model\'\n                ) as mocked_sagemaker_model:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                        sage_maker_client.deploy(\n                            image_name=\'image\',\n                            s3_model_location=\'s3://bucket/model_input/model.tar.gz\',\n                            train_instance_count=1,\n                            train_instance_type=\'m1.xlarge\',\n                            endpoint_name=\'my-endpoint\'\n                        )\n                        mocked_sagemaker_model.assert_called_with(\n                            model_data=\'s3://bucket/model_input/model.tar.gz\',\n                            image=\'image-full-name\',\n                            role=\'arn_role\',\n                            sagemaker_session=sagemaker_session_instance\n                        )\n                        sagemaker_model_instance = mocked_sagemaker_model.return_value\n                        assert sagemaker_model_instance.deploy.call_count == 1\n                        sagemaker_model_instance.deploy.assert_called_with(\n                            initial_instance_count=1,\n                            instance_type=\'m1.xlarge\',\n                            tags=None,\n                            endpoint_name=\'my-endpoint\',\n                            update_endpoint=True\n                        )\n\n\ndef test_batch_transform_happy_case():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.Model\'\n                ) as mocked_sagemaker_model:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                        sage_maker_client.batch_transform(\n                            image_name=\'image\',\n                            s3_model_location=\'s3://bucket/model_input/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output_data\',\n                            transform_instance_count=1,\n                            transform_instance_type=\'m1.xlarge\'\n                        )\n                        mocked_sagemaker_model.assert_called_with(\n                            model_data=\'s3://bucket/model_input/model.tar.gz\',\n                            image=\'image-full-name\',\n                            role=\'arn_role\',\n                            sagemaker_session=sagemaker_session_instance\n                        )\n                        sagemaker_model_instance = mocked_sagemaker_model.return_value\n                        assert sagemaker_model_instance.transformer.call_count == 1\n                        sagemaker_model_instance.transformer.assert_called_with(\n                            instance_type=\'m1.xlarge\',\n                            instance_count=1,\n                            assemble_with=\'Line\',\n                            output_path=\'s3://bucket/output_data\',\n                            tags=None,\n                            accept=\'application/json\',\n                            strategy=""SingleRecord""\n                        )\n\n                        transformer = sagemaker_model_instance.transformer.return_value\n                        assert transformer.transform.call_count == 1\n                        transformer.transform.assert_called_with(\n                            data=\'s3://bucket/input_data\',\n                            split_type=\'Line\',\n                            content_type=\'application/json\',\n                            job_name=None\n                        )\n\n\ndef test_batch_transform_with_job_name_happy_case():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.Model\'\n                ) as mocked_sagemaker_model:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                        sage_maker_client.batch_transform(\n                            image_name=\'image\',\n                            s3_model_location=\'s3://bucket/model_input/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output_data\',\n                            transform_instance_count=1,\n                            transform_instance_type=\'m1.xlarge\',\n                            job_name=\'some=job-name\'\n                        )\n                        mocked_sagemaker_model.assert_called_with(\n                            model_data=\'s3://bucket/model_input/model.tar.gz\',\n                            image=\'image-full-name\',\n                            role=\'arn_role\',\n                            sagemaker_session=sagemaker_session_instance\n                        )\n                        sagemaker_model_instance = mocked_sagemaker_model.return_value\n                        assert sagemaker_model_instance.transformer.call_count == 1\n                        sagemaker_model_instance.transformer.assert_called_with(\n                            instance_type=\'m1.xlarge\',\n                            instance_count=1,\n                            assemble_with=\'Line\',\n                            output_path=\'s3://bucket/output_data\',\n                            tags=None,\n                            accept=\'application/json\',\n                            strategy=""SingleRecord""\n                        )\n\n                        transformer = sagemaker_model_instance.transformer.return_value\n                        assert transformer.transform.call_count == 1\n                        transformer.transform.assert_called_with(\n                            data=\'s3://bucket/input_data\',\n                            split_type=\'Line\',\n                            content_type=\'application/json\',\n                            job_name=\'some=job-name\'\n                        )\n\n\ndef test_batch_transform_wait_happy_case():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.Model\'\n                ) as mocked_sagemaker_model:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                        sage_maker_client.batch_transform(\n                            image_name=\'image\',\n                            s3_model_location=\'s3://bucket/model_input/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output_data\',\n                            transform_instance_count=1,\n                            transform_instance_type=\'m1.xlarge\',\n                            wait=True\n                        )\n                        mocked_sagemaker_model.assert_called_with(\n                            model_data=\'s3://bucket/model_input/model.tar.gz\',\n                            image=\'image-full-name\',\n                            role=\'arn_role\',\n                            sagemaker_session=sagemaker_session_instance\n                        )\n                        sagemaker_model_instance = mocked_sagemaker_model.return_value\n                        assert sagemaker_model_instance.transformer.call_count == 1\n                        sagemaker_model_instance.transformer.assert_called_with(\n                            instance_type=\'m1.xlarge\',\n                            instance_count=1,\n                            assemble_with=\'Line\',\n                            output_path=\'s3://bucket/output_data\',\n                            tags=None,\n                            accept=\'application/json\',\n                            strategy=""SingleRecord""\n                        )\n\n                        transformer = sagemaker_model_instance.transformer.return_value\n                        assert transformer.transform.call_count == 1\n                        transformer.transform.assert_called_with(\n                            data=\'s3://bucket/input_data\',\n                            split_type=\'Line\',\n                            content_type=\'application/json\',\n                            job_name=None\n                        )\n\n                        assert transformer.wait.call_count == 1\n\n\ndef test_batch_transform_with_tags():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.Model\'\n                ) as mocked_sagemaker_model:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n\n                        tags = [\n                            {\n                                \'Key\': \'key_name_1\',\n                                \'Value\': 1,\n                            },\n                            {\n                                \'Key\': \'key_name_2\',\n                                \'Value\': \'2\',\n                            },\n                        ]\n\n                        sage_maker_client.batch_transform(\n                            image_name=\'image\',\n                            s3_model_location=\'s3://bucket/model_input/model.tar.gz\',\n                            s3_input_location=\'s3://bucket/input_data\',\n                            s3_output_location=\'s3://bucket/output_data\',\n                            transform_instance_count=1,\n                            transform_instance_type=\'m1.xlarge\',\n                            tags=tags\n                        )\n                        mocked_sagemaker_model.assert_called_with(\n                            model_data=\'s3://bucket/model_input/model.tar.gz\',\n                            image=\'image-full-name\',\n                            role=\'arn_role\',\n                            sagemaker_session=sagemaker_session_instance\n                        )\n                        sagemaker_model_instance = mocked_sagemaker_model.return_value\n                        assert sagemaker_model_instance.transformer.call_count == 1\n                        sagemaker_model_instance.transformer.assert_called_with(\n                            instance_type=\'m1.xlarge\',\n                            instance_count=1,\n                            assemble_with=\'Line\',\n                            output_path=\'s3://bucket/output_data\',\n                            tags=tags,\n                            accept=\'application/json\',\n                            strategy=""SingleRecord""\n                        )\n\n                        transformer = sagemaker_model_instance.transformer.return_value\n                        assert transformer.transform.call_count == 1\n                        transformer.transform.assert_called_with(\n                            data=\'s3://bucket/input_data\',\n                            split_type=\'Line\',\n                            content_type=\'application/json\',\n                            job_name=None\n                        )\n\n\ndef test_hyperparameter_optimization_happy_case():\n    with patch(\n            \'boto3.Session\'\n    ):\n        with patch(\n                \'sagemaker.Session\'\n        ) as mocked_sagemaker_session:\n            sagemaker_session_instance = mocked_sagemaker_session.return_value\n\n            with patch(\n                    \'sagemaker.get_execution_role\',\n                    return_value=\'arn_role\'\n            ):\n                with patch(\n                        \'sagemaker.estimator.Estimator\'\n                ) as mocked_sagemaker_estimator:\n                    with patch(\n                            \'sagify.sagemaker.sagemaker.SageMakerClient._construct_image_location\',\n                            return_value=\'image-full-name\'\n                    ):\n                        with patch(\n                                \'sagemaker.tuner.HyperparameterTuner\'\n                        ) as mocked_sagemaker_tuner:\n                            sage_maker_client = sagemaker.SageMakerClient(\'sagemaker\', \'us-east-1\')\n                            sage_maker_client.hyperparameter_optimization(\n                                image_name=\'image\',\n                                input_s3_data_location=\'s3://bucket/input\',\n                                instance_count=1,\n                                instance_type=\'m1.xlarge\',\n                                volume_size=30,\n                                max_run=60,\n                                max_jobs=3,\n                                max_parallel_jobs=2,\n                                output_path=\'s3://bucket/output\',\n                                objective_type=\'Maximize\',\n                                objective_metric_name=\'Precision\',\n                                hyperparams_ranges_dict={\n                                    \'lr\': ContinuousParameter(0.001, 0.1),\n                                    \'batch-size\': CategoricalParameter([32, 64, 128, 256, 512])\n                                },\n                                base_job_name=""Some-job-name-prefix"",\n                                job_name=""some job name""\n                            )\n                            mocked_sagemaker_estimator.assert_called_with(\n                                image_name=\'image-full-name\',\n                                role=\'arn_role\',\n                                train_instance_count=1,\n                                train_instance_type=\'m1.xlarge\',\n                                train_volume_size=30,\n                                train_max_run=60,\n                                input_mode=\'File\',\n                                output_path=\'s3://bucket/output\',\n                                sagemaker_session=sagemaker_session_instance,\n                                train_use_spot_instances=False,\n                                train_max_wait=None\n                            )\n\n                            mocked_sagemaker_tuner_instance = mocked_sagemaker_tuner.return_value\n                            assert mocked_sagemaker_tuner_instance.fit.call_count == 1\n                            mocked_sagemaker_tuner_instance.fit.assert_called_with(\n                                \'s3://bucket/input\', job_name=\'some job name\'\n                            )\n'"
sagify/commands/custom_validators/__init__.py,0,b''
sagify/commands/custom_validators/validators.py,0,"b'import click\n\n\ndef validate_tags(ctx, param, value):\n    """"""\n    Validates provided tags from the command-line of the form k1=v2;k2=v2;...\n\n    :param ctx: [click.Context], Click context (not used)\n    :param param: [str], parameter value (not used)\n    :param value: [str], value of parameter\n    :return: [list[dict[str, str]]], tags in the AWS friendly format. Example:\n\n        [\n            {\n                \'Key\': \'key_name_1\',\n                \'Value\': key_value_1,\n            },\n            {\n                \'Key\': \'key_name_2\',\n                \'Value\': key_value_2,\n            },\n            ...\n        ]\n\n    """"""\n    if value is None:\n        return None\n\n    key_value_pairs = value.strip().split("";"")\n    tags_dict = dict()\n    for kv in key_value_pairs:\n        kv_list = kv.strip().split(""="")\n\n        if len(kv_list) != 2:\n            raise click.BadParameter(\'Malformed provided tags\')\n\n        key = kv_list[0].strip()\n        value = kv_list[1].strip()\n\n        if key in tags_dict:\n            raise click.BadParameter(\'Duplicate key in provided tags\')\n\n        tags_dict[key] = value\n\n    sorted_keys = list(tags_dict.keys())\n    sorted_keys.sort()\n\n    return [{\'Key\': k, \'Value\': tags_dict[k]} for k in sorted_keys]\n'"
sagify/template/sagify_base/__init__.py,0,b''
tests/commands/custom_validators/__init__.py,0,b''
tests/commands/custom_validators/test_validators.py,0,"b'import click\nimport pytest\n\nfrom sagify.commands.custom_validators.validators import validate_tags\n\n\n@pytest.mark.parametrize(""test_input,expected"", [\n    (\n        ""key1=value1;key2=3"",\n        [\n            {\'Key\': ""key1"", \'Value\': ""value1""},\n            {\'Key\': ""key2"", \'Value\': ""3""}\n        ]\n    ),\n    (\n        ""key1=value1"",\n        [\n            {\'Key\': ""key1"", \'Value\': ""value1""}\n        ]\n    )\n])\ndef test_validate_tags_happy_case(test_input, expected):\n    assert validate_tags(ctx=None, param=None, value=test_input) == expected\n\n\n@pytest.mark.parametrize(""test_input"", [\n    ""key1=value1;;key2=3"",\n    ""key1==value1;""\n])\ndef test_validate_tags_invalid_input(test_input):\n    with pytest.raises(click.BadParameter):\n        assert validate_tags(ctx=None, param=None, value=test_input)\n'"
sagify/template/sagify_base/prediction/__init__.py,0,b''
sagify/template/sagify_base/prediction/predict.py,0,"b'from __future__ import absolute_import\n\n# Do not remove the following line\nimport sys;sys.path.append(""."")  # NOQA\nfrom sagify_base.prediction.prediction import predict as predict_function\n\n\ndef predict(json_input):\n    """"""\n    Prediction given the request input\n    :param json_input: [dict], request input\n    :return: [dict], prediction\n    """"""\n    return predict_function(json_input=json_input)\n'"
sagify/template/sagify_base/prediction/prediction.py,0,"b'import os\n\n\n_MODEL_PATH = os.path.join(\'/opt/ml/\', \'model\')  # Path where all your model(s) live in\n\n\nclass ModelService(object):\n    model = None\n\n    @classmethod\n    def get_model(cls):\n        """"""Get the model object for this instance, loading it if it\'s not already loaded.""""""\n        if cls.model is None:\n            # TODO Load a specific model\n            # TODO Examples:\n            # TODO 1. keras.models.load_model(os.path.join(_MODEL_PATH, \'<model_file>\'))\n            # TODO 2. joblib.load(\'<model_file>\')\n            cls.model = None\n        return cls.model\n\n    @classmethod\n    def predict(cls, input):\n        """"""For the input, do the predictions and return them.""""""\n        clf = cls.get_model()\n        return clf.predict(input)\n\n\ndef predict(json_input):\n    """"""\n    Prediction given the request input\n    :param json_input: [dict], request input\n    :return: [dict], prediction\n    """"""\n\n    # TODO Transform json_input and assign the transformed value to model_input\n    model_input = None\n    prediction = ModelService.predict(model_input)\n    print(prediction)\n\n    # TODO If you have more than 1 models, then create more classes similar to ModelService\n    # TODO where each of one will load one of your models\n\n    # TODO Transform prediction to a dict and assign it to result\n    result = {}\n\n    return result\n'"
sagify/template/sagify_base/prediction/predictor.py,0,"b'# This is the file that implements a flask server to do inferences. It\'s the file that you will\n#  modify to implement the scoring for your own algorithm.\n\nfrom __future__ import print_function\n\nimport json\n\nimport flask\n\nfrom . import predict\n\n\napp = flask.Flask(__name__)\n\n\n@app.route(\'/ping\', methods=[\'GET\'])\ndef ping():\n    """"""Determine if the container is working and healthy""""""\n    return flask.Response(response=\'\\n\', status=200, mimetype=\'application/json\')\n\n\n@app.route(\'/invocations\', methods=[\'POST\'])\ndef transformation():\n    """"""Do an inference on a single batch of data. In this sample server, we take data as JSON""""""\n    if flask.request.content_type == \'application/json\':\n        data = flask.request.get_json()\n    else:\n        return flask.Response(\n            response=json.dumps({\'message\': \'This predictor only supports JSON data\'}),\n            status=415,\n            mimetype=\'application/json\'\n        )\n\n    result = predict.predict(data)\n\n    return flask.Response(response=json.dumps(result), status=200, mimetype=\'application/json\')\n'"
sagify/template/sagify_base/prediction/wsgi.py,0,"b'from . import predictor as myapp\n\n# This is just a simple wrapper for gunicorn to find your app.\n# If you want to change the algorithm file, simply change ""predictor"" above to the\n# new file.\n\napp = myapp.app\n'"
sagify/template/sagify_base/training/__init__.py,0,b''
sagify/template/sagify_base/training/training.py,0,"b'def train(input_data_path, model_save_path, hyperparams_path=None):\n    """"""\n    The function to execute the training.\n\n    :param input_data_path: [str], input directory path where all the training file(s) reside in\n    :param model_save_path: [str], directory path to save your model(s)\n    :param hyperparams_path: [optional[str], default=None], input path to hyperparams json file.\n    Example:\n        {\n            ""max_leaf_nodes"": 10,\n            ""n_estimators"": 200\n        }\n    """"""\n    # TODO: If exists, read in hyperparams file JSON content\n\n    # TODO: Write your modeling logic\n\n    # TODO: save the model(s) under \'model_save_path\'\n'"
