file_path,api_count,code
src/services/__init__.py,0,"b'import json\nfrom flask import make_response\n\n\ndef nice_json(arg):\n    response = make_response(json.dumps(arg, sort_keys = True, indent=4))\n    response.headers[\'Content-type\'] = ""application/json""\n    return response\n\n'"
src/services/food_descriptor.py,0,"b'from utils import nice_json\nfrom flask import Flask, request\nimport pandas\n\ncsv_path = \'../../data/nutrition_values.csv\'\ndf = pandas.read_csv(csv_path)\n\nproducts = df[\'product_name\'].unique()\n\napp = Flask(__name__)\n\n@app.route(""/"", methods=[\'POST\'])\ndef describe():\n    product_name = request.values[""product_name""].replace(""_"", "" "")\n\n    if product_name not in products:\n        return nice_json({})\n    dic = df.loc[df[\'product_name\'] == product_name].to_dict()\n    for key, val in dic.items():\n        dic[key] = val[next(iter(val))]\n    return nice_json(dic)\n\nif __name__==""__main__"":\n    app.run(host=\'0.0.0.0\', port=5001, debug=False)\n'"
src/services/food_predictor.py,0,"b'import os\nfrom flask import Flask, request, redirect, url_for, jsonify\nfrom werkzeug.utils import secure_filename\nfrom fastai.imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *\nimport glob\nimport imghdr\n\nUPLOAD_FOLDER = \'../../data/food-101/test/\'\nALLOWED_EXTENSIONS = set([\'png\', \'jpg\', \'jpeg\'])\n\n# Model stuff\nPATH = ""../../data/food-101/""\nsz=224\narch=resnext101\n\napp = Flask(__name__)\napp.config[\'UPLOAD_FOLDER\'] = UPLOAD_FOLDER\n\ndef allowed_file(filename):\n    return \'.\' in filename and \\\n           filename.rsplit(\'.\', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n\n@app.route(""/path"", methods=[""POST""])\ndef predict():\n    filepath = request.data.decode(""utf-8"").split(""="")[1]\n\n    # cleaning test dir\n    files = glob.glob(UPLOAD_FOLDER+\'*\')\n    for f in files:\n        os.remove(f)\n    \n    ext = imghdr.what(filepath)\n    os.rename(filepath, os.path.join(app.config[\'UPLOAD_FOLDER\'], ""batata."" + ext))\n\n    data = ImageClassifierData.from_paths(PATH, tfms=tfms_from_model(arch, sz), test_name=\'test\')\n    learn = ConvLearner.pretrained(arch, data, precompute=True, xtra_fc=[512, 512], ps=0.5)\n    learn.load(\'better_model\')\n    learn.precompute=False # We\'ll pass in a raw image, not activations\n    preds = learn.predict(is_test=True)\n    top_preds = preds[0].argsort()[-5:][::-1] # get top 5 predictions\n    top_pred_names = [data.classes[i] for i in top_preds]\n\n    return jsonify(predictions=top_pred_names)\n    \n@app.route(""/"", methods=[\'GET\', \'POST\'])\ndef upload_file():\n    if request.method == \'POST\':\n        # check if the post request has the file part\n        if \'file\' not in request.files:\n            print(request)\n            print(request.files)\n            flash(\'No file part\')\n            return redirect(request.url)\n        file = request.files[\'file\']\n        # if user does not select file, browser also\n        # submit a empty part without filename\n        if file.filename == \'\':\n            flash(\'No selected file\')\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            # cleaning test dir\n            files = glob.glob(UPLOAD_FOLDER+\'*\')\n            for f in files:\n                os.remove(f)\n            \n            filename = secure_filename(file.filename)\n            filepath = os.path.join(app.config[\'UPLOAD_FOLDER\'], filename)\n            file.save(filepath)\n            \n            \n            data = ImageClassifierData.from_paths(PATH, tfms=tfms_from_model(arch, sz), test_name=\'test\')\n            learn = ConvLearner.pretrained(arch, data, precompute=True, xtra_fc=[512, 512], ps=0.5)\n            learn.load(\'better_model\')\n            learn.precompute=False # We\'ll pass in a raw image, not activations\n            preds = learn.predict(is_test=True)\n            top_preds = preds[0].argsort()[-5:][::-1] # get top 5 predictions\n            top_pred_names = [data.classes[i] for i in top_preds]\n            \n            return jsonify(predictions=top_pred_names)\n\n    return \'\'\'\n        <!doctype html>\n        <title>Upload new File</title>\n        <h1>Upload new File</h1>\n        <form method=post enctype=multipart/form-data>\n          <p><input type=file name=file>\n             <input type=submit value=Upload>\n        </form>\n        \'\'\'\n\nif __name__==""__main__"":\n    app.run(host=\'0.0.0.0\', port=5000, debug=True)\n'"
src/services/top_food.py,0,"b'from utils import nice_json\nfrom flask import Flask, request\nimport pandas as pd\nimport numpy as np\nfrom scipy.spatial import distance\n\nfrom sklearn.neighbors import NearestNeighbors\n\nNUT_DAILY_VALUES = {\n    ""calories"": 2000,\n    ""carbohydrates"": 300,\n    #""cholesterol"": 0.003,\n    ""fat"" : 65,\n    #""fiber"": 25,\n    ""proteins"": 50\n}\n\nNUT_NAMES_MAP = {\n    ""calories"" : ""energy_100g"",\n    ""carbohydrates"": ""carbohydrates_100g"",\n    ""cholesterol"": ""cholesterol_100g"",\n    ""fat"" : ""fat_100g"",\n    ""fiber"": ""fiber_100g"",\n    ""proteins"": ""proteins_100g""\n}\n\nMODELS_PATH = ""../../data/food-101/models/""\ndata_file = ""../../data/nutrition_values.csv""\n\nnutrition_df = pd.read_csv(MODELS_PATH + ""../../nutrition_values.csv"", header=0)\n\n#print (nutrition_df.head())\nnutrition_values_df = nutrition_df.drop([""product_name"", ""sugars_100g"", ""fiber_100g"", ""cholesterol_100g""], axis=1)\n\n# normalize df\nfor key, val in NUT_DAILY_VALUES.items():\n    column = NUT_NAMES_MAP[key]\n    nutrition_values_df[column] /= val\n    nutrition_values_df[column] *= 2\n\nprint(nutrition_values_df.head())\n\n#knn = joblib.load(MODELS_PATH + ""knn.pkl"")\n\n\napp = Flask(__name__)\n\nw = [1, 1, 1, 1]# 0.1, 0]\n\ndef weightedL2(a,b):\n    q = a-b\n    return np.sqrt((w*q*q).sum())\n\n@app.route(""/"",  methods=[\'POST\'])\ndef similar_foods():\n    # product_name = request.form.get(\'product_name\')\n    calories = float(request.form.get(\'calories\'))\n    cholesterol = float(request.form.get(\'cholesterol\'))\n    carbohydrates = float(request.form.get(\'carbohydrates\'))\n    fat = float(request.form.get(\'fat\'))\n    fiber = float(request.form.get(\'fiber\'))\n    proteins = float(request.form.get(\'proteins\'))\n    \n    # TODO Check if any parameter is None\n    print(calories);\n    print(carbohydrates);\n    \n    print (nutrition_values_df.head())\n    knn = NearestNeighbors(n_neighbors=5,\n                           algorithm=\'ball_tree\',\n                           metric=""euclidean"").fit(nutrition_values_df)\n    \n    distances, indices = knn.kneighbors([[(NUT_DAILY_VALUES[""calories""] - calories) / NUT_DAILY_VALUES[""calories""] ,\n                                          (NUT_DAILY_VALUES[""carbohydrates""] - carbohydrates) / NUT_DAILY_VALUES[""carbohydrates""] ,\n                                          (NUT_DAILY_VALUES[""proteins""] - proteins) / NUT_DAILY_VALUES[""proteins""] ,\n                                          (NUT_DAILY_VALUES[""fat""] - fat) / NUT_DAILY_VALUES[""fat""]]],\n                                          #NUT_DAILY_VALUES[""fiber""] - fiber,\n                                          #NUT_DAILY_VALUES[""cholesterol""] - cholesterol]],\n                                        n_neighbors=3)\n    \n    recommended_products = [nutrition_df.loc[i][\'product_name\'] for i in indices[0]]\n\n    response_dict = {\n        ""recommended"": recommended_products\n    }\n    return nice_json(response_dict)\n\nif __name__==""__main__"":\n    app.run(port=5002, debug=True)\n'"
src/services/utils.py,0,"b'import json\nfrom flask import make_response\n\ndef nice_json(arg):\n    response = make_response(json.dumps(arg, sort_keys = True, indent=4))\n    response.headers[\'Content-type\'] = ""application/json""\n    return response\n\n\n'"
