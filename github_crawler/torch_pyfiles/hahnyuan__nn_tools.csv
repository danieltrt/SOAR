file_path,api_count,code
__init__.py,0,b''
caffe_analyser.py,0,"b'# coding=utf-8\nfrom __future__ import absolute_import\nimport argparse\nfrom analysis.CaffeA import *\nfrom Caffe import caffe_net\nfrom analysis.utils import save_csv\n\n""""""\nBefore you analyse your network, [Netscope](http://ethereon.github.io/netscope/#/editor)\nis recommended to visiualize your network.\n\nCommand\xef\xbc\x9a`python caffe_analyser.py [-h] prototxt outdir shape`\n- The prototxt is the path of the prototxt file.\n- The outdir is path to save the csv file.\n- The shape is the input shape of the network(split by comma `,`), image shape should be: channel, batch_size, image_height, image_width.\n\nFor example `python caffe_analyser.py resnet_18_deploy.prototxt analys_result.csv 1,3,224,224`\n""""""\n\nif __name__==""__main__"":\n    parser=argparse.ArgumentParser()\n    parser.add_argument(\'prototxt\',help=\'path of the prototxt file\',type=str)\n    parser.add_argument(\'outdir\',help=\'path to save the csv file\',type=str)\n    parser.add_argument(\'shape\',help=\'input shape of the network(split by comma `,`), image shape should be: batch,c,h,w\',type=str)\n    args=parser.parse_args()\n    shape=[int(i) for i in args.shape.split(\',\')]\n    net=caffe_net.Prototxt(args.prototxt)\n    blob_dict, layers=profiling(net, Blob(shape))\n    save_csv(layers,args.outdir)'"
funcs.py,0,"b'from __future__ import print_function\nimport numpy as np\nimport time\n\nclass Logger():\n    def __init__(self,file_name=None,show=True):\n        self.show=show\n        self.file_name=file_name\n\n    def __call__(self,str):\n        str=\'%s  \'%(time.strftime(\'%H:%M:%S\'),)+str\n        if self.file_name:\n            with open(self.file_name,\'a+\') as f:\n                f.write(str+\'\\n\')\n        if self.show:\n            print(str)\n\ndef intersect(box_a, box_b):\n    max_xy = np.minimum(box_a[:, 2:], box_b[2:])\n    min_xy = np.maximum(box_a[:, :2], box_b[:2])\n    inter = np.clip((max_xy - min_xy), a_min=0, a_max=np.inf)\n    return inter[:, 0] * inter[:, 1]\n\ndef get_iou(box_a, box_b):\n    """"""Compute the jaccard overlap of two sets of boxes.  The jaccard overlap\n    is simply the intersection over union of two boxes.\n    E.g.:\n        A \xe2\x88\xa9 B / A \xe2\x88\xaa B = A \xe2\x88\xa9 B / (area(A) + area(B) - A \xe2\x88\xa9 B)\n        The box should be [x1,y1,x2,y2]\n    Args:\n        box_a: Single numpy bounding box, Shape: [4] or Multiple bounding boxes, Shape: [num_boxes,4]\n        box_b: Single numpy bounding box, Shape: [4]\n    Return:\n        jaccard overlap: Shape: [box_a.shape[0], box_a.shape[1]]\n    """"""\n    if box_a.ndim==1:\n        box_a=box_a.reshape([1,-1])\n    inter = intersect(box_a, box_b)\n    area_a = ((box_a[:, 2]-box_a[:, 0]) *\n              (box_a[:, 3]-box_a[:, 1]))  # [A,B]\n    area_b = ((box_b[2]-box_b[0]) *\n              (box_b[3]-box_b[1]))  # [A,B]\n    union = area_a + area_b - inter\n    return inter / union  # [A,B]\n\ndef nms(bboxs,scores,thresh):\n    """"""\n    The box should be [x1,y1,x2,y2]\n    :param bboxs: multiple bounding boxes, Shape: [num_boxes,4]\n    :param scores: The score for the corresponding box\n    :return: keep inds\n    """"""\n    if len(bboxs)==0:\n        return []\n    order=scores.argsort()[::-1]\n    keep=[]\n    while order.size>0:\n        i=order[0]\n        keep.append(i)\n        ious=get_iou(bboxs[order],bboxs[i])\n        order=order[ious<=thresh]\n    return keep\n'"
keras_to_caffe.py,0,"b'import keras\nimport Caffe.net as caffe\nimport numpy as np\nfrom funcs import *\n\ndef convert_filter(numpy_filter_weight):\n    return np.transpose(numpy_filter_weight,(3,2,1,0))\n\ndef convert_fc(numpy_fc_weight):\n    return np.transpose(numpy_fc_weight,(1,0))\n\ndef keras_weights_to_caffemodel(keras_model):\n    """"""\n    Only Implement the conv layer and fc layer\n    :param keras_model:\n    :return:\n    """"""\n    net=caffe.Net()\n    layers=keras_model.layers\n\n    for layer in layers:\n        if type(layer)==keras.layers.Convolution2D:\n            w,b=layer.get_weights()\n            w=convert_filter(w)\n            param=caffe.Layer_param(layer.name,\'Convolution\')\n            net.add_layer_with_data(param,[w,b])\n        if type(layer)==keras.layers.Dense:\n            w, b = layer.get_weights()\n            w = convert_fc(w)\n            param = caffe.Layer_param(layer.name, \'InnerProduct\')\n            net.add_layer_with_data(param, [w, b])\n    return net\n\nif __name__==\'__main__\':\n    pass'"
mxnet_analyser.py,0,"b'# coding=utf-8\nfrom __future__ import absolute_import\nimport argparse\nfrom analysis.MxnetA import *\nfrom analysis.utils import save_csv\nimport os\nimport sys\nimport mxnet\n\nif __name__==""__main__"":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\'path\', help=\'python file location\', type=str)\n    parser.add_argument(\'name\', help=\'the symbol object name or function that generate the symbol in your python file\', type=str)\n    parser.add_argument(\'shape\',\n                        help=\'input shape of the network(split by comma `,`), image shape should be: batch,c,h,w\',\n                        type=str)\n    parser.add_argument(\'--out\', help=\'path to save the csv file\', default=\'/tmp/mxnet_analyse.csv\', type=str)\n    parser.add_argument(\'--func_args\', help=\'args tuple parse to the function, eg. --func_args (3,""ABC"")\', default=\'\', type=str)\n    parser.add_argument(\'--func_kwargs\', help=\'kwargs dict parse to the function, eg. --func_kwargs {a=1,c=""OP""}\', default=\'\', type=str)\n\n    args = parser.parse_args()\n    path, filename = os.path.split(args.path)\n    path=os.path.abspath(path)\n    print(path)\n    filename = os.path.splitext(filename)[0]\n    sys.path.insert(0, path)\n    exec (\'from %s import %s as sym\' % (filename, args.name))\n    if isinstance(sym, mxnet.sym.Symbol):\n        sym = sym\n    elif hasattr(sym,\'__call__\'):\n        if args.func_kwargs!=\'\':\n            kwargs=eval(args.func_kwargs)\n        else:\n            kwargs={}\n        if args.func_args!=\'\':\n            func_args=eval(args.func_args)\n        else:\n            func_args=[]\n        sym = sym(*func_args,**kwargs)\n    else:\n        assert (""Error, The sym is not a instance of mxnet.sym.Symbol or function"")\n    shape = [int(i) for i in args.shape.split(\',\')]\n    profiling_symbol(sym,shape)\n    save_csv(tracked_layers, \'/tmp/mxnet_analyse.csv\')'"
pytorch_analyser.py,4,"b'# coding=utf-8\nfrom __future__ import absolute_import\nimport torch\nimport argparse\nimport sys,os\nfrom analysis.PytorchA import analyse\nfrom analysis.utils import save_csv\nfrom torch.autograd import Variable\nimport torch.nn as nn\n\n""""""\nSupporting analyse the inheritors of torch.nn.Moudule class.\n\nCommand\xef\xbc\x9a`pytorch_analyser.py [-h] [--out OUT] [--class_args ARGS] path class_name shape`\n- The path is the python file path which contaning your class.\n- The class_name is the class name in your python file.\n- The shape is the input shape of the network(split by comma `,`), in pytorch image shape should be: batch_size, channel, image_height, image_width.\n- The out (optinal) is path to save the csv file, default is \'/tmp/pytorch_analyse.csv\'.\n- The class_args (optional) is the args to init the class in python file, default is empty.\n\nFor example `python pytorch_analyser.py tmp/pytorch_analysis_test.py ResNet218 1,3,224,224`\n""""""\n\n\nif __name__==""__main__"":\n    parser=argparse.ArgumentParser()\n    parser.add_argument(\'path\',help=\'python file location, recommend absolute path\',type=str)\n    parser.add_argument(\'name\',help=\'the class name or instance name in your python file\',type=str)\n    parser.add_argument(\'shape\',help=\'input shape of the network(split by comma `,`), image shape should be: batch,c,h,w\',type=str)\n    parser.add_argument(\'--out\',help=\'path to save the csv file\',default=\'/tmp/pytorch_analyse.csv\',type=str)\n    parser.add_argument(\'--class_args\',help=\'args to init the class in python file\',default=\'\',type=str)\n\n    args=parser.parse_args()\n    path,filename=os.path.split(args.path)\n    filename=os.path.splitext(filename)[0]\n    sys.path.insert(0,path)\n    print(path)\n    print(\'from %s import %s as Net\'%(filename,args.name))\n    exec(\'from %s import %s as Net\'%(filename,args.name))\n    if isinstance(Net, nn.Module):\n        net=Net\n    elif issubclass(Net,nn.Module):\n        net=Net(*args.class_args.split())\n    else:\n        assert(""Error, The Net is not a instance of nn.Module or subclass of nn.Module"")\n    shape = [int(i) for i in args.shape.split(\',\')]\n    x = Variable(torch.rand(shape))\n    blob_dict, layers = analyse(net, x)\n    save_csv(layers, args.out)\n\n\n'"
pytorch_to_caffe.py,15,"b'import torch\nimport torch.nn as nn\nimport traceback\nfrom Caffe import caffe_net\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\nfrom Caffe import layer_param\nfrom torch.nn.modules.utils import _pair\nimport numpy as np\nimport inspect\n\n""""""\nHow to support a new layer type:\n layer_name=log.add_layer(layer_type_name)\n top_blobs=log.add_blobs(<output of that layer>)\n layer=caffe_net.Layer_param(xxx)\n <set layer parameters>\n [<layer.add_data(*datas)>]\n log.cnet.add_layer(layer)\n \nPlease MUTE the inplace operations to avoid not find in graph\n""""""\n\n\nNET_INITTED=False\nWARNING_STRINGS=\'\'\nRP_TRANSFERRING_FLAG=False  # this flag prevents transferring Rp function in Rp function.\n\nclass TransLog(object):\n\n    def __init__(self):\n        """"""\n        doing init() with inputs Variable before using it\n        """"""\n        self.layers={}\n        self._blobs={}\n        self._blobs_data=[]\n        self.cnet=caffe_net.Caffemodel(\'\')\n        self.debug=False\n        self.pytorch_layer_name=None\n\n    def init(self,inputs):\n        """"""\n        :param inputs: is a list of input variables\n        """"""\n        self.add_blobs(inputs)\n\n    def add_layer(self,name=\'layer\'):\n        name=\'noname_\'+name\n        if name in self.layers:\n            return self.layers[name]\n        if self.pytorch_layer_name:\n            pytorch_name=self.pytorch_layer_name.replace(\'.\',\'_\')\n            name=pytorch_name\n            cnt=1\n            while name in self.layers:\n                name=\'{}_sub{}\'.format(pytorch_name,cnt)\n                cnt+=1\n            self.pytorch_layer_name=None\n        else:\n            name=\'{}{}\'.format(name,len(self.layers))\n        self.layers[name]=name\n        if self.debug:\n            print(""{} was added to layers"".format(self.layers[name]))\n        return self.layers[name]\n\n    def add_blobs(self, blobs,name=\'blob\',with_num=True):\n        rst=[]\n        for blob in blobs:\n            self._blobs_data.append(blob) # to block the memory address be rewrited\n            blob_id=int(id(blob))\n            if with_num:\n                rst.append(\'{}{}\'.format(name,len(self._blobs)))\n            else:\n                rst.append(\'{}\'.format(name))\n            if self.debug:\n                print(""{}:{} was added to blobs"".format(blob_id,rst[-1]))\n            print(\'Add blob {} : {}\'.format(rst[-1].center(21),blob.size()))\n            self._blobs[blob_id]=rst[-1]\n        return rst\n\n    def get_blobs(self, var):\n        var=id(var)\n        if self.debug:\n            print(""{}:{} getting"".format(var, self._blobs[var]))\n        try:\n            return self._blobs[var]\n        except:\n            print(""===\\nWARNING: CANNOT FOUND blob at layer {}, this may cause a NoneType Error. ""\n                  ""This may caused by the previous operation which produce the blob(tensor) is not implemented in nn_tools. ""\n                  ""You can issue this at https://github.com/hahnyuan/nn_tools/issues. \\n==="".format(self.pytorch_layer_name))\n            return None\n\n    def reuse_blob(self,old_tensor,new_tensor):\n        # for in-place operation or data-free operations such as contiguous\n        blob_name=self._blobs[id(old_tensor)]\n        self._blobs[id(new_tensor)]=blob_name\n\nlog=TransLog()\n\nlayer_names={}\n\nclass Rp(object):\n    def __init__(self,raw,replace,**kwargs):\n        # replace the raw function to replace function\n        self.obj=replace\n        self.raw=raw\n\n    def __call__(self,*args,**kwargs):\n        global RP_TRANSFERRING_FLAG\n        if RP_TRANSFERRING_FLAG:\n            return self.raw(*args,**kwargs)\n        RP_TRANSFERRING_FLAG=True\n        if not NET_INITTED:\n            return self.raw(*args,**kwargs)\n        for stack in traceback.walk_stack(None):\n            if \'self\' in stack[0].f_locals:\n                layer=stack[0].f_locals[\'self\']\n                if layer in layer_names:\n                    log.pytorch_layer_name=layer_names[layer]\n                    print(""Processing Layer: ""+layer_names[layer])\n                    break\n        out=self.obj(self.raw,*args,**kwargs)\n        RP_TRANSFERRING_FLAG=False\n        # if isinstance(out,Variable):\n        #     out=[out]\n        return out\n\n# ----- for torch.nn.functional operations -----\ndef _conv2d(raw,input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1):\n    x=raw(input,weight,bias,stride,padding,dilation,groups)\n    name=log.add_layer(name=\'conv\')\n    log.add_blobs([x],name=\'conv_blob\')\n    layer=caffe_net.Layer_param(name=name, type=\'Convolution\',\n                                bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n    layer.conv_param(x.size()[1],weight.size()[2:],stride=_pair(stride),\n                     pad=_pair(padding),dilation=_pair(dilation),bias_term=bias is not None,groups=groups)\n    if bias is not None:\n        layer.add_data(weight.cpu().data.numpy(),bias.cpu().data.numpy())\n    else:\n        layer.param.convolution_param.bias_term=False\n        layer.add_data(weight.cpu().data.numpy())\n    log.cnet.add_layer(layer)\n    return x\n\ndef _conv_transpose2d(raw,input, weight, bias=None, stride=1, padding=0, output_padding=0, groups=1, dilation=1):\n    x=raw(input, weight, bias, stride, padding, output_padding, groups, dilation)\n    name=log.add_layer(name=\'conv_transpose\')\n    log.add_blobs([x],name=\'conv_transpose_blob\')\n    layer=caffe_net.Layer_param(name=name, type=\'Deconvolution\',\n                                bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n    layer.conv_param(x.size()[1],weight.size()[2:],stride=_pair(stride),\n                     pad=_pair(padding),dilation=_pair(dilation),bias_term=bias is not None)\n    if bias is not None:\n        layer.add_data(weight.cpu().data.numpy(),bias.cpu().data.numpy())\n    else:\n        layer.param.convolution_param.bias_term=False\n        layer.add_data(weight.cpu().data.numpy())\n    log.cnet.add_layer(layer)\n    return x\n\ndef _interpolate(raw,input, size=None, scale_factor=None, mode=\'nearest\', align_corners=None):\n    raise NotImplementedError(""The interpolate upsampling in pytorch cannot be implimented in caffe by This function, I\'ll try later. "")\n\n    if mode==\'bilinear\':\n        x=raw(input, size, scale_factor, mode, align_corners)\n    else:\n        raise NotImplementedError(""The interpolate upsampling only support bilinear in Caffe"")\n    name=log.add_layer(name=\'interpolate\')\n    log.add_blobs([x],name=\'interpolate_blob\')\n    layer=caffe_net.Layer_param(name=name, type=\'Deconvolution\',\n                                bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n\n    def bilinear_weight(shape):\n        weight = np.zeros(np.prod(shape), dtype=\'float32\')\n        f = np.ceil(shape[3] / 2.)\n        c = (2 * f - 1 - f % 2) / (2. * f)\n        for i in range(np.prod(shape)):\n            x = i % shape[3]\n            y = (i / shape[3]) % shape[2]\n            weight[i] = (1 - abs(x / f - c)) * (1 - abs(y / f - c))\n        return weight.reshape(shape)\n    kernel_size=2*scale_factor-scale_factor%2\n    stride=scale_factor\n    pad=int(np.ceil((scale_factor-1)/2))\n    channels=x.size(1)\n    weight=bilinear_weight([channels,1,kernel_size,kernel_size])\n    layer.conv_param(channels,kernel_size,stride=stride,pad=pad,bias_term=False,groups=channels)\n    layer.add_data(weight)\n    log.cnet.add_layer(layer)\n    return x\n\ndef _linear(raw,input, weight, bias=None):\n    x=raw(input,weight,bias)\n    layer_name=log.add_layer(name=\'fc\')\n    top_blobs=log.add_blobs([x],name=\'fc_blob\')\n    layer=caffe_net.Layer_param(name=layer_name, type=\'InnerProduct\',\n                                bottom=[log.get_blobs(input)], top=top_blobs)\n    layer.fc_param(x.size()[1],has_bias=bias is not None)\n    if bias is not None:\n        layer.add_data(weight.cpu().data.numpy(),bias.cpu().data.numpy())\n    else:\n        layer.add_data(weight.cpu().data.numpy())\n    log.cnet.add_layer(layer)\n    return x\n\ndef _pool(type,raw,input,x,kernel_size,stride,padding,ceil_mode):\n    # TODO dilation,ceil_mode,return indices\n    layer_name = log.add_layer(name=\'{}_pool\'.format(type))\n    top_blobs = log.add_blobs([x], name=\'{}_pool_blob\'.format(type))\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Pooling\',\n                                  bottom=[log.get_blobs(input)], top=top_blobs)\n    # TODO w,h different kernel, stride and padding\n    # processing ceil mode\n    layer.pool_param(kernel_size=kernel_size, stride=kernel_size if stride is None else stride,\n                     pad=padding, type=type.upper())\n    log.cnet.add_layer(layer)\n    if ceil_mode==False and stride is not None:\n        oheight = (input.size()[2] - _pair(kernel_size)[0] + 2 * _pair(padding)[0]) % (_pair(stride)[0])\n        owidth = (input.size()[3] - _pair(kernel_size)[1] + 2 * _pair(padding)[1]) % (_pair(stride)[1])\n        if oheight!=0 or owidth!=0:\n            caffe_out=raw(input, kernel_size, stride, padding, ceil_mode=True)\n            warn=""WARN: the output shape miss match at {}: "" \\\n                  ""input {} output---Pytorch:{}---Caffe:{}\\n"" \\\n                  ""This is caused by the different implementation that ceil mode in caffe and the floor mode in pytorch"" \\\n                 "".\\n"".format(layer_name,input.size(),x.size(),caffe_out.size())+ \\\n                ""WARN: Adding the clip layer `{}` `{}` in caffe prototxt to solve the shape mismatch error in caffe. "" \\\n                ""You can remove them manually if you don\'t need them.\\n"".format(layer_name + \'_slice1\',layer_name + \'_slice2\')\n            print(warn)\n            global WARNING_STRINGS\n            WARNING_STRINGS+=warn\n            top_name=top_blobs[0]\n            tmp1_name=top_name+\'_tmp1\'\n            drop1_name=top_name+\'_drop1\'\n            tmp2_name=top_name+\'_tmp2\'\n            drop2_name=top_name+\'_drop2\'\n            log.cnet.net.layer[-1].top[0]=tmp1_name\n\n            slice1_layer=caffe_net.Layer_param(name=layer_name+\'_slice1\',type=\'Slice\',bottom=[tmp1_name],top=[tmp2_name,drop1_name])\n            slice1_layer.slice_param(-1,[x.size()[-1]])\n            log.cnet.add_layer(slice1_layer)\n            slice2_layer = caffe_net.Layer_param(name=layer_name + \'_slice2\', type=\'Slice\', bottom=[tmp2_name], top=top_blobs+[drop2_name])\n            slice2_layer.slice_param(-2, [x.size()[-2]])\n            log.cnet.add_layer(slice2_layer)\n\ndef _max_pool2d(raw,input, kernel_size, stride=None, padding=0, dilation=1,\n               ceil_mode=False, return_indices=False):\n    x = raw(input, kernel_size, stride, padding, dilation,ceil_mode, return_indices)\n    _pool(\'max\',raw,input, x, kernel_size, stride, padding,ceil_mode)\n    return x\n\ndef _avg_pool2d(raw,input, kernel_size, stride = None, padding = 0, ceil_mode = False, count_include_pad = True):\n    x = raw(input, kernel_size, stride, padding, ceil_mode, count_include_pad)\n    _pool(\'ave\',raw,input, x, kernel_size, stride, padding,ceil_mode)\n    return x\n\ndef _dropout(raw,input,p=0.5, training=False, inplace=False):\n    x=raw(input,p, training, False)\n    bottom_blobs=[log.get_blobs(input)]\n    layer_name=log.add_layer(name=\'dropout\')\n    top_blobs=log.add_blobs([x],name=bottom_blobs[0],with_num=False)\n    layer=caffe_net.Layer_param(name=layer_name,type=\'Dropout\',\n                                bottom=bottom_blobs,top=top_blobs)\n    layer.param.dropout_param.dropout_ratio = p\n    layer.param.include.extend([caffe_net.pb.NetStateRule(phase=0)]) # 1 for test, 0 for train\n    log.cnet.add_layer(layer)\n    return x\n\ndef _threshold(raw,input, threshold, value, inplace=False):\n    # for threshold or relu\n    if threshold==0 and value==0:\n        x = raw(input,threshold, value, False)\n        name = log.add_layer(name=\'relu\')\n        log.add_blobs([x], name=\'relu_blob\')\n        layer = caffe_net.Layer_param(name=name, type=\'ReLU\',\n                                      bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n        log.cnet.add_layer(layer)\n        return x\n    if value!=0:\n        raise NotImplemented(""value !=0 not implemented in caffe"")\n    x=raw(input,input, threshold, value, False)\n    bottom_blobs=[log.get_blobs(input)]\n    layer_name=log.add_layer(name=\'threshold\')\n    top_blobs=log.add_blobs([x],name=\'threshold_blob\')\n    layer=caffe_net.Layer_param(name=layer_name,type=\'Threshold\',\n                                bottom=bottom_blobs,top=top_blobs)\n    layer.param.threshold_param.threshold = threshold\n    log.cnet.add_layer(layer)\n    return x\n\ndef _relu(raw, input, inplace=False):\n    # for threshold or prelu\n    x = raw(input, False)\n    name = log.add_layer(name=\'relu\')\n    log.add_blobs([x], name=\'relu_blob\')\n    layer = caffe_net.Layer_param(name=name, type=\'ReLU\',\n                                  bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n    log.cnet.add_layer(layer)\n    return x\n\ndef _prelu(raw, input, weight):\n    # for threshold or prelu\n    x = raw(input, weight)\n    name = log.add_layer(name=\'prelu\')\n    log.add_blobs([x], name=\'prelu_blob\')\n    layer = caffe_net.Layer_param(name=name, type=\'PReLU\',\n                                  bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n    if weight.size()[0]==1:\n        layer.param.prelu_param.channel_shared=True\n        layer.add_data(weight.cpu().data.numpy()[0])\n    else:\n        layer.add_data(weight.cpu().data.numpy())\n    log.cnet.add_layer(layer)\n    return x\n\ndef _leaky_relu(raw, input, negative_slope=0.01, inplace=False):\n    x = raw(input, negative_slope)\n    name = log.add_layer(name=\'leaky_relu\')\n    log.add_blobs([x], name=\'leaky_relu_blob\')\n    layer = caffe_net.Layer_param(name=name, type=\'ReLU\',\n                                  bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n    layer.param.relu_param.negative_slope=negative_slope\n    log.cnet.add_layer(layer)\n    return x\n\ndef _tanh(raw, input):\n    # for tanh activation\n    x = raw(input)\n    name = log.add_layer(name=\'tanh\')\n    log.add_blobs([x], name=\'tanh_blob\')\n    layer = caffe_net.Layer_param(name=name, type=\'TanH\',\n                                  bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n    log.cnet.add_layer(layer)\n    return x\n\ndef _softmax(raw, input, dim=None, _stacklevel=3):\n    # for F.softmax\n    x=raw(input, dim=dim)\n    if dim is None:\n        dim=F._get_softmax_dim(\'softmax\', input.dim(), _stacklevel)\n    name = log.add_layer(name=\'softmax\')\n    log.add_blobs([x], name=\'softmax_blob\')\n    layer = caffe_net.Layer_param(name=name, type=\'Softmax\',\n                                  bottom=[log.get_blobs(input)], top=[log.get_blobs(x)])\n    layer.param.softmax_param.axis=dim\n    log.cnet.add_layer(layer)\n    return x\n\ndef _batch_norm(raw,input, running_mean, running_var, weight=None, bias=None,\n               training=False, momentum=0.1, eps=1e-5):\n    # because the runing_mean and runing_var will be changed after the _batch_norm operation, we first save the parameters\n\n    x = raw(input, running_mean, running_var, weight, bias,\n               training, momentum, eps)\n    bottom_blobs = [log.get_blobs(input)]\n    layer_name1 = log.add_layer(name=\'batch_norm\')\n    top_blobs = log.add_blobs([x], name=\'batch_norm_blob\')\n    layer1 = caffe_net.Layer_param(name=layer_name1, type=\'BatchNorm\',\n                                   bottom=bottom_blobs, top=top_blobs)\n    if running_mean is None or running_var is None:\n        # not use global_stats, normalization is performed over the current mini-batch\n        layer1.batch_norm_param(use_global_stats=0,eps=eps)\n    else:\n        layer1.batch_norm_param(use_global_stats=1, eps=eps)\n        running_mean_clone = running_mean.clone()\n        running_var_clone = running_var.clone()\n        layer1.add_data(running_mean_clone.cpu().numpy(), running_var_clone.cpu().numpy(), np.array([1.0]))\n    log.cnet.add_layer(layer1)\n    if weight is not None and bias is not None:\n        layer_name2 = log.add_layer(name=\'bn_scale\')\n        layer2 = caffe_net.Layer_param(name=layer_name2, type=\'Scale\',\n                                       bottom=top_blobs, top=top_blobs)\n        layer2.param.scale_param.bias_term = True\n        layer2.add_data(weight.cpu().data.numpy(), bias.cpu().data.numpy())\n        log.cnet.add_layer(layer2)\n    return x\n\ndef _instance_norm(raw, input, running_mean=None, running_var=None, weight=None,\n                  bias=None, use_input_stats=True, momentum=0.1, eps=1e-5):\n    # TODO: the batch size!=1 view operations\n    print(""WARNING: The Instance Normalization transfers to Caffe using BatchNorm, so the batch size should be 1"")\n    if running_var is not None or weight is not None:\n        # TODO: the affine=True or track_running_stats=True case\n        raise NotImplementedError(""not implement the affine=True or track_running_stats=True case InstanceNorm"")\n    x= torch.batch_norm(\n        input, weight, bias, running_mean, running_var,\n        use_input_stats, momentum, eps,torch.backends.cudnn.enabled)\n    bottom_blobs = [log.get_blobs(input)]\n    layer_name1 = log.add_layer(name=\'instance_norm\')\n    top_blobs = log.add_blobs([x], name=\'instance_norm_blob\')\n    layer1 = caffe_net.Layer_param(name=layer_name1, type=\'BatchNorm\',\n                                   bottom=bottom_blobs, top=top_blobs)\n    if running_mean is None or running_var is None:\n        # not use global_stats, normalization is performed over the current mini-batch\n        layer1.batch_norm_param(use_global_stats=0,eps=eps)\n        running_mean=torch.zeros(input.size()[1])\n        running_var=torch.ones(input.size()[1])\n    else:\n        layer1.batch_norm_param(use_global_stats=1, eps=eps)\n    running_mean_clone = running_mean.clone()\n    running_var_clone = running_var.clone()\n    layer1.add_data(running_mean_clone.cpu().numpy(), running_var_clone.cpu().numpy(), np.array([1.0]))\n    log.cnet.add_layer(layer1)\n    if weight is not None and bias is not None:\n        layer_name2 = log.add_layer(name=\'bn_scale\')\n        layer2 = caffe_net.Layer_param(name=layer_name2, type=\'Scale\',\n                                       bottom=top_blobs, top=top_blobs)\n        layer2.param.scale_param.bias_term = True\n        layer2.add_data(weight.cpu().data.numpy(), bias.cpu().data.numpy())\n        log.cnet.add_layer(layer2)\n    return x\n\n\ndef op_placeholder(raw, *args, **kwargs):\n    output = raw(*args, **kwargs)\n    bottom_blobs=[]\n    warning_string=""======\\nCRITICAL WARN: layer {} cannot be transfer, "" \\\n          ""because it cannot be implemented with original version of Caffe or it just is not implemented in nn_tools! \\n"" \\\n          ""Nn_tools place a placeholder with Python type layer in Caffe. \\n======"".format(log.pytorch_layer_name)\n    # print(warning_string)\n    global WARNING_STRINGS\n    WARNING_STRINGS+=warning_string\n    for arg in args:\n        if isinstance(arg,torch.Tensor):\n            try:\n                bottom_blobs.append(log.get_blobs(arg))\n            except:\n                print(""WARN: at op_placehoder, tensor {} is not in the graph"".format(arg))\n    output_blobs=[]\n    if isinstance(output,tuple):\n        for out in output:\n            output_blobs.append(out)\n    else:\n        output_blobs.append(output)\n    top_blobs = log.add_blobs(output_blobs, name=\'op_placehoder_blob\')\n    layer_name = log.add_layer(name=\'op_placehoder\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Python\',\n                                   bottom=bottom_blobs, top=top_blobs)\n    log.cnet.add_layer(layer)\n    return output\n\nF_supported=[\n    \'conv2d\',\n    \'linear\',\n    \'relu\',\n    \'leaky_relu\',\n    \'max_pool2d\',\n    \'avg_pool2d\',\n    \'dropout\',\n    \'threshold\',\n    \'prelu\',\n    \'batch_norm\',\n    \'instance_norm\',\n    \'softmax\',\n    \'conv_transpose2d\',\n    #\'interpolate\',  # TODO, interpolate function cannot transfer correctly now\n\n]\n\nfor op_name in F.__dict__:\n    if op_name in F_supported:\n        raw_func=getattr(F, op_name)\n        transfer_func=globals()[\'_\'+op_name]\n        op_wrapper=Rp(raw_func,transfer_func)\n        setattr(F, op_name, op_wrapper)\n    else:\n        if op_name[0]==\'_\' or op_name in [\'division\',\'warnings\',\'math\',\'torch\',\'utils\',\'vision\',\'Col2Im\',\'Im2Col\',\'grad\',\'weak_script\',\'List\']:\n            continue\n        setattr(F,op_name,Rp(getattr(F,op_name),op_placeholder))\n\n# ----- for torch operations -----\ndef torch_max(raw,*args):\n    assert NotImplementedError\n    x=raw(*args)\n    if len(args)==1:\n        # TODO max in one tensor\n        assert NotImplementedError\n    else:\n        if isinstance(x,tuple):\n            x=x[0]\n        bottom_blobs=[]\n        for arg in args:\n            bottom_blobs.append(log.get_blobs(arg))\n        layer_name=log.add_layer(name=\'max\')\n        top_blobs=log.add_blobs([x],name=\'max_blob\')\n        layer=caffe_net.Layer_param(name=layer_name,type=\'Eltwise\',\n                                    bottom=bottom_blobs,top=top_blobs)\n        layer.param.eltwise_param.operation =2\n        log.cnet.add_layer(layer)\n    return x\n\ndef torch_cat(raw,inputs, dimension=0):\n    x=raw(inputs, dimension)\n    bottom_blobs=[]\n    for input in inputs:\n        bottom_blobs.append(log.get_blobs(input))\n    layer_name=log.add_layer(name=\'cat\')\n    top_blobs=log.add_blobs([x],name=\'cat_blob\')\n    layer=caffe_net.Layer_param(name=layer_name,type=\'Concat\',\n                                bottom=bottom_blobs,top=top_blobs)\n    layer.param.concat_param.axis =dimension\n    log.cnet.add_layer(layer)\n    return x\n\ndef torch_split(raw,tensor, split_size, dim=0):\n    # split in pytorch is slice in caffe\n    x=raw(tensor, split_size, dim)\n    layer_name=log.add_layer(\'split\')\n    top_blobs=log.add_blobs(x,name=\'split_blob\')\n    layer=caffe_net.Layer_param(name=layer_name, type=\'Slice\',\n                                bottom=[log.get_blobs(tensor)], top=top_blobs)\n    slice_num=int(np.floor(tensor.size()[dim]/split_size))\n    slice_param=caffe_net.pb.SliceParameter(axis=dim,slice_point=[split_size*i for i in range(1,slice_num)])\n    layer.param.slice_param.CopyFrom(slice_param)\n    log.cnet.add_layer(layer)\n    return x\n\ndef torch_add(raw,*args):\n    x = raw(*args)\n    if not NET_INITTED:\n        return x\n    layer_name = log.add_layer(name=\'add\')\n    top_blobs = log.add_blobs([x], name=\'add_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Eltwise\',\n                                  bottom=[log.get_blobs(input), log.get_blobs(args[0])], top=top_blobs)\n    layer.param.eltwise_param.operation = 1  # sum is 1\n    log.cnet.add_layer(layer)\n    return x\n\ndef torch_sub(raw,*args):\n    return ___sub__(*args)\n\ndef torch_mul(raw,*args):\n    return ___mul__(*args)\n\ndef torch_div(raw,*args):\n    return ___div__(*args)\n\ndef torch_pow(raw,*args):\n    x = raw(*args)\n    if not NET_INITTED:\n        return x\n    if not isinstance(args[0], int):\n        raise NotImplementedError(\'power only support int now in nn_tools\')\n    layer_name = log.add_layer(name=\'power\')\n    top_blobs = log.add_blobs([x], name=\'power_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Power\',\n                                  bottom=[log.get_blobs(input)], top=top_blobs)\n    layer.param.power_param.power = args[0]  # product is 1\n    log.cnet.add_layer(layer)\n    return x\n\ndef torch_sqrt(raw,*args):\n    x = raw(*args)\n    if not NET_INITTED:\n        return x\n    if not isinstance(args[0], int):\n        raise NotImplementedError(\'sqrt only support int now in nn_tools\')\n    layer_name = log.add_layer(name=\'sqrt\')\n    top_blobs = log.add_blobs([x], name=\'sqrt_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Power\',\n                                  bottom=[log.get_blobs(input)], top=top_blobs)\n    layer.param.power_param.power = 0.5\n    log.cnet.add_layer(layer)\n    return x\n\ntorch_op_supported=[\n    \'split\',\n    \'max\',\n    \'cat\',\n    # \'add\',\n    # \'sub\',\n    # \'mul\',\n    # \'div\',\n    # \'pow\',\n    # \'sqrt\',\n]\n\nfor op_name in torch_op_supported:\n    raw_op = getattr(torch, op_name)\n    op_wrapper=Rp(raw_op,globals()[\'torch_\'+op_name])\n    setattr(torch, op_name, op_wrapper)\n\n# ----- for Variable/torch.Tensor operations --------\n\ndef _view(input, *args):\n    x=raw_tensor_magic_op[\'view\'](input, *args)\n    if not NET_INITTED:\n        return x\n    layer_name=log.add_layer(name=\'view\')\n    top_blobs=log.add_blobs([x],name=\'view_blob\')\n    layer=caffe_net.Layer_param(name=layer_name, type=\'Reshape\',\n                                bottom=[log.get_blobs(input)], top=top_blobs)\n    # TODO: reshpae added to nn_tools layer\n    dims=list(args)\n    dims[0]=0 # the first dim should be batch_size\n    layer.param.reshape_param.shape.CopyFrom(caffe_net.pb.BlobShape(dim=dims))\n    log.cnet.add_layer(layer)\n    return x\n\ndef _mean(input, *args,**kwargs):\n    x=raw_tensor_magic_op[\'mean\'](input, *args, **kwargs)\n    if not NET_INITTED:\n        return x\n    layer_name=log.add_layer(name=\'mean\')\n    top_blobs=log.add_blobs([x],name=\'mean_blob\')\n    layer=caffe_net.Layer_param(name=layer_name, type=\'Reduction\',\n                                bottom=[log.get_blobs(input)], top=top_blobs)\n    if len(args)==1:\n        dim=args[0]\n    elif \'dim\' in kwargs:\n        dim=kwargs[\'dim\']\n    else:\n        raise NotImplementedError(\'mean operation must specify a dim\')\n    if dim!=len(input.size())-1:\n        raise NotImplementedError(\'mean in Caffe Reduction Layer: only reduction along ALL ""tail"" axes is supported\')\n    if kwargs.get(\'keepdim\'):\n        raise NotImplementedError(\'mean operation must keep_dim=False\')\n    layer.param.reduction_param.operation=4\n    layer.param.reduction_param.axis=dim\n    log.cnet.add_layer(layer)\n    return x\n\ndef _sum(input, *args,**kwargs):\n    x=raw_tensor_magic_op[\'sum\'](input, *args, **kwargs)\n    if not NET_INITTED:\n        return x\n    layer_name=log.add_layer(name=\'sum\')\n    top_blobs=log.add_blobs([x],name=\'sum_blob\')\n    layer=caffe_net.Layer_param(name=layer_name, type=\'Reduction\',\n                                bottom=[log.get_blobs(input)], top=top_blobs)\n    if len(args)==1:\n        dim=args[0]\n    elif \'dim\' in kwargs:\n        dim=kwargs[\'dim\']\n    else:\n        raise NotImplementedError(\'sum operation must specify a dim\')\n    if dim!=len(input.size())-1:\n        raise NotImplementedError(\'sum in Caffe Reduction Layer: only reduction along ALL ""tail"" axes is supported\')\n    if kwargs.get(\'keepdim\'):\n        raise NotImplementedError(\'sum operation must keep_dim=False\')\n    layer.param.reduction_param.operation=1 # operation 1 for sum\n    layer.param.reduction_param.axis=dim\n    log.cnet.add_layer(layer)\n    return x\n\ndef _contiguous(input,*args):\n    x=raw_tensor_magic_op[\'contiguous\'](input,*args)\n    log.reuse_blob(input,x)\n    return x\n\ndef _add(input,*args):\n    return ___add__(input, *args)\n\ndef _sub(input,*args):\n    return ___sub__(input, *args)\n\ndef _mul(input,*args):\n    return ___mul__(input, *args)\n\ndef _div(input,*args):\n    return ___div__(input, *args)\n\ndef _pow(input,*args):\n    return ___pow__(input, *args)\n\ndef _sqrt(input, *args):\n    x = raw_tensor_magic_op[\'sqrt\'](input, *args)\n    if not NET_INITTED:\n        return x\n    layer_name = log.add_layer(name=\'sqrt\')\n    top_blobs = log.add_blobs([x], name=\'sqrt_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Power\',\n                                  bottom=[log.get_blobs(input)], top=top_blobs)\n    layer.param.power_param.power = 0.5\n    log.cnet.add_layer(layer)\n    return x\n\ndef ___add__(input, *args):\n    x = raw_tensor_magic_op[\'__add__\'](input, *args)\n    if not NET_INITTED:\n        return x\n    layer_name = log.add_layer(name=\'add\')\n    top_blobs = log.add_blobs([x], name=\'add_blob\')\n    if not isinstance(args[0],torch.Tensor):\n        layer = caffe_net.Layer_param(name=layer_name, type=\'Power\',\n                                      bottom=[log.get_blobs(input)], top=top_blobs)\n        layer.param.power_param.shift = args[0]\n    else:\n        layer = caffe_net.Layer_param(name=layer_name, type=\'Eltwise\',\n                                      bottom=[log.get_blobs(input), log.get_blobs(args[0])], top=top_blobs)\n        layer.param.eltwise_param.operation = 1 # sum is 1\n    log.cnet.add_layer(layer)\n    return x\n\ndef ___iadd__(input, *args):\n    x = raw_tensor_magic_op[\'__iadd__\'](input, *args)\n    if not NET_INITTED:\n        return x\n    x=x.clone()\n    layer_name = log.add_layer(name=\'add\')\n    top_blobs = log.add_blobs([x], name=\'add_blob\')\n    if not isinstance(args[0], torch.Tensor):\n        layer = caffe_net.Layer_param(name=layer_name, type=\'Power\',\n                                      bottom=[log.get_blobs(input)], top=top_blobs)\n        layer.param.power_param.shift = args[0]\n    else:\n        layer = caffe_net.Layer_param(name=layer_name, type=\'Eltwise\',\n                                      bottom=[log.get_blobs(input), log.get_blobs(args[0])], top=top_blobs)\n        layer.param.eltwise_param.operation = 1  # sum is 1\n    return x\n\ndef ___sub__(input, *args):\n    x = raw_tensor_magic_op[\'__sub__\'](input, *args)\n    if not NET_INITTED:\n        return x\n    layer_name = log.add_layer(name=\'sub\')\n    top_blobs = log.add_blobs([x], name=\'sub_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Eltwise\',\n                                  bottom=[log.get_blobs(input), log.get_blobs(args[0])], top=top_blobs)\n    layer.param.eltwise_param.operation = 1 # sum is 1\n    layer.param.eltwise_param.coeff.extend([1.,-1.])\n    log.cnet.add_layer(layer)\n    return x\n\ndef ___isub__(input, *args):\n    x = raw_tensor_magic_op[\'__isub__\'](input, *args)\n    if not NET_INITTED:\n        return x\n    x=x.clone()\n    layer_name = log.add_layer(name=\'sub\')\n    top_blobs = log.add_blobs([x], name=\'sub_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Eltwise\',\n                                  bottom=[log.get_blobs(input), log.get_blobs(args[0])], top=top_blobs)\n    layer.param.eltwise_param.operation = 1 # sum is 1\n    log.cnet.add_layer(layer)\n    return x\n\ndef ___mul__(input, *args):\n    x = raw_tensor_magic_op[\'__mul__\'](input, *args)\n    if not NET_INITTED:\n        return x\n    layer_name = log.add_layer(name=\'mul\')\n    top_blobs = log.add_blobs([x], name=\'mul_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Eltwise\',\n                                  bottom=[log.get_blobs(input), log.get_blobs(args[0])], top=top_blobs)\n    layer.param.eltwise_param.operation = 0  # product is 1\n    log.cnet.add_layer(layer)\n    return x\n\ndef ___imul__(input, *args):\n    x = raw_tensor_magic_op[\'__imul__\'](input, *args)\n    if not NET_INITTED:\n        return x\n    x = x.clone()\n    layer_name = log.add_layer(name=\'mul\')\n    top_blobs = log.add_blobs([x], name=\'mul_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Eltwise\',\n                                  bottom=[log.get_blobs(input), log.get_blobs(args[0])], top=top_blobs)\n    layer.param.eltwise_param.operation = 0  # product is 1\n    layer.param.eltwise_param.coeff.extend([1., -1.])\n    log.cnet.add_layer(layer)\n    return x\n\ndef ___div__(input, *args):\n    x = raw_tensor_magic_op[\'__div__\'](input, *args)\n    if not NET_INITTED:\n        return x\n    if not isinstance(args[0],torch.Tensor):\n        layer_name = log.add_layer(name=\'div\')\n        top_blobs = log.add_blobs([x], name=\'div_blob\')\n        layer = caffe_net.Layer_param(name=layer_name, type=\'Power\',\n                                      bottom=[log.get_blobs(input)], top=top_blobs)\n        layer.param.power_param.scale = 1/args[0]\n        log.cnet.add_layer(layer)\n    else:\n        pre_layer_name=log.add_layer(name=\'pre_div\')\n        pre_div_blobs = log.add_blobs([x], name=\'pre_div_blob\')\n        pre_layer = caffe_net.Layer_param(name=pre_layer_name, type=\'Power\',\n                                      bottom=[log.get_blobs(input)], top=pre_div_blobs)\n        pre_layer.param.power_param.power=-1\n        pre_layer.param.power_param.shift = 1e-6\n        log.cnet.add_layer(pre_layer)\n        layer_name = log.add_layer(name=\'div\')\n        top_blobs = log.add_blobs([x], name=\'div_blob\')\n        layer = caffe_net.Layer_param(name=layer_name, type=\'Eltwise\',\n                                      bottom=[pre_div_blobs[0], log.get_blobs(args[0])], top=top_blobs)\n        layer.param.eltwise_param.operation = 0  # product is 1\n        log.cnet.add_layer(layer)\n    return x\n\ndef ___truediv__(input, *args):return ___div__(input, *args)\n\ndef ___pow__(input, *args):\n    x = raw_tensor_magic_op[\'__pow__\'](input, *args)\n    if not NET_INITTED:\n        return x\n    if not isinstance(args[0],int):\n        raise NotImplementedError(\'power only support int now in nn_tools\')\n    layer_name = log.add_layer(name=\'power\')\n    top_blobs = log.add_blobs([x], name=\'power_blob\')\n    layer = caffe_net.Layer_param(name=layer_name, type=\'Power\',\n                                  bottom=[log.get_blobs(input)], top=top_blobs)\n    layer.param.power_param.power = args[0]  # product is 1\n    log.cnet.add_layer(layer)\n    return x\n\n# TODO: other types of the view function\n\ntensor_op_supported=[]\n\ntensor_magic_op_supported=[\n    \'view\',\n    \'mean\',\n    \'add\',\n    \'sub\',\n    \'mul\',\n    \'div\',\n    \'pow\',\n    \'sqrt\',\n    \'sum\',\n    \'contiguous\',\n    \'__add__\',\n    \'__iadd__\',\n    \'__sub__\',\n    \'__isub__\',\n    \'__mul__\',\n    \'__imul__\',\n    \'__div__\',\n    \'__truediv__\',\n    \'__pow__\',\n]\nraw_tensor_magic_op={}\nif hasattr(Variable,\'__add__\'):\n    tensor_target=Variable\nelse:\n    # for new version >=0.4.0\n    tensor_target=torch.Tensor\n\nfor op_name in tensor_magic_op_supported:\n    raw_op=getattr(tensor_target,op_name)\n    raw_tensor_magic_op[op_name]=raw_op\n    setattr(tensor_target,op_name,globals()[\'_\'+op_name])\n\nfor op_name in tensor_op_supported:\n    raw_op = getattr(tensor_target, op_name)\n    op_wrapper = Rp(raw_op, globals()[\'_\' + op_name])\n    setattr(tensor_target, op_name, op_wrapper)\n\n\n\ndef trans_net(net,input_var,name=\'TransferedPytorchModel\'):\n    print(\'Starting Transform, This will take a while\')\n    log.init([input_var])\n    log.cnet.net.name=name\n    log.cnet.net.input.extend([log.get_blobs(input_var)])\n    log.cnet.net.input_dim.extend(input_var.size())\n    global NET_INITTED\n    NET_INITTED=True\n    for name,layer in net.named_modules():\n        layer_names[layer]=name\n    out = net.forward(input_var)\n    print(\'Transform Completed\')\n    print(WARNING_STRINGS)\n\ndef save_prototxt(save_name):\n    log.cnet.save_prototxt(save_name)\n\ndef save_caffemodel(save_name):\n    log.cnet.save(save_name)\n'"
Caffe/__init__.py,0,b''
Caffe/caffe_lmdb.py,0,"b""import lmdb\nfrom Caffe import caffe_pb2 as pb2\nimport numpy as np\n\nclass Read_Caffe_LMDB():\n    def __init__(self,path,dtype=np.uint8):\n\n        self.env=lmdb.open(path, readonly=True)\n        self.dtype=dtype\n        self.txn=self.env.begin()\n        self.cursor=self.txn.cursor()\n\n    @staticmethod\n    def to_numpy(value,dtype=np.uint8):\n        datum = pb2.Datum()\n        datum.ParseFromString(value)\n        flat_x = np.fromstring(datum.data, dtype=dtype)\n        data = flat_x.reshape(datum.channels, datum.height, datum.width)\n        label=flat_x = datum.label\n        return data,label\n\n    def iterator(self):\n        while True:\n            key,value=self.cursor.key(),self.cursor.value()\n            yield self.to_numpy(value,self.dtype)\n            if not self.cursor.next():\n                return\n\n    def __iter__(self):\n        self.cursor.first()\n        it = self.iterator()\n        return it\n\n    def __len__(self):\n        return int(self.env.stat()['entries'])\n"""
Caffe/caffe_net.py,0,"b'from __future__ import absolute_import\nfrom . import caffe_pb2 as pb\nimport google.protobuf.text_format as text_format\nimport numpy as np\nfrom .layer_param import Layer_param\n\nclass _Net(object):\n    def __init__(self):\n        self.net=pb.NetParameter()\n\n    def layer_index(self,layer_name):\n        # find a layer\'s index by name. if the layer was found, return the layer position in the net, else return -1.\n        for i, layer in enumerate(self.net.layer):\n            if layer.name == layer_name:\n                return i\n\n    def add_layer(self,layer_params,before=\'\',after=\'\'):\n        # find the before of after layer\'s position\n        index = -1\n        if after != \'\':\n            index = self.layer_index(after) + 1\n        if before != \'\':\n            index = self.layer_index(before)\n        new_layer = pb.LayerParameter()\n        new_layer.CopyFrom(layer_params.param)\n        #insert the layer into the layer protolist\n        if index != -1:\n            self.net.layer.add()\n            for i in range(len(self.net.layer) - 1, index, -1):\n                self.net.layer[i].CopyFrom(self.net.layer[i - 1])\n            self.net.layer[index].CopyFrom(new_layer)\n        else:\n            self.net.layer.extend([new_layer])\n\n    def remove_layer_by_name(self,layer_name):\n        for i,layer in enumerate(self.net.layer):\n            if layer.name == layer_name:\n                del self.net.layer[i]\n                return\n        raise(AttributeError, ""cannot found layer %s"" % str(layer_name))\n\n    def get_layer_by_name(self, layer_name):\n        # get the layer by layer_name\n        for layer in self.net.layer:\n            if layer.name == layer_name:\n                return layer\n        raise(AttributeError, ""cannot found layer %s"" % str(layer_name))\n\n    def save_prototxt(self,path):\n        prototxt=pb.NetParameter()\n        prototxt.CopyFrom(self.net)\n        for layer in prototxt.layer:\n            del layer.blobs[:]\n        with open(path,\'w\') as f:\n            f.write(text_format.MessageToString(prototxt))\n\n    def layer(self,layer_name):\n        return self.get_layer_by_name(layer_name)\n\n    def layers(self):\n        return list(self.net.layer)\n\n\n\nclass Prototxt(_Net):\n    def __init__(self,file_name=\'\'):\n        super(Prototxt,self).__init__()\n        self.file_name=file_name\n        if file_name!=\'\':\n            f = open(file_name,\'r\')\n            text_format.Parse(f.read(), self.net)\n            pass\n\n    def init_caffemodel(self,caffe_cmd_path=\'caffe\'):\n        """"""\n        :param caffe_cmd_path: The shell command of caffe, normally at <path-to-caffe>/build/tools/caffe\n        """"""\n        s=pb.SolverParameter()\n        s.train_net=self.file_name\n        s.max_iter=0\n        s.base_lr=1\n        s.solver_mode = pb.SolverParameter.CPU\n        s.snapshot_prefix=\'./nn\'\n        with open(\'/tmp/nn_tools_solver.prototxt\',\'w\') as f:\n            f.write(str(s))\n        import os\n        os.system(\'%s train --solver /tmp/nn_tools_solver.prototxt\'%caffe_cmd_path)\n\nclass Caffemodel(_Net):\n    def __init__(self, file_name=\'\'):\n        super(Caffemodel,self).__init__()\n        # caffe_model dir\n        if file_name!=\'\':\n            f = open(file_name,\'rb\')\n            self.net.ParseFromString(f.read())\n            f.close()\n\n    def save(self, path):\n        with open(path,\'wb\') as f:\n            f.write(self.net.SerializeToString())\n\n    def add_layer_with_data(self,layer_params,datas, before=\'\', after=\'\'):\n        """"""\n        Args:\n            layer_params:A Layer_Param object\n            datas:a fixed dimension numpy object list\n            after: put the layer after a specified layer\n            before: put the layer before a specified layer\n        """"""\n        self.add_layer(layer_params,before,after)\n        new_layer =self.layer(layer_params.name)\n\n        #process blobs\n        del new_layer.blobs[:]\n        for data in datas:\n            new_blob=new_layer.blobs.add()\n            for dim in data.shape:\n                new_blob.shape.dim.append(dim)\n            new_blob.data.extend(data.flatten().astype(float))\n\n    def get_layer_data(self,layer_name):\n        layer=self.layer(layer_name)\n        datas=[]\n        for blob in layer.blobs:\n            shape=list(blob.shape.dim)\n            data=np.array(blob.data).reshape(shape)\n            datas.append(data)\n        return datas\n\n    def set_layer_data(self,layer_name,datas):\n        # datas is normally a list of [weights,bias]\n        layer=self.layer(layer_name)\n        for blob,data in zip(layer.blobs, datas):\n            blob.data[:]=data.flatten()\n            pass\n\nclass Net():\n    def __init__(self,*args,**kwargs):\n        raise(TypeError,\'the class Net is no longer used, please use Caffemodel or Prototxt instead\')'"
Caffe/caffe_pb2.py,0,"b'# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: caffe.proto\n\nimport sys\n_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode(\'latin1\'))\nfrom google.protobuf.internal import enum_type_wrapper\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf import descriptor_pb2\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\n\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name=\'caffe.proto\',\n  package=\'caffe\',\n  serialized_pb=_b(\'\\n\\x0b\\x63\\x61\\x66\\x66\\x65.proto\\x12\\x05\\x63\\x61\\x66\\x66\\x65\\""\\x1c\\n\\tBlobShape\\x12\\x0f\\n\\x03\\x64im\\x18\\x01 \\x03(\\x03\\x42\\x02\\x10\\x01\\""\\xcc\\x01\\n\\tBlobProto\\x12\\x1f\\n\\x05shape\\x18\\x07 \\x01(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x10\\n\\x04\\x64\\x61ta\\x18\\x05 \\x03(\\x02\\x42\\x02\\x10\\x01\\x12\\x10\\n\\x04\\x64iff\\x18\\x06 \\x03(\\x02\\x42\\x02\\x10\\x01\\x12\\x17\\n\\x0b\\x64ouble_data\\x18\\x08 \\x03(\\x01\\x42\\x02\\x10\\x01\\x12\\x17\\n\\x0b\\x64ouble_diff\\x18\\t \\x03(\\x01\\x42\\x02\\x10\\x01\\x12\\x0e\\n\\x03num\\x18\\x01 \\x01(\\x05:\\x01\\x30\\x12\\x13\\n\\x08\\x63hannels\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x11\\n\\x06height\\x18\\x03 \\x01(\\x05:\\x01\\x30\\x12\\x10\\n\\x05width\\x18\\x04 \\x01(\\x05:\\x01\\x30\\""2\\n\\x0f\\x42lobProtoVector\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x01 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\""\\x81\\x01\\n\\x05\\x44\\x61tum\\x12\\x10\\n\\x08\\x63hannels\\x18\\x01 \\x01(\\x05\\x12\\x0e\\n\\x06height\\x18\\x02 \\x01(\\x05\\x12\\r\\n\\x05width\\x18\\x03 \\x01(\\x05\\x12\\x0c\\n\\x04\\x64\\x61ta\\x18\\x04 \\x01(\\x0c\\x12\\r\\n\\x05label\\x18\\x05 \\x01(\\x05\\x12\\x12\\n\\nfloat_data\\x18\\x06 \\x03(\\x02\\x12\\x16\\n\\x07\\x65ncoded\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\""A\\n\\x0cLabelMapItem\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05label\\x18\\x02 \\x01(\\x05\\x12\\x14\\n\\x0c\\x64isplay_name\\x18\\x03 \\x01(\\t\\""-\\n\\x08LabelMap\\x12!\\n\\x04item\\x18\\x01 \\x03(\\x0b\\x32\\x13.caffe.LabelMapItem\\""o\\n\\x07Sampler\\x12\\x14\\n\\tmin_scale\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x14\\n\\tmax_scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x1b\\n\\x10min_aspect_ratio\\x18\\x03 \\x01(\\x02:\\x01\\x31\\x12\\x1b\\n\\x10max_aspect_ratio\\x18\\x04 \\x01(\\x02:\\x01\\x31\\""\\xc0\\x01\\n\\x10SampleConstraint\\x12\\x1b\\n\\x13min_jaccard_overlap\\x18\\x01 \\x01(\\x02\\x12\\x1b\\n\\x13max_jaccard_overlap\\x18\\x02 \\x01(\\x02\\x12\\x1b\\n\\x13min_sample_coverage\\x18\\x03 \\x01(\\x02\\x12\\x1b\\n\\x13max_sample_coverage\\x18\\x04 \\x01(\\x02\\x12\\x1b\\n\\x13min_object_coverage\\x18\\x05 \\x01(\\x02\\x12\\x1b\\n\\x13max_object_coverage\\x18\\x06 \\x01(\\x02\\""\\xb2\\x01\\n\\x0c\\x42\\x61tchSampler\\x12 \\n\\x12use_original_image\\x18\\x01 \\x01(\\x08:\\x04true\\x12\\x1f\\n\\x07sampler\\x18\\x02 \\x01(\\x0b\\x32\\x0e.caffe.Sampler\\x12\\x32\\n\\x11sample_constraint\\x18\\x03 \\x01(\\x0b\\x32\\x17.caffe.SampleConstraint\\x12\\x12\\n\\nmax_sample\\x18\\x04 \\x01(\\r\\x12\\x17\\n\\nmax_trials\\x18\\x05 \\x01(\\r:\\x03\\x31\\x30\\x30\\""\\x8a\\x01\\n\\x0e\\x45mitConstraint\\x12\\x39\\n\\temit_type\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.EmitConstraint.EmitType:\\x06\\x43\\x45NTER\\x12\\x14\\n\\x0c\\x65mit_overlap\\x18\\x02 \\x01(\\x02\\""\\\'\\n\\x08\\x45mitType\\x12\\n\\n\\x06\\x43\\x45NTER\\x10\\x00\\x12\\x0f\\n\\x0bMIN_OVERLAP\\x10\\x01\\""\\x87\\x01\\n\\x0eNormalizedBBox\\x12\\x0c\\n\\x04xmin\\x18\\x01 \\x01(\\x02\\x12\\x0c\\n\\x04ymin\\x18\\x02 \\x01(\\x02\\x12\\x0c\\n\\x04xmax\\x18\\x03 \\x01(\\x02\\x12\\x0c\\n\\x04ymax\\x18\\x04 \\x01(\\x02\\x12\\r\\n\\x05label\\x18\\x05 \\x01(\\x05\\x12\\x11\\n\\tdifficult\\x18\\x06 \\x01(\\x08\\x12\\r\\n\\x05score\\x18\\x07 \\x01(\\x02\\x12\\x0c\\n\\x04size\\x18\\x08 \\x01(\\x02\\""I\\n\\nAnnotation\\x12\\x16\\n\\x0binstance_id\\x18\\x01 \\x01(\\x05:\\x01\\x30\\x12#\\n\\x04\\x62\\x62ox\\x18\\x02 \\x01(\\x0b\\x32\\x15.caffe.NormalizedBBox\\""M\\n\\x0f\\x41nnotationGroup\\x12\\x13\\n\\x0bgroup_label\\x18\\x01 \\x01(\\x05\\x12%\\n\\nannotation\\x18\\x02 \\x03(\\x0b\\x32\\x11.caffe.Annotation\\""\\xaf\\x01\\n\\x0e\\x41nnotatedDatum\\x12\\x1b\\n\\x05\\x64\\x61tum\\x18\\x01 \\x01(\\x0b\\x32\\x0c.caffe.Datum\\x12\\x32\\n\\x04type\\x18\\x02 \\x01(\\x0e\\x32$.caffe.AnnotatedDatum.AnnotationType\\x12\\x30\\n\\x10\\x61nnotation_group\\x18\\x03 \\x03(\\x0b\\x32\\x16.caffe.AnnotationGroup\\""\\x1a\\n\\x0e\\x41nnotationType\\x12\\x08\\n\\x04\\x42\\x42OX\\x10\\x00\\""\\x8a\\x02\\n\\x0f\\x46illerParameter\\x12\\x16\\n\\x04type\\x18\\x01 \\x01(\\t:\\x08\\x63onstant\\x12\\x10\\n\\x05value\\x18\\x02 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03min\\x18\\x03 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03max\\x18\\x04 \\x01(\\x02:\\x01\\x31\\x12\\x0f\\n\\x04mean\\x18\\x05 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03std\\x18\\x06 \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x06sparse\\x18\\x07 \\x01(\\x05:\\x02-1\\x12\\x42\\n\\rvariance_norm\\x18\\x08 \\x01(\\x0e\\x32#.caffe.FillerParameter.VarianceNorm:\\x06\\x46\\x41N_IN\\""4\\n\\x0cVarianceNorm\\x12\\n\\n\\x06\\x46\\x41N_IN\\x10\\x00\\x12\\x0b\\n\\x07\\x46\\x41N_OUT\\x10\\x01\\x12\\x0b\\n\\x07\\x41VERAGE\\x10\\x02\\""\\x8e\\x02\\n\\x0cNetParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05input\\x18\\x03 \\x03(\\t\\x12%\\n\\x0binput_shape\\x18\\x08 \\x03(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x11\\n\\tinput_dim\\x18\\x04 \\x03(\\x05\\x12\\x1d\\n\\x0e\\x66orce_backward\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1e\\n\\x05state\\x18\\x06 \\x01(\\x0b\\x32\\x0f.caffe.NetState\\x12\\x19\\n\\ndebug_info\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\x12$\\n\\x05layer\\x18\\x64 \\x03(\\x0b\\x32\\x15.caffe.LayerParameter\\x12\\\'\\n\\x06layers\\x18\\x02 \\x03(\\x0b\\x32\\x17.caffe.V1LayerParameter\\""\\xa2\\x0b\\n\\x0fSolverParameter\\x12\\x0b\\n\\x03net\\x18\\x18 \\x01(\\t\\x12&\\n\\tnet_param\\x18\\x19 \\x01(\\x0b\\x32\\x13.caffe.NetParameter\\x12\\x11\\n\\ttrain_net\\x18\\x01 \\x01(\\t\\x12\\x10\\n\\x08test_net\\x18\\x02 \\x03(\\t\\x12,\\n\\x0ftrain_net_param\\x18\\x15 \\x01(\\x0b\\x32\\x13.caffe.NetParameter\\x12+\\n\\x0etest_net_param\\x18\\x16 \\x03(\\x0b\\x32\\x13.caffe.NetParameter\\x12$\\n\\x0btrain_state\\x18\\x1a \\x01(\\x0b\\x32\\x0f.caffe.NetState\\x12#\\n\\ntest_state\\x18\\x1b \\x03(\\x0b\\x32\\x0f.caffe.NetState\\x12!\\n\\teval_type\\x18) \\x01(\\t:\\x0e\\x63lassification\\x12\\x1c\\n\\nap_version\\x18* \\x01(\\t:\\x08Integral\\x12$\\n\\x15show_per_class_result\\x18, \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x11\\n\\ttest_iter\\x18\\x03 \\x03(\\x05\\x12\\x18\\n\\rtest_interval\\x18\\x04 \\x01(\\x05:\\x01\\x30\\x12 \\n\\x11test_compute_loss\\x18\\x13 \\x01(\\x08:\\x05\\x66\\x61lse\\x12!\\n\\x13test_initialization\\x18  \\x01(\\x08:\\x04true\\x12\\x0f\\n\\x07\\x62\\x61se_lr\\x18\\x05 \\x01(\\x02\\x12\\x0f\\n\\x07\\x64isplay\\x18\\x06 \\x01(\\x05\\x12\\x17\\n\\x0c\\x61verage_loss\\x18! \\x01(\\x05:\\x01\\x31\\x12\\x10\\n\\x08max_iter\\x18\\x07 \\x01(\\x05\\x12\\x14\\n\\titer_size\\x18$ \\x01(\\x05:\\x01\\x31\\x12\\x11\\n\\tlr_policy\\x18\\x08 \\x01(\\t\\x12\\r\\n\\x05gamma\\x18\\t \\x01(\\x02\\x12\\r\\n\\x05power\\x18\\n \\x01(\\x02\\x12\\x10\\n\\x08momentum\\x18\\x0b \\x01(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x0c \\x01(\\x02\\x12\\x1f\\n\\x13regularization_type\\x18\\x1d \\x01(\\t:\\x02L2\\x12\\x10\\n\\x08stepsize\\x18\\r \\x01(\\x05\\x12\\x11\\n\\tstepvalue\\x18\\"" \\x03(\\x05\\x12\\x17\\n\\x0fplateau_winsize\\x18+ \\x03(\\x05\\x12\\x1a\\n\\x0e\\x63lip_gradients\\x18# \\x01(\\x02:\\x02-1\\x12\\x13\\n\\x08snapshot\\x18\\x0e \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0fsnapshot_prefix\\x18\\x0f \\x01(\\t\\x12\\x1c\\n\\rsnapshot_diff\\x18\\x10 \\x01(\\x08:\\x05\\x66\\x61lse\\x12K\\n\\x0fsnapshot_format\\x18% \\x01(\\x0e\\x32%.caffe.SolverParameter.SnapshotFormat:\\x0b\\x42INARYPROTO\\x12;\\n\\x0bsolver_mode\\x18\\x11 \\x01(\\x0e\\x32!.caffe.SolverParameter.SolverMode:\\x03GPU\\x12\\x14\\n\\tdevice_id\\x18\\x12 \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0brandom_seed\\x18\\x14 \\x01(\\x03:\\x02-1\\x12\\x11\\n\\x04type\\x18( \\x01(\\t:\\x03SGD\\x12\\x14\\n\\x05\\x64\\x65lta\\x18\\x1f \\x01(\\x02:\\x05\\x31\\x65-08\\x12\\x18\\n\\tmomentum2\\x18\\\' \\x01(\\x02:\\x05\\x30.999\\x12\\x17\\n\\trms_decay\\x18& \\x01(\\x02:\\x04\\x30.99\\x12\\x19\\n\\ndebug_info\\x18\\x17 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\""\\n\\x14snapshot_after_train\\x18\\x1c \\x01(\\x08:\\x04true\\x12;\\n\\x0bsolver_type\\x18\\x1e \\x01(\\x0e\\x32!.caffe.SolverParameter.SolverType:\\x03SGD\\""+\\n\\x0eSnapshotFormat\\x12\\x08\\n\\x04HDF5\\x10\\x00\\x12\\x0f\\n\\x0b\\x42INARYPROTO\\x10\\x01\\""\\x1e\\n\\nSolverMode\\x12\\x07\\n\\x03\\x43PU\\x10\\x00\\x12\\x07\\n\\x03GPU\\x10\\x01\\""U\\n\\nSolverType\\x12\\x07\\n\\x03SGD\\x10\\x00\\x12\\x0c\\n\\x08NESTEROV\\x10\\x01\\x12\\x0b\\n\\x07\\x41\\x44\\x41GRAD\\x10\\x02\\x12\\x0b\\n\\x07RMSPROP\\x10\\x03\\x12\\x0c\\n\\x08\\x41\\x44\\x41\\x44\\x45LTA\\x10\\x04\\x12\\x08\\n\\x04\\x41\\x44\\x41M\\x10\\x05\\""\\xa5\\x01\\n\\x0bSolverState\\x12\\x0c\\n\\x04iter\\x18\\x01 \\x01(\\x05\\x12\\x13\\n\\x0blearned_net\\x18\\x02 \\x01(\\t\\x12!\\n\\x07history\\x18\\x03 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x17\\n\\x0c\\x63urrent_step\\x18\\x04 \\x01(\\x05:\\x01\\x30\\x12\\x1b\\n\\x0cminimum_loss\\x18\\x05 \\x01(\\x02:\\x05\\x31\\x65+38\\x12\\x1a\\n\\x0fiter_last_event\\x18\\x06 \\x01(\\x05:\\x01\\x30\\""N\\n\\x08NetState\\x12!\\n\\x05phase\\x18\\x01 \\x01(\\x0e\\x32\\x0c.caffe.Phase:\\x04TEST\\x12\\x10\\n\\x05level\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\r\\n\\x05stage\\x18\\x03 \\x03(\\t\\""s\\n\\x0cNetStateRule\\x12\\x1b\\n\\x05phase\\x18\\x01 \\x01(\\x0e\\x32\\x0c.caffe.Phase\\x12\\x11\\n\\tmin_level\\x18\\x02 \\x01(\\x05\\x12\\x11\\n\\tmax_level\\x18\\x03 \\x01(\\x05\\x12\\r\\n\\x05stage\\x18\\x04 \\x03(\\t\\x12\\x11\\n\\tnot_stage\\x18\\x05 \\x03(\\t\\""\\xa3\\x01\\n\\tParamSpec\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x31\\n\\nshare_mode\\x18\\x02 \\x01(\\x0e\\x32\\x1d.caffe.ParamSpec.DimCheckMode\\x12\\x12\\n\\x07lr_mult\\x18\\x03 \\x01(\\x02:\\x01\\x31\\x12\\x15\\n\\ndecay_mult\\x18\\x04 \\x01(\\x02:\\x01\\x31\\""*\\n\\x0c\\x44imCheckMode\\x12\\n\\n\\x06STRICT\\x10\\x00\\x12\\x0e\\n\\nPERMISSIVE\\x10\\x01\\""\\x8a\\x19\\n\\x0eLayerParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04type\\x18\\x02 \\x01(\\t\\x12\\x0e\\n\\x06\\x62ottom\\x18\\x03 \\x03(\\t\\x12\\x0b\\n\\x03top\\x18\\x04 \\x03(\\t\\x12\\x1b\\n\\x05phase\\x18\\n \\x01(\\x0e\\x32\\x0c.caffe.Phase\\x12\\x13\\n\\x0bloss_weight\\x18\\x05 \\x03(\\x02\\x12\\x1f\\n\\x05param\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.ParamSpec\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x07 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x16\\n\\x0epropagate_down\\x18\\x0b \\x03(\\x08\\x12$\\n\\x07include\\x18\\x08 \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12$\\n\\x07\\x65xclude\\x18\\t \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12\\x37\\n\\x0ftransform_param\\x18\\x64 \\x01(\\x0b\\x32\\x1e.caffe.TransformationParameter\\x12(\\n\\nloss_param\\x18\\x65 \\x01(\\x0b\\x32\\x14.caffe.LossParameter\\x12\\x30\\n\\x0e\\x61\\x63\\x63uracy_param\\x18\\x66 \\x01(\\x0b\\x32\\x18.caffe.AccuracyParameter\\x12<\\n\\x14\\x61nnotated_data_param\\x18\\xc8\\x01 \\x01(\\x0b\\x32\\x1d.caffe.AnnotatedDataParameter\\x12,\\n\\x0c\\x61rgmax_param\\x18g \\x01(\\x0b\\x32\\x16.caffe.ArgMaxParameter\\x12\\x34\\n\\x10\\x62\\x61tch_norm_param\\x18\\x8b\\x01 \\x01(\\x0b\\x32\\x19.caffe.BatchNormParameter\\x12)\\n\\nbias_param\\x18\\x8d\\x01 \\x01(\\x0b\\x32\\x14.caffe.BiasParameter\\x12,\\n\\x0c\\x63oncat_param\\x18h \\x01(\\x0b\\x32\\x16.caffe.ConcatParameter\\x12?\\n\\x16\\x63ontrastive_loss_param\\x18i \\x01(\\x0b\\x32\\x1f.caffe.ContrastiveLossParameter\\x12\\x36\\n\\x11\\x63onvolution_param\\x18j \\x01(\\x0b\\x32\\x1b.caffe.ConvolutionParameter\\x12)\\n\\ncrop_param\\x18\\x90\\x01 \\x01(\\x0b\\x32\\x14.caffe.CropParameter\\x12(\\n\\ndata_param\\x18k \\x01(\\x0b\\x32\\x14.caffe.DataParameter\\x12\\x44\\n\\x18\\x64\\x65tection_evaluate_param\\x18\\xcd\\x01 \\x01(\\x0b\\x32!.caffe.DetectionEvaluateParameter\\x12@\\n\\x16\\x64\\x65tection_output_param\\x18\\xcc\\x01 \\x01(\\x0b\\x32\\x1f.caffe.DetectionOutputParameter\\x12.\\n\\rdropout_param\\x18l \\x01(\\x0b\\x32\\x17.caffe.DropoutParameter\\x12\\x33\\n\\x10\\x64ummy_data_param\\x18m \\x01(\\x0b\\x32\\x19.caffe.DummyDataParameter\\x12.\\n\\reltwise_param\\x18n \\x01(\\x0b\\x32\\x17.caffe.EltwiseParameter\\x12\\\'\\n\\telu_param\\x18\\x8c\\x01 \\x01(\\x0b\\x32\\x13.caffe.ELUParameter\\x12+\\n\\x0b\\x65mbed_param\\x18\\x89\\x01 \\x01(\\x0b\\x32\\x15.caffe.EmbedParameter\\x12&\\n\\texp_param\\x18o \\x01(\\x0b\\x32\\x13.caffe.ExpParameter\\x12/\\n\\rflatten_param\\x18\\x87\\x01 \\x01(\\x0b\\x32\\x17.caffe.FlattenParameter\\x12\\x31\\n\\x0fhdf5_data_param\\x18p \\x01(\\x0b\\x32\\x18.caffe.HDF5DataParameter\\x12\\x35\\n\\x11hdf5_output_param\\x18q \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter\\x12\\x33\\n\\x10hinge_loss_param\\x18r \\x01(\\x0b\\x32\\x19.caffe.HingeLossParameter\\x12\\x33\\n\\x10image_data_param\\x18s \\x01(\\x0b\\x32\\x19.caffe.ImageDataParameter\\x12\\x39\\n\\x13infogain_loss_param\\x18t \\x01(\\x0b\\x32\\x1c.caffe.InfogainLossParameter\\x12\\x39\\n\\x13inner_product_param\\x18u \\x01(\\x0b\\x32\\x1c.caffe.InnerProductParameter\\x12+\\n\\x0binput_param\\x18\\x8f\\x01 \\x01(\\x0b\\x32\\x15.caffe.InputParameter\\x12\\\'\\n\\tlog_param\\x18\\x86\\x01 \\x01(\\x0b\\x32\\x13.caffe.LogParameter\\x12&\\n\\tlrn_param\\x18v \\x01(\\x0b\\x32\\x13.caffe.LRNParameter\\x12\\x35\\n\\x11memory_data_param\\x18w \\x01(\\x0b\\x32\\x1a.caffe.MemoryDataParameter\\x12:\\n\\x13multibox_loss_param\\x18\\xc9\\x01 \\x01(\\x0b\\x32\\x1c.caffe.MultiBoxLossParameter\\x12&\\n\\tmvn_param\\x18x \\x01(\\x0b\\x32\\x13.caffe.MVNParameter\\x12.\\n\\nnorm_param\\x18\\xce\\x01 \\x01(\\x0b\\x32\\x19.caffe.NormalizeParameter\\x12\\x33\\n\\x0fparameter_param\\x18\\x91\\x01 \\x01(\\x0b\\x32\\x19.caffe.ParameterParameter\\x12/\\n\\rpermute_param\\x18\\xca\\x01 \\x01(\\x0b\\x32\\x17.caffe.PermuteParameter\\x12.\\n\\rpooling_param\\x18y \\x01(\\x0b\\x32\\x17.caffe.PoolingParameter\\x12*\\n\\x0bpower_param\\x18z \\x01(\\x0b\\x32\\x15.caffe.PowerParameter\\x12+\\n\\x0bprelu_param\\x18\\x83\\x01 \\x01(\\x0b\\x32\\x15.caffe.PReLUParameter\\x12\\x32\\n\\x0fprior_box_param\\x18\\xcb\\x01 \\x01(\\x0b\\x32\\x18.caffe.PriorBoxParameter\\x12-\\n\\x0cpython_param\\x18\\x82\\x01 \\x01(\\x0b\\x32\\x16.caffe.PythonParameter\\x12\\x33\\n\\x0frecurrent_param\\x18\\x92\\x01 \\x01(\\x0b\\x32\\x19.caffe.RecurrentParameter\\x12\\x33\\n\\x0freduction_param\\x18\\x88\\x01 \\x01(\\x0b\\x32\\x19.caffe.ReductionParameter\\x12(\\n\\nrelu_param\\x18{ \\x01(\\x0b\\x32\\x14.caffe.ReLUParameter\\x12/\\n\\rreshape_param\\x18\\x85\\x01 \\x01(\\x0b\\x32\\x17.caffe.ReshapeParameter\\x12+\\n\\x0bscale_param\\x18\\x8e\\x01 \\x01(\\x0b\\x32\\x15.caffe.ScaleParameter\\x12.\\n\\rsigmoid_param\\x18| \\x01(\\x0b\\x32\\x17.caffe.SigmoidParameter\\x12.\\n\\rsoftmax_param\\x18} \\x01(\\x0b\\x32\\x17.caffe.SoftmaxParameter\\x12\\\'\\n\\tspp_param\\x18\\x84\\x01 \\x01(\\x0b\\x32\\x13.caffe.SPPParameter\\x12*\\n\\x0bslice_param\\x18~ \\x01(\\x0b\\x32\\x15.caffe.SliceParameter\\x12(\\n\\ntanh_param\\x18\\x7f \\x01(\\x0b\\x32\\x14.caffe.TanHParameter\\x12\\x33\\n\\x0fthreshold_param\\x18\\x80\\x01 \\x01(\\x0b\\x32\\x19.caffe.ThresholdParameter\\x12)\\n\\ntile_param\\x18\\x8a\\x01 \\x01(\\x0b\\x32\\x14.caffe.TileParameter\\x12\\x34\\n\\x10video_data_param\\x18\\xcf\\x01 \\x01(\\x0b\\x32\\x19.caffe.VideoDataParameter\\x12\\x36\\n\\x11window_data_param\\x18\\x81\\x01 \\x01(\\x0b\\x32\\x1a.caffe.WindowDataParameter\\x12\\x43\\n\\x18\\x62ox_annotator_ohem_param\\x18\\x90N \\x01(\\x0b\\x32 .caffe.BoxAnnotatorOHEMParameter\\x12:\\n\\x13psroi_pooling_param\\x18\\x91N \\x01(\\x0b\\x32\\x1c.caffe.PSROIPoolingParameter\\x12\\x38\\n\\x11roi_pooling_param\\x18\\xd7\\xc7\\xf8\\x03 \\x01(\\x0b\\x32\\x1a.caffe.ROIPoolingParameter\\""Y\\n\\x13ROIPoolingParameter\\x12\\x13\\n\\x08pooled_h\\x18\\x01 \\x01(\\r:\\x01\\x30\\x12\\x13\\n\\x08pooled_w\\x18\\x02 \\x01(\\r:\\x01\\x30\\x12\\x18\\n\\rspatial_scale\\x18\\x03 \\x01(\\x02:\\x01\\x31\\""V\\n\\x15PSROIPoolingParameter\\x12\\x15\\n\\rspatial_scale\\x18\\x01 \\x02(\\x02\\x12\\x12\\n\\noutput_dim\\x18\\x02 \\x02(\\x05\\x12\\x12\\n\\ngroup_size\\x18\\x03 \\x02(\\x05\\""J\\n\\x19\\x42oxAnnotatorOHEMParameter\\x12\\x13\\n\\x0broi_per_img\\x18\\x01 \\x02(\\r\\x12\\x18\\n\\x0cignore_label\\x18\\x02 \\x01(\\x05:\\x02-1\\""\\xca\\x03\\n\\x17TransformationParameter\\x12\\x10\\n\\x05scale\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x15\\n\\x06mirror\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x14\\n\\tcrop_size\\x18\\x03 \\x01(\\r:\\x01\\x30\\x12\\x11\\n\\x06\\x63rop_h\\x18\\x0b \\x01(\\r:\\x01\\x30\\x12\\x11\\n\\x06\\x63rop_w\\x18\\x0c \\x01(\\r:\\x01\\x30\\x12\\x11\\n\\tmean_file\\x18\\x04 \\x01(\\t\\x12\\x12\\n\\nmean_value\\x18\\x05 \\x03(\\x02\\x12\\x1a\\n\\x0b\\x66orce_color\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\nforce_gray\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\x12,\\n\\x0cresize_param\\x18\\x08 \\x01(\\x0b\\x32\\x16.caffe.ResizeParameter\\x12*\\n\\x0bnoise_param\\x18\\t \\x01(\\x0b\\x32\\x15.caffe.NoiseParameter\\x12\\x31\\n\\rdistort_param\\x18\\r \\x01(\\x0b\\x32\\x1a.caffe.DistortionParameter\\x12/\\n\\x0c\\x65xpand_param\\x18\\x0e \\x01(\\x0b\\x32\\x19.caffe.ExpansionParameter\\x12.\\n\\x0f\\x65mit_constraint\\x18\\n \\x01(\\x0b\\x32\\x15.caffe.EmitConstraint\\""\\x90\\x04\\n\\x0fResizeParameter\\x12\\x0f\\n\\x04prob\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12=\\n\\x0bresize_mode\\x18\\x02 \\x01(\\x0e\\x32\\"".caffe.ResizeParameter.Resize_mode:\\x04WARP\\x12\\x11\\n\\x06height\\x18\\x03 \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05width\\x18\\x04 \\x01(\\r:\\x01\\x30\\x12\\x17\\n\\x0cheight_scale\\x18\\x08 \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x0bwidth_scale\\x18\\t \\x01(\\r:\\x01\\x30\\x12;\\n\\x08pad_mode\\x18\\x05 \\x01(\\x0e\\x32\\x1f.caffe.ResizeParameter.Pad_mode:\\x08\\x43ONSTANT\\x12\\x11\\n\\tpad_value\\x18\\x06 \\x03(\\x02\\x12\\x37\\n\\x0binterp_mode\\x18\\x07 \\x03(\\x0e\\x32\\"".caffe.ResizeParameter.Interp_mode\\""G\\n\\x0bResize_mode\\x12\\x08\\n\\x04WARP\\x10\\x01\\x12\\x12\\n\\x0e\\x46IT_SMALL_SIZE\\x10\\x02\\x12\\x1a\\n\\x16\\x46IT_LARGE_SIZE_AND_PAD\\x10\\x03\\"":\\n\\x08Pad_mode\\x12\\x0c\\n\\x08\\x43ONSTANT\\x10\\x01\\x12\\x0c\\n\\x08MIRRORED\\x10\\x02\\x12\\x12\\n\\x0eREPEAT_NEAREST\\x10\\x03\\""I\\n\\x0bInterp_mode\\x12\\n\\n\\x06LINEAR\\x10\\x01\\x12\\x08\\n\\x04\\x41REA\\x10\\x02\\x12\\x0b\\n\\x07NEAREST\\x10\\x03\\x12\\t\\n\\x05\\x43UBIC\\x10\\x04\\x12\\x0c\\n\\x08LANCZOS4\\x10\\x05\\""9\\n\\x13SaltPepperParameter\\x12\\x13\\n\\x08\\x66raction\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x02\\""\\xee\\x02\\n\\x0eNoiseParameter\\x12\\x0f\\n\\x04prob\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\x16\\n\\x07hist_eq\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x16\\n\\x07inverse\\x18\\x03 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\ndecolorize\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\ngauss_blur\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x10\\n\\x04jpeg\\x18\\x06 \\x01(\\x02:\\x02-1\\x12\\x18\\n\\tposterize\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x14\\n\\x05\\x65rode\\x18\\x08 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\nsaltpepper\\x18\\t \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x34\\n\\x10saltpepper_param\\x18\\n \\x01(\\x0b\\x32\\x1a.caffe.SaltPepperParameter\\x12\\x14\\n\\x05\\x63lahe\\x18\\x0b \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1d\\n\\x0e\\x63onvert_to_hsv\\x18\\x0c \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1d\\n\\x0e\\x63onvert_to_lab\\x18\\r \\x01(\\x08:\\x05\\x66\\x61lse\\""\\xbd\\x02\\n\\x13\\x44istortionParameter\\x12\\x1a\\n\\x0f\\x62rightness_prob\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\x1b\\n\\x10\\x62rightness_delta\\x18\\x02 \\x01(\\x02:\\x01\\x30\\x12\\x18\\n\\rcontrast_prob\\x18\\x03 \\x01(\\x02:\\x01\\x30\\x12\\x19\\n\\x0e\\x63ontrast_lower\\x18\\x04 \\x01(\\x02:\\x01\\x30\\x12\\x19\\n\\x0e\\x63ontrast_upper\\x18\\x05 \\x01(\\x02:\\x01\\x30\\x12\\x13\\n\\x08hue_prob\\x18\\x06 \\x01(\\x02:\\x01\\x30\\x12\\x14\\n\\thue_delta\\x18\\x07 \\x01(\\x02:\\x01\\x30\\x12\\x1a\\n\\x0fsaturation_prob\\x18\\x08 \\x01(\\x02:\\x01\\x30\\x12\\x1b\\n\\x10saturation_lower\\x18\\t \\x01(\\x02:\\x01\\x30\\x12\\x1b\\n\\x10saturation_upper\\x18\\n \\x01(\\x02:\\x01\\x30\\x12\\x1c\\n\\x11random_order_prob\\x18\\x0b \\x01(\\x02:\\x01\\x30\\""B\\n\\x12\\x45xpansionParameter\\x12\\x0f\\n\\x04prob\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x1b\\n\\x10max_expand_ratio\\x18\\x02 \\x01(\\x02:\\x01\\x31\\""\\xf2\\x01\\n\\rLossParameter\\x12\\x14\\n\\x0cignore_label\\x18\\x01 \\x01(\\x05\\x12\\x44\\n\\rnormalization\\x18\\x03 \\x01(\\x0e\\x32&.caffe.LossParameter.NormalizationMode:\\x05VALID\\x12\\x11\\n\\tnormalize\\x18\\x02 \\x01(\\x08\\x12\\x1f\\n\\x14pre_fixed_normalizer\\x18\\x04 \\x01(\\x02:\\x01\\x31\\""Q\\n\\x11NormalizationMode\\x12\\x08\\n\\x04\\x46ULL\\x10\\x00\\x12\\t\\n\\x05VALID\\x10\\x01\\x12\\x0e\\n\\nBATCH_SIZE\\x10\\x02\\x12\\r\\n\\tPRE_FIXED\\x10\\x03\\x12\\x08\\n\\x04NONE\\x10\\x04\\""L\\n\\x11\\x41\\x63\\x63uracyParameter\\x12\\x10\\n\\x05top_k\\x18\\x01 \\x01(\\r:\\x01\\x31\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12\\x14\\n\\x0cignore_label\\x18\\x03 \\x01(\\x05\\""\\x95\\x01\\n\\x16\\x41nnotatedDataParameter\\x12*\\n\\rbatch_sampler\\x18\\x01 \\x03(\\x0b\\x32\\x13.caffe.BatchSampler\\x12\\x16\\n\\x0elabel_map_file\\x18\\x02 \\x01(\\t\\x12\\x37\\n\\tanno_type\\x18\\x03 \\x01(\\x0e\\x32$.caffe.AnnotatedDatum.AnnotationType\\""M\\n\\x0f\\x41rgMaxParameter\\x12\\x1a\\n\\x0bout_max_val\\x18\\x01 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x10\\n\\x05top_k\\x18\\x02 \\x01(\\r:\\x01\\x31\\x12\\x0c\\n\\x04\\x61xis\\x18\\x03 \\x01(\\x05\\""9\\n\\x0f\\x43oncatParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12\\x15\\n\\nconcat_dim\\x18\\x01 \\x01(\\r:\\x01\\x31\\""j\\n\\x12\\x42\\x61tchNormParameter\\x12\\x18\\n\\x10use_global_stats\\x18\\x01 \\x01(\\x08\\x12&\\n\\x17moving_average_fraction\\x18\\x02 \\x01(\\x02:\\x05\\x30.999\\x12\\x12\\n\\x03\\x65ps\\x18\\x03 \\x01(\\x02:\\x05\\x31\\x65-05\\""]\\n\\rBiasParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x08num_axes\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12&\\n\\x06\\x66iller\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\""L\\n\\x18\\x43ontrastiveLossParameter\\x12\\x11\\n\\x06margin\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x1d\\n\\x0elegacy_version\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\""\\xfc\\x03\\n\\x14\\x43onvolutionParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x02 \\x01(\\x08:\\x04true\\x12\\x0b\\n\\x03pad\\x18\\x03 \\x03(\\r\\x12\\x13\\n\\x0bkernel_size\\x18\\x04 \\x03(\\r\\x12\\x0e\\n\\x06stride\\x18\\x06 \\x03(\\r\\x12\\x10\\n\\x08\\x64ilation\\x18\\x12 \\x03(\\r\\x12\\x10\\n\\x05pad_h\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_w\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x08kernel_h\\x18\\x0b \\x01(\\r\\x12\\x10\\n\\x08kernel_w\\x18\\x0c \\x01(\\r\\x12\\x10\\n\\x08stride_h\\x18\\r \\x01(\\r\\x12\\x10\\n\\x08stride_w\\x18\\x0e \\x01(\\r\\x12\\x10\\n\\x05group\\x18\\x05 \\x01(\\r:\\x01\\x31\\x12-\\n\\rweight_filler\\x18\\x07 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x08 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12;\\n\\x06\\x65ngine\\x18\\x0f \\x01(\\x0e\\x32\\"".caffe.ConvolutionParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x0f\\n\\x04\\x61xis\\x18\\x10 \\x01(\\x05:\\x01\\x31\\x12\\x1e\\n\\x0f\\x66orce_nd_im2col\\x18\\x11 \\x01(\\x08:\\x05\\x66\\x61lse\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""0\\n\\rCropParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x32\\x12\\x0e\\n\\x06offset\\x18\\x02 \\x03(\\r\\""\\xa4\\x02\\n\\rDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x04 \\x01(\\r\\x12\\x14\\n\\trand_skip\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x31\\n\\x07\\x62\\x61\\x63kend\\x18\\x08 \\x01(\\x0e\\x32\\x17.caffe.DataParameter.DB:\\x07LEVELDB\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\""\\n\\x13\\x66orce_encoded_color\\x18\\t \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x13\\n\\x08prefetch\\x18\\n \\x01(\\r:\\x01\\x34\\""\\x1b\\n\\x02\\x44\\x42\\x12\\x0b\\n\\x07LEVELDB\\x10\\x00\\x12\\x08\\n\\x04LMDB\\x10\\x01\\""\\xdc\\x01\\n\\x1a\\x44\\x65tectionEvaluateParameter\\x12\\x13\\n\\x0bnum_classes\\x18\\x01 \\x01(\\r\\x12\\x1e\\n\\x13\\x62\\x61\\x63kground_label_id\\x18\\x02 \\x01(\\r:\\x01\\x30\\x12\\x1e\\n\\x11overlap_threshold\\x18\\x03 \\x01(\\x02:\\x03\\x30.5\\x12#\\n\\x15\\x65valuate_difficult_gt\\x18\\x04 \\x01(\\x08:\\x04true\\x12\\x16\\n\\x0ename_size_file\\x18\\x05 \\x01(\\t\\x12,\\n\\x0cresize_param\\x18\\x06 \\x01(\\x0b\\x32\\x16.caffe.ResizeParameter\\""[\\n\\x1eNonMaximumSuppressionParameter\\x12\\x1a\\n\\rnms_threshold\\x18\\x01 \\x01(\\x02:\\x03\\x30.3\\x12\\r\\n\\x05top_k\\x18\\x02 \\x01(\\x05\\x12\\x0e\\n\\x03\\x65ta\\x18\\x03 \\x01(\\x02:\\x01\\x31\\""\\xd8\\x01\\n\\x13SaveOutputParameter\\x12\\x18\\n\\x10output_directory\\x18\\x01 \\x01(\\t\\x12\\x1a\\n\\x12output_name_prefix\\x18\\x02 \\x01(\\t\\x12\\x15\\n\\routput_format\\x18\\x03 \\x01(\\t\\x12\\x16\\n\\x0elabel_map_file\\x18\\x04 \\x01(\\t\\x12\\x16\\n\\x0ename_size_file\\x18\\x05 \\x01(\\t\\x12\\x16\\n\\x0enum_test_image\\x18\\x06 \\x01(\\r\\x12,\\n\\x0cresize_param\\x18\\x07 \\x01(\\x0b\\x32\\x16.caffe.ResizeParameter\\""\\xc7\\x03\\n\\x18\\x44\\x65tectionOutputParameter\\x12\\x13\\n\\x0bnum_classes\\x18\\x01 \\x01(\\r\\x12\\x1c\\n\\x0eshare_location\\x18\\x02 \\x01(\\x08:\\x04true\\x12\\x1e\\n\\x13\\x62\\x61\\x63kground_label_id\\x18\\x03 \\x01(\\x05:\\x01\\x30\\x12\\x38\\n\\tnms_param\\x18\\x04 \\x01(\\x0b\\x32%.caffe.NonMaximumSuppressionParameter\\x12\\x35\\n\\x11save_output_param\\x18\\x05 \\x01(\\x0b\\x32\\x1a.caffe.SaveOutputParameter\\x12<\\n\\tcode_type\\x18\\x06 \\x01(\\x0e\\x32!.caffe.PriorBoxParameter.CodeType:\\x06\\x43ORNER\\x12)\\n\\x1avariance_encoded_in_target\\x18\\x08 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x16\\n\\nkeep_top_k\\x18\\x07 \\x01(\\x05:\\x02-1\\x12\\x1c\\n\\x14\\x63onfidence_threshold\\x18\\t \\x01(\\x02\\x12\\x18\\n\\tvisualize\\x18\\n \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1b\\n\\x13visualize_threshold\\x18\\x0b \\x01(\\x02\\x12\\x11\\n\\tsave_file\\x18\\x0c \\x01(\\t\\"".\\n\\x10\\x44ropoutParameter\\x12\\x1a\\n\\rdropout_ratio\\x18\\x01 \\x01(\\x02:\\x03\\x30.5\\""\\xa0\\x01\\n\\x12\\x44ummyDataParameter\\x12+\\n\\x0b\\x64\\x61ta_filler\\x18\\x01 \\x03(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x1f\\n\\x05shape\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x0b\\n\\x03num\\x18\\x02 \\x03(\\r\\x12\\x10\\n\\x08\\x63hannels\\x18\\x03 \\x03(\\r\\x12\\x0e\\n\\x06height\\x18\\x04 \\x03(\\r\\x12\\r\\n\\x05width\\x18\\x05 \\x03(\\r\\""\\xa5\\x01\\n\\x10\\x45ltwiseParameter\\x12\\x39\\n\\toperation\\x18\\x01 \\x01(\\x0e\\x32!.caffe.EltwiseParameter.EltwiseOp:\\x03SUM\\x12\\r\\n\\x05\\x63oeff\\x18\\x02 \\x03(\\x02\\x12\\x1e\\n\\x10stable_prod_grad\\x18\\x03 \\x01(\\x08:\\x04true\\""\\\'\\n\\tEltwiseOp\\x12\\x08\\n\\x04PROD\\x10\\x00\\x12\\x07\\n\\x03SUM\\x10\\x01\\x12\\x07\\n\\x03MAX\\x10\\x02\\"" \\n\\x0c\\x45LUParameter\\x12\\x10\\n\\x05\\x61lpha\\x18\\x01 \\x01(\\x02:\\x01\\x31\\""\\xac\\x01\\n\\x0e\\x45mbedParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x11\\n\\tinput_dim\\x18\\x02 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x03 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x04 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\""D\\n\\x0c\\x45xpParameter\\x12\\x10\\n\\x04\\x62\\x61se\\x18\\x01 \\x01(\\x02:\\x02-1\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30\\""9\\n\\x10\\x46lattenParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x14\\n\\x08\\x65nd_axis\\x18\\x02 \\x01(\\x05:\\x02-1\\""O\\n\\x11HDF5DataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x02 \\x01(\\r\\x12\\x16\\n\\x07shuffle\\x18\\x03 \\x01(\\x08:\\x05\\x66\\x61lse\\""(\\n\\x13HDF5OutputParameter\\x12\\x11\\n\\tfile_name\\x18\\x01 \\x01(\\t\\""^\\n\\x12HingeLossParameter\\x12\\x30\\n\\x04norm\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.HingeLossParameter.Norm:\\x02L1\\""\\x16\\n\\x04Norm\\x12\\x06\\n\\x02L1\\x10\\x01\\x12\\x06\\n\\x02L2\\x10\\x02\\""\\x97\\x02\\n\\x12ImageDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x15\\n\\nbatch_size\\x18\\x04 \\x01(\\r:\\x01\\x31\\x12\\x14\\n\\trand_skip\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x07shuffle\\x18\\x08 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\nnew_height\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x14\\n\\tnew_width\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x08is_color\\x18\\x0b \\x01(\\x08:\\x04true\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\x0broot_folder\\x18\\x0c \\x01(\\t:\\x00\\""\\\'\\n\\x15InfogainLossParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\""\\xcb\\x01\\n\\x15InnerProductParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x02 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x04 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x05 \\x01(\\x05:\\x01\\x31\\x12\\x18\\n\\ttranspose\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\""1\\n\\x0eInputParameter\\x12\\x1f\\n\\x05shape\\x18\\x01 \\x03(\\x0b\\x32\\x10.caffe.BlobShape\\""D\\n\\x0cLogParameter\\x12\\x10\\n\\x04\\x62\\x61se\\x18\\x01 \\x01(\\x02:\\x02-1\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30\\""\\xb8\\x02\\n\\x0cLRNParameter\\x12\\x15\\n\\nlocal_size\\x18\\x01 \\x01(\\r:\\x01\\x35\\x12\\x10\\n\\x05\\x61lpha\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x04\\x62\\x65ta\\x18\\x03 \\x01(\\x02:\\x04\\x30.75\\x12\\x44\\n\\x0bnorm_region\\x18\\x04 \\x01(\\x0e\\x32\\x1e.caffe.LRNParameter.NormRegion:\\x0f\\x41\\x43ROSS_CHANNELS\\x12\\x0c\\n\\x01k\\x18\\x05 \\x01(\\x02:\\x01\\x31\\x12\\x33\\n\\x06\\x65ngine\\x18\\x06 \\x01(\\x0e\\x32\\x1a.caffe.LRNParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\""5\\n\\nNormRegion\\x12\\x13\\n\\x0f\\x41\\x43ROSS_CHANNELS\\x10\\x00\\x12\\x12\\n\\x0eWITHIN_CHANNEL\\x10\\x01\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""Z\\n\\x13MemoryDataParameter\\x12\\x12\\n\\nbatch_size\\x18\\x01 \\x01(\\r\\x12\\x10\\n\\x08\\x63hannels\\x18\\x02 \\x01(\\r\\x12\\x0e\\n\\x06height\\x18\\x03 \\x01(\\r\\x12\\r\\n\\x05width\\x18\\x04 \\x01(\\r\\""\\xe8\\x08\\n\\x15MultiBoxLossParameter\\x12J\\n\\rloc_loss_type\\x18\\x01 \\x01(\\x0e\\x32(.caffe.MultiBoxLossParameter.LocLossType:\\tSMOOTH_L1\\x12J\\n\\x0e\\x63onf_loss_type\\x18\\x02 \\x01(\\x0e\\x32).caffe.MultiBoxLossParameter.ConfLossType:\\x07SOFTMAX\\x12\\x15\\n\\nloc_weight\\x18\\x03 \\x01(\\x02:\\x01\\x31\\x12\\x13\\n\\x0bnum_classes\\x18\\x04 \\x01(\\r\\x12\\x1c\\n\\x0eshare_location\\x18\\x05 \\x01(\\x08:\\x04true\\x12J\\n\\nmatch_type\\x18\\x06 \\x01(\\x0e\\x32&.caffe.MultiBoxLossParameter.MatchType:\\x0ePER_PREDICTION\\x12\\x1e\\n\\x11overlap_threshold\\x18\\x07 \\x01(\\x02:\\x03\\x30.5\\x12$\\n\\x16use_prior_for_matching\\x18\\x08 \\x01(\\x08:\\x04true\\x12\\x1e\\n\\x13\\x62\\x61\\x63kground_label_id\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x1e\\n\\x10use_difficult_gt\\x18\\n \\x01(\\x08:\\x04true\\x12\\x15\\n\\rdo_neg_mining\\x18\\x0b \\x01(\\x08\\x12\\x18\\n\\rneg_pos_ratio\\x18\\x0c \\x01(\\x02:\\x01\\x33\\x12\\x18\\n\\x0bneg_overlap\\x18\\r \\x01(\\x02:\\x03\\x30.5\\x12<\\n\\tcode_type\\x18\\x0e \\x01(\\x0e\\x32!.caffe.PriorBoxParameter.CodeType:\\x06\\x43ORNER\\x12(\\n\\x19\\x65ncode_variance_in_target\\x18\\x10 \\x01(\\x08:\\x05\\x66\\x61lse\\x12%\\n\\x16map_object_to_agnostic\\x18\\x11 \\x01(\\x08:\\x05\\x66\\x61lse\\x12)\\n\\x1aignore_cross_boundary_bbox\\x18\\x12 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x18\\n\\tbp_inside\\x18\\x13 \\x01(\\x08:\\x05\\x66\\x61lse\\x12J\\n\\x0bmining_type\\x18\\x14 \\x01(\\x0e\\x32\\\'.caffe.MultiBoxLossParameter.MiningType:\\x0cMAX_NEGATIVE\\x12\\x38\\n\\tnms_param\\x18\\x15 \\x01(\\x0b\\x32%.caffe.NonMaximumSuppressionParameter\\x12\\x17\\n\\x0bsample_size\\x18\\x16 \\x01(\\x05:\\x02\\x36\\x34\\x12 \\n\\x11use_prior_for_nms\\x18\\x17 \\x01(\\x08:\\x05\\x66\\x61lse\\""$\\n\\x0bLocLossType\\x12\\x06\\n\\x02L2\\x10\\x00\\x12\\r\\n\\tSMOOTH_L1\\x10\\x01\\"")\\n\\x0c\\x43onfLossType\\x12\\x0b\\n\\x07SOFTMAX\\x10\\x00\\x12\\x0c\\n\\x08LOGISTIC\\x10\\x01\\"".\\n\\tMatchType\\x12\\r\\n\\tBIPARTITE\\x10\\x00\\x12\\x12\\n\\x0ePER_PREDICTION\\x10\\x01\\"":\\n\\nMiningType\\x12\\x08\\n\\x04NONE\\x10\\x00\\x12\\x10\\n\\x0cMAX_NEGATIVE\\x10\\x01\\x12\\x10\\n\\x0cHARD_EXAMPLE\\x10\\x02\\""d\\n\\x0cMVNParameter\\x12 \\n\\x12normalize_variance\\x18\\x01 \\x01(\\x08:\\x04true\\x12\\x1e\\n\\x0f\\x61\\x63ross_channels\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x12\\n\\x03\\x65ps\\x18\\x03 \\x01(\\x02:\\x05\\x31\\x65-09\\""\\x92\\x01\\n\\x12NormalizeParameter\\x12\\x1c\\n\\x0e\\x61\\x63ross_spatial\\x18\\x01 \\x01(\\x08:\\x04true\\x12,\\n\\x0cscale_filler\\x18\\x02 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x1c\\n\\x0e\\x63hannel_shared\\x18\\x03 \\x01(\\x08:\\x04true\\x12\\x12\\n\\x03\\x65ps\\x18\\x04 \\x01(\\x02:\\x05\\x31\\x65-10\\""5\\n\\x12ParameterParameter\\x12\\x1f\\n\\x05shape\\x18\\x01 \\x01(\\x0b\\x32\\x10.caffe.BlobShape\\""!\\n\\x10PermuteParameter\\x12\\r\\n\\x05order\\x18\\x01 \\x03(\\r\\""\\xa2\\x03\\n\\x10PoolingParameter\\x12\\x35\\n\\x04pool\\x18\\x01 \\x01(\\x0e\\x32\\"".caffe.PoolingParameter.PoolMethod:\\x03MAX\\x12\\x0e\\n\\x03pad\\x18\\x04 \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_h\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_w\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x13\\n\\x0bkernel_size\\x18\\x02 \\x01(\\r\\x12\\x10\\n\\x08kernel_h\\x18\\x05 \\x01(\\r\\x12\\x10\\n\\x08kernel_w\\x18\\x06 \\x01(\\r\\x12\\x11\\n\\x06stride\\x18\\x03 \\x01(\\r:\\x01\\x31\\x12\\x10\\n\\x08stride_h\\x18\\x07 \\x01(\\r\\x12\\x10\\n\\x08stride_w\\x18\\x08 \\x01(\\r\\x12\\x37\\n\\x06\\x65ngine\\x18\\x0b \\x01(\\x0e\\x32\\x1e.caffe.PoolingParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x1d\\n\\x0eglobal_pooling\\x18\\x0c \\x01(\\x08:\\x05\\x66\\x61lse\\"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""F\\n\\x0ePowerParameter\\x12\\x10\\n\\x05power\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30\\""\\xb5\\x02\\n\\x11PriorBoxParameter\\x12\\x10\\n\\x08min_size\\x18\\x01 \\x03(\\x02\\x12\\x10\\n\\x08max_size\\x18\\x02 \\x03(\\x02\\x12\\x14\\n\\x0c\\x61spect_ratio\\x18\\x03 \\x03(\\x02\\x12\\x12\\n\\x04\\x66lip\\x18\\x04 \\x01(\\x08:\\x04true\\x12\\x13\\n\\x04\\x63lip\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x10\\n\\x08variance\\x18\\x06 \\x03(\\x02\\x12\\x10\\n\\x08img_size\\x18\\x07 \\x01(\\r\\x12\\r\\n\\x05img_h\\x18\\x08 \\x01(\\r\\x12\\r\\n\\x05img_w\\x18\\t \\x01(\\r\\x12\\x0c\\n\\x04step\\x18\\n \\x01(\\x02\\x12\\x0e\\n\\x06step_h\\x18\\x0b \\x01(\\x02\\x12\\x0e\\n\\x06step_w\\x18\\x0c \\x01(\\x02\\x12\\x13\\n\\x06offset\\x18\\r \\x01(\\x02:\\x03\\x30.5\\""8\\n\\x08\\x43odeType\\x12\\n\\n\\x06\\x43ORNER\\x10\\x01\\x12\\x0f\\n\\x0b\\x43\\x45NTER_SIZE\\x10\\x02\\x12\\x0f\\n\\x0b\\x43ORNER_SIZE\\x10\\x03\\""g\\n\\x0fPythonParameter\\x12\\x0e\\n\\x06module\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05layer\\x18\\x02 \\x01(\\t\\x12\\x13\\n\\tparam_str\\x18\\x03 \\x01(\\t:\\x00\\x12 \\n\\x11share_in_parallel\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\""\\xc0\\x01\\n\\x12RecurrentParameter\\x12\\x15\\n\\nnum_output\\x18\\x01 \\x01(\\r:\\x01\\x30\\x12-\\n\\rweight_filler\\x18\\x02 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x19\\n\\ndebug_info\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1c\\n\\rexpose_hidden\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\""\\xad\\x01\\n\\x12ReductionParameter\\x12=\\n\\toperation\\x18\\x01 \\x01(\\x0e\\x32%.caffe.ReductionParameter.ReductionOp:\\x03SUM\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x10\\n\\x05\\x63oeff\\x18\\x03 \\x01(\\x02:\\x01\\x31\\""5\\n\\x0bReductionOp\\x12\\x07\\n\\x03SUM\\x10\\x01\\x12\\x08\\n\\x04\\x41SUM\\x10\\x02\\x12\\t\\n\\x05SUMSQ\\x10\\x03\\x12\\x08\\n\\x04MEAN\\x10\\x04\\""\\x8d\\x01\\n\\rReLUParameter\\x12\\x19\\n\\x0enegative_slope\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\x34\\n\\x06\\x65ngine\\x18\\x02 \\x01(\\x0e\\x32\\x1b.caffe.ReLUParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""Z\\n\\x10ReshapeParameter\\x12\\x1f\\n\\x05shape\\x18\\x01 \\x01(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x14\\n\\x08num_axes\\x18\\x03 \\x01(\\x05:\\x02-1\\""\\xa5\\x01\\n\\x0eScaleParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x08num_axes\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12&\\n\\x06\\x66iller\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x18\\n\\tbias_term\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\x12+\\n\\x0b\\x62ias_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\""x\\n\\x10SigmoidParameter\\x12\\x37\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.SigmoidParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""L\\n\\x0eSliceParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x03 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x0bslice_point\\x18\\x02 \\x03(\\r\\x12\\x14\\n\\tslice_dim\\x18\\x01 \\x01(\\r:\\x01\\x31\\""\\x89\\x01\\n\\x10SoftmaxParameter\\x12\\x37\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.SoftmaxParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""r\\n\\rTanHParameter\\x12\\x34\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1b.caffe.TanHParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""/\\n\\rTileParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\r\\n\\x05tiles\\x18\\x02 \\x01(\\x05\\""*\\n\\x12ThresholdParameter\\x12\\x14\\n\\tthreshold\\x18\\x01 \\x01(\\x02:\\x01\\x30\\""\\xbb\\x01\\n\\x12VideoDataParameter\\x12?\\n\\nvideo_type\\x18\\x01 \\x01(\\x0e\\x32#.caffe.VideoDataParameter.VideoType:\\x06WEBCAM\\x12\\x14\\n\\tdevice_id\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x12\\n\\nvideo_file\\x18\\x03 \\x01(\\t\\x12\\x16\\n\\x0bskip_frames\\x18\\x04 \\x01(\\r:\\x01\\x30\\""\\""\\n\\tVideoType\\x12\\n\\n\\x06WEBCAM\\x10\\x00\\x12\\t\\n\\x05VIDEO\\x10\\x01\\""\\xc1\\x02\\n\\x13WindowDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x04 \\x01(\\r\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\x0c\\x66g_threshold\\x18\\x07 \\x01(\\x02:\\x03\\x30.5\\x12\\x19\\n\\x0c\\x62g_threshold\\x18\\x08 \\x01(\\x02:\\x03\\x30.5\\x12\\x19\\n\\x0b\\x66g_fraction\\x18\\t \\x01(\\x02:\\x04\\x30.25\\x12\\x16\\n\\x0b\\x63ontext_pad\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x17\\n\\tcrop_mode\\x18\\x0b \\x01(\\t:\\x04warp\\x12\\x1b\\n\\x0c\\x63\\x61\\x63he_images\\x18\\x0c \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\x0broot_folder\\x18\\r \\x01(\\t:\\x00\\""\\xeb\\x01\\n\\x0cSPPParameter\\x12\\x16\\n\\x0epyramid_height\\x18\\x01 \\x01(\\r\\x12\\x31\\n\\x04pool\\x18\\x02 \\x01(\\x0e\\x32\\x1e.caffe.SPPParameter.PoolMethod:\\x03MAX\\x12\\x33\\n\\x06\\x65ngine\\x18\\x06 \\x01(\\x0e\\x32\\x1a.caffe.SPPParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""\\xe0\\x13\\n\\x10V1LayerParameter\\x12\\x0e\\n\\x06\\x62ottom\\x18\\x02 \\x03(\\t\\x12\\x0b\\n\\x03top\\x18\\x03 \\x03(\\t\\x12\\x0c\\n\\x04name\\x18\\x04 \\x01(\\t\\x12$\\n\\x07include\\x18  \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12$\\n\\x07\\x65xclude\\x18! \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12/\\n\\x04type\\x18\\x05 \\x01(\\x0e\\x32!.caffe.V1LayerParameter.LayerType\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x0e\\n\\x05param\\x18\\xe9\\x07 \\x03(\\t\\x12>\\n\\x0f\\x62lob_share_mode\\x18\\xea\\x07 \\x03(\\x0e\\x32$.caffe.V1LayerParameter.DimCheckMode\\x12\\x10\\n\\x08\\x62lobs_lr\\x18\\x07 \\x03(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x08 \\x03(\\x02\\x12\\x13\\n\\x0bloss_weight\\x18# \\x03(\\x02\\x12\\x30\\n\\x0e\\x61\\x63\\x63uracy_param\\x18\\x1b \\x01(\\x0b\\x32\\x18.caffe.AccuracyParameter\\x12,\\n\\x0c\\x61rgmax_param\\x18\\x17 \\x01(\\x0b\\x32\\x16.caffe.ArgMaxParameter\\x12,\\n\\x0c\\x63oncat_param\\x18\\t \\x01(\\x0b\\x32\\x16.caffe.ConcatParameter\\x12?\\n\\x16\\x63ontrastive_loss_param\\x18( \\x01(\\x0b\\x32\\x1f.caffe.ContrastiveLossParameter\\x12\\x36\\n\\x11\\x63onvolution_param\\x18\\n \\x01(\\x0b\\x32\\x1b.caffe.ConvolutionParameter\\x12(\\n\\ndata_param\\x18\\x0b \\x01(\\x0b\\x32\\x14.caffe.DataParameter\\x12.\\n\\rdropout_param\\x18\\x0c \\x01(\\x0b\\x32\\x17.caffe.DropoutParameter\\x12\\x33\\n\\x10\\x64ummy_data_param\\x18\\x1a \\x01(\\x0b\\x32\\x19.caffe.DummyDataParameter\\x12.\\n\\reltwise_param\\x18\\x18 \\x01(\\x0b\\x32\\x17.caffe.EltwiseParameter\\x12&\\n\\texp_param\\x18) \\x01(\\x0b\\x32\\x13.caffe.ExpParameter\\x12\\x31\\n\\x0fhdf5_data_param\\x18\\r \\x01(\\x0b\\x32\\x18.caffe.HDF5DataParameter\\x12\\x35\\n\\x11hdf5_output_param\\x18\\x0e \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter\\x12\\x33\\n\\x10hinge_loss_param\\x18\\x1d \\x01(\\x0b\\x32\\x19.caffe.HingeLossParameter\\x12\\x33\\n\\x10image_data_param\\x18\\x0f \\x01(\\x0b\\x32\\x19.caffe.ImageDataParameter\\x12\\x39\\n\\x13infogain_loss_param\\x18\\x10 \\x01(\\x0b\\x32\\x1c.caffe.InfogainLossParameter\\x12\\x39\\n\\x13inner_product_param\\x18\\x11 \\x01(\\x0b\\x32\\x1c.caffe.InnerProductParameter\\x12&\\n\\tlrn_param\\x18\\x12 \\x01(\\x0b\\x32\\x13.caffe.LRNParameter\\x12\\x35\\n\\x11memory_data_param\\x18\\x16 \\x01(\\x0b\\x32\\x1a.caffe.MemoryDataParameter\\x12&\\n\\tmvn_param\\x18\\"" \\x01(\\x0b\\x32\\x13.caffe.MVNParameter\\x12.\\n\\rpooling_param\\x18\\x13 \\x01(\\x0b\\x32\\x17.caffe.PoolingParameter\\x12*\\n\\x0bpower_param\\x18\\x15 \\x01(\\x0b\\x32\\x15.caffe.PowerParameter\\x12(\\n\\nrelu_param\\x18\\x1e \\x01(\\x0b\\x32\\x14.caffe.ReLUParameter\\x12.\\n\\rsigmoid_param\\x18& \\x01(\\x0b\\x32\\x17.caffe.SigmoidParameter\\x12.\\n\\rsoftmax_param\\x18\\\' \\x01(\\x0b\\x32\\x17.caffe.SoftmaxParameter\\x12*\\n\\x0bslice_param\\x18\\x1f \\x01(\\x0b\\x32\\x15.caffe.SliceParameter\\x12(\\n\\ntanh_param\\x18% \\x01(\\x0b\\x32\\x14.caffe.TanHParameter\\x12\\x32\\n\\x0fthreshold_param\\x18\\x19 \\x01(\\x0b\\x32\\x19.caffe.ThresholdParameter\\x12\\x35\\n\\x11window_data_param\\x18\\x14 \\x01(\\x0b\\x32\\x1a.caffe.WindowDataParameter\\x12\\x37\\n\\x0ftransform_param\\x18$ \\x01(\\x0b\\x32\\x1e.caffe.TransformationParameter\\x12(\\n\\nloss_param\\x18* \\x01(\\x0b\\x32\\x14.caffe.LossParameter\\x12&\\n\\x05layer\\x18\\x01 \\x01(\\x0b\\x32\\x17.caffe.V0LayerParameter\\""\\xd8\\x04\\n\\tLayerType\\x12\\x08\\n\\x04NONE\\x10\\x00\\x12\\n\\n\\x06\\x41\\x42SVAL\\x10#\\x12\\x0c\\n\\x08\\x41\\x43\\x43URACY\\x10\\x01\\x12\\n\\n\\x06\\x41RGMAX\\x10\\x1e\\x12\\x08\\n\\x04\\x42NLL\\x10\\x02\\x12\\n\\n\\x06\\x43ONCAT\\x10\\x03\\x12\\x14\\n\\x10\\x43ONTRASTIVE_LOSS\\x10%\\x12\\x0f\\n\\x0b\\x43ONVOLUTION\\x10\\x04\\x12\\x08\\n\\x04\\x44\\x41TA\\x10\\x05\\x12\\x11\\n\\rDECONVOLUTION\\x10\\\'\\x12\\x0b\\n\\x07\\x44ROPOUT\\x10\\x06\\x12\\x0e\\n\\nDUMMY_DATA\\x10 \\x12\\x12\\n\\x0e\\x45UCLIDEAN_LOSS\\x10\\x07\\x12\\x0b\\n\\x07\\x45LTWISE\\x10\\x19\\x12\\x07\\n\\x03\\x45XP\\x10&\\x12\\x0b\\n\\x07\\x46LATTEN\\x10\\x08\\x12\\r\\n\\tHDF5_DATA\\x10\\t\\x12\\x0f\\n\\x0bHDF5_OUTPUT\\x10\\n\\x12\\x0e\\n\\nHINGE_LOSS\\x10\\x1c\\x12\\n\\n\\x06IM2COL\\x10\\x0b\\x12\\x0e\\n\\nIMAGE_DATA\\x10\\x0c\\x12\\x11\\n\\rINFOGAIN_LOSS\\x10\\r\\x12\\x11\\n\\rINNER_PRODUCT\\x10\\x0e\\x12\\x07\\n\\x03LRN\\x10\\x0f\\x12\\x0f\\n\\x0bMEMORY_DATA\\x10\\x1d\\x12\\x1d\\n\\x19MULTINOMIAL_LOGISTIC_LOSS\\x10\\x10\\x12\\x07\\n\\x03MVN\\x10\\""\\x12\\x0b\\n\\x07POOLING\\x10\\x11\\x12\\t\\n\\x05POWER\\x10\\x1a\\x12\\x08\\n\\x04RELU\\x10\\x12\\x12\\x0b\\n\\x07SIGMOID\\x10\\x13\\x12\\x1e\\n\\x1aSIGMOID_CROSS_ENTROPY_LOSS\\x10\\x1b\\x12\\x0b\\n\\x07SILENCE\\x10$\\x12\\x0b\\n\\x07SOFTMAX\\x10\\x14\\x12\\x10\\n\\x0cSOFTMAX_LOSS\\x10\\x15\\x12\\t\\n\\x05SPLIT\\x10\\x16\\x12\\t\\n\\x05SLICE\\x10!\\x12\\x08\\n\\x04TANH\\x10\\x17\\x12\\x0f\\n\\x0bWINDOW_DATA\\x10\\x18\\x12\\r\\n\\tTHRESHOLD\\x10\\x1f\\""*\\n\\x0c\\x44imCheckMode\\x12\\n\\n\\x06STRICT\\x10\\x00\\x12\\x0e\\n\\nPERMISSIVE\\x10\\x01\\""\\xfd\\x07\\n\\x10V0LayerParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04type\\x18\\x02 \\x01(\\t\\x12\\x12\\n\\nnum_output\\x18\\x03 \\x01(\\r\\x12\\x16\\n\\x08\\x62iasterm\\x18\\x04 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x06 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x0e\\n\\x03pad\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x12\\n\\nkernelsize\\x18\\x08 \\x01(\\r\\x12\\x10\\n\\x05group\\x18\\t \\x01(\\r:\\x01\\x31\\x12\\x11\\n\\x06stride\\x18\\n \\x01(\\r:\\x01\\x31\\x12\\x35\\n\\x04pool\\x18\\x0b \\x01(\\x0e\\x32\\"".caffe.V0LayerParameter.PoolMethod:\\x03MAX\\x12\\x1a\\n\\rdropout_ratio\\x18\\x0c \\x01(\\x02:\\x03\\x30.5\\x12\\x15\\n\\nlocal_size\\x18\\r \\x01(\\r:\\x01\\x35\\x12\\x10\\n\\x05\\x61lpha\\x18\\x0e \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x04\\x62\\x65ta\\x18\\x0f \\x01(\\x02:\\x04\\x30.75\\x12\\x0c\\n\\x01k\\x18\\x16 \\x01(\\x02:\\x01\\x31\\x12\\x0e\\n\\x06source\\x18\\x10 \\x01(\\t\\x12\\x10\\n\\x05scale\\x18\\x11 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x08meanfile\\x18\\x12 \\x01(\\t\\x12\\x11\\n\\tbatchsize\\x18\\x13 \\x01(\\r\\x12\\x13\\n\\x08\\x63ropsize\\x18\\x14 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x15 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x32 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x10\\n\\x08\\x62lobs_lr\\x18\\x33 \\x03(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x34 \\x03(\\x02\\x12\\x14\\n\\trand_skip\\x18\\x35 \\x01(\\r:\\x01\\x30\\x12\\x1d\\n\\x10\\x64\\x65t_fg_threshold\\x18\\x36 \\x01(\\x02:\\x03\\x30.5\\x12\\x1d\\n\\x10\\x64\\x65t_bg_threshold\\x18\\x37 \\x01(\\x02:\\x03\\x30.5\\x12\\x1d\\n\\x0f\\x64\\x65t_fg_fraction\\x18\\x38 \\x01(\\x02:\\x04\\x30.25\\x12\\x1a\\n\\x0f\\x64\\x65t_context_pad\\x18: \\x01(\\r:\\x01\\x30\\x12\\x1b\\n\\rdet_crop_mode\\x18; \\x01(\\t:\\x04warp\\x12\\x12\\n\\x07new_num\\x18< \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0cnew_channels\\x18= \\x01(\\x05:\\x01\\x30\\x12\\x15\\n\\nnew_height\\x18> \\x01(\\x05:\\x01\\x30\\x12\\x14\\n\\tnew_width\\x18? \\x01(\\x05:\\x01\\x30\\x12\\x1d\\n\\x0eshuffle_images\\x18@ \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\nconcat_dim\\x18\\x41 \\x01(\\r:\\x01\\x31\\x12\\x36\\n\\x11hdf5_output_param\\x18\\xe9\\x07 \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter\\"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02\\""W\\n\\x0ePReLUParameter\\x12&\\n\\x06\\x66iller\\x18\\x01 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x1d\\n\\x0e\\x63hannel_shared\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse*\\x1c\\n\\x05Phase\\x12\\t\\n\\x05TRAIN\\x10\\x00\\x12\\x08\\n\\x04TEST\\x10\\x01\')\n)\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\n_PHASE = _descriptor.EnumDescriptor(\n  name=\'Phase\',\n  full_name=\'caffe.Phase\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'TRAIN\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'TEST\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=22289,\n  serialized_end=22317,\n)\n_sym_db.RegisterEnumDescriptor(_PHASE)\n\nPhase = enum_type_wrapper.EnumTypeWrapper(_PHASE)\nTRAIN = 0\nTEST = 1\n\n\n_EMITCONSTRAINT_EMITTYPE = _descriptor.EnumDescriptor(\n  name=\'EmitType\',\n  full_name=\'caffe.EmitConstraint.EmitType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'CENTER\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'MIN_OVERLAP\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=1146,\n  serialized_end=1185,\n)\n_sym_db.RegisterEnumDescriptor(_EMITCONSTRAINT_EMITTYPE)\n\n_ANNOTATEDDATUM_ANNOTATIONTYPE = _descriptor.EnumDescriptor(\n  name=\'AnnotationType\',\n  full_name=\'caffe.AnnotatedDatum.AnnotationType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'BBOX\', index=0, number=0,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=1629,\n  serialized_end=1655,\n)\n_sym_db.RegisterEnumDescriptor(_ANNOTATEDDATUM_ANNOTATIONTYPE)\n\n_FILLERPARAMETER_VARIANCENORM = _descriptor.EnumDescriptor(\n  name=\'VarianceNorm\',\n  full_name=\'caffe.FillerParameter.VarianceNorm\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'FAN_IN\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'FAN_OUT\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'AVERAGE\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=1872,\n  serialized_end=1924,\n)\n_sym_db.RegisterEnumDescriptor(_FILLERPARAMETER_VARIANCENORM)\n\n_SOLVERPARAMETER_SNAPSHOTFORMAT = _descriptor.EnumDescriptor(\n  name=\'SnapshotFormat\',\n  full_name=\'caffe.SolverParameter.SnapshotFormat\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'HDF5\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'BINARYPROTO\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=3480,\n  serialized_end=3523,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SNAPSHOTFORMAT)\n\n_SOLVERPARAMETER_SOLVERMODE = _descriptor.EnumDescriptor(\n  name=\'SolverMode\',\n  full_name=\'caffe.SolverParameter.SolverMode\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'CPU\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'GPU\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=3525,\n  serialized_end=3555,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SOLVERMODE)\n\n_SOLVERPARAMETER_SOLVERTYPE = _descriptor.EnumDescriptor(\n  name=\'SolverType\',\n  full_name=\'caffe.SolverParameter.SolverType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'SGD\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'NESTEROV\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'ADAGRAD\', index=2, number=2,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'RMSPROP\', index=3, number=3,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'ADADELTA\', index=4, number=4,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'ADAM\', index=5, number=5,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=3557,\n  serialized_end=3642,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SOLVERTYPE)\n\n_PARAMSPEC_DIMCHECKMODE = _descriptor.EnumDescriptor(\n  name=\'DimCheckMode\',\n  full_name=\'caffe.ParamSpec.DimCheckMode\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'STRICT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'PERMISSIVE\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=4131,\n  serialized_end=4173,\n)\n_sym_db.RegisterEnumDescriptor(_PARAMSPEC_DIMCHECKMODE)\n\n_RESIZEPARAMETER_RESIZE_MODE = _descriptor.EnumDescriptor(\n  name=\'Resize_mode\',\n  full_name=\'caffe.ResizeParameter.Resize_mode\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'WARP\', index=0, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'FIT_SMALL_SIZE\', index=1, number=2,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'FIT_LARGE_SIZE_AND_PAD\', index=2, number=3,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=8427,\n  serialized_end=8498,\n)\n_sym_db.RegisterEnumDescriptor(_RESIZEPARAMETER_RESIZE_MODE)\n\n_RESIZEPARAMETER_PAD_MODE = _descriptor.EnumDescriptor(\n  name=\'Pad_mode\',\n  full_name=\'caffe.ResizeParameter.Pad_mode\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'CONSTANT\', index=0, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'MIRRORED\', index=1, number=2,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'REPEAT_NEAREST\', index=2, number=3,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=8500,\n  serialized_end=8558,\n)\n_sym_db.RegisterEnumDescriptor(_RESIZEPARAMETER_PAD_MODE)\n\n_RESIZEPARAMETER_INTERP_MODE = _descriptor.EnumDescriptor(\n  name=\'Interp_mode\',\n  full_name=\'caffe.ResizeParameter.Interp_mode\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'LINEAR\', index=0, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'AREA\', index=1, number=2,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'NEAREST\', index=2, number=3,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUBIC\', index=3, number=4,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'LANCZOS4\', index=4, number=5,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=8560,\n  serialized_end=8633,\n)\n_sym_db.RegisterEnumDescriptor(_RESIZEPARAMETER_INTERP_MODE)\n\n_LOSSPARAMETER_NORMALIZATIONMODE = _descriptor.EnumDescriptor(\n  name=\'NormalizationMode\',\n  full_name=\'caffe.LossParameter.NormalizationMode\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'FULL\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'VALID\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'BATCH_SIZE\', index=2, number=2,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'PRE_FIXED\', index=3, number=3,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'NONE\', index=4, number=4,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=9613,\n  serialized_end=9694,\n)\n_sym_db.RegisterEnumDescriptor(_LOSSPARAMETER_NORMALIZATIONMODE)\n\n_CONVOLUTIONPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n  name=\'Engine\',\n  full_name=\'caffe.ConvolutionParameter.Engine\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'DEFAULT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CAFFE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUDNN\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=10811,\n  serialized_end=10854,\n)\n_sym_db.RegisterEnumDescriptor(_CONVOLUTIONPARAMETER_ENGINE)\n\n_DATAPARAMETER_DB = _descriptor.EnumDescriptor(\n  name=\'DB\',\n  full_name=\'caffe.DataParameter.DB\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'LEVELDB\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'LMDB\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=11172,\n  serialized_end=11199,\n)\n_sym_db.RegisterEnumDescriptor(_DATAPARAMETER_DB)\n\n_ELTWISEPARAMETER_ELTWISEOP = _descriptor.EnumDescriptor(\n  name=\'EltwiseOp\',\n  full_name=\'caffe.EltwiseParameter.EltwiseOp\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'PROD\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SUM\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'MAX\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=12532,\n  serialized_end=12571,\n)\n_sym_db.RegisterEnumDescriptor(_ELTWISEPARAMETER_ELTWISEOP)\n\n_HINGELOSSPARAMETER_NORM = _descriptor.EnumDescriptor(\n  name=\'Norm\',\n  full_name=\'caffe.HingeLossParameter.Norm\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'L1\', index=0, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'L2\', index=1, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=13106,\n  serialized_end=13128,\n)\n_sym_db.RegisterEnumDescriptor(_HINGELOSSPARAMETER_NORM)\n\n_LRNPARAMETER_NORMREGION = _descriptor.EnumDescriptor(\n  name=\'NormRegion\',\n  full_name=\'caffe.LRNParameter.NormRegion\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'ACROSS_CHANNELS\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'WITHIN_CHANNEL\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=13995,\n  serialized_end=14048,\n)\n_sym_db.RegisterEnumDescriptor(_LRNPARAMETER_NORMREGION)\n\n_LRNPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n  name=\'Engine\',\n  full_name=\'caffe.LRNParameter.Engine\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'DEFAULT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CAFFE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUDNN\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=10811,\n  serialized_end=10854,\n)\n_sym_db.RegisterEnumDescriptor(_LRNPARAMETER_ENGINE)\n\n_MULTIBOXLOSSPARAMETER_LOCLOSSTYPE = _descriptor.EnumDescriptor(\n  name=\'LocLossType\',\n  full_name=\'caffe.MultiBoxLossParameter.LocLossType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'L2\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SMOOTH_L1\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=15129,\n  serialized_end=15165,\n)\n_sym_db.RegisterEnumDescriptor(_MULTIBOXLOSSPARAMETER_LOCLOSSTYPE)\n\n_MULTIBOXLOSSPARAMETER_CONFLOSSTYPE = _descriptor.EnumDescriptor(\n  name=\'ConfLossType\',\n  full_name=\'caffe.MultiBoxLossParameter.ConfLossType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'SOFTMAX\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'LOGISTIC\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=15167,\n  serialized_end=15208,\n)\n_sym_db.RegisterEnumDescriptor(_MULTIBOXLOSSPARAMETER_CONFLOSSTYPE)\n\n_MULTIBOXLOSSPARAMETER_MATCHTYPE = _descriptor.EnumDescriptor(\n  name=\'MatchType\',\n  full_name=\'caffe.MultiBoxLossParameter.MatchType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'BIPARTITE\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'PER_PREDICTION\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=15210,\n  serialized_end=15256,\n)\n_sym_db.RegisterEnumDescriptor(_MULTIBOXLOSSPARAMETER_MATCHTYPE)\n\n_MULTIBOXLOSSPARAMETER_MININGTYPE = _descriptor.EnumDescriptor(\n  name=\'MiningType\',\n  full_name=\'caffe.MultiBoxLossParameter.MiningType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'NONE\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'MAX_NEGATIVE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'HARD_EXAMPLE\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=15258,\n  serialized_end=15316,\n)\n_sym_db.RegisterEnumDescriptor(_MULTIBOXLOSSPARAMETER_MININGTYPE)\n\n_POOLINGPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n  name=\'PoolMethod\',\n  full_name=\'caffe.PoolingParameter.PoolMethod\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'MAX\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'AVE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'STOCHASTIC\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=15987,\n  serialized_end=16033,\n)\n_sym_db.RegisterEnumDescriptor(_POOLINGPARAMETER_POOLMETHOD)\n\n_POOLINGPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n  name=\'Engine\',\n  full_name=\'caffe.PoolingParameter.Engine\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'DEFAULT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CAFFE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUDNN\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=10811,\n  serialized_end=10854,\n)\n_sym_db.RegisterEnumDescriptor(_POOLINGPARAMETER_ENGINE)\n\n_PRIORBOXPARAMETER_CODETYPE = _descriptor.EnumDescriptor(\n  name=\'CodeType\',\n  full_name=\'caffe.PriorBoxParameter.CodeType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'CORNER\', index=0, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CENTER_SIZE\', index=1, number=2,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CORNER_SIZE\', index=2, number=3,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=16406,\n  serialized_end=16462,\n)\n_sym_db.RegisterEnumDescriptor(_PRIORBOXPARAMETER_CODETYPE)\n\n_REDUCTIONPARAMETER_REDUCTIONOP = _descriptor.EnumDescriptor(\n  name=\'ReductionOp\',\n  full_name=\'caffe.ReductionParameter.ReductionOp\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'SUM\', index=0, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'ASUM\', index=1, number=2,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SUMSQ\', index=2, number=3,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'MEAN\', index=3, number=4,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=16885,\n  serialized_end=16938,\n)\n_sym_db.RegisterEnumDescriptor(_REDUCTIONPARAMETER_REDUCTIONOP)\n\n_RELUPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n  name=\'Engine\',\n  full_name=\'caffe.ReLUParameter.Engine\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'DEFAULT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CAFFE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUDNN\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=10811,\n  serialized_end=10854,\n)\n_sym_db.RegisterEnumDescriptor(_RELUPARAMETER_ENGINE)\n\n_SIGMOIDPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n  name=\'Engine\',\n  full_name=\'caffe.SigmoidParameter.Engine\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'DEFAULT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CAFFE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUDNN\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=10811,\n  serialized_end=10854,\n)\n_sym_db.RegisterEnumDescriptor(_SIGMOIDPARAMETER_ENGINE)\n\n_SOFTMAXPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n  name=\'Engine\',\n  full_name=\'caffe.SoftmaxParameter.Engine\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'DEFAULT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CAFFE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUDNN\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=10811,\n  serialized_end=10854,\n)\n_sym_db.RegisterEnumDescriptor(_SOFTMAXPARAMETER_ENGINE)\n\n_TANHPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n  name=\'Engine\',\n  full_name=\'caffe.TanHParameter.Engine\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'DEFAULT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CAFFE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUDNN\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=10811,\n  serialized_end=10854,\n)\n_sym_db.RegisterEnumDescriptor(_TANHPARAMETER_ENGINE)\n\n_VIDEODATAPARAMETER_VIDEOTYPE = _descriptor.EnumDescriptor(\n  name=\'VideoType\',\n  full_name=\'caffe.VideoDataParameter.VideoType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'WEBCAM\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'VIDEO\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=18047,\n  serialized_end=18081,\n)\n_sym_db.RegisterEnumDescriptor(_VIDEODATAPARAMETER_VIDEOTYPE)\n\n_SPPPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n  name=\'PoolMethod\',\n  full_name=\'caffe.SPPParameter.PoolMethod\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'MAX\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'AVE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'STOCHASTIC\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=15987,\n  serialized_end=16033,\n)\n_sym_db.RegisterEnumDescriptor(_SPPPARAMETER_POOLMETHOD)\n\n_SPPPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n  name=\'Engine\',\n  full_name=\'caffe.SPPParameter.Engine\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'DEFAULT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CAFFE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CUDNN\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=10811,\n  serialized_end=10854,\n)\n_sym_db.RegisterEnumDescriptor(_SPPPARAMETER_ENGINE)\n\n_V1LAYERPARAMETER_LAYERTYPE = _descriptor.EnumDescriptor(\n  name=\'LayerType\',\n  full_name=\'caffe.V1LayerParameter.LayerType\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'NONE\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'ABSVAL\', index=1, number=35,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'ACCURACY\', index=2, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'ARGMAX\', index=3, number=30,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'BNLL\', index=4, number=2,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CONCAT\', index=5, number=3,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CONTRASTIVE_LOSS\', index=6, number=37,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'CONVOLUTION\', index=7, number=4,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'DATA\', index=8, number=5,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'DECONVOLUTION\', index=9, number=39,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'DROPOUT\', index=10, number=6,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'DUMMY_DATA\', index=11, number=32,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'EUCLIDEAN_LOSS\', index=12, number=7,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'ELTWISE\', index=13, number=25,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'EXP\', index=14, number=38,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'FLATTEN\', index=15, number=8,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'HDF5_DATA\', index=16, number=9,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'HDF5_OUTPUT\', index=17, number=10,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'HINGE_LOSS\', index=18, number=28,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'IM2COL\', index=19, number=11,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'IMAGE_DATA\', index=20, number=12,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'INFOGAIN_LOSS\', index=21, number=13,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'INNER_PRODUCT\', index=22, number=14,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'LRN\', index=23, number=15,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'MEMORY_DATA\', index=24, number=29,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'MULTINOMIAL_LOGISTIC_LOSS\', index=25, number=16,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'MVN\', index=26, number=34,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'POOLING\', index=27, number=17,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'POWER\', index=28, number=26,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'RELU\', index=29, number=18,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SIGMOID\', index=30, number=19,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SIGMOID_CROSS_ENTROPY_LOSS\', index=31, number=27,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SILENCE\', index=32, number=36,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SOFTMAX\', index=33, number=20,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SOFTMAX_LOSS\', index=34, number=21,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SPLIT\', index=35, number=22,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'SLICE\', index=36, number=33,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'TANH\', index=37, number=23,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'WINDOW_DATA\', index=38, number=24,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'THRESHOLD\', index=39, number=31,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=20530,\n  serialized_end=21130,\n)\n_sym_db.RegisterEnumDescriptor(_V1LAYERPARAMETER_LAYERTYPE)\n\n_V1LAYERPARAMETER_DIMCHECKMODE = _descriptor.EnumDescriptor(\n  name=\'DimCheckMode\',\n  full_name=\'caffe.V1LayerParameter.DimCheckMode\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'STRICT\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'PERMISSIVE\', index=1, number=1,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=4131,\n  serialized_end=4173,\n)\n_sym_db.RegisterEnumDescriptor(_V1LAYERPARAMETER_DIMCHECKMODE)\n\n_V0LAYERPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n  name=\'PoolMethod\',\n  full_name=\'caffe.V0LayerParameter.PoolMethod\',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name=\'MAX\', index=0, number=0,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'AVE\', index=1, number=1,\n      options=None,\n      type=None),\n    _descriptor.EnumValueDescriptor(\n      name=\'STOCHASTIC\', index=2, number=2,\n      options=None,\n      type=None),\n  ],\n  containing_type=None,\n  options=None,\n  serialized_start=15987,\n  serialized_end=16033,\n)\n_sym_db.RegisterEnumDescriptor(_V0LAYERPARAMETER_POOLMETHOD)\n\n\n_BLOBSHAPE = _descriptor.Descriptor(\n  name=\'BlobShape\',\n  full_name=\'caffe.BlobShape\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'dim\', full_name=\'caffe.BlobShape.dim\', index=0,\n      number=1, type=3, cpp_type=2, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=22,\n  serialized_end=50,\n)\n\n\n_BLOBPROTO = _descriptor.Descriptor(\n  name=\'BlobProto\',\n  full_name=\'caffe.BlobProto\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'shape\', full_name=\'caffe.BlobProto.shape\', index=0,\n      number=7, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'data\', full_name=\'caffe.BlobProto.data\', index=1,\n      number=5, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))),\n    _descriptor.FieldDescriptor(\n      name=\'diff\', full_name=\'caffe.BlobProto.diff\', index=2,\n      number=6, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))),\n    _descriptor.FieldDescriptor(\n      name=\'double_data\', full_name=\'caffe.BlobProto.double_data\', index=3,\n      number=8, type=1, cpp_type=5, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))),\n    _descriptor.FieldDescriptor(\n      name=\'double_diff\', full_name=\'caffe.BlobProto.double_diff\', index=4,\n      number=9, type=1, cpp_type=5, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))),\n    _descriptor.FieldDescriptor(\n      name=\'num\', full_name=\'caffe.BlobProto.num\', index=5,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'channels\', full_name=\'caffe.BlobProto.channels\', index=6,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'height\', full_name=\'caffe.BlobProto.height\', index=7,\n      number=3, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'width\', full_name=\'caffe.BlobProto.width\', index=8,\n      number=4, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=53,\n  serialized_end=257,\n)\n\n\n_BLOBPROTOVECTOR = _descriptor.Descriptor(\n  name=\'BlobProtoVector\',\n  full_name=\'caffe.BlobProtoVector\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'blobs\', full_name=\'caffe.BlobProtoVector.blobs\', index=0,\n      number=1, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=259,\n  serialized_end=309,\n)\n\n\n_DATUM = _descriptor.Descriptor(\n  name=\'Datum\',\n  full_name=\'caffe.Datum\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'channels\', full_name=\'caffe.Datum.channels\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'height\', full_name=\'caffe.Datum.height\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'width\', full_name=\'caffe.Datum.width\', index=2,\n      number=3, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'data\', full_name=\'caffe.Datum.data\', index=3,\n      number=4, type=12, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b(""""),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'label\', full_name=\'caffe.Datum.label\', index=4,\n      number=5, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'float_data\', full_name=\'caffe.Datum.float_data\', index=5,\n      number=6, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'encoded\', full_name=\'caffe.Datum.encoded\', index=6,\n      number=7, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=312,\n  serialized_end=441,\n)\n\n\n_LABELMAPITEM = _descriptor.Descriptor(\n  name=\'LabelMapItem\',\n  full_name=\'caffe.LabelMapItem\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'name\', full_name=\'caffe.LabelMapItem.name\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'label\', full_name=\'caffe.LabelMapItem.label\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'display_name\', full_name=\'caffe.LabelMapItem.display_name\', index=2,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=443,\n  serialized_end=508,\n)\n\n\n_LABELMAP = _descriptor.Descriptor(\n  name=\'LabelMap\',\n  full_name=\'caffe.LabelMap\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'item\', full_name=\'caffe.LabelMap.item\', index=0,\n      number=1, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=510,\n  serialized_end=555,\n)\n\n\n_SAMPLER = _descriptor.Descriptor(\n  name=\'Sampler\',\n  full_name=\'caffe.Sampler\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'min_scale\', full_name=\'caffe.Sampler.min_scale\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_scale\', full_name=\'caffe.Sampler.max_scale\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'min_aspect_ratio\', full_name=\'caffe.Sampler.min_aspect_ratio\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_aspect_ratio\', full_name=\'caffe.Sampler.max_aspect_ratio\', index=3,\n      number=4, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=557,\n  serialized_end=668,\n)\n\n\n_SAMPLECONSTRAINT = _descriptor.Descriptor(\n  name=\'SampleConstraint\',\n  full_name=\'caffe.SampleConstraint\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'min_jaccard_overlap\', full_name=\'caffe.SampleConstraint.min_jaccard_overlap\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_jaccard_overlap\', full_name=\'caffe.SampleConstraint.max_jaccard_overlap\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'min_sample_coverage\', full_name=\'caffe.SampleConstraint.min_sample_coverage\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_sample_coverage\', full_name=\'caffe.SampleConstraint.max_sample_coverage\', index=3,\n      number=4, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'min_object_coverage\', full_name=\'caffe.SampleConstraint.min_object_coverage\', index=4,\n      number=5, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_object_coverage\', full_name=\'caffe.SampleConstraint.max_object_coverage\', index=5,\n      number=6, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=671,\n  serialized_end=863,\n)\n\n\n_BATCHSAMPLER = _descriptor.Descriptor(\n  name=\'BatchSampler\',\n  full_name=\'caffe.BatchSampler\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'use_original_image\', full_name=\'caffe.BatchSampler.use_original_image\', index=0,\n      number=1, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'sampler\', full_name=\'caffe.BatchSampler.sampler\', index=1,\n      number=2, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'sample_constraint\', full_name=\'caffe.BatchSampler.sample_constraint\', index=2,\n      number=3, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_sample\', full_name=\'caffe.BatchSampler.max_sample\', index=3,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_trials\', full_name=\'caffe.BatchSampler.max_trials\', index=4,\n      number=5, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=100,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=866,\n  serialized_end=1044,\n)\n\n\n_EMITCONSTRAINT = _descriptor.Descriptor(\n  name=\'EmitConstraint\',\n  full_name=\'caffe.EmitConstraint\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'emit_type\', full_name=\'caffe.EmitConstraint.emit_type\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'emit_overlap\', full_name=\'caffe.EmitConstraint.emit_overlap\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _EMITCONSTRAINT_EMITTYPE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=1047,\n  serialized_end=1185,\n)\n\n\n_NORMALIZEDBBOX = _descriptor.Descriptor(\n  name=\'NormalizedBBox\',\n  full_name=\'caffe.NormalizedBBox\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'xmin\', full_name=\'caffe.NormalizedBBox.xmin\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'ymin\', full_name=\'caffe.NormalizedBBox.ymin\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'xmax\', full_name=\'caffe.NormalizedBBox.xmax\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'ymax\', full_name=\'caffe.NormalizedBBox.ymax\', index=3,\n      number=4, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'label\', full_name=\'caffe.NormalizedBBox.label\', index=4,\n      number=5, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'difficult\', full_name=\'caffe.NormalizedBBox.difficult\', index=5,\n      number=6, type=8, cpp_type=7, label=1,\n      has_default_value=False, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'score\', full_name=\'caffe.NormalizedBBox.score\', index=6,\n      number=7, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'size\', full_name=\'caffe.NormalizedBBox.size\', index=7,\n      number=8, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=1188,\n  serialized_end=1323,\n)\n\n\n_ANNOTATION = _descriptor.Descriptor(\n  name=\'Annotation\',\n  full_name=\'caffe.Annotation\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'instance_id\', full_name=\'caffe.Annotation.instance_id\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bbox\', full_name=\'caffe.Annotation.bbox\', index=1,\n      number=2, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=1325,\n  serialized_end=1398,\n)\n\n\n_ANNOTATIONGROUP = _descriptor.Descriptor(\n  name=\'AnnotationGroup\',\n  full_name=\'caffe.AnnotationGroup\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'group_label\', full_name=\'caffe.AnnotationGroup.group_label\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'annotation\', full_name=\'caffe.AnnotationGroup.annotation\', index=1,\n      number=2, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=1400,\n  serialized_end=1477,\n)\n\n\n_ANNOTATEDDATUM = _descriptor.Descriptor(\n  name=\'AnnotatedDatum\',\n  full_name=\'caffe.AnnotatedDatum\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'datum\', full_name=\'caffe.AnnotatedDatum.datum\', index=0,\n      number=1, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'type\', full_name=\'caffe.AnnotatedDatum.type\', index=1,\n      number=2, type=14, cpp_type=8, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'annotation_group\', full_name=\'caffe.AnnotatedDatum.annotation_group\', index=2,\n      number=3, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _ANNOTATEDDATUM_ANNOTATIONTYPE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=1480,\n  serialized_end=1655,\n)\n\n\n_FILLERPARAMETER = _descriptor.Descriptor(\n  name=\'FillerParameter\',\n  full_name=\'caffe.FillerParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'type\', full_name=\'caffe.FillerParameter.type\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b(""constant"").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'value\', full_name=\'caffe.FillerParameter.value\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'min\', full_name=\'caffe.FillerParameter.min\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max\', full_name=\'caffe.FillerParameter.max\', index=3,\n      number=4, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mean\', full_name=\'caffe.FillerParameter.mean\', index=4,\n      number=5, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'std\', full_name=\'caffe.FillerParameter.std\', index=5,\n      number=6, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'sparse\', full_name=\'caffe.FillerParameter.sparse\', index=6,\n      number=7, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'variance_norm\', full_name=\'caffe.FillerParameter.variance_norm\', index=7,\n      number=8, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _FILLERPARAMETER_VARIANCENORM,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=1658,\n  serialized_end=1924,\n)\n\n\n_NETPARAMETER = _descriptor.Descriptor(\n  name=\'NetParameter\',\n  full_name=\'caffe.NetParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'name\', full_name=\'caffe.NetParameter.name\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'input\', full_name=\'caffe.NetParameter.input\', index=1,\n      number=3, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'input_shape\', full_name=\'caffe.NetParameter.input_shape\', index=2,\n      number=8, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'input_dim\', full_name=\'caffe.NetParameter.input_dim\', index=3,\n      number=4, type=5, cpp_type=1, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'force_backward\', full_name=\'caffe.NetParameter.force_backward\', index=4,\n      number=5, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'state\', full_name=\'caffe.NetParameter.state\', index=5,\n      number=6, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'debug_info\', full_name=\'caffe.NetParameter.debug_info\', index=6,\n      number=7, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'layer\', full_name=\'caffe.NetParameter.layer\', index=7,\n      number=100, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'layers\', full_name=\'caffe.NetParameter.layers\', index=8,\n      number=2, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=1927,\n  serialized_end=2197,\n)\n\n\n_SOLVERPARAMETER = _descriptor.Descriptor(\n  name=\'SolverParameter\',\n  full_name=\'caffe.SolverParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'net\', full_name=\'caffe.SolverParameter.net\', index=0,\n      number=24, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'net_param\', full_name=\'caffe.SolverParameter.net_param\', index=1,\n      number=25, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'train_net\', full_name=\'caffe.SolverParameter.train_net\', index=2,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'test_net\', full_name=\'caffe.SolverParameter.test_net\', index=3,\n      number=2, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'train_net_param\', full_name=\'caffe.SolverParameter.train_net_param\', index=4,\n      number=21, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'test_net_param\', full_name=\'caffe.SolverParameter.test_net_param\', index=5,\n      number=22, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'train_state\', full_name=\'caffe.SolverParameter.train_state\', index=6,\n      number=26, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'test_state\', full_name=\'caffe.SolverParameter.test_state\', index=7,\n      number=27, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'eval_type\', full_name=\'caffe.SolverParameter.eval_type\', index=8,\n      number=41, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b(""classification"").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'ap_version\', full_name=\'caffe.SolverParameter.ap_version\', index=9,\n      number=42, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b(""Integral"").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'show_per_class_result\', full_name=\'caffe.SolverParameter.show_per_class_result\', index=10,\n      number=44, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'test_iter\', full_name=\'caffe.SolverParameter.test_iter\', index=11,\n      number=3, type=5, cpp_type=1, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'test_interval\', full_name=\'caffe.SolverParameter.test_interval\', index=12,\n      number=4, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'test_compute_loss\', full_name=\'caffe.SolverParameter.test_compute_loss\', index=13,\n      number=19, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'test_initialization\', full_name=\'caffe.SolverParameter.test_initialization\', index=14,\n      number=32, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'base_lr\', full_name=\'caffe.SolverParameter.base_lr\', index=15,\n      number=5, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'display\', full_name=\'caffe.SolverParameter.display\', index=16,\n      number=6, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'average_loss\', full_name=\'caffe.SolverParameter.average_loss\', index=17,\n      number=33, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_iter\', full_name=\'caffe.SolverParameter.max_iter\', index=18,\n      number=7, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'iter_size\', full_name=\'caffe.SolverParameter.iter_size\', index=19,\n      number=36, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'lr_policy\', full_name=\'caffe.SolverParameter.lr_policy\', index=20,\n      number=8, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'gamma\', full_name=\'caffe.SolverParameter.gamma\', index=21,\n      number=9, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'power\', full_name=\'caffe.SolverParameter.power\', index=22,\n      number=10, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'momentum\', full_name=\'caffe.SolverParameter.momentum\', index=23,\n      number=11, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'weight_decay\', full_name=\'caffe.SolverParameter.weight_decay\', index=24,\n      number=12, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'regularization_type\', full_name=\'caffe.SolverParameter.regularization_type\', index=25,\n      number=29, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b(""L2"").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stepsize\', full_name=\'caffe.SolverParameter.stepsize\', index=26,\n      number=13, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stepvalue\', full_name=\'caffe.SolverParameter.stepvalue\', index=27,\n      number=34, type=5, cpp_type=1, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'plateau_winsize\', full_name=\'caffe.SolverParameter.plateau_winsize\', index=28,\n      number=43, type=5, cpp_type=1, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'clip_gradients\', full_name=\'caffe.SolverParameter.clip_gradients\', index=29,\n      number=35, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'snapshot\', full_name=\'caffe.SolverParameter.snapshot\', index=30,\n      number=14, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'snapshot_prefix\', full_name=\'caffe.SolverParameter.snapshot_prefix\', index=31,\n      number=15, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'snapshot_diff\', full_name=\'caffe.SolverParameter.snapshot_diff\', index=32,\n      number=16, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'snapshot_format\', full_name=\'caffe.SolverParameter.snapshot_format\', index=33,\n      number=37, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'solver_mode\', full_name=\'caffe.SolverParameter.solver_mode\', index=34,\n      number=17, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'device_id\', full_name=\'caffe.SolverParameter.device_id\', index=35,\n      number=18, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'random_seed\', full_name=\'caffe.SolverParameter.random_seed\', index=36,\n      number=20, type=3, cpp_type=2, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'type\', full_name=\'caffe.SolverParameter.type\', index=37,\n      number=40, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b(""SGD"").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'delta\', full_name=\'caffe.SolverParameter.delta\', index=38,\n      number=31, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1e-08,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'momentum2\', full_name=\'caffe.SolverParameter.momentum2\', index=39,\n      number=39, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.999,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'rms_decay\', full_name=\'caffe.SolverParameter.rms_decay\', index=40,\n      number=38, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.99,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'debug_info\', full_name=\'caffe.SolverParameter.debug_info\', index=41,\n      number=23, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'snapshot_after_train\', full_name=\'caffe.SolverParameter.snapshot_after_train\', index=42,\n      number=28, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'solver_type\', full_name=\'caffe.SolverParameter.solver_type\', index=43,\n      number=30, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _SOLVERPARAMETER_SNAPSHOTFORMAT,\n    _SOLVERPARAMETER_SOLVERMODE,\n    _SOLVERPARAMETER_SOLVERTYPE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=2200,\n  serialized_end=3642,\n)\n\n\n_SOLVERSTATE = _descriptor.Descriptor(\n  name=\'SolverState\',\n  full_name=\'caffe.SolverState\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'iter\', full_name=\'caffe.SolverState.iter\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'learned_net\', full_name=\'caffe.SolverState.learned_net\', index=1,\n      number=2, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'history\', full_name=\'caffe.SolverState.history\', index=2,\n      number=3, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'current_step\', full_name=\'caffe.SolverState.current_step\', index=3,\n      number=4, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'minimum_loss\', full_name=\'caffe.SolverState.minimum_loss\', index=4,\n      number=5, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1e+38,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'iter_last_event\', full_name=\'caffe.SolverState.iter_last_event\', index=5,\n      number=6, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=3645,\n  serialized_end=3810,\n)\n\n\n_NETSTATE = _descriptor.Descriptor(\n  name=\'NetState\',\n  full_name=\'caffe.NetState\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'phase\', full_name=\'caffe.NetState.phase\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'level\', full_name=\'caffe.NetState.level\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stage\', full_name=\'caffe.NetState.stage\', index=2,\n      number=3, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=3812,\n  serialized_end=3890,\n)\n\n\n_NETSTATERULE = _descriptor.Descriptor(\n  name=\'NetStateRule\',\n  full_name=\'caffe.NetStateRule\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'phase\', full_name=\'caffe.NetStateRule.phase\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'min_level\', full_name=\'caffe.NetStateRule.min_level\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_level\', full_name=\'caffe.NetStateRule.max_level\', index=2,\n      number=3, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stage\', full_name=\'caffe.NetStateRule.stage\', index=3,\n      number=4, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'not_stage\', full_name=\'caffe.NetStateRule.not_stage\', index=4,\n      number=5, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=3892,\n  serialized_end=4007,\n)\n\n\n_PARAMSPEC = _descriptor.Descriptor(\n  name=\'ParamSpec\',\n  full_name=\'caffe.ParamSpec\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'name\', full_name=\'caffe.ParamSpec.name\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'share_mode\', full_name=\'caffe.ParamSpec.share_mode\', index=1,\n      number=2, type=14, cpp_type=8, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'lr_mult\', full_name=\'caffe.ParamSpec.lr_mult\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'decay_mult\', full_name=\'caffe.ParamSpec.decay_mult\', index=3,\n      number=4, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _PARAMSPEC_DIMCHECKMODE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=4010,\n  serialized_end=4173,\n)\n\n\n_LAYERPARAMETER = _descriptor.Descriptor(\n  name=\'LayerParameter\',\n  full_name=\'caffe.LayerParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'name\', full_name=\'caffe.LayerParameter.name\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'type\', full_name=\'caffe.LayerParameter.type\', index=1,\n      number=2, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bottom\', full_name=\'caffe.LayerParameter.bottom\', index=2,\n      number=3, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'top\', full_name=\'caffe.LayerParameter.top\', index=3,\n      number=4, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'phase\', full_name=\'caffe.LayerParameter.phase\', index=4,\n      number=10, type=14, cpp_type=8, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'loss_weight\', full_name=\'caffe.LayerParameter.loss_weight\', index=5,\n      number=5, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'param\', full_name=\'caffe.LayerParameter.param\', index=6,\n      number=6, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'blobs\', full_name=\'caffe.LayerParameter.blobs\', index=7,\n      number=7, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'propagate_down\', full_name=\'caffe.LayerParameter.propagate_down\', index=8,\n      number=11, type=8, cpp_type=7, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'include\', full_name=\'caffe.LayerParameter.include\', index=9,\n      number=8, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'exclude\', full_name=\'caffe.LayerParameter.exclude\', index=10,\n      number=9, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'transform_param\', full_name=\'caffe.LayerParameter.transform_param\', index=11,\n      number=100, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'loss_param\', full_name=\'caffe.LayerParameter.loss_param\', index=12,\n      number=101, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'accuracy_param\', full_name=\'caffe.LayerParameter.accuracy_param\', index=13,\n      number=102, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'annotated_data_param\', full_name=\'caffe.LayerParameter.annotated_data_param\', index=14,\n      number=200, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'argmax_param\', full_name=\'caffe.LayerParameter.argmax_param\', index=15,\n      number=103, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'batch_norm_param\', full_name=\'caffe.LayerParameter.batch_norm_param\', index=16,\n      number=139, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_param\', full_name=\'caffe.LayerParameter.bias_param\', index=17,\n      number=141, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'concat_param\', full_name=\'caffe.LayerParameter.concat_param\', index=18,\n      number=104, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'contrastive_loss_param\', full_name=\'caffe.LayerParameter.contrastive_loss_param\', index=19,\n      number=105, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'convolution_param\', full_name=\'caffe.LayerParameter.convolution_param\', index=20,\n      number=106, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'crop_param\', full_name=\'caffe.LayerParameter.crop_param\', index=21,\n      number=144, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'data_param\', full_name=\'caffe.LayerParameter.data_param\', index=22,\n      number=107, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'detection_evaluate_param\', full_name=\'caffe.LayerParameter.detection_evaluate_param\', index=23,\n      number=205, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'detection_output_param\', full_name=\'caffe.LayerParameter.detection_output_param\', index=24,\n      number=204, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'dropout_param\', full_name=\'caffe.LayerParameter.dropout_param\', index=25,\n      number=108, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'dummy_data_param\', full_name=\'caffe.LayerParameter.dummy_data_param\', index=26,\n      number=109, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'eltwise_param\', full_name=\'caffe.LayerParameter.eltwise_param\', index=27,\n      number=110, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'elu_param\', full_name=\'caffe.LayerParameter.elu_param\', index=28,\n      number=140, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'embed_param\', full_name=\'caffe.LayerParameter.embed_param\', index=29,\n      number=137, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'exp_param\', full_name=\'caffe.LayerParameter.exp_param\', index=30,\n      number=111, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'flatten_param\', full_name=\'caffe.LayerParameter.flatten_param\', index=31,\n      number=135, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hdf5_data_param\', full_name=\'caffe.LayerParameter.hdf5_data_param\', index=32,\n      number=112, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hdf5_output_param\', full_name=\'caffe.LayerParameter.hdf5_output_param\', index=33,\n      number=113, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hinge_loss_param\', full_name=\'caffe.LayerParameter.hinge_loss_param\', index=34,\n      number=114, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'image_data_param\', full_name=\'caffe.LayerParameter.image_data_param\', index=35,\n      number=115, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'infogain_loss_param\', full_name=\'caffe.LayerParameter.infogain_loss_param\', index=36,\n      number=116, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'inner_product_param\', full_name=\'caffe.LayerParameter.inner_product_param\', index=37,\n      number=117, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'input_param\', full_name=\'caffe.LayerParameter.input_param\', index=38,\n      number=143, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'log_param\', full_name=\'caffe.LayerParameter.log_param\', index=39,\n      number=134, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'lrn_param\', full_name=\'caffe.LayerParameter.lrn_param\', index=40,\n      number=118, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'memory_data_param\', full_name=\'caffe.LayerParameter.memory_data_param\', index=41,\n      number=119, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'multibox_loss_param\', full_name=\'caffe.LayerParameter.multibox_loss_param\', index=42,\n      number=201, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mvn_param\', full_name=\'caffe.LayerParameter.mvn_param\', index=43,\n      number=120, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'norm_param\', full_name=\'caffe.LayerParameter.norm_param\', index=44,\n      number=206, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'parameter_param\', full_name=\'caffe.LayerParameter.parameter_param\', index=45,\n      number=145, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'permute_param\', full_name=\'caffe.LayerParameter.permute_param\', index=46,\n      number=202, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pooling_param\', full_name=\'caffe.LayerParameter.pooling_param\', index=47,\n      number=121, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'power_param\', full_name=\'caffe.LayerParameter.power_param\', index=48,\n      number=122, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'prelu_param\', full_name=\'caffe.LayerParameter.prelu_param\', index=49,\n      number=131, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'prior_box_param\', full_name=\'caffe.LayerParameter.prior_box_param\', index=50,\n      number=203, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'python_param\', full_name=\'caffe.LayerParameter.python_param\', index=51,\n      number=130, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'recurrent_param\', full_name=\'caffe.LayerParameter.recurrent_param\', index=52,\n      number=146, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'reduction_param\', full_name=\'caffe.LayerParameter.reduction_param\', index=53,\n      number=136, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'relu_param\', full_name=\'caffe.LayerParameter.relu_param\', index=54,\n      number=123, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'reshape_param\', full_name=\'caffe.LayerParameter.reshape_param\', index=55,\n      number=133, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale_param\', full_name=\'caffe.LayerParameter.scale_param\', index=56,\n      number=142, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'sigmoid_param\', full_name=\'caffe.LayerParameter.sigmoid_param\', index=57,\n      number=124, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'softmax_param\', full_name=\'caffe.LayerParameter.softmax_param\', index=58,\n      number=125, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'spp_param\', full_name=\'caffe.LayerParameter.spp_param\', index=59,\n      number=132, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'slice_param\', full_name=\'caffe.LayerParameter.slice_param\', index=60,\n      number=126, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'tanh_param\', full_name=\'caffe.LayerParameter.tanh_param\', index=61,\n      number=127, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'threshold_param\', full_name=\'caffe.LayerParameter.threshold_param\', index=62,\n      number=128, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'tile_param\', full_name=\'caffe.LayerParameter.tile_param\', index=63,\n      number=138, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'video_data_param\', full_name=\'caffe.LayerParameter.video_data_param\', index=64,\n      number=207, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'window_data_param\', full_name=\'caffe.LayerParameter.window_data_param\', index=65,\n      number=129, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'box_annotator_ohem_param\', full_name=\'caffe.LayerParameter.box_annotator_ohem_param\', index=66,\n      number=10000, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'psroi_pooling_param\', full_name=\'caffe.LayerParameter.psroi_pooling_param\', index=67,\n      number=10001, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'roi_pooling_param\', full_name=\'caffe.LayerParameter.roi_pooling_param\', index=68,\n      number=8266711, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=4176,\n  serialized_end=7386,\n)\n\n\n_ROIPOOLINGPARAMETER = _descriptor.Descriptor(\n  name=\'ROIPoolingParameter\',\n  full_name=\'caffe.ROIPoolingParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'pooled_h\', full_name=\'caffe.ROIPoolingParameter.pooled_h\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pooled_w\', full_name=\'caffe.ROIPoolingParameter.pooled_w\', index=1,\n      number=2, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'spatial_scale\', full_name=\'caffe.ROIPoolingParameter.spatial_scale\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=7388,\n  serialized_end=7477,\n)\n\n\n_PSROIPOOLINGPARAMETER = _descriptor.Descriptor(\n  name=\'PSROIPoolingParameter\',\n  full_name=\'caffe.PSROIPoolingParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'spatial_scale\', full_name=\'caffe.PSROIPoolingParameter.spatial_scale\', index=0,\n      number=1, type=2, cpp_type=6, label=2,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'output_dim\', full_name=\'caffe.PSROIPoolingParameter.output_dim\', index=1,\n      number=2, type=5, cpp_type=1, label=2,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'group_size\', full_name=\'caffe.PSROIPoolingParameter.group_size\', index=2,\n      number=3, type=5, cpp_type=1, label=2,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=7479,\n  serialized_end=7565,\n)\n\n\n_BOXANNOTATOROHEMPARAMETER = _descriptor.Descriptor(\n  name=\'BoxAnnotatorOHEMParameter\',\n  full_name=\'caffe.BoxAnnotatorOHEMParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'roi_per_img\', full_name=\'caffe.BoxAnnotatorOHEMParameter.roi_per_img\', index=0,\n      number=1, type=13, cpp_type=3, label=2,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'ignore_label\', full_name=\'caffe.BoxAnnotatorOHEMParameter.ignore_label\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=7567,\n  serialized_end=7641,\n)\n\n\n_TRANSFORMATIONPARAMETER = _descriptor.Descriptor(\n  name=\'TransformationParameter\',\n  full_name=\'caffe.TransformationParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'scale\', full_name=\'caffe.TransformationParameter.scale\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mirror\', full_name=\'caffe.TransformationParameter.mirror\', index=1,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'crop_size\', full_name=\'caffe.TransformationParameter.crop_size\', index=2,\n      number=3, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'crop_h\', full_name=\'caffe.TransformationParameter.crop_h\', index=3,\n      number=11, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'crop_w\', full_name=\'caffe.TransformationParameter.crop_w\', index=4,\n      number=12, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mean_file\', full_name=\'caffe.TransformationParameter.mean_file\', index=5,\n      number=4, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mean_value\', full_name=\'caffe.TransformationParameter.mean_value\', index=6,\n      number=5, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'force_color\', full_name=\'caffe.TransformationParameter.force_color\', index=7,\n      number=6, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'force_gray\', full_name=\'caffe.TransformationParameter.force_gray\', index=8,\n      number=7, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'resize_param\', full_name=\'caffe.TransformationParameter.resize_param\', index=9,\n      number=8, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'noise_param\', full_name=\'caffe.TransformationParameter.noise_param\', index=10,\n      number=9, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'distort_param\', full_name=\'caffe.TransformationParameter.distort_param\', index=11,\n      number=13, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'expand_param\', full_name=\'caffe.TransformationParameter.expand_param\', index=12,\n      number=14, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'emit_constraint\', full_name=\'caffe.TransformationParameter.emit_constraint\', index=13,\n      number=10, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=7644,\n  serialized_end=8102,\n)\n\n\n_RESIZEPARAMETER = _descriptor.Descriptor(\n  name=\'ResizeParameter\',\n  full_name=\'caffe.ResizeParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'prob\', full_name=\'caffe.ResizeParameter.prob\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'resize_mode\', full_name=\'caffe.ResizeParameter.resize_mode\', index=1,\n      number=2, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'height\', full_name=\'caffe.ResizeParameter.height\', index=2,\n      number=3, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'width\', full_name=\'caffe.ResizeParameter.width\', index=3,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'height_scale\', full_name=\'caffe.ResizeParameter.height_scale\', index=4,\n      number=8, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'width_scale\', full_name=\'caffe.ResizeParameter.width_scale\', index=5,\n      number=9, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad_mode\', full_name=\'caffe.ResizeParameter.pad_mode\', index=6,\n      number=5, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad_value\', full_name=\'caffe.ResizeParameter.pad_value\', index=7,\n      number=6, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'interp_mode\', full_name=\'caffe.ResizeParameter.interp_mode\', index=8,\n      number=7, type=14, cpp_type=8, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _RESIZEPARAMETER_RESIZE_MODE,\n    _RESIZEPARAMETER_PAD_MODE,\n    _RESIZEPARAMETER_INTERP_MODE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=8105,\n  serialized_end=8633,\n)\n\n\n_SALTPEPPERPARAMETER = _descriptor.Descriptor(\n  name=\'SaltPepperParameter\',\n  full_name=\'caffe.SaltPepperParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'fraction\', full_name=\'caffe.SaltPepperParameter.fraction\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'value\', full_name=\'caffe.SaltPepperParameter.value\', index=1,\n      number=2, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=8635,\n  serialized_end=8692,\n)\n\n\n_NOISEPARAMETER = _descriptor.Descriptor(\n  name=\'NoiseParameter\',\n  full_name=\'caffe.NoiseParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'prob\', full_name=\'caffe.NoiseParameter.prob\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hist_eq\', full_name=\'caffe.NoiseParameter.hist_eq\', index=1,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'inverse\', full_name=\'caffe.NoiseParameter.inverse\', index=2,\n      number=3, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'decolorize\', full_name=\'caffe.NoiseParameter.decolorize\', index=3,\n      number=4, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'gauss_blur\', full_name=\'caffe.NoiseParameter.gauss_blur\', index=4,\n      number=5, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'jpeg\', full_name=\'caffe.NoiseParameter.jpeg\', index=5,\n      number=6, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'posterize\', full_name=\'caffe.NoiseParameter.posterize\', index=6,\n      number=7, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'erode\', full_name=\'caffe.NoiseParameter.erode\', index=7,\n      number=8, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'saltpepper\', full_name=\'caffe.NoiseParameter.saltpepper\', index=8,\n      number=9, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'saltpepper_param\', full_name=\'caffe.NoiseParameter.saltpepper_param\', index=9,\n      number=10, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'clahe\', full_name=\'caffe.NoiseParameter.clahe\', index=10,\n      number=11, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'convert_to_hsv\', full_name=\'caffe.NoiseParameter.convert_to_hsv\', index=11,\n      number=12, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'convert_to_lab\', full_name=\'caffe.NoiseParameter.convert_to_lab\', index=12,\n      number=13, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=8695,\n  serialized_end=9061,\n)\n\n\n_DISTORTIONPARAMETER = _descriptor.Descriptor(\n  name=\'DistortionParameter\',\n  full_name=\'caffe.DistortionParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'brightness_prob\', full_name=\'caffe.DistortionParameter.brightness_prob\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'brightness_delta\', full_name=\'caffe.DistortionParameter.brightness_delta\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'contrast_prob\', full_name=\'caffe.DistortionParameter.contrast_prob\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'contrast_lower\', full_name=\'caffe.DistortionParameter.contrast_lower\', index=3,\n      number=4, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'contrast_upper\', full_name=\'caffe.DistortionParameter.contrast_upper\', index=4,\n      number=5, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hue_prob\', full_name=\'caffe.DistortionParameter.hue_prob\', index=5,\n      number=6, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hue_delta\', full_name=\'caffe.DistortionParameter.hue_delta\', index=6,\n      number=7, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'saturation_prob\', full_name=\'caffe.DistortionParameter.saturation_prob\', index=7,\n      number=8, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'saturation_lower\', full_name=\'caffe.DistortionParameter.saturation_lower\', index=8,\n      number=9, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'saturation_upper\', full_name=\'caffe.DistortionParameter.saturation_upper\', index=9,\n      number=10, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'random_order_prob\', full_name=\'caffe.DistortionParameter.random_order_prob\', index=10,\n      number=11, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=9064,\n  serialized_end=9381,\n)\n\n\n_EXPANSIONPARAMETER = _descriptor.Descriptor(\n  name=\'ExpansionParameter\',\n  full_name=\'caffe.ExpansionParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'prob\', full_name=\'caffe.ExpansionParameter.prob\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_expand_ratio\', full_name=\'caffe.ExpansionParameter.max_expand_ratio\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=9383,\n  serialized_end=9449,\n)\n\n\n_LOSSPARAMETER = _descriptor.Descriptor(\n  name=\'LossParameter\',\n  full_name=\'caffe.LossParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'ignore_label\', full_name=\'caffe.LossParameter.ignore_label\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'normalization\', full_name=\'caffe.LossParameter.normalization\', index=1,\n      number=3, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'normalize\', full_name=\'caffe.LossParameter.normalize\', index=2,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=False, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pre_fixed_normalizer\', full_name=\'caffe.LossParameter.pre_fixed_normalizer\', index=3,\n      number=4, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _LOSSPARAMETER_NORMALIZATIONMODE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=9452,\n  serialized_end=9694,\n)\n\n\n_ACCURACYPARAMETER = _descriptor.Descriptor(\n  name=\'AccuracyParameter\',\n  full_name=\'caffe.AccuracyParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'top_k\', full_name=\'caffe.AccuracyParameter.top_k\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.AccuracyParameter.axis\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'ignore_label\', full_name=\'caffe.AccuracyParameter.ignore_label\', index=2,\n      number=3, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=9696,\n  serialized_end=9772,\n)\n\n\n_ANNOTATEDDATAPARAMETER = _descriptor.Descriptor(\n  name=\'AnnotatedDataParameter\',\n  full_name=\'caffe.AnnotatedDataParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'batch_sampler\', full_name=\'caffe.AnnotatedDataParameter.batch_sampler\', index=0,\n      number=1, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'label_map_file\', full_name=\'caffe.AnnotatedDataParameter.label_map_file\', index=1,\n      number=2, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'anno_type\', full_name=\'caffe.AnnotatedDataParameter.anno_type\', index=2,\n      number=3, type=14, cpp_type=8, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=9775,\n  serialized_end=9924,\n)\n\n\n_ARGMAXPARAMETER = _descriptor.Descriptor(\n  name=\'ArgMaxParameter\',\n  full_name=\'caffe.ArgMaxParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'out_max_val\', full_name=\'caffe.ArgMaxParameter.out_max_val\', index=0,\n      number=1, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'top_k\', full_name=\'caffe.ArgMaxParameter.top_k\', index=1,\n      number=2, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.ArgMaxParameter.axis\', index=2,\n      number=3, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=9926,\n  serialized_end=10003,\n)\n\n\n_CONCATPARAMETER = _descriptor.Descriptor(\n  name=\'ConcatParameter\',\n  full_name=\'caffe.ConcatParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.ConcatParameter.axis\', index=0,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'concat_dim\', full_name=\'caffe.ConcatParameter.concat_dim\', index=1,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=10005,\n  serialized_end=10062,\n)\n\n\n_BATCHNORMPARAMETER = _descriptor.Descriptor(\n  name=\'BatchNormParameter\',\n  full_name=\'caffe.BatchNormParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'use_global_stats\', full_name=\'caffe.BatchNormParameter.use_global_stats\', index=0,\n      number=1, type=8, cpp_type=7, label=1,\n      has_default_value=False, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'moving_average_fraction\', full_name=\'caffe.BatchNormParameter.moving_average_fraction\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.999,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'eps\', full_name=\'caffe.BatchNormParameter.eps\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1e-05,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=10064,\n  serialized_end=10170,\n)\n\n\n_BIASPARAMETER = _descriptor.Descriptor(\n  name=\'BiasParameter\',\n  full_name=\'caffe.BiasParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.BiasParameter.axis\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'num_axes\', full_name=\'caffe.BiasParameter.num_axes\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'filler\', full_name=\'caffe.BiasParameter.filler\', index=2,\n      number=3, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=10172,\n  serialized_end=10265,\n)\n\n\n_CONTRASTIVELOSSPARAMETER = _descriptor.Descriptor(\n  name=\'ContrastiveLossParameter\',\n  full_name=\'caffe.ContrastiveLossParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'margin\', full_name=\'caffe.ContrastiveLossParameter.margin\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'legacy_version\', full_name=\'caffe.ContrastiveLossParameter.legacy_version\', index=1,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=10267,\n  serialized_end=10343,\n)\n\n\n_CONVOLUTIONPARAMETER = _descriptor.Descriptor(\n  name=\'ConvolutionParameter\',\n  full_name=\'caffe.ConvolutionParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'num_output\', full_name=\'caffe.ConvolutionParameter.num_output\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_term\', full_name=\'caffe.ConvolutionParameter.bias_term\', index=1,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad\', full_name=\'caffe.ConvolutionParameter.pad\', index=2,\n      number=3, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'kernel_size\', full_name=\'caffe.ConvolutionParameter.kernel_size\', index=3,\n      number=4, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stride\', full_name=\'caffe.ConvolutionParameter.stride\', index=4,\n      number=6, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'dilation\', full_name=\'caffe.ConvolutionParameter.dilation\', index=5,\n      number=18, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad_h\', full_name=\'caffe.ConvolutionParameter.pad_h\', index=6,\n      number=9, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad_w\', full_name=\'caffe.ConvolutionParameter.pad_w\', index=7,\n      number=10, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'kernel_h\', full_name=\'caffe.ConvolutionParameter.kernel_h\', index=8,\n      number=11, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'kernel_w\', full_name=\'caffe.ConvolutionParameter.kernel_w\', index=9,\n      number=12, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stride_h\', full_name=\'caffe.ConvolutionParameter.stride_h\', index=10,\n      number=13, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stride_w\', full_name=\'caffe.ConvolutionParameter.stride_w\', index=11,\n      number=14, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'group\', full_name=\'caffe.ConvolutionParameter.group\', index=12,\n      number=5, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'weight_filler\', full_name=\'caffe.ConvolutionParameter.weight_filler\', index=13,\n      number=7, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_filler\', full_name=\'caffe.ConvolutionParameter.bias_filler\', index=14,\n      number=8, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'engine\', full_name=\'caffe.ConvolutionParameter.engine\', index=15,\n      number=15, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.ConvolutionParameter.axis\', index=16,\n      number=16, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'force_nd_im2col\', full_name=\'caffe.ConvolutionParameter.force_nd_im2col\', index=17,\n      number=17, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _CONVOLUTIONPARAMETER_ENGINE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=10346,\n  serialized_end=10854,\n)\n\n\n_CROPPARAMETER = _descriptor.Descriptor(\n  name=\'CropParameter\',\n  full_name=\'caffe.CropParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.CropParameter.axis\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=2,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'offset\', full_name=\'caffe.CropParameter.offset\', index=1,\n      number=2, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=10856,\n  serialized_end=10904,\n)\n\n\n_DATAPARAMETER = _descriptor.Descriptor(\n  name=\'DataParameter\',\n  full_name=\'caffe.DataParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'source\', full_name=\'caffe.DataParameter.source\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'batch_size\', full_name=\'caffe.DataParameter.batch_size\', index=1,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'rand_skip\', full_name=\'caffe.DataParameter.rand_skip\', index=2,\n      number=7, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'backend\', full_name=\'caffe.DataParameter.backend\', index=3,\n      number=8, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale\', full_name=\'caffe.DataParameter.scale\', index=4,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mean_file\', full_name=\'caffe.DataParameter.mean_file\', index=5,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'crop_size\', full_name=\'caffe.DataParameter.crop_size\', index=6,\n      number=5, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mirror\', full_name=\'caffe.DataParameter.mirror\', index=7,\n      number=6, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'force_encoded_color\', full_name=\'caffe.DataParameter.force_encoded_color\', index=8,\n      number=9, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'prefetch\', full_name=\'caffe.DataParameter.prefetch\', index=9,\n      number=10, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=4,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _DATAPARAMETER_DB,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=10907,\n  serialized_end=11199,\n)\n\n\n_DETECTIONEVALUATEPARAMETER = _descriptor.Descriptor(\n  name=\'DetectionEvaluateParameter\',\n  full_name=\'caffe.DetectionEvaluateParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'num_classes\', full_name=\'caffe.DetectionEvaluateParameter.num_classes\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'background_label_id\', full_name=\'caffe.DetectionEvaluateParameter.background_label_id\', index=1,\n      number=2, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'overlap_threshold\', full_name=\'caffe.DetectionEvaluateParameter.overlap_threshold\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'evaluate_difficult_gt\', full_name=\'caffe.DetectionEvaluateParameter.evaluate_difficult_gt\', index=3,\n      number=4, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'name_size_file\', full_name=\'caffe.DetectionEvaluateParameter.name_size_file\', index=4,\n      number=5, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'resize_param\', full_name=\'caffe.DetectionEvaluateParameter.resize_param\', index=5,\n      number=6, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=11202,\n  serialized_end=11422,\n)\n\n\n_NONMAXIMUMSUPPRESSIONPARAMETER = _descriptor.Descriptor(\n  name=\'NonMaximumSuppressionParameter\',\n  full_name=\'caffe.NonMaximumSuppressionParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'nms_threshold\', full_name=\'caffe.NonMaximumSuppressionParameter.nms_threshold\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.3,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'top_k\', full_name=\'caffe.NonMaximumSuppressionParameter.top_k\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'eta\', full_name=\'caffe.NonMaximumSuppressionParameter.eta\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=11424,\n  serialized_end=11515,\n)\n\n\n_SAVEOUTPUTPARAMETER = _descriptor.Descriptor(\n  name=\'SaveOutputParameter\',\n  full_name=\'caffe.SaveOutputParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'output_directory\', full_name=\'caffe.SaveOutputParameter.output_directory\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'output_name_prefix\', full_name=\'caffe.SaveOutputParameter.output_name_prefix\', index=1,\n      number=2, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'output_format\', full_name=\'caffe.SaveOutputParameter.output_format\', index=2,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'label_map_file\', full_name=\'caffe.SaveOutputParameter.label_map_file\', index=3,\n      number=4, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'name_size_file\', full_name=\'caffe.SaveOutputParameter.name_size_file\', index=4,\n      number=5, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'num_test_image\', full_name=\'caffe.SaveOutputParameter.num_test_image\', index=5,\n      number=6, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'resize_param\', full_name=\'caffe.SaveOutputParameter.resize_param\', index=6,\n      number=7, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=11518,\n  serialized_end=11734,\n)\n\n\n_DETECTIONOUTPUTPARAMETER = _descriptor.Descriptor(\n  name=\'DetectionOutputParameter\',\n  full_name=\'caffe.DetectionOutputParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'num_classes\', full_name=\'caffe.DetectionOutputParameter.num_classes\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'share_location\', full_name=\'caffe.DetectionOutputParameter.share_location\', index=1,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'background_label_id\', full_name=\'caffe.DetectionOutputParameter.background_label_id\', index=2,\n      number=3, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'nms_param\', full_name=\'caffe.DetectionOutputParameter.nms_param\', index=3,\n      number=4, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'save_output_param\', full_name=\'caffe.DetectionOutputParameter.save_output_param\', index=4,\n      number=5, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'code_type\', full_name=\'caffe.DetectionOutputParameter.code_type\', index=5,\n      number=6, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'variance_encoded_in_target\', full_name=\'caffe.DetectionOutputParameter.variance_encoded_in_target\', index=6,\n      number=8, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'keep_top_k\', full_name=\'caffe.DetectionOutputParameter.keep_top_k\', index=7,\n      number=7, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'confidence_threshold\', full_name=\'caffe.DetectionOutputParameter.confidence_threshold\', index=8,\n      number=9, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'visualize\', full_name=\'caffe.DetectionOutputParameter.visualize\', index=9,\n      number=10, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'visualize_threshold\', full_name=\'caffe.DetectionOutputParameter.visualize_threshold\', index=10,\n      number=11, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'save_file\', full_name=\'caffe.DetectionOutputParameter.save_file\', index=11,\n      number=12, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=11737,\n  serialized_end=12192,\n)\n\n\n_DROPOUTPARAMETER = _descriptor.Descriptor(\n  name=\'DropoutParameter\',\n  full_name=\'caffe.DropoutParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'dropout_ratio\', full_name=\'caffe.DropoutParameter.dropout_ratio\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12194,\n  serialized_end=12240,\n)\n\n\n_DUMMYDATAPARAMETER = _descriptor.Descriptor(\n  name=\'DummyDataParameter\',\n  full_name=\'caffe.DummyDataParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'data_filler\', full_name=\'caffe.DummyDataParameter.data_filler\', index=0,\n      number=1, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'shape\', full_name=\'caffe.DummyDataParameter.shape\', index=1,\n      number=6, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'num\', full_name=\'caffe.DummyDataParameter.num\', index=2,\n      number=2, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'channels\', full_name=\'caffe.DummyDataParameter.channels\', index=3,\n      number=3, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'height\', full_name=\'caffe.DummyDataParameter.height\', index=4,\n      number=4, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'width\', full_name=\'caffe.DummyDataParameter.width\', index=5,\n      number=5, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12243,\n  serialized_end=12403,\n)\n\n\n_ELTWISEPARAMETER = _descriptor.Descriptor(\n  name=\'EltwiseParameter\',\n  full_name=\'caffe.EltwiseParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'operation\', full_name=\'caffe.EltwiseParameter.operation\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'coeff\', full_name=\'caffe.EltwiseParameter.coeff\', index=1,\n      number=2, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stable_prod_grad\', full_name=\'caffe.EltwiseParameter.stable_prod_grad\', index=2,\n      number=3, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _ELTWISEPARAMETER_ELTWISEOP,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12406,\n  serialized_end=12571,\n)\n\n\n_ELUPARAMETER = _descriptor.Descriptor(\n  name=\'ELUParameter\',\n  full_name=\'caffe.ELUParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'alpha\', full_name=\'caffe.ELUParameter.alpha\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12573,\n  serialized_end=12605,\n)\n\n\n_EMBEDPARAMETER = _descriptor.Descriptor(\n  name=\'EmbedParameter\',\n  full_name=\'caffe.EmbedParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'num_output\', full_name=\'caffe.EmbedParameter.num_output\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'input_dim\', full_name=\'caffe.EmbedParameter.input_dim\', index=1,\n      number=2, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_term\', full_name=\'caffe.EmbedParameter.bias_term\', index=2,\n      number=3, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'weight_filler\', full_name=\'caffe.EmbedParameter.weight_filler\', index=3,\n      number=4, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_filler\', full_name=\'caffe.EmbedParameter.bias_filler\', index=4,\n      number=5, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12608,\n  serialized_end=12780,\n)\n\n\n_EXPPARAMETER = _descriptor.Descriptor(\n  name=\'ExpParameter\',\n  full_name=\'caffe.ExpParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'base\', full_name=\'caffe.ExpParameter.base\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale\', full_name=\'caffe.ExpParameter.scale\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'shift\', full_name=\'caffe.ExpParameter.shift\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12782,\n  serialized_end=12850,\n)\n\n\n_FLATTENPARAMETER = _descriptor.Descriptor(\n  name=\'FlattenParameter\',\n  full_name=\'caffe.FlattenParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.FlattenParameter.axis\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'end_axis\', full_name=\'caffe.FlattenParameter.end_axis\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12852,\n  serialized_end=12909,\n)\n\n\n_HDF5DATAPARAMETER = _descriptor.Descriptor(\n  name=\'HDF5DataParameter\',\n  full_name=\'caffe.HDF5DataParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'source\', full_name=\'caffe.HDF5DataParameter.source\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'batch_size\', full_name=\'caffe.HDF5DataParameter.batch_size\', index=1,\n      number=2, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'shuffle\', full_name=\'caffe.HDF5DataParameter.shuffle\', index=2,\n      number=3, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12911,\n  serialized_end=12990,\n)\n\n\n_HDF5OUTPUTPARAMETER = _descriptor.Descriptor(\n  name=\'HDF5OutputParameter\',\n  full_name=\'caffe.HDF5OutputParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'file_name\', full_name=\'caffe.HDF5OutputParameter.file_name\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=12992,\n  serialized_end=13032,\n)\n\n\n_HINGELOSSPARAMETER = _descriptor.Descriptor(\n  name=\'HingeLossParameter\',\n  full_name=\'caffe.HingeLossParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'norm\', full_name=\'caffe.HingeLossParameter.norm\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _HINGELOSSPARAMETER_NORM,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=13034,\n  serialized_end=13128,\n)\n\n\n_IMAGEDATAPARAMETER = _descriptor.Descriptor(\n  name=\'ImageDataParameter\',\n  full_name=\'caffe.ImageDataParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'source\', full_name=\'caffe.ImageDataParameter.source\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'batch_size\', full_name=\'caffe.ImageDataParameter.batch_size\', index=1,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'rand_skip\', full_name=\'caffe.ImageDataParameter.rand_skip\', index=2,\n      number=7, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'shuffle\', full_name=\'caffe.ImageDataParameter.shuffle\', index=3,\n      number=8, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'new_height\', full_name=\'caffe.ImageDataParameter.new_height\', index=4,\n      number=9, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'new_width\', full_name=\'caffe.ImageDataParameter.new_width\', index=5,\n      number=10, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'is_color\', full_name=\'caffe.ImageDataParameter.is_color\', index=6,\n      number=11, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale\', full_name=\'caffe.ImageDataParameter.scale\', index=7,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mean_file\', full_name=\'caffe.ImageDataParameter.mean_file\', index=8,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'crop_size\', full_name=\'caffe.ImageDataParameter.crop_size\', index=9,\n      number=5, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mirror\', full_name=\'caffe.ImageDataParameter.mirror\', index=10,\n      number=6, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'root_folder\', full_name=\'caffe.ImageDataParameter.root_folder\', index=11,\n      number=12, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=13131,\n  serialized_end=13410,\n)\n\n\n_INFOGAINLOSSPARAMETER = _descriptor.Descriptor(\n  name=\'InfogainLossParameter\',\n  full_name=\'caffe.InfogainLossParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'source\', full_name=\'caffe.InfogainLossParameter.source\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=13412,\n  serialized_end=13451,\n)\n\n\n_INNERPRODUCTPARAMETER = _descriptor.Descriptor(\n  name=\'InnerProductParameter\',\n  full_name=\'caffe.InnerProductParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'num_output\', full_name=\'caffe.InnerProductParameter.num_output\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_term\', full_name=\'caffe.InnerProductParameter.bias_term\', index=1,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'weight_filler\', full_name=\'caffe.InnerProductParameter.weight_filler\', index=2,\n      number=3, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_filler\', full_name=\'caffe.InnerProductParameter.bias_filler\', index=3,\n      number=4, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.InnerProductParameter.axis\', index=4,\n      number=5, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'transpose\', full_name=\'caffe.InnerProductParameter.transpose\', index=5,\n      number=6, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=13454,\n  serialized_end=13657,\n)\n\n\n_INPUTPARAMETER = _descriptor.Descriptor(\n  name=\'InputParameter\',\n  full_name=\'caffe.InputParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'shape\', full_name=\'caffe.InputParameter.shape\', index=0,\n      number=1, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=13659,\n  serialized_end=13708,\n)\n\n\n_LOGPARAMETER = _descriptor.Descriptor(\n  name=\'LogParameter\',\n  full_name=\'caffe.LogParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'base\', full_name=\'caffe.LogParameter.base\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale\', full_name=\'caffe.LogParameter.scale\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'shift\', full_name=\'caffe.LogParameter.shift\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=13710,\n  serialized_end=13778,\n)\n\n\n_LRNPARAMETER = _descriptor.Descriptor(\n  name=\'LRNParameter\',\n  full_name=\'caffe.LRNParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'local_size\', full_name=\'caffe.LRNParameter.local_size\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'alpha\', full_name=\'caffe.LRNParameter.alpha\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'beta\', full_name=\'caffe.LRNParameter.beta\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.75,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'norm_region\', full_name=\'caffe.LRNParameter.norm_region\', index=3,\n      number=4, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'k\', full_name=\'caffe.LRNParameter.k\', index=4,\n      number=5, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'engine\', full_name=\'caffe.LRNParameter.engine\', index=5,\n      number=6, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _LRNPARAMETER_NORMREGION,\n    _LRNPARAMETER_ENGINE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=13781,\n  serialized_end=14093,\n)\n\n\n_MEMORYDATAPARAMETER = _descriptor.Descriptor(\n  name=\'MemoryDataParameter\',\n  full_name=\'caffe.MemoryDataParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'batch_size\', full_name=\'caffe.MemoryDataParameter.batch_size\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'channels\', full_name=\'caffe.MemoryDataParameter.channels\', index=1,\n      number=2, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'height\', full_name=\'caffe.MemoryDataParameter.height\', index=2,\n      number=3, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'width\', full_name=\'caffe.MemoryDataParameter.width\', index=3,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=14095,\n  serialized_end=14185,\n)\n\n\n_MULTIBOXLOSSPARAMETER = _descriptor.Descriptor(\n  name=\'MultiBoxLossParameter\',\n  full_name=\'caffe.MultiBoxLossParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'loc_loss_type\', full_name=\'caffe.MultiBoxLossParameter.loc_loss_type\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'conf_loss_type\', full_name=\'caffe.MultiBoxLossParameter.conf_loss_type\', index=1,\n      number=2, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'loc_weight\', full_name=\'caffe.MultiBoxLossParameter.loc_weight\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'num_classes\', full_name=\'caffe.MultiBoxLossParameter.num_classes\', index=3,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'share_location\', full_name=\'caffe.MultiBoxLossParameter.share_location\', index=4,\n      number=5, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'match_type\', full_name=\'caffe.MultiBoxLossParameter.match_type\', index=5,\n      number=6, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'overlap_threshold\', full_name=\'caffe.MultiBoxLossParameter.overlap_threshold\', index=6,\n      number=7, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'use_prior_for_matching\', full_name=\'caffe.MultiBoxLossParameter.use_prior_for_matching\', index=7,\n      number=8, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'background_label_id\', full_name=\'caffe.MultiBoxLossParameter.background_label_id\', index=8,\n      number=9, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'use_difficult_gt\', full_name=\'caffe.MultiBoxLossParameter.use_difficult_gt\', index=9,\n      number=10, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'do_neg_mining\', full_name=\'caffe.MultiBoxLossParameter.do_neg_mining\', index=10,\n      number=11, type=8, cpp_type=7, label=1,\n      has_default_value=False, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'neg_pos_ratio\', full_name=\'caffe.MultiBoxLossParameter.neg_pos_ratio\', index=11,\n      number=12, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=3,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'neg_overlap\', full_name=\'caffe.MultiBoxLossParameter.neg_overlap\', index=12,\n      number=13, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'code_type\', full_name=\'caffe.MultiBoxLossParameter.code_type\', index=13,\n      number=14, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'encode_variance_in_target\', full_name=\'caffe.MultiBoxLossParameter.encode_variance_in_target\', index=14,\n      number=16, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'map_object_to_agnostic\', full_name=\'caffe.MultiBoxLossParameter.map_object_to_agnostic\', index=15,\n      number=17, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'ignore_cross_boundary_bbox\', full_name=\'caffe.MultiBoxLossParameter.ignore_cross_boundary_bbox\', index=16,\n      number=18, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bp_inside\', full_name=\'caffe.MultiBoxLossParameter.bp_inside\', index=17,\n      number=19, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mining_type\', full_name=\'caffe.MultiBoxLossParameter.mining_type\', index=18,\n      number=20, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'nms_param\', full_name=\'caffe.MultiBoxLossParameter.nms_param\', index=19,\n      number=21, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'sample_size\', full_name=\'caffe.MultiBoxLossParameter.sample_size\', index=20,\n      number=22, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=64,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'use_prior_for_nms\', full_name=\'caffe.MultiBoxLossParameter.use_prior_for_nms\', index=21,\n      number=23, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _MULTIBOXLOSSPARAMETER_LOCLOSSTYPE,\n    _MULTIBOXLOSSPARAMETER_CONFLOSSTYPE,\n    _MULTIBOXLOSSPARAMETER_MATCHTYPE,\n    _MULTIBOXLOSSPARAMETER_MININGTYPE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=14188,\n  serialized_end=15316,\n)\n\n\n_MVNPARAMETER = _descriptor.Descriptor(\n  name=\'MVNParameter\',\n  full_name=\'caffe.MVNParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'normalize_variance\', full_name=\'caffe.MVNParameter.normalize_variance\', index=0,\n      number=1, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'across_channels\', full_name=\'caffe.MVNParameter.across_channels\', index=1,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'eps\', full_name=\'caffe.MVNParameter.eps\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1e-09,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=15318,\n  serialized_end=15418,\n)\n\n\n_NORMALIZEPARAMETER = _descriptor.Descriptor(\n  name=\'NormalizeParameter\',\n  full_name=\'caffe.NormalizeParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'across_spatial\', full_name=\'caffe.NormalizeParameter.across_spatial\', index=0,\n      number=1, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale_filler\', full_name=\'caffe.NormalizeParameter.scale_filler\', index=1,\n      number=2, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'channel_shared\', full_name=\'caffe.NormalizeParameter.channel_shared\', index=2,\n      number=3, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'eps\', full_name=\'caffe.NormalizeParameter.eps\', index=3,\n      number=4, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1e-10,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=15421,\n  serialized_end=15567,\n)\n\n\n_PARAMETERPARAMETER = _descriptor.Descriptor(\n  name=\'ParameterParameter\',\n  full_name=\'caffe.ParameterParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'shape\', full_name=\'caffe.ParameterParameter.shape\', index=0,\n      number=1, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=15569,\n  serialized_end=15622,\n)\n\n\n_PERMUTEPARAMETER = _descriptor.Descriptor(\n  name=\'PermuteParameter\',\n  full_name=\'caffe.PermuteParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'order\', full_name=\'caffe.PermuteParameter.order\', index=0,\n      number=1, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=15624,\n  serialized_end=15657,\n)\n\n\n_POOLINGPARAMETER = _descriptor.Descriptor(\n  name=\'PoolingParameter\',\n  full_name=\'caffe.PoolingParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'pool\', full_name=\'caffe.PoolingParameter.pool\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad\', full_name=\'caffe.PoolingParameter.pad\', index=1,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad_h\', full_name=\'caffe.PoolingParameter.pad_h\', index=2,\n      number=9, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad_w\', full_name=\'caffe.PoolingParameter.pad_w\', index=3,\n      number=10, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'kernel_size\', full_name=\'caffe.PoolingParameter.kernel_size\', index=4,\n      number=2, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'kernel_h\', full_name=\'caffe.PoolingParameter.kernel_h\', index=5,\n      number=5, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'kernel_w\', full_name=\'caffe.PoolingParameter.kernel_w\', index=6,\n      number=6, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stride\', full_name=\'caffe.PoolingParameter.stride\', index=7,\n      number=3, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stride_h\', full_name=\'caffe.PoolingParameter.stride_h\', index=8,\n      number=7, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stride_w\', full_name=\'caffe.PoolingParameter.stride_w\', index=9,\n      number=8, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'engine\', full_name=\'caffe.PoolingParameter.engine\', index=10,\n      number=11, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'global_pooling\', full_name=\'caffe.PoolingParameter.global_pooling\', index=11,\n      number=12, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _POOLINGPARAMETER_POOLMETHOD,\n    _POOLINGPARAMETER_ENGINE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=15660,\n  serialized_end=16078,\n)\n\n\n_POWERPARAMETER = _descriptor.Descriptor(\n  name=\'PowerParameter\',\n  full_name=\'caffe.PowerParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'power\', full_name=\'caffe.PowerParameter.power\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale\', full_name=\'caffe.PowerParameter.scale\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'shift\', full_name=\'caffe.PowerParameter.shift\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=16080,\n  serialized_end=16150,\n)\n\n\n_PRIORBOXPARAMETER = _descriptor.Descriptor(\n  name=\'PriorBoxParameter\',\n  full_name=\'caffe.PriorBoxParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'min_size\', full_name=\'caffe.PriorBoxParameter.min_size\', index=0,\n      number=1, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'max_size\', full_name=\'caffe.PriorBoxParameter.max_size\', index=1,\n      number=2, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'aspect_ratio\', full_name=\'caffe.PriorBoxParameter.aspect_ratio\', index=2,\n      number=3, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'flip\', full_name=\'caffe.PriorBoxParameter.flip\', index=3,\n      number=4, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'clip\', full_name=\'caffe.PriorBoxParameter.clip\', index=4,\n      number=5, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'variance\', full_name=\'caffe.PriorBoxParameter.variance\', index=5,\n      number=6, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'img_size\', full_name=\'caffe.PriorBoxParameter.img_size\', index=6,\n      number=7, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'img_h\', full_name=\'caffe.PriorBoxParameter.img_h\', index=7,\n      number=8, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'img_w\', full_name=\'caffe.PriorBoxParameter.img_w\', index=8,\n      number=9, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'step\', full_name=\'caffe.PriorBoxParameter.step\', index=9,\n      number=10, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'step_h\', full_name=\'caffe.PriorBoxParameter.step_h\', index=10,\n      number=11, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'step_w\', full_name=\'caffe.PriorBoxParameter.step_w\', index=11,\n      number=12, type=2, cpp_type=6, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'offset\', full_name=\'caffe.PriorBoxParameter.offset\', index=12,\n      number=13, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _PRIORBOXPARAMETER_CODETYPE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=16153,\n  serialized_end=16462,\n)\n\n\n_PYTHONPARAMETER = _descriptor.Descriptor(\n  name=\'PythonParameter\',\n  full_name=\'caffe.PythonParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'module\', full_name=\'caffe.PythonParameter.module\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'layer\', full_name=\'caffe.PythonParameter.layer\', index=1,\n      number=2, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'param_str\', full_name=\'caffe.PythonParameter.param_str\', index=2,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'share_in_parallel\', full_name=\'caffe.PythonParameter.share_in_parallel\', index=3,\n      number=4, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=16464,\n  serialized_end=16567,\n)\n\n\n_RECURRENTPARAMETER = _descriptor.Descriptor(\n  name=\'RecurrentParameter\',\n  full_name=\'caffe.RecurrentParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'num_output\', full_name=\'caffe.RecurrentParameter.num_output\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'weight_filler\', full_name=\'caffe.RecurrentParameter.weight_filler\', index=1,\n      number=2, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_filler\', full_name=\'caffe.RecurrentParameter.bias_filler\', index=2,\n      number=3, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'debug_info\', full_name=\'caffe.RecurrentParameter.debug_info\', index=3,\n      number=4, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'expose_hidden\', full_name=\'caffe.RecurrentParameter.expose_hidden\', index=4,\n      number=5, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=16570,\n  serialized_end=16762,\n)\n\n\n_REDUCTIONPARAMETER = _descriptor.Descriptor(\n  name=\'ReductionParameter\',\n  full_name=\'caffe.ReductionParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'operation\', full_name=\'caffe.ReductionParameter.operation\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.ReductionParameter.axis\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'coeff\', full_name=\'caffe.ReductionParameter.coeff\', index=2,\n      number=3, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _REDUCTIONPARAMETER_REDUCTIONOP,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=16765,\n  serialized_end=16938,\n)\n\n\n_RELUPARAMETER = _descriptor.Descriptor(\n  name=\'ReLUParameter\',\n  full_name=\'caffe.ReLUParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'negative_slope\', full_name=\'caffe.ReLUParameter.negative_slope\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'engine\', full_name=\'caffe.ReLUParameter.engine\', index=1,\n      number=2, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _RELUPARAMETER_ENGINE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=16941,\n  serialized_end=17082,\n)\n\n\n_RESHAPEPARAMETER = _descriptor.Descriptor(\n  name=\'ReshapeParameter\',\n  full_name=\'caffe.ReshapeParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'shape\', full_name=\'caffe.ReshapeParameter.shape\', index=0,\n      number=1, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.ReshapeParameter.axis\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'num_axes\', full_name=\'caffe.ReshapeParameter.num_axes\', index=2,\n      number=3, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=-1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17084,\n  serialized_end=17174,\n)\n\n\n_SCALEPARAMETER = _descriptor.Descriptor(\n  name=\'ScaleParameter\',\n  full_name=\'caffe.ScaleParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.ScaleParameter.axis\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'num_axes\', full_name=\'caffe.ScaleParameter.num_axes\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'filler\', full_name=\'caffe.ScaleParameter.filler\', index=2,\n      number=3, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_term\', full_name=\'caffe.ScaleParameter.bias_term\', index=3,\n      number=4, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_filler\', full_name=\'caffe.ScaleParameter.bias_filler\', index=4,\n      number=5, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17177,\n  serialized_end=17342,\n)\n\n\n_SIGMOIDPARAMETER = _descriptor.Descriptor(\n  name=\'SigmoidParameter\',\n  full_name=\'caffe.SigmoidParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'engine\', full_name=\'caffe.SigmoidParameter.engine\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _SIGMOIDPARAMETER_ENGINE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17344,\n  serialized_end=17464,\n)\n\n\n_SLICEPARAMETER = _descriptor.Descriptor(\n  name=\'SliceParameter\',\n  full_name=\'caffe.SliceParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.SliceParameter.axis\', index=0,\n      number=3, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'slice_point\', full_name=\'caffe.SliceParameter.slice_point\', index=1,\n      number=2, type=13, cpp_type=3, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'slice_dim\', full_name=\'caffe.SliceParameter.slice_dim\', index=2,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17466,\n  serialized_end=17542,\n)\n\n\n_SOFTMAXPARAMETER = _descriptor.Descriptor(\n  name=\'SoftmaxParameter\',\n  full_name=\'caffe.SoftmaxParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'engine\', full_name=\'caffe.SoftmaxParameter.engine\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.SoftmaxParameter.axis\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _SOFTMAXPARAMETER_ENGINE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17545,\n  serialized_end=17682,\n)\n\n\n_TANHPARAMETER = _descriptor.Descriptor(\n  name=\'TanHParameter\',\n  full_name=\'caffe.TanHParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'engine\', full_name=\'caffe.TanHParameter.engine\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _TANHPARAMETER_ENGINE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17684,\n  serialized_end=17798,\n)\n\n\n_TILEPARAMETER = _descriptor.Descriptor(\n  name=\'TileParameter\',\n  full_name=\'caffe.TileParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'axis\', full_name=\'caffe.TileParameter.axis\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'tiles\', full_name=\'caffe.TileParameter.tiles\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17800,\n  serialized_end=17847,\n)\n\n\n_THRESHOLDPARAMETER = _descriptor.Descriptor(\n  name=\'ThresholdParameter\',\n  full_name=\'caffe.ThresholdParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'threshold\', full_name=\'caffe.ThresholdParameter.threshold\', index=0,\n      number=1, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17849,\n  serialized_end=17891,\n)\n\n\n_VIDEODATAPARAMETER = _descriptor.Descriptor(\n  name=\'VideoDataParameter\',\n  full_name=\'caffe.VideoDataParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'video_type\', full_name=\'caffe.VideoDataParameter.video_type\', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'device_id\', full_name=\'caffe.VideoDataParameter.device_id\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'video_file\', full_name=\'caffe.VideoDataParameter.video_file\', index=2,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'skip_frames\', full_name=\'caffe.VideoDataParameter.skip_frames\', index=3,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _VIDEODATAPARAMETER_VIDEOTYPE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=17894,\n  serialized_end=18081,\n)\n\n\n_WINDOWDATAPARAMETER = _descriptor.Descriptor(\n  name=\'WindowDataParameter\',\n  full_name=\'caffe.WindowDataParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'source\', full_name=\'caffe.WindowDataParameter.source\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale\', full_name=\'caffe.WindowDataParameter.scale\', index=1,\n      number=2, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mean_file\', full_name=\'caffe.WindowDataParameter.mean_file\', index=2,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'batch_size\', full_name=\'caffe.WindowDataParameter.batch_size\', index=3,\n      number=4, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'crop_size\', full_name=\'caffe.WindowDataParameter.crop_size\', index=4,\n      number=5, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mirror\', full_name=\'caffe.WindowDataParameter.mirror\', index=5,\n      number=6, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'fg_threshold\', full_name=\'caffe.WindowDataParameter.fg_threshold\', index=6,\n      number=7, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bg_threshold\', full_name=\'caffe.WindowDataParameter.bg_threshold\', index=7,\n      number=8, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'fg_fraction\', full_name=\'caffe.WindowDataParameter.fg_fraction\', index=8,\n      number=9, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.25,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'context_pad\', full_name=\'caffe.WindowDataParameter.context_pad\', index=9,\n      number=10, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'crop_mode\', full_name=\'caffe.WindowDataParameter.crop_mode\', index=10,\n      number=11, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b(""warp"").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'cache_images\', full_name=\'caffe.WindowDataParameter.cache_images\', index=11,\n      number=12, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'root_folder\', full_name=\'caffe.WindowDataParameter.root_folder\', index=12,\n      number=13, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=18084,\n  serialized_end=18405,\n)\n\n\n_SPPPARAMETER = _descriptor.Descriptor(\n  name=\'SPPParameter\',\n  full_name=\'caffe.SPPParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'pyramid_height\', full_name=\'caffe.SPPParameter.pyramid_height\', index=0,\n      number=1, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pool\', full_name=\'caffe.SPPParameter.pool\', index=1,\n      number=2, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'engine\', full_name=\'caffe.SPPParameter.engine\', index=2,\n      number=6, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _SPPPARAMETER_POOLMETHOD,\n    _SPPPARAMETER_ENGINE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=18408,\n  serialized_end=18643,\n)\n\n\n_V1LAYERPARAMETER = _descriptor.Descriptor(\n  name=\'V1LayerParameter\',\n  full_name=\'caffe.V1LayerParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'bottom\', full_name=\'caffe.V1LayerParameter.bottom\', index=0,\n      number=2, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'top\', full_name=\'caffe.V1LayerParameter.top\', index=1,\n      number=3, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'name\', full_name=\'caffe.V1LayerParameter.name\', index=2,\n      number=4, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'include\', full_name=\'caffe.V1LayerParameter.include\', index=3,\n      number=32, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'exclude\', full_name=\'caffe.V1LayerParameter.exclude\', index=4,\n      number=33, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'type\', full_name=\'caffe.V1LayerParameter.type\', index=5,\n      number=5, type=14, cpp_type=8, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'blobs\', full_name=\'caffe.V1LayerParameter.blobs\', index=6,\n      number=6, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'param\', full_name=\'caffe.V1LayerParameter.param\', index=7,\n      number=1001, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'blob_share_mode\', full_name=\'caffe.V1LayerParameter.blob_share_mode\', index=8,\n      number=1002, type=14, cpp_type=8, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'blobs_lr\', full_name=\'caffe.V1LayerParameter.blobs_lr\', index=9,\n      number=7, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'weight_decay\', full_name=\'caffe.V1LayerParameter.weight_decay\', index=10,\n      number=8, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'loss_weight\', full_name=\'caffe.V1LayerParameter.loss_weight\', index=11,\n      number=35, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'accuracy_param\', full_name=\'caffe.V1LayerParameter.accuracy_param\', index=12,\n      number=27, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'argmax_param\', full_name=\'caffe.V1LayerParameter.argmax_param\', index=13,\n      number=23, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'concat_param\', full_name=\'caffe.V1LayerParameter.concat_param\', index=14,\n      number=9, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'contrastive_loss_param\', full_name=\'caffe.V1LayerParameter.contrastive_loss_param\', index=15,\n      number=40, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'convolution_param\', full_name=\'caffe.V1LayerParameter.convolution_param\', index=16,\n      number=10, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'data_param\', full_name=\'caffe.V1LayerParameter.data_param\', index=17,\n      number=11, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'dropout_param\', full_name=\'caffe.V1LayerParameter.dropout_param\', index=18,\n      number=12, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'dummy_data_param\', full_name=\'caffe.V1LayerParameter.dummy_data_param\', index=19,\n      number=26, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'eltwise_param\', full_name=\'caffe.V1LayerParameter.eltwise_param\', index=20,\n      number=24, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'exp_param\', full_name=\'caffe.V1LayerParameter.exp_param\', index=21,\n      number=41, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hdf5_data_param\', full_name=\'caffe.V1LayerParameter.hdf5_data_param\', index=22,\n      number=13, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hdf5_output_param\', full_name=\'caffe.V1LayerParameter.hdf5_output_param\', index=23,\n      number=14, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hinge_loss_param\', full_name=\'caffe.V1LayerParameter.hinge_loss_param\', index=24,\n      number=29, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'image_data_param\', full_name=\'caffe.V1LayerParameter.image_data_param\', index=25,\n      number=15, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'infogain_loss_param\', full_name=\'caffe.V1LayerParameter.infogain_loss_param\', index=26,\n      number=16, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'inner_product_param\', full_name=\'caffe.V1LayerParameter.inner_product_param\', index=27,\n      number=17, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'lrn_param\', full_name=\'caffe.V1LayerParameter.lrn_param\', index=28,\n      number=18, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'memory_data_param\', full_name=\'caffe.V1LayerParameter.memory_data_param\', index=29,\n      number=22, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mvn_param\', full_name=\'caffe.V1LayerParameter.mvn_param\', index=30,\n      number=34, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pooling_param\', full_name=\'caffe.V1LayerParameter.pooling_param\', index=31,\n      number=19, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'power_param\', full_name=\'caffe.V1LayerParameter.power_param\', index=32,\n      number=21, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'relu_param\', full_name=\'caffe.V1LayerParameter.relu_param\', index=33,\n      number=30, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'sigmoid_param\', full_name=\'caffe.V1LayerParameter.sigmoid_param\', index=34,\n      number=38, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'softmax_param\', full_name=\'caffe.V1LayerParameter.softmax_param\', index=35,\n      number=39, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'slice_param\', full_name=\'caffe.V1LayerParameter.slice_param\', index=36,\n      number=31, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'tanh_param\', full_name=\'caffe.V1LayerParameter.tanh_param\', index=37,\n      number=37, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'threshold_param\', full_name=\'caffe.V1LayerParameter.threshold_param\', index=38,\n      number=25, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'window_data_param\', full_name=\'caffe.V1LayerParameter.window_data_param\', index=39,\n      number=20, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'transform_param\', full_name=\'caffe.V1LayerParameter.transform_param\', index=40,\n      number=36, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'loss_param\', full_name=\'caffe.V1LayerParameter.loss_param\', index=41,\n      number=42, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'layer\', full_name=\'caffe.V1LayerParameter.layer\', index=42,\n      number=1, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _V1LAYERPARAMETER_LAYERTYPE,\n    _V1LAYERPARAMETER_DIMCHECKMODE,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=18646,\n  serialized_end=21174,\n)\n\n\n_V0LAYERPARAMETER = _descriptor.Descriptor(\n  name=\'V0LayerParameter\',\n  full_name=\'caffe.V0LayerParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'name\', full_name=\'caffe.V0LayerParameter.name\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'type\', full_name=\'caffe.V0LayerParameter.type\', index=1,\n      number=2, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'num_output\', full_name=\'caffe.V0LayerParameter.num_output\', index=2,\n      number=3, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'biasterm\', full_name=\'caffe.V0LayerParameter.biasterm\', index=3,\n      number=4, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=True,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'weight_filler\', full_name=\'caffe.V0LayerParameter.weight_filler\', index=4,\n      number=5, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'bias_filler\', full_name=\'caffe.V0LayerParameter.bias_filler\', index=5,\n      number=6, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pad\', full_name=\'caffe.V0LayerParameter.pad\', index=6,\n      number=7, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'kernelsize\', full_name=\'caffe.V0LayerParameter.kernelsize\', index=7,\n      number=8, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'group\', full_name=\'caffe.V0LayerParameter.group\', index=8,\n      number=9, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'stride\', full_name=\'caffe.V0LayerParameter.stride\', index=9,\n      number=10, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'pool\', full_name=\'caffe.V0LayerParameter.pool\', index=10,\n      number=11, type=14, cpp_type=8, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'dropout_ratio\', full_name=\'caffe.V0LayerParameter.dropout_ratio\', index=11,\n      number=12, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'local_size\', full_name=\'caffe.V0LayerParameter.local_size\', index=12,\n      number=13, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'alpha\', full_name=\'caffe.V0LayerParameter.alpha\', index=13,\n      number=14, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'beta\', full_name=\'caffe.V0LayerParameter.beta\', index=14,\n      number=15, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.75,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'k\', full_name=\'caffe.V0LayerParameter.k\', index=15,\n      number=22, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'source\', full_name=\'caffe.V0LayerParameter.source\', index=16,\n      number=16, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'scale\', full_name=\'caffe.V0LayerParameter.scale\', index=17,\n      number=17, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'meanfile\', full_name=\'caffe.V0LayerParameter.meanfile\', index=18,\n      number=18, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'batchsize\', full_name=\'caffe.V0LayerParameter.batchsize\', index=19,\n      number=19, type=13, cpp_type=3, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'cropsize\', full_name=\'caffe.V0LayerParameter.cropsize\', index=20,\n      number=20, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'mirror\', full_name=\'caffe.V0LayerParameter.mirror\', index=21,\n      number=21, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'blobs\', full_name=\'caffe.V0LayerParameter.blobs\', index=22,\n      number=50, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'blobs_lr\', full_name=\'caffe.V0LayerParameter.blobs_lr\', index=23,\n      number=51, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'weight_decay\', full_name=\'caffe.V0LayerParameter.weight_decay\', index=24,\n      number=52, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'rand_skip\', full_name=\'caffe.V0LayerParameter.rand_skip\', index=25,\n      number=53, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'det_fg_threshold\', full_name=\'caffe.V0LayerParameter.det_fg_threshold\', index=26,\n      number=54, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'det_bg_threshold\', full_name=\'caffe.V0LayerParameter.det_bg_threshold\', index=27,\n      number=55, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.5,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'det_fg_fraction\', full_name=\'caffe.V0LayerParameter.det_fg_fraction\', index=28,\n      number=56, type=2, cpp_type=6, label=1,\n      has_default_value=True, default_value=0.25,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'det_context_pad\', full_name=\'caffe.V0LayerParameter.det_context_pad\', index=29,\n      number=58, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'det_crop_mode\', full_name=\'caffe.V0LayerParameter.det_crop_mode\', index=30,\n      number=59, type=9, cpp_type=9, label=1,\n      has_default_value=True, default_value=_b(""warp"").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'new_num\', full_name=\'caffe.V0LayerParameter.new_num\', index=31,\n      number=60, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'new_channels\', full_name=\'caffe.V0LayerParameter.new_channels\', index=32,\n      number=61, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'new_height\', full_name=\'caffe.V0LayerParameter.new_height\', index=33,\n      number=62, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'new_width\', full_name=\'caffe.V0LayerParameter.new_width\', index=34,\n      number=63, type=5, cpp_type=1, label=1,\n      has_default_value=True, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'shuffle_images\', full_name=\'caffe.V0LayerParameter.shuffle_images\', index=35,\n      number=64, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'concat_dim\', full_name=\'caffe.V0LayerParameter.concat_dim\', index=36,\n      number=65, type=13, cpp_type=3, label=1,\n      has_default_value=True, default_value=1,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'hdf5_output_param\', full_name=\'caffe.V0LayerParameter.hdf5_output_param\', index=37,\n      number=1001, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n    _V0LAYERPARAMETER_POOLMETHOD,\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=21177,\n  serialized_end=22198,\n)\n\n\n_PRELUPARAMETER = _descriptor.Descriptor(\n  name=\'PReLUParameter\',\n  full_name=\'caffe.PReLUParameter\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'filler\', full_name=\'caffe.PReLUParameter.filler\', index=0,\n      number=1, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'channel_shared\', full_name=\'caffe.PReLUParameter.channel_shared\', index=1,\n      number=2, type=8, cpp_type=7, label=1,\n      has_default_value=True, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=22200,\n  serialized_end=22287,\n)\n\n_BLOBPROTO.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_BLOBPROTOVECTOR.fields_by_name[\'blobs\'].message_type = _BLOBPROTO\n_LABELMAP.fields_by_name[\'item\'].message_type = _LABELMAPITEM\n_BATCHSAMPLER.fields_by_name[\'sampler\'].message_type = _SAMPLER\n_BATCHSAMPLER.fields_by_name[\'sample_constraint\'].message_type = _SAMPLECONSTRAINT\n_EMITCONSTRAINT.fields_by_name[\'emit_type\'].enum_type = _EMITCONSTRAINT_EMITTYPE\n_EMITCONSTRAINT_EMITTYPE.containing_type = _EMITCONSTRAINT\n_ANNOTATION.fields_by_name[\'bbox\'].message_type = _NORMALIZEDBBOX\n_ANNOTATIONGROUP.fields_by_name[\'annotation\'].message_type = _ANNOTATION\n_ANNOTATEDDATUM.fields_by_name[\'datum\'].message_type = _DATUM\n_ANNOTATEDDATUM.fields_by_name[\'type\'].enum_type = _ANNOTATEDDATUM_ANNOTATIONTYPE\n_ANNOTATEDDATUM.fields_by_name[\'annotation_group\'].message_type = _ANNOTATIONGROUP\n_ANNOTATEDDATUM_ANNOTATIONTYPE.containing_type = _ANNOTATEDDATUM\n_FILLERPARAMETER.fields_by_name[\'variance_norm\'].enum_type = _FILLERPARAMETER_VARIANCENORM\n_FILLERPARAMETER_VARIANCENORM.containing_type = _FILLERPARAMETER\n_NETPARAMETER.fields_by_name[\'input_shape\'].message_type = _BLOBSHAPE\n_NETPARAMETER.fields_by_name[\'state\'].message_type = _NETSTATE\n_NETPARAMETER.fields_by_name[\'layer\'].message_type = _LAYERPARAMETER\n_NETPARAMETER.fields_by_name[\'layers\'].message_type = _V1LAYERPARAMETER\n_SOLVERPARAMETER.fields_by_name[\'net_param\'].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[\'train_net_param\'].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[\'test_net_param\'].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[\'train_state\'].message_type = _NETSTATE\n_SOLVERPARAMETER.fields_by_name[\'test_state\'].message_type = _NETSTATE\n_SOLVERPARAMETER.fields_by_name[\'snapshot_format\'].enum_type = _SOLVERPARAMETER_SNAPSHOTFORMAT\n_SOLVERPARAMETER.fields_by_name[\'solver_mode\'].enum_type = _SOLVERPARAMETER_SOLVERMODE\n_SOLVERPARAMETER.fields_by_name[\'solver_type\'].enum_type = _SOLVERPARAMETER_SOLVERTYPE\n_SOLVERPARAMETER_SNAPSHOTFORMAT.containing_type = _SOLVERPARAMETER\n_SOLVERPARAMETER_SOLVERMODE.containing_type = _SOLVERPARAMETER\n_SOLVERPARAMETER_SOLVERTYPE.containing_type = _SOLVERPARAMETER\n_SOLVERSTATE.fields_by_name[\'history\'].message_type = _BLOBPROTO\n_NETSTATE.fields_by_name[\'phase\'].enum_type = _PHASE\n_NETSTATERULE.fields_by_name[\'phase\'].enum_type = _PHASE\n_PARAMSPEC.fields_by_name[\'share_mode\'].enum_type = _PARAMSPEC_DIMCHECKMODE\n_PARAMSPEC_DIMCHECKMODE.containing_type = _PARAMSPEC\n_LAYERPARAMETER.fields_by_name[\'phase\'].enum_type = _PHASE\n_LAYERPARAMETER.fields_by_name[\'param\'].message_type = _PARAMSPEC\n_LAYERPARAMETER.fields_by_name[\'blobs\'].message_type = _BLOBPROTO\n_LAYERPARAMETER.fields_by_name[\'include\'].message_type = _NETSTATERULE\n_LAYERPARAMETER.fields_by_name[\'exclude\'].message_type = _NETSTATERULE\n_LAYERPARAMETER.fields_by_name[\'transform_param\'].message_type = _TRANSFORMATIONPARAMETER\n_LAYERPARAMETER.fields_by_name[\'loss_param\'].message_type = _LOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\'accuracy_param\'].message_type = _ACCURACYPARAMETER\n_LAYERPARAMETER.fields_by_name[\'annotated_data_param\'].message_type = _ANNOTATEDDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'argmax_param\'].message_type = _ARGMAXPARAMETER\n_LAYERPARAMETER.fields_by_name[\'batch_norm_param\'].message_type = _BATCHNORMPARAMETER\n_LAYERPARAMETER.fields_by_name[\'bias_param\'].message_type = _BIASPARAMETER\n_LAYERPARAMETER.fields_by_name[\'concat_param\'].message_type = _CONCATPARAMETER\n_LAYERPARAMETER.fields_by_name[\'contrastive_loss_param\'].message_type = _CONTRASTIVELOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\'convolution_param\'].message_type = _CONVOLUTIONPARAMETER\n_LAYERPARAMETER.fields_by_name[\'crop_param\'].message_type = _CROPPARAMETER\n_LAYERPARAMETER.fields_by_name[\'data_param\'].message_type = _DATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'detection_evaluate_param\'].message_type = _DETECTIONEVALUATEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'detection_output_param\'].message_type = _DETECTIONOUTPUTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'dropout_param\'].message_type = _DROPOUTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'dummy_data_param\'].message_type = _DUMMYDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'eltwise_param\'].message_type = _ELTWISEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'elu_param\'].message_type = _ELUPARAMETER\n_LAYERPARAMETER.fields_by_name[\'embed_param\'].message_type = _EMBEDPARAMETER\n_LAYERPARAMETER.fields_by_name[\'exp_param\'].message_type = _EXPPARAMETER\n_LAYERPARAMETER.fields_by_name[\'flatten_param\'].message_type = _FLATTENPARAMETER\n_LAYERPARAMETER.fields_by_name[\'hdf5_data_param\'].message_type = _HDF5DATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'hdf5_output_param\'].message_type = _HDF5OUTPUTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'hinge_loss_param\'].message_type = _HINGELOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\'image_data_param\'].message_type = _IMAGEDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'infogain_loss_param\'].message_type = _INFOGAINLOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\'inner_product_param\'].message_type = _INNERPRODUCTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'input_param\'].message_type = _INPUTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'log_param\'].message_type = _LOGPARAMETER\n_LAYERPARAMETER.fields_by_name[\'lrn_param\'].message_type = _LRNPARAMETER\n_LAYERPARAMETER.fields_by_name[\'memory_data_param\'].message_type = _MEMORYDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'multibox_loss_param\'].message_type = _MULTIBOXLOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\'mvn_param\'].message_type = _MVNPARAMETER\n_LAYERPARAMETER.fields_by_name[\'norm_param\'].message_type = _NORMALIZEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'parameter_param\'].message_type = _PARAMETERPARAMETER\n_LAYERPARAMETER.fields_by_name[\'permute_param\'].message_type = _PERMUTEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'pooling_param\'].message_type = _POOLINGPARAMETER\n_LAYERPARAMETER.fields_by_name[\'power_param\'].message_type = _POWERPARAMETER\n_LAYERPARAMETER.fields_by_name[\'prelu_param\'].message_type = _PRELUPARAMETER\n_LAYERPARAMETER.fields_by_name[\'prior_box_param\'].message_type = _PRIORBOXPARAMETER\n_LAYERPARAMETER.fields_by_name[\'python_param\'].message_type = _PYTHONPARAMETER\n_LAYERPARAMETER.fields_by_name[\'recurrent_param\'].message_type = _RECURRENTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'reduction_param\'].message_type = _REDUCTIONPARAMETER\n_LAYERPARAMETER.fields_by_name[\'relu_param\'].message_type = _RELUPARAMETER\n_LAYERPARAMETER.fields_by_name[\'reshape_param\'].message_type = _RESHAPEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'scale_param\'].message_type = _SCALEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'sigmoid_param\'].message_type = _SIGMOIDPARAMETER\n_LAYERPARAMETER.fields_by_name[\'softmax_param\'].message_type = _SOFTMAXPARAMETER\n_LAYERPARAMETER.fields_by_name[\'spp_param\'].message_type = _SPPPARAMETER\n_LAYERPARAMETER.fields_by_name[\'slice_param\'].message_type = _SLICEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'tanh_param\'].message_type = _TANHPARAMETER\n_LAYERPARAMETER.fields_by_name[\'threshold_param\'].message_type = _THRESHOLDPARAMETER\n_LAYERPARAMETER.fields_by_name[\'tile_param\'].message_type = _TILEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'video_data_param\'].message_type = _VIDEODATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'window_data_param\'].message_type = _WINDOWDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'box_annotator_ohem_param\'].message_type = _BOXANNOTATOROHEMPARAMETER\n_LAYERPARAMETER.fields_by_name[\'psroi_pooling_param\'].message_type = _PSROIPOOLINGPARAMETER\n_LAYERPARAMETER.fields_by_name[\'roi_pooling_param\'].message_type = _ROIPOOLINGPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\'resize_param\'].message_type = _RESIZEPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\'noise_param\'].message_type = _NOISEPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\'distort_param\'].message_type = _DISTORTIONPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\'expand_param\'].message_type = _EXPANSIONPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\'emit_constraint\'].message_type = _EMITCONSTRAINT\n_RESIZEPARAMETER.fields_by_name[\'resize_mode\'].enum_type = _RESIZEPARAMETER_RESIZE_MODE\n_RESIZEPARAMETER.fields_by_name[\'pad_mode\'].enum_type = _RESIZEPARAMETER_PAD_MODE\n_RESIZEPARAMETER.fields_by_name[\'interp_mode\'].enum_type = _RESIZEPARAMETER_INTERP_MODE\n_RESIZEPARAMETER_RESIZE_MODE.containing_type = _RESIZEPARAMETER\n_RESIZEPARAMETER_PAD_MODE.containing_type = _RESIZEPARAMETER\n_RESIZEPARAMETER_INTERP_MODE.containing_type = _RESIZEPARAMETER\n_NOISEPARAMETER.fields_by_name[\'saltpepper_param\'].message_type = _SALTPEPPERPARAMETER\n_LOSSPARAMETER.fields_by_name[\'normalization\'].enum_type = _LOSSPARAMETER_NORMALIZATIONMODE\n_LOSSPARAMETER_NORMALIZATIONMODE.containing_type = _LOSSPARAMETER\n_ANNOTATEDDATAPARAMETER.fields_by_name[\'batch_sampler\'].message_type = _BATCHSAMPLER\n_ANNOTATEDDATAPARAMETER.fields_by_name[\'anno_type\'].enum_type = _ANNOTATEDDATUM_ANNOTATIONTYPE\n_BIASPARAMETER.fields_by_name[\'filler\'].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[\'weight_filler\'].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[\'engine\'].enum_type = _CONVOLUTIONPARAMETER_ENGINE\n_CONVOLUTIONPARAMETER_ENGINE.containing_type = _CONVOLUTIONPARAMETER\n_DATAPARAMETER.fields_by_name[\'backend\'].enum_type = _DATAPARAMETER_DB\n_DATAPARAMETER_DB.containing_type = _DATAPARAMETER\n_DETECTIONEVALUATEPARAMETER.fields_by_name[\'resize_param\'].message_type = _RESIZEPARAMETER\n_SAVEOUTPUTPARAMETER.fields_by_name[\'resize_param\'].message_type = _RESIZEPARAMETER\n_DETECTIONOUTPUTPARAMETER.fields_by_name[\'nms_param\'].message_type = _NONMAXIMUMSUPPRESSIONPARAMETER\n_DETECTIONOUTPUTPARAMETER.fields_by_name[\'save_output_param\'].message_type = _SAVEOUTPUTPARAMETER\n_DETECTIONOUTPUTPARAMETER.fields_by_name[\'code_type\'].enum_type = _PRIORBOXPARAMETER_CODETYPE\n_DUMMYDATAPARAMETER.fields_by_name[\'data_filler\'].message_type = _FILLERPARAMETER\n_DUMMYDATAPARAMETER.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_ELTWISEPARAMETER.fields_by_name[\'operation\'].enum_type = _ELTWISEPARAMETER_ELTWISEOP\n_ELTWISEPARAMETER_ELTWISEOP.containing_type = _ELTWISEPARAMETER\n_EMBEDPARAMETER.fields_by_name[\'weight_filler\'].message_type = _FILLERPARAMETER\n_EMBEDPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_HINGELOSSPARAMETER.fields_by_name[\'norm\'].enum_type = _HINGELOSSPARAMETER_NORM\n_HINGELOSSPARAMETER_NORM.containing_type = _HINGELOSSPARAMETER\n_INNERPRODUCTPARAMETER.fields_by_name[\'weight_filler\'].message_type = _FILLERPARAMETER\n_INNERPRODUCTPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_INPUTPARAMETER.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_LRNPARAMETER.fields_by_name[\'norm_region\'].enum_type = _LRNPARAMETER_NORMREGION\n_LRNPARAMETER.fields_by_name[\'engine\'].enum_type = _LRNPARAMETER_ENGINE\n_LRNPARAMETER_NORMREGION.containing_type = _LRNPARAMETER\n_LRNPARAMETER_ENGINE.containing_type = _LRNPARAMETER\n_MULTIBOXLOSSPARAMETER.fields_by_name[\'loc_loss_type\'].enum_type = _MULTIBOXLOSSPARAMETER_LOCLOSSTYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\'conf_loss_type\'].enum_type = _MULTIBOXLOSSPARAMETER_CONFLOSSTYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\'match_type\'].enum_type = _MULTIBOXLOSSPARAMETER_MATCHTYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\'code_type\'].enum_type = _PRIORBOXPARAMETER_CODETYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\'mining_type\'].enum_type = _MULTIBOXLOSSPARAMETER_MININGTYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\'nms_param\'].message_type = _NONMAXIMUMSUPPRESSIONPARAMETER\n_MULTIBOXLOSSPARAMETER_LOCLOSSTYPE.containing_type = _MULTIBOXLOSSPARAMETER\n_MULTIBOXLOSSPARAMETER_CONFLOSSTYPE.containing_type = _MULTIBOXLOSSPARAMETER\n_MULTIBOXLOSSPARAMETER_MATCHTYPE.containing_type = _MULTIBOXLOSSPARAMETER\n_MULTIBOXLOSSPARAMETER_MININGTYPE.containing_type = _MULTIBOXLOSSPARAMETER\n_NORMALIZEPARAMETER.fields_by_name[\'scale_filler\'].message_type = _FILLERPARAMETER\n_PARAMETERPARAMETER.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_POOLINGPARAMETER.fields_by_name[\'pool\'].enum_type = _POOLINGPARAMETER_POOLMETHOD\n_POOLINGPARAMETER.fields_by_name[\'engine\'].enum_type = _POOLINGPARAMETER_ENGINE\n_POOLINGPARAMETER_POOLMETHOD.containing_type = _POOLINGPARAMETER\n_POOLINGPARAMETER_ENGINE.containing_type = _POOLINGPARAMETER\n_PRIORBOXPARAMETER_CODETYPE.containing_type = _PRIORBOXPARAMETER\n_RECURRENTPARAMETER.fields_by_name[\'weight_filler\'].message_type = _FILLERPARAMETER\n_RECURRENTPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_REDUCTIONPARAMETER.fields_by_name[\'operation\'].enum_type = _REDUCTIONPARAMETER_REDUCTIONOP\n_REDUCTIONPARAMETER_REDUCTIONOP.containing_type = _REDUCTIONPARAMETER\n_RELUPARAMETER.fields_by_name[\'engine\'].enum_type = _RELUPARAMETER_ENGINE\n_RELUPARAMETER_ENGINE.containing_type = _RELUPARAMETER\n_RESHAPEPARAMETER.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_SCALEPARAMETER.fields_by_name[\'filler\'].message_type = _FILLERPARAMETER\n_SCALEPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_SIGMOIDPARAMETER.fields_by_name[\'engine\'].enum_type = _SIGMOIDPARAMETER_ENGINE\n_SIGMOIDPARAMETER_ENGINE.containing_type = _SIGMOIDPARAMETER\n_SOFTMAXPARAMETER.fields_by_name[\'engine\'].enum_type = _SOFTMAXPARAMETER_ENGINE\n_SOFTMAXPARAMETER_ENGINE.containing_type = _SOFTMAXPARAMETER\n_TANHPARAMETER.fields_by_name[\'engine\'].enum_type = _TANHPARAMETER_ENGINE\n_TANHPARAMETER_ENGINE.containing_type = _TANHPARAMETER\n_VIDEODATAPARAMETER.fields_by_name[\'video_type\'].enum_type = _VIDEODATAPARAMETER_VIDEOTYPE\n_VIDEODATAPARAMETER_VIDEOTYPE.containing_type = _VIDEODATAPARAMETER\n_SPPPARAMETER.fields_by_name[\'pool\'].enum_type = _SPPPARAMETER_POOLMETHOD\n_SPPPARAMETER.fields_by_name[\'engine\'].enum_type = _SPPPARAMETER_ENGINE\n_SPPPARAMETER_POOLMETHOD.containing_type = _SPPPARAMETER\n_SPPPARAMETER_ENGINE.containing_type = _SPPPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'include\'].message_type = _NETSTATERULE\n_V1LAYERPARAMETER.fields_by_name[\'exclude\'].message_type = _NETSTATERULE\n_V1LAYERPARAMETER.fields_by_name[\'type\'].enum_type = _V1LAYERPARAMETER_LAYERTYPE\n_V1LAYERPARAMETER.fields_by_name[\'blobs\'].message_type = _BLOBPROTO\n_V1LAYERPARAMETER.fields_by_name[\'blob_share_mode\'].enum_type = _V1LAYERPARAMETER_DIMCHECKMODE\n_V1LAYERPARAMETER.fields_by_name[\'accuracy_param\'].message_type = _ACCURACYPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'argmax_param\'].message_type = _ARGMAXPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'concat_param\'].message_type = _CONCATPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'contrastive_loss_param\'].message_type = _CONTRASTIVELOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'convolution_param\'].message_type = _CONVOLUTIONPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'data_param\'].message_type = _DATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'dropout_param\'].message_type = _DROPOUTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'dummy_data_param\'].message_type = _DUMMYDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'eltwise_param\'].message_type = _ELTWISEPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'exp_param\'].message_type = _EXPPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'hdf5_data_param\'].message_type = _HDF5DATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'hdf5_output_param\'].message_type = _HDF5OUTPUTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'hinge_loss_param\'].message_type = _HINGELOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'image_data_param\'].message_type = _IMAGEDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'infogain_loss_param\'].message_type = _INFOGAINLOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'inner_product_param\'].message_type = _INNERPRODUCTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'lrn_param\'].message_type = _LRNPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'memory_data_param\'].message_type = _MEMORYDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'mvn_param\'].message_type = _MVNPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'pooling_param\'].message_type = _POOLINGPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'power_param\'].message_type = _POWERPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'relu_param\'].message_type = _RELUPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'sigmoid_param\'].message_type = _SIGMOIDPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'softmax_param\'].message_type = _SOFTMAXPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'slice_param\'].message_type = _SLICEPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'tanh_param\'].message_type = _TANHPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'threshold_param\'].message_type = _THRESHOLDPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'window_data_param\'].message_type = _WINDOWDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'transform_param\'].message_type = _TRANSFORMATIONPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'loss_param\'].message_type = _LOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'layer\'].message_type = _V0LAYERPARAMETER\n_V1LAYERPARAMETER_LAYERTYPE.containing_type = _V1LAYERPARAMETER\n_V1LAYERPARAMETER_DIMCHECKMODE.containing_type = _V1LAYERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[\'weight_filler\'].message_type = _FILLERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[\'pool\'].enum_type = _V0LAYERPARAMETER_POOLMETHOD\n_V0LAYERPARAMETER.fields_by_name[\'blobs\'].message_type = _BLOBPROTO\n_V0LAYERPARAMETER.fields_by_name[\'hdf5_output_param\'].message_type = _HDF5OUTPUTPARAMETER\n_V0LAYERPARAMETER_POOLMETHOD.containing_type = _V0LAYERPARAMETER\n_PRELUPARAMETER.fields_by_name[\'filler\'].message_type = _FILLERPARAMETER\nDESCRIPTOR.message_types_by_name[\'BlobShape\'] = _BLOBSHAPE\nDESCRIPTOR.message_types_by_name[\'BlobProto\'] = _BLOBPROTO\nDESCRIPTOR.message_types_by_name[\'BlobProtoVector\'] = _BLOBPROTOVECTOR\nDESCRIPTOR.message_types_by_name[\'Datum\'] = _DATUM\nDESCRIPTOR.message_types_by_name[\'LabelMapItem\'] = _LABELMAPITEM\nDESCRIPTOR.message_types_by_name[\'LabelMap\'] = _LABELMAP\nDESCRIPTOR.message_types_by_name[\'Sampler\'] = _SAMPLER\nDESCRIPTOR.message_types_by_name[\'SampleConstraint\'] = _SAMPLECONSTRAINT\nDESCRIPTOR.message_types_by_name[\'BatchSampler\'] = _BATCHSAMPLER\nDESCRIPTOR.message_types_by_name[\'EmitConstraint\'] = _EMITCONSTRAINT\nDESCRIPTOR.message_types_by_name[\'NormalizedBBox\'] = _NORMALIZEDBBOX\nDESCRIPTOR.message_types_by_name[\'Annotation\'] = _ANNOTATION\nDESCRIPTOR.message_types_by_name[\'AnnotationGroup\'] = _ANNOTATIONGROUP\nDESCRIPTOR.message_types_by_name[\'AnnotatedDatum\'] = _ANNOTATEDDATUM\nDESCRIPTOR.message_types_by_name[\'FillerParameter\'] = _FILLERPARAMETER\nDESCRIPTOR.message_types_by_name[\'NetParameter\'] = _NETPARAMETER\nDESCRIPTOR.message_types_by_name[\'SolverParameter\'] = _SOLVERPARAMETER\nDESCRIPTOR.message_types_by_name[\'SolverState\'] = _SOLVERSTATE\nDESCRIPTOR.message_types_by_name[\'NetState\'] = _NETSTATE\nDESCRIPTOR.message_types_by_name[\'NetStateRule\'] = _NETSTATERULE\nDESCRIPTOR.message_types_by_name[\'ParamSpec\'] = _PARAMSPEC\nDESCRIPTOR.message_types_by_name[\'LayerParameter\'] = _LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[\'ROIPoolingParameter\'] = _ROIPOOLINGPARAMETER\nDESCRIPTOR.message_types_by_name[\'PSROIPoolingParameter\'] = _PSROIPOOLINGPARAMETER\nDESCRIPTOR.message_types_by_name[\'BoxAnnotatorOHEMParameter\'] = _BOXANNOTATOROHEMPARAMETER\nDESCRIPTOR.message_types_by_name[\'TransformationParameter\'] = _TRANSFORMATIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'ResizeParameter\'] = _RESIZEPARAMETER\nDESCRIPTOR.message_types_by_name[\'SaltPepperParameter\'] = _SALTPEPPERPARAMETER\nDESCRIPTOR.message_types_by_name[\'NoiseParameter\'] = _NOISEPARAMETER\nDESCRIPTOR.message_types_by_name[\'DistortionParameter\'] = _DISTORTIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'ExpansionParameter\'] = _EXPANSIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'LossParameter\'] = _LOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'AccuracyParameter\'] = _ACCURACYPARAMETER\nDESCRIPTOR.message_types_by_name[\'AnnotatedDataParameter\'] = _ANNOTATEDDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'ArgMaxParameter\'] = _ARGMAXPARAMETER\nDESCRIPTOR.message_types_by_name[\'ConcatParameter\'] = _CONCATPARAMETER\nDESCRIPTOR.message_types_by_name[\'BatchNormParameter\'] = _BATCHNORMPARAMETER\nDESCRIPTOR.message_types_by_name[\'BiasParameter\'] = _BIASPARAMETER\nDESCRIPTOR.message_types_by_name[\'ContrastiveLossParameter\'] = _CONTRASTIVELOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'ConvolutionParameter\'] = _CONVOLUTIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'CropParameter\'] = _CROPPARAMETER\nDESCRIPTOR.message_types_by_name[\'DataParameter\'] = _DATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'DetectionEvaluateParameter\'] = _DETECTIONEVALUATEPARAMETER\nDESCRIPTOR.message_types_by_name[\'NonMaximumSuppressionParameter\'] = _NONMAXIMUMSUPPRESSIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'SaveOutputParameter\'] = _SAVEOUTPUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'DetectionOutputParameter\'] = _DETECTIONOUTPUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'DropoutParameter\'] = _DROPOUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'DummyDataParameter\'] = _DUMMYDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'EltwiseParameter\'] = _ELTWISEPARAMETER\nDESCRIPTOR.message_types_by_name[\'ELUParameter\'] = _ELUPARAMETER\nDESCRIPTOR.message_types_by_name[\'EmbedParameter\'] = _EMBEDPARAMETER\nDESCRIPTOR.message_types_by_name[\'ExpParameter\'] = _EXPPARAMETER\nDESCRIPTOR.message_types_by_name[\'FlattenParameter\'] = _FLATTENPARAMETER\nDESCRIPTOR.message_types_by_name[\'HDF5DataParameter\'] = _HDF5DATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'HDF5OutputParameter\'] = _HDF5OUTPUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'HingeLossParameter\'] = _HINGELOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'ImageDataParameter\'] = _IMAGEDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'InfogainLossParameter\'] = _INFOGAINLOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'InnerProductParameter\'] = _INNERPRODUCTPARAMETER\nDESCRIPTOR.message_types_by_name[\'InputParameter\'] = _INPUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'LogParameter\'] = _LOGPARAMETER\nDESCRIPTOR.message_types_by_name[\'LRNParameter\'] = _LRNPARAMETER\nDESCRIPTOR.message_types_by_name[\'MemoryDataParameter\'] = _MEMORYDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'MultiBoxLossParameter\'] = _MULTIBOXLOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'MVNParameter\'] = _MVNPARAMETER\nDESCRIPTOR.message_types_by_name[\'NormalizeParameter\'] = _NORMALIZEPARAMETER\nDESCRIPTOR.message_types_by_name[\'ParameterParameter\'] = _PARAMETERPARAMETER\nDESCRIPTOR.message_types_by_name[\'PermuteParameter\'] = _PERMUTEPARAMETER\nDESCRIPTOR.message_types_by_name[\'PoolingParameter\'] = _POOLINGPARAMETER\nDESCRIPTOR.message_types_by_name[\'PowerParameter\'] = _POWERPARAMETER\nDESCRIPTOR.message_types_by_name[\'PriorBoxParameter\'] = _PRIORBOXPARAMETER\nDESCRIPTOR.message_types_by_name[\'PythonParameter\'] = _PYTHONPARAMETER\nDESCRIPTOR.message_types_by_name[\'RecurrentParameter\'] = _RECURRENTPARAMETER\nDESCRIPTOR.message_types_by_name[\'ReductionParameter\'] = _REDUCTIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'ReLUParameter\'] = _RELUPARAMETER\nDESCRIPTOR.message_types_by_name[\'ReshapeParameter\'] = _RESHAPEPARAMETER\nDESCRIPTOR.message_types_by_name[\'ScaleParameter\'] = _SCALEPARAMETER\nDESCRIPTOR.message_types_by_name[\'SigmoidParameter\'] = _SIGMOIDPARAMETER\nDESCRIPTOR.message_types_by_name[\'SliceParameter\'] = _SLICEPARAMETER\nDESCRIPTOR.message_types_by_name[\'SoftmaxParameter\'] = _SOFTMAXPARAMETER\nDESCRIPTOR.message_types_by_name[\'TanHParameter\'] = _TANHPARAMETER\nDESCRIPTOR.message_types_by_name[\'TileParameter\'] = _TILEPARAMETER\nDESCRIPTOR.message_types_by_name[\'ThresholdParameter\'] = _THRESHOLDPARAMETER\nDESCRIPTOR.message_types_by_name[\'VideoDataParameter\'] = _VIDEODATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'WindowDataParameter\'] = _WINDOWDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'SPPParameter\'] = _SPPPARAMETER\nDESCRIPTOR.message_types_by_name[\'V1LayerParameter\'] = _V1LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[\'V0LayerParameter\'] = _V0LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[\'PReLUParameter\'] = _PRELUPARAMETER\nDESCRIPTOR.enum_types_by_name[\'Phase\'] = _PHASE\n\nBlobShape = _reflection.GeneratedProtocolMessageType(\'BlobShape\', (_message.Message,), dict(\n  DESCRIPTOR = _BLOBSHAPE,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.BlobShape)\n  ))\n_sym_db.RegisterMessage(BlobShape)\n\nBlobProto = _reflection.GeneratedProtocolMessageType(\'BlobProto\', (_message.Message,), dict(\n  DESCRIPTOR = _BLOBPROTO,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.BlobProto)\n  ))\n_sym_db.RegisterMessage(BlobProto)\n\nBlobProtoVector = _reflection.GeneratedProtocolMessageType(\'BlobProtoVector\', (_message.Message,), dict(\n  DESCRIPTOR = _BLOBPROTOVECTOR,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)\n  ))\n_sym_db.RegisterMessage(BlobProtoVector)\n\nDatum = _reflection.GeneratedProtocolMessageType(\'Datum\', (_message.Message,), dict(\n  DESCRIPTOR = _DATUM,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.Datum)\n  ))\n_sym_db.RegisterMessage(Datum)\n\nLabelMapItem = _reflection.GeneratedProtocolMessageType(\'LabelMapItem\', (_message.Message,), dict(\n  DESCRIPTOR = _LABELMAPITEM,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.LabelMapItem)\n  ))\n_sym_db.RegisterMessage(LabelMapItem)\n\nLabelMap = _reflection.GeneratedProtocolMessageType(\'LabelMap\', (_message.Message,), dict(\n  DESCRIPTOR = _LABELMAP,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.LabelMap)\n  ))\n_sym_db.RegisterMessage(LabelMap)\n\nSampler = _reflection.GeneratedProtocolMessageType(\'Sampler\', (_message.Message,), dict(\n  DESCRIPTOR = _SAMPLER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.Sampler)\n  ))\n_sym_db.RegisterMessage(Sampler)\n\nSampleConstraint = _reflection.GeneratedProtocolMessageType(\'SampleConstraint\', (_message.Message,), dict(\n  DESCRIPTOR = _SAMPLECONSTRAINT,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SampleConstraint)\n  ))\n_sym_db.RegisterMessage(SampleConstraint)\n\nBatchSampler = _reflection.GeneratedProtocolMessageType(\'BatchSampler\', (_message.Message,), dict(\n  DESCRIPTOR = _BATCHSAMPLER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.BatchSampler)\n  ))\n_sym_db.RegisterMessage(BatchSampler)\n\nEmitConstraint = _reflection.GeneratedProtocolMessageType(\'EmitConstraint\', (_message.Message,), dict(\n  DESCRIPTOR = _EMITCONSTRAINT,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.EmitConstraint)\n  ))\n_sym_db.RegisterMessage(EmitConstraint)\n\nNormalizedBBox = _reflection.GeneratedProtocolMessageType(\'NormalizedBBox\', (_message.Message,), dict(\n  DESCRIPTOR = _NORMALIZEDBBOX,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.NormalizedBBox)\n  ))\n_sym_db.RegisterMessage(NormalizedBBox)\n\nAnnotation = _reflection.GeneratedProtocolMessageType(\'Annotation\', (_message.Message,), dict(\n  DESCRIPTOR = _ANNOTATION,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.Annotation)\n  ))\n_sym_db.RegisterMessage(Annotation)\n\nAnnotationGroup = _reflection.GeneratedProtocolMessageType(\'AnnotationGroup\', (_message.Message,), dict(\n  DESCRIPTOR = _ANNOTATIONGROUP,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.AnnotationGroup)\n  ))\n_sym_db.RegisterMessage(AnnotationGroup)\n\nAnnotatedDatum = _reflection.GeneratedProtocolMessageType(\'AnnotatedDatum\', (_message.Message,), dict(\n  DESCRIPTOR = _ANNOTATEDDATUM,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.AnnotatedDatum)\n  ))\n_sym_db.RegisterMessage(AnnotatedDatum)\n\nFillerParameter = _reflection.GeneratedProtocolMessageType(\'FillerParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _FILLERPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.FillerParameter)\n  ))\n_sym_db.RegisterMessage(FillerParameter)\n\nNetParameter = _reflection.GeneratedProtocolMessageType(\'NetParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _NETPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.NetParameter)\n  ))\n_sym_db.RegisterMessage(NetParameter)\n\nSolverParameter = _reflection.GeneratedProtocolMessageType(\'SolverParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _SOLVERPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SolverParameter)\n  ))\n_sym_db.RegisterMessage(SolverParameter)\n\nSolverState = _reflection.GeneratedProtocolMessageType(\'SolverState\', (_message.Message,), dict(\n  DESCRIPTOR = _SOLVERSTATE,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SolverState)\n  ))\n_sym_db.RegisterMessage(SolverState)\n\nNetState = _reflection.GeneratedProtocolMessageType(\'NetState\', (_message.Message,), dict(\n  DESCRIPTOR = _NETSTATE,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.NetState)\n  ))\n_sym_db.RegisterMessage(NetState)\n\nNetStateRule = _reflection.GeneratedProtocolMessageType(\'NetStateRule\', (_message.Message,), dict(\n  DESCRIPTOR = _NETSTATERULE,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.NetStateRule)\n  ))\n_sym_db.RegisterMessage(NetStateRule)\n\nParamSpec = _reflection.GeneratedProtocolMessageType(\'ParamSpec\', (_message.Message,), dict(\n  DESCRIPTOR = _PARAMSPEC,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ParamSpec)\n  ))\n_sym_db.RegisterMessage(ParamSpec)\n\nLayerParameter = _reflection.GeneratedProtocolMessageType(\'LayerParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _LAYERPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.LayerParameter)\n  ))\n_sym_db.RegisterMessage(LayerParameter)\n\nROIPoolingParameter = _reflection.GeneratedProtocolMessageType(\'ROIPoolingParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _ROIPOOLINGPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ROIPoolingParameter)\n  ))\n_sym_db.RegisterMessage(ROIPoolingParameter)\n\nPSROIPoolingParameter = _reflection.GeneratedProtocolMessageType(\'PSROIPoolingParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _PSROIPOOLINGPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.PSROIPoolingParameter)\n  ))\n_sym_db.RegisterMessage(PSROIPoolingParameter)\n\nBoxAnnotatorOHEMParameter = _reflection.GeneratedProtocolMessageType(\'BoxAnnotatorOHEMParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _BOXANNOTATOROHEMPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.BoxAnnotatorOHEMParameter)\n  ))\n_sym_db.RegisterMessage(BoxAnnotatorOHEMParameter)\n\nTransformationParameter = _reflection.GeneratedProtocolMessageType(\'TransformationParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _TRANSFORMATIONPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.TransformationParameter)\n  ))\n_sym_db.RegisterMessage(TransformationParameter)\n\nResizeParameter = _reflection.GeneratedProtocolMessageType(\'ResizeParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _RESIZEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ResizeParameter)\n  ))\n_sym_db.RegisterMessage(ResizeParameter)\n\nSaltPepperParameter = _reflection.GeneratedProtocolMessageType(\'SaltPepperParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _SALTPEPPERPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SaltPepperParameter)\n  ))\n_sym_db.RegisterMessage(SaltPepperParameter)\n\nNoiseParameter = _reflection.GeneratedProtocolMessageType(\'NoiseParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _NOISEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.NoiseParameter)\n  ))\n_sym_db.RegisterMessage(NoiseParameter)\n\nDistortionParameter = _reflection.GeneratedProtocolMessageType(\'DistortionParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _DISTORTIONPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.DistortionParameter)\n  ))\n_sym_db.RegisterMessage(DistortionParameter)\n\nExpansionParameter = _reflection.GeneratedProtocolMessageType(\'ExpansionParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _EXPANSIONPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ExpansionParameter)\n  ))\n_sym_db.RegisterMessage(ExpansionParameter)\n\nLossParameter = _reflection.GeneratedProtocolMessageType(\'LossParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _LOSSPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.LossParameter)\n  ))\n_sym_db.RegisterMessage(LossParameter)\n\nAccuracyParameter = _reflection.GeneratedProtocolMessageType(\'AccuracyParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _ACCURACYPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)\n  ))\n_sym_db.RegisterMessage(AccuracyParameter)\n\nAnnotatedDataParameter = _reflection.GeneratedProtocolMessageType(\'AnnotatedDataParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _ANNOTATEDDATAPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.AnnotatedDataParameter)\n  ))\n_sym_db.RegisterMessage(AnnotatedDataParameter)\n\nArgMaxParameter = _reflection.GeneratedProtocolMessageType(\'ArgMaxParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _ARGMAXPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)\n  ))\n_sym_db.RegisterMessage(ArgMaxParameter)\n\nConcatParameter = _reflection.GeneratedProtocolMessageType(\'ConcatParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _CONCATPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ConcatParameter)\n  ))\n_sym_db.RegisterMessage(ConcatParameter)\n\nBatchNormParameter = _reflection.GeneratedProtocolMessageType(\'BatchNormParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _BATCHNORMPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)\n  ))\n_sym_db.RegisterMessage(BatchNormParameter)\n\nBiasParameter = _reflection.GeneratedProtocolMessageType(\'BiasParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _BIASPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.BiasParameter)\n  ))\n_sym_db.RegisterMessage(BiasParameter)\n\nContrastiveLossParameter = _reflection.GeneratedProtocolMessageType(\'ContrastiveLossParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _CONTRASTIVELOSSPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)\n  ))\n_sym_db.RegisterMessage(ContrastiveLossParameter)\n\nConvolutionParameter = _reflection.GeneratedProtocolMessageType(\'ConvolutionParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _CONVOLUTIONPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)\n  ))\n_sym_db.RegisterMessage(ConvolutionParameter)\n\nCropParameter = _reflection.GeneratedProtocolMessageType(\'CropParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _CROPPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.CropParameter)\n  ))\n_sym_db.RegisterMessage(CropParameter)\n\nDataParameter = _reflection.GeneratedProtocolMessageType(\'DataParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _DATAPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.DataParameter)\n  ))\n_sym_db.RegisterMessage(DataParameter)\n\nDetectionEvaluateParameter = _reflection.GeneratedProtocolMessageType(\'DetectionEvaluateParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _DETECTIONEVALUATEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.DetectionEvaluateParameter)\n  ))\n_sym_db.RegisterMessage(DetectionEvaluateParameter)\n\nNonMaximumSuppressionParameter = _reflection.GeneratedProtocolMessageType(\'NonMaximumSuppressionParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _NONMAXIMUMSUPPRESSIONPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.NonMaximumSuppressionParameter)\n  ))\n_sym_db.RegisterMessage(NonMaximumSuppressionParameter)\n\nSaveOutputParameter = _reflection.GeneratedProtocolMessageType(\'SaveOutputParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _SAVEOUTPUTPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SaveOutputParameter)\n  ))\n_sym_db.RegisterMessage(SaveOutputParameter)\n\nDetectionOutputParameter = _reflection.GeneratedProtocolMessageType(\'DetectionOutputParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _DETECTIONOUTPUTPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.DetectionOutputParameter)\n  ))\n_sym_db.RegisterMessage(DetectionOutputParameter)\n\nDropoutParameter = _reflection.GeneratedProtocolMessageType(\'DropoutParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _DROPOUTPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.DropoutParameter)\n  ))\n_sym_db.RegisterMessage(DropoutParameter)\n\nDummyDataParameter = _reflection.GeneratedProtocolMessageType(\'DummyDataParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _DUMMYDATAPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)\n  ))\n_sym_db.RegisterMessage(DummyDataParameter)\n\nEltwiseParameter = _reflection.GeneratedProtocolMessageType(\'EltwiseParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _ELTWISEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)\n  ))\n_sym_db.RegisterMessage(EltwiseParameter)\n\nELUParameter = _reflection.GeneratedProtocolMessageType(\'ELUParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _ELUPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ELUParameter)\n  ))\n_sym_db.RegisterMessage(ELUParameter)\n\nEmbedParameter = _reflection.GeneratedProtocolMessageType(\'EmbedParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _EMBEDPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.EmbedParameter)\n  ))\n_sym_db.RegisterMessage(EmbedParameter)\n\nExpParameter = _reflection.GeneratedProtocolMessageType(\'ExpParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _EXPPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ExpParameter)\n  ))\n_sym_db.RegisterMessage(ExpParameter)\n\nFlattenParameter = _reflection.GeneratedProtocolMessageType(\'FlattenParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _FLATTENPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.FlattenParameter)\n  ))\n_sym_db.RegisterMessage(FlattenParameter)\n\nHDF5DataParameter = _reflection.GeneratedProtocolMessageType(\'HDF5DataParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _HDF5DATAPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)\n  ))\n_sym_db.RegisterMessage(HDF5DataParameter)\n\nHDF5OutputParameter = _reflection.GeneratedProtocolMessageType(\'HDF5OutputParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _HDF5OUTPUTPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)\n  ))\n_sym_db.RegisterMessage(HDF5OutputParameter)\n\nHingeLossParameter = _reflection.GeneratedProtocolMessageType(\'HingeLossParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _HINGELOSSPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)\n  ))\n_sym_db.RegisterMessage(HingeLossParameter)\n\nImageDataParameter = _reflection.GeneratedProtocolMessageType(\'ImageDataParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _IMAGEDATAPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)\n  ))\n_sym_db.RegisterMessage(ImageDataParameter)\n\nInfogainLossParameter = _reflection.GeneratedProtocolMessageType(\'InfogainLossParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _INFOGAINLOSSPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)\n  ))\n_sym_db.RegisterMessage(InfogainLossParameter)\n\nInnerProductParameter = _reflection.GeneratedProtocolMessageType(\'InnerProductParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _INNERPRODUCTPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)\n  ))\n_sym_db.RegisterMessage(InnerProductParameter)\n\nInputParameter = _reflection.GeneratedProtocolMessageType(\'InputParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _INPUTPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.InputParameter)\n  ))\n_sym_db.RegisterMessage(InputParameter)\n\nLogParameter = _reflection.GeneratedProtocolMessageType(\'LogParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _LOGPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.LogParameter)\n  ))\n_sym_db.RegisterMessage(LogParameter)\n\nLRNParameter = _reflection.GeneratedProtocolMessageType(\'LRNParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _LRNPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.LRNParameter)\n  ))\n_sym_db.RegisterMessage(LRNParameter)\n\nMemoryDataParameter = _reflection.GeneratedProtocolMessageType(\'MemoryDataParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _MEMORYDATAPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)\n  ))\n_sym_db.RegisterMessage(MemoryDataParameter)\n\nMultiBoxLossParameter = _reflection.GeneratedProtocolMessageType(\'MultiBoxLossParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _MULTIBOXLOSSPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.MultiBoxLossParameter)\n  ))\n_sym_db.RegisterMessage(MultiBoxLossParameter)\n\nMVNParameter = _reflection.GeneratedProtocolMessageType(\'MVNParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _MVNPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.MVNParameter)\n  ))\n_sym_db.RegisterMessage(MVNParameter)\n\nNormalizeParameter = _reflection.GeneratedProtocolMessageType(\'NormalizeParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _NORMALIZEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.NormalizeParameter)\n  ))\n_sym_db.RegisterMessage(NormalizeParameter)\n\nParameterParameter = _reflection.GeneratedProtocolMessageType(\'ParameterParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _PARAMETERPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ParameterParameter)\n  ))\n_sym_db.RegisterMessage(ParameterParameter)\n\nPermuteParameter = _reflection.GeneratedProtocolMessageType(\'PermuteParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _PERMUTEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.PermuteParameter)\n  ))\n_sym_db.RegisterMessage(PermuteParameter)\n\nPoolingParameter = _reflection.GeneratedProtocolMessageType(\'PoolingParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _POOLINGPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.PoolingParameter)\n  ))\n_sym_db.RegisterMessage(PoolingParameter)\n\nPowerParameter = _reflection.GeneratedProtocolMessageType(\'PowerParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _POWERPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.PowerParameter)\n  ))\n_sym_db.RegisterMessage(PowerParameter)\n\nPriorBoxParameter = _reflection.GeneratedProtocolMessageType(\'PriorBoxParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _PRIORBOXPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.PriorBoxParameter)\n  ))\n_sym_db.RegisterMessage(PriorBoxParameter)\n\nPythonParameter = _reflection.GeneratedProtocolMessageType(\'PythonParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _PYTHONPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.PythonParameter)\n  ))\n_sym_db.RegisterMessage(PythonParameter)\n\nRecurrentParameter = _reflection.GeneratedProtocolMessageType(\'RecurrentParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _RECURRENTPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.RecurrentParameter)\n  ))\n_sym_db.RegisterMessage(RecurrentParameter)\n\nReductionParameter = _reflection.GeneratedProtocolMessageType(\'ReductionParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _REDUCTIONPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ReductionParameter)\n  ))\n_sym_db.RegisterMessage(ReductionParameter)\n\nReLUParameter = _reflection.GeneratedProtocolMessageType(\'ReLUParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _RELUPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ReLUParameter)\n  ))\n_sym_db.RegisterMessage(ReLUParameter)\n\nReshapeParameter = _reflection.GeneratedProtocolMessageType(\'ReshapeParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _RESHAPEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)\n  ))\n_sym_db.RegisterMessage(ReshapeParameter)\n\nScaleParameter = _reflection.GeneratedProtocolMessageType(\'ScaleParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _SCALEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ScaleParameter)\n  ))\n_sym_db.RegisterMessage(ScaleParameter)\n\nSigmoidParameter = _reflection.GeneratedProtocolMessageType(\'SigmoidParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _SIGMOIDPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)\n  ))\n_sym_db.RegisterMessage(SigmoidParameter)\n\nSliceParameter = _reflection.GeneratedProtocolMessageType(\'SliceParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _SLICEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SliceParameter)\n  ))\n_sym_db.RegisterMessage(SliceParameter)\n\nSoftmaxParameter = _reflection.GeneratedProtocolMessageType(\'SoftmaxParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _SOFTMAXPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)\n  ))\n_sym_db.RegisterMessage(SoftmaxParameter)\n\nTanHParameter = _reflection.GeneratedProtocolMessageType(\'TanHParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _TANHPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.TanHParameter)\n  ))\n_sym_db.RegisterMessage(TanHParameter)\n\nTileParameter = _reflection.GeneratedProtocolMessageType(\'TileParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _TILEPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.TileParameter)\n  ))\n_sym_db.RegisterMessage(TileParameter)\n\nThresholdParameter = _reflection.GeneratedProtocolMessageType(\'ThresholdParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _THRESHOLDPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)\n  ))\n_sym_db.RegisterMessage(ThresholdParameter)\n\nVideoDataParameter = _reflection.GeneratedProtocolMessageType(\'VideoDataParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _VIDEODATAPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.VideoDataParameter)\n  ))\n_sym_db.RegisterMessage(VideoDataParameter)\n\nWindowDataParameter = _reflection.GeneratedProtocolMessageType(\'WindowDataParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _WINDOWDATAPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)\n  ))\n_sym_db.RegisterMessage(WindowDataParameter)\n\nSPPParameter = _reflection.GeneratedProtocolMessageType(\'SPPParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _SPPPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.SPPParameter)\n  ))\n_sym_db.RegisterMessage(SPPParameter)\n\nV1LayerParameter = _reflection.GeneratedProtocolMessageType(\'V1LayerParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _V1LAYERPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)\n  ))\n_sym_db.RegisterMessage(V1LayerParameter)\n\nV0LayerParameter = _reflection.GeneratedProtocolMessageType(\'V0LayerParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _V0LAYERPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)\n  ))\n_sym_db.RegisterMessage(V0LayerParameter)\n\nPReLUParameter = _reflection.GeneratedProtocolMessageType(\'PReLUParameter\', (_message.Message,), dict(\n  DESCRIPTOR = _PRELUPARAMETER,\n  __module__ = \'caffe_pb2\'\n  # @@protoc_insertion_point(class_scope:caffe.PReLUParameter)\n  ))\n_sym_db.RegisterMessage(PReLUParameter)\n\n\n_BLOBSHAPE.fields_by_name[\'dim\'].has_options = True\n_BLOBSHAPE.fields_by_name[\'dim\']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))\n_BLOBPROTO.fields_by_name[\'data\'].has_options = True\n_BLOBPROTO.fields_by_name[\'data\']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))\n_BLOBPROTO.fields_by_name[\'diff\'].has_options = True\n_BLOBPROTO.fields_by_name[\'diff\']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))\n_BLOBPROTO.fields_by_name[\'double_data\'].has_options = True\n_BLOBPROTO.fields_by_name[\'double_data\']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))\n_BLOBPROTO.fields_by_name[\'double_diff\'].has_options = True\n_BLOBPROTO.fields_by_name[\'double_diff\']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b(\'\\020\\001\'))\n# @@protoc_insertion_point(module_scope)\n'"
Caffe/layer_param.py,0,"b'from __future__ import absolute_import\nfrom . import caffe_pb2 as pb\nimport numpy as np\n\ndef pair_process(item,strict_one=True):\n    if hasattr(item,\'__iter__\'):\n        for i in item:\n            if i!=item[0]:\n                if strict_one:\n                    raise ValueError(""number in item {} must be the same"".format(item))\n                else:\n                    print(""IMPORTANT WARNING: number in item {} must be the same"".format(item))\n        return item[0]\n    return item\n\ndef pair_reduce(item):\n    if hasattr(item,\'__iter__\'):\n        for i in item:\n            if i!=item[0]:\n                return item\n        return [item[0]]\n    return [item]\n\nclass Layer_param():\n    def __init__(self,name=\'\',type=\'\',top=(),bottom=()):\n        self.param=pb.LayerParameter()\n        self.name=self.param.name=name\n        self.type=self.param.type=type\n\n        self.top=self.param.top\n        self.top.extend(top)\n        self.bottom=self.param.bottom\n        self.bottom.extend(bottom)\n\n    def fc_param(self, num_output, weight_filler=\'xavier\', bias_filler=\'constant\',has_bias=True):\n        if self.type != \'InnerProduct\':\n            raise TypeError(\'the layer type must be InnerProduct if you want set fc param\')\n        fc_param = pb.InnerProductParameter()\n        fc_param.num_output = num_output\n        fc_param.weight_filler.type = weight_filler\n        fc_param.bias_term = has_bias\n        if has_bias:\n            fc_param.bias_filler.type = bias_filler\n        self.param.inner_product_param.CopyFrom(fc_param)\n\n    def conv_param(self, num_output, kernel_size, stride=(1), pad=(0,),\n                   weight_filler_type=\'xavier\', bias_filler_type=\'constant\',\n                   bias_term=True, dilation=None,groups=None):\n        """"""\n        add a conv_param layer if you spec the layer type ""Convolution""\n        Args:\n            num_output: a int\n            kernel_size: int list\n            stride: a int list\n            weight_filler_type: the weight filer type\n            bias_filler_type: the bias filler type\n        Returns:\n        """"""\n        if self.type not in [\'Convolution\',\'Deconvolution\']:\n            raise TypeError(\'the layer type must be Convolution or Deconvolution if you want set conv param\')\n        conv_param=pb.ConvolutionParameter()\n        conv_param.num_output=num_output\n        conv_param.kernel_size.extend(pair_reduce(kernel_size))\n        conv_param.stride.extend(pair_reduce(stride))\n        conv_param.pad.extend(pair_reduce(pad))\n        conv_param.bias_term=bias_term\n        conv_param.weight_filler.type=weight_filler_type\n        if bias_term:\n            conv_param.bias_filler.type = bias_filler_type\n        if dilation:\n            conv_param.dilation.extend(pair_reduce(dilation))\n        if groups:\n            conv_param.group=groups\n        self.param.convolution_param.CopyFrom(conv_param)\n\n    def pool_param(self,type=\'MAX\',kernel_size=2,stride=2,pad=None):\n        pool_param=pb.PoolingParameter()\n        pool_param.pool=pool_param.PoolMethod.Value(type)\n        pool_param.kernel_size=pair_process(kernel_size)\n        pool_param.stride=pair_process(stride)\n        if pad:\n            pool_param.pad=pad\n        self.param.pooling_param.CopyFrom(pool_param)\n\n    def batch_norm_param(self,use_global_stats=0,moving_average_fraction=None,eps=None):\n        bn_param=pb.BatchNormParameter()\n        bn_param.use_global_stats=use_global_stats\n        if moving_average_fraction:\n            bn_param.moving_average_fraction=moving_average_fraction\n        if eps:\n            bn_param.eps = eps\n        self.param.batch_norm_param.CopyFrom(bn_param)\n\n    def slice_param(self,axis,slice_points):\n        param=pb.SliceParameter(axis=axis,slice_point=slice_points)\n        self.param.slice_param.CopyFrom(param)\n\n    def add_data(self,*args):\n        """"""Args are data numpy array\n        """"""\n        del self.param.blobs[:]\n        for data in args:\n            new_blob = self.param.blobs.add()\n            for dim in data.shape:\n                new_blob.shape.dim.append(dim)\n            new_blob.data.extend(data.flatten().astype(float))\n\n    def set_params_by_dict(self,dic):\n        pass\n\n    def copy_from(self,layer_param):\n        pass\n\ndef set_enum(param,key,value):\n    setattr(param,key,param.Value(value))\n'"
Caffe/net.py,0,"b""raise ImportError,'the nn_tools.Caffe.net is no longer used, please use nn_tools.Caffe.caffe_net'"""
Datasets/__init__.py,0,b''
Datasets/adience.py,0,"b'import scipy.io as sio\nimport os\nimport cPickle as pickle\nimport numpy as np\n\nAGES_START=[0,4,8,15,25,38,48,60]  # the start of the age scope\nAGES_END=[2,6,13,20,32,43,53,100]  # the end of the age scope\nAGES_MID=np.array([(i+j)/2 for i,j in zip(AGES_END,AGES_START)])\nGENDER=[\'m\',\'f\']  # u for unknown\n\ndef get_class(age):\n    for i,(s,e) in enumerate(zip(AGES_START,AGES_END)):\n        if s<=age<=e:\n            return i\n    return np.argmin(np.abs(AGES_MID-age))\n\ndef read_txt(root_path,cache_dir=\'/tmp\'):\n    # Reading the .txt annotation files in adience datasets and converting them to python objects.\n    # Storing in the cache file (default in `/tmp/adience.pth`).\n    txt_list=[\'fold_0_data.txt\',\'fold_1_data.txt\',\'fold_2_data.txt\',\'fold_3_data.txt\',\'fold_4_data.txt\']\n    cache_file = os.path.join(cache_dir, \'adience.pth\')\n\n    if not os.path.isfile(cache_file):\n        print ""generating cache_file""\n        image_paths, face_ids, ages, genders, locations, angs, yaws, scores=[],[],[],[],[],[],[],[]\n        for txt in txt_list:\n            txt_path = os.path.join(root_path, txt)\n            with open(txt_path) as f:\n                lines = f.readlines()[1:]\n                for line in lines:\n                    user_id, original_image, face_id, age, gender, x,\\\n                    y, dx, dy, tilt_ang, yaw, fiducial_score = line.split(\'\\t\')\n                    age=eval(age)\n                    if type(age)==tuple:\n                        try:age=AGES_START.index(age[0])\n                        except:\n                            continue\n                    elif type(age)==int:\n                        age=np.argmin(np.abs(AGES_MID-age))\n                    else:\n                        continue  # include None\n                    try: gender=GENDER.index(gender)\n                    except:\n                        continue\n                    image_paths.append(os.path.join(user_id, original_image))\n                    face_ids.append(int(face_id))\n                    ages.append(age)\n                    genders.append(gender)\n                    locations.append((int(x),int(y),int(dx),int(dy)))\n                    angs.append(int(tilt_ang))\n                    yaws.append(int(yaw))\n                    scores.append(int(fiducial_score))\n        save_obj=[image_paths, face_ids, ages, genders, locations, angs, yaws, scores]\n        pickle.dump(save_obj, open(cache_file, \'wb\'))\n    else:\n        print ""read from cache_file""\n        image_paths, face_ids, ages, genders, locations, angs, yaws, scores = pickle.load(open(cache_file, \'rb\'))\n    print ""read mat OK""\n    return image_paths, face_ids, ages, genders, locations, angs, yaws, scores\n\nif __name__==\'__main__\':\n    import argparse\n    parser=argparse.ArgumentParser()\n    parser.add_argument(\'root_path\',help=\'root path of adience datasets\',type=str)\n    args=parser.parse_args()\n    read_txt(args.root_path)\n'"
Datasets/base_datasets.py,0,"b""import numpy as np\n\nclass BaseDataset():\n    # the father of all datasets class, there are some interface was defined\n    def __init__(self):\n        # the data saved in the class was a list with the format [data,label,...]\n        self.data={}\n        self.init_data()\n        self.p={'train':0,'test':0,'val':0}\n\n    def init_data(self):\n        pass\n\n    def get_test_data(self):\n        pass\n\n    def get_train_data(self):\n        pass\n\n    def get_val_data(self):\n        pass\n\n    def _shuffle(self, x):\n\n        idx = np.arange(len(x[0]))\n        np.random.shuffle(idx)\n        for i, xi in enumerate(x):\n            x[i] = xi[idx]\n        return x\n\n    def batch(self, name, batch_size):\n        p = self.p[name]\n        if p + batch_size >= len(self.data[name]):\n            self.p[name] = 0\n            self.data[name] = self._shuffle(self.data[name])\n        self.p[name] += batch_size\n        return [i[p:p+batch_size] for i in self.data[name]]"""
Datasets/cifar10.py,0,b'import numpy as np\n\nclass Cifar10():\n    def __init__(self):\n        pass'
Datasets/imagenet.py,2,"b""from . import lmdb_datasets\nfrom torchvision import datasets,transforms\nimport os\nimport os.path as osp\nimport torch.utils.data\nimport numpy as np\nimport cv2\nfrom . import lmdb_data_pb2 as pb2\nimport Queue\nimport time\nimport multiprocessing\n\nDATASET_SIZE=100\nmean=np.array([[[0.485]], [[0.456]], [[0.406]]])*255\nstd=np.array([[[0.229]], [[0.224]], [[0.225]]])*255\n\nclass Imagenet_LMDB(lmdb_datasets.LMDB):\n    def __init__(self,imagenet_dir,train=False):\n        self.train_name='imagenet_train_lmdb'\n        self.val_name='imagenet_val_lmdb'\n        self.train=train\n        super(Imagenet_LMDB, self).__init__(osp.join(imagenet_dir,train and self.train_name or self.val_name))\n        txn=self.env.begin()\n        self.cur=txn.cursor()\n        self.data = Queue.Queue(DATASET_SIZE*2)\n        self.target = Queue.Queue(DATASET_SIZE*2)\n        self.point=0\n        # self._read_from_lmdb()\n\n    def data_transfrom(self,data,other):\n        data=data.astype(np.float32)\n        if self.train:\n            shape=np.fromstring(other[0],np.uint16)\n            data=data.reshape(shape)\n            # Random crop\n            _, w, h = data.shape\n            x1 = np.random.randint(0, w - 224)\n            y1 = np.random.randint(0, h - 224)\n            data=data[:,x1:x1+224 ,y1:y1 + 224]\n            # HorizontalFlip\n            #TODO horizontal flip\n        else:\n            data = data.reshape([3, 224, 224])\n        data = (data - mean) / std\n        tensor = torch.Tensor(data)\n        del data\n        return tensor\n\n    def target_transfrom(self,target):\n        return target\n\n    def _read_from_lmdb(self):\n        self.cur.next()\n        if not self.cur.key():\n            self.cur.first()\n        dataset = pb2.Dataset().FromString(self.cur.value())\n        for datum in dataset.datums:\n            data = np.fromstring(datum.data, np.uint8)\n            try:\n                data = self.data_transfrom(data, datum.other)\n            except:\n                print 'cannot trans ', data.shape\n                continue\n            target = int(datum.target)\n            target = self.target_transfrom(target)\n            self.data.put(data)\n            self.target.put(target)\n            # print 'read_from_lmdb', time.time()-r\n        del dataset\n\n    # def read_from_lmdb(self):\n    #     process=multiprocessing.Process(target=self._read_from_lmdb)\n    #     process.start()\n\n    def __getitem__(self,index):\n        if self.data.qsize()<DATASET_SIZE:\n            self._read_from_lmdb()\n        data,target=self.data.get(),self.target.get()\n        return data,target\n\n    def __len__(self):\n        return self.env.stat()['entries']*DATASET_SIZE\n\ndef Imagenet_LMDB_generate(imagenet_dir, output_dir, make_val=False, make_train=False):\n    # the imagenet_dir should have direction named 'train' or 'val',with 1000 folders of raw jpeg photos\n    train_name = 'imagenet_train_lmdb'\n    val_name = 'imagenet_val_lmdb'\n\n    def target_trans(target):\n        return target\n\n    if make_val:\n        val_lmdb=lmdb_datasets.LMDB_generator(osp.join(output_dir,val_name))\n        def trans_val_data(dir):\n            tensor = transforms.Compose([\n                transforms.Scale(256),\n                transforms.CenterCrop(224),\n                transforms.ToTensor()\n            ])(dir)\n            tensor=(tensor.numpy()*255).astype(np.uint8)\n            return tensor\n\n        val = datasets.ImageFolder(osp.join(imagenet_dir,'val'), trans_val_data,target_trans)\n        val_lmdb.write_classification_lmdb(val, num_per_dataset=DATASET_SIZE)\n    if make_train:\n        train_lmdb = lmdb_datasets.LMDB_generator(osp.join(output_dir, train_name))\n        def trans_train_data(dir):\n            tensor = transforms.Compose([\n                transforms.Scale(256),\n                transforms.ToTensor()\n            ])(dir)\n            tensor=(tensor.numpy()*255).astype(np.uint8)\n            return tensor\n\n        train = datasets.ImageFolder(osp.join(imagenet_dir, 'train'), trans_train_data, target_trans)\n        train.imgs=np.random.permutation(train.imgs)\n\n        train_lmdb.write_classification_lmdb(train, num_per_dataset=DATASET_SIZE, write_shape=True)\n\n"""
Datasets/imdb_wiki.py,0,"b'import scipy.io as sio\nimport os\nimport cPickle as pickle\nimport numpy as np\nimport cv2\n\ndef read_mat(mat_path,cache_dir=\'/tmp\'):\n    # Reading the .mat annotation files in IMDB-WIKI datasets and converting them to python objects.\n    # Storing in the cache file (default in `/tmp/imdb_wiki.pth`).\n    cache_file = os.path.join(cache_dir,\'imdb_wiki.pth\')\n    if not os.path.isfile(cache_file):\n        print ""generating cache_file""\n        file = sio.loadmat(mat_path)\n        image_paths = file[\'imdb\'][0][0][\'full_path\'][0]\n        image_paths = [full_path[0] for full_path in image_paths]\n        face_locations = file[\'imdb\'][0][0][\'face_location\'][0]\n        genders = file[\'imdb\'][0][0][\'gender\'][0]\n        genders = [int(gender) if -1<gender<3 else -1 for gender in genders]\n        dob = file[\'imdb\'][0][0][\'dob\'][0]\n        photo_taken = file[\'imdb\'][0][0][\'photo_taken\'][0]\n        ages = np.array(photo_taken - dob / 365 + 1,np.uint8)\n        face_scores = file[\'imdb\'][0][0][\'face_score\'][0]\n        second_face_scores = file[\'imdb\'][0][0][\'second_face_score\'][0]\n        pickle.dump([image_paths, face_locations, genders, ages,\n                     face_scores, second_face_scores], open(cache_file, \'wb\'))\n    else:\n        print ""read from cache_file""\n        image_paths, face_locations, genders, ages, face_scores, second_face_scores = pickle.load(open(cache_file, \'rb\'))\n    print ""read mat OK""\n    return image_paths, face_locations, genders, ages, face_scores, second_face_scores\n\ndef crop_image(mat_path,input_dir,output_dir,expand_rate=0,max_size=600):\n    image_paths, face_locations, genders, ages, face_score, second_face_score=read_mat(mat_path)\n    for image_path,loc in zip(image_paths,face_locations):\n        in_path=os.path.join(input_dir,image_path)\n        out_path=os.path.join(output_dir,image_path)\n        out_dir=os.path.split(out_path)[0]\n        if not os.path.exists(out_dir):\n            print (""make direction %s""%out_dir)\n            os.makedirs(out_dir)\n        im=cv2.imread(in_path)\n        loc=loc[0].astype(np.int32)\n        h = loc[3] - loc[1]\n        w = loc[2] - loc[0]\n        if expand_rate>0:\n            loc[1]-=h*expand_rate\n            loc[3]+=h*expand_rate\n            loc[0]-=w*expand_rate\n            loc[2]+=w*expand_rate\n        loc=np.maximum(0,loc)\n        loc[3]=np.minimum(im.shape[0],loc[3])\n        loc[2]=np.minimum(im.shape[1],loc[2])\n        # loc=loc.astype(np.int32)\n        im=im[loc[1]:loc[3],loc[0]:loc[2]]\n        h = loc[3] - loc[1]\n        w = loc[2] - loc[0]\n        if w>max_size or h>max_size:\n            if w!=h:\n                pass\n            print(""resize picture %s""%image_path)\n            resize_factor=np.minimum(1.*max_size/w,1.*max_size/h)\n            im=cv2.resize(im,(int(w*resize_factor),int(h*resize_factor)))\n        cv2.imwrite(out_path,im)\n\n\n\ndef generate_caffe_txt_age(mat_path,output_path,age_range,\n                           cache_dir=\'/tmp\',ignore_second_face=False,test_ratio=0.2):\n    # read mat file then generate train.txt and test.txt for age estimation training.\n    # `age_range` is a list containing age range like (0,2) and (32,40).\n    image_paths, face_locations, genders, ages, face_scores, second_face_scores = read_mat(mat_path,cache_dir)\n    # generate classes\n    ages_mid=np.array([(age[0]+age[1])/2 for age in age_range])\n    classes=[]\n    for age in ages:\n        classes.append(np.argmin(np.abs(ages_mid-age)))\n        for idx,r in enumerate(age_range):\n            if r[0]<=age<=r[1]:\n                classes[-1]=idx\n                break\n    shuffle_idx=np.arange(len(image_paths))\n    np.random.shuffle(shuffle_idx)\n    train_idx=shuffle_idx[int(len(shuffle_idx)*test_ratio):]\n    test_idx=shuffle_idx[:int(len(shuffle_idx)*test_ratio)]\n    with open(os.path.join(output_path, \'age_train.txt\'), \'w\') as trainf:\n        for idx in train_idx:\n            if ignore_second_face:\n                if second_face_scores[idx]>1.5:\n                    continue\n            trainf.write(""%s %d\\n"" % (image_paths[idx], classes[idx]))\n    with open(os.path.join(output_path, \'age_test.txt\'), \'w\') as testf:\n        for idx in test_idx:\n            if ignore_second_face:\n                if second_face_scores[idx]>1.5:\n                    continue\n            testf.write(""%s %d\\n""%(image_paths[idx],classes[idx]))\n\ndef generate_caffe_txt_gender(mat_path,output_path,cache_dir=\'/tmp\',test_ratio=0.2):\n    # read mat file then generate train.txt and test.txt for gender estimation training\n    image_paths, face_locations, genders, ages, face_score, second_face_score = read_mat(mat_path, cache_dir)\n    shuffle_idx=np.arange(len(image_paths))\n    np.random.shuffle(shuffle_idx)\n    train_idx=shuffle_idx[int(len(shuffle_idx)*test_ratio):]\n    test_idx=shuffle_idx[:int(len(shuffle_idx)*test_ratio)]\n    with open(os.path.join(output_path, \'gender_train.txt\'), \'w\') as trainf:\n        for idx in train_idx:\n            if genders[idx]==-1:continue\n            trainf.write(""%s %d\\n"" % (image_paths[idx], genders[idx]))\n    with open(os.path.join(output_path, \'gender_test.txt\'), \'w\') as testf:\n        for idx in test_idx:\n            if genders[idx]==-1:continue\n            testf.write(""%s %d\\n""%(image_paths[idx],genders[idx]))\n\nif __name__==\'__main__\':\n    import argparse\n    parser=argparse.ArgumentParser()\n    parser.add_argument(\'mat_path\',help=\'.mat file path in IMDB-WIKI datasets\',type=str)\n    args=parser.parse_args()\n    read_mat(args.mat_path)\n'"
Datasets/lmdb_data_pb2.py,0,"b'# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: lmdb_data.proto\n\nimport sys\n_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode(\'latin1\'))\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf import descriptor_pb2\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\n\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name=\'lmdb_data.proto\',\n  package=\'\',\n  serialized_pb=_b(\'\\n\\x0flmdb_data.proto\\""4\\n\\x05\\x44\\x61tum\\x12\\x0e\\n\\x06target\\x18\\x01 \\x02(\\x0c\\x12\\x0c\\n\\x04\\x64\\x61ta\\x18\\x02 \\x02(\\x0c\\x12\\r\\n\\x05other\\x18\\x03 \\x03(\\x0c\\""!\\n\\x07\\x44\\x61taset\\x12\\x16\\n\\x06\\x64\\x61tums\\x18\\x01 \\x03(\\x0b\\x32\\x06.Datum\')\n)\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\n\n\n\n_DATUM = _descriptor.Descriptor(\n  name=\'Datum\',\n  full_name=\'Datum\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'target\', full_name=\'Datum.target\', index=0,\n      number=1, type=12, cpp_type=9, label=2,\n      has_default_value=False, default_value=_b(""""),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'data\', full_name=\'Datum.data\', index=1,\n      number=2, type=12, cpp_type=9, label=2,\n      has_default_value=False, default_value=_b(""""),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name=\'other\', full_name=\'Datum.other\', index=2,\n      number=3, type=12, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=19,\n  serialized_end=71,\n)\n\n\n_DATASET = _descriptor.Descriptor(\n  name=\'Dataset\',\n  full_name=\'Dataset\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'datums\', full_name=\'Dataset.datums\', index=0,\n      number=1, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=73,\n  serialized_end=106,\n)\n\n_DATASET.fields_by_name[\'datums\'].message_type = _DATUM\nDESCRIPTOR.message_types_by_name[\'Datum\'] = _DATUM\nDESCRIPTOR.message_types_by_name[\'Dataset\'] = _DATASET\n\nDatum = _reflection.GeneratedProtocolMessageType(\'Datum\', (_message.Message,), dict(\n  DESCRIPTOR = _DATUM,\n  __module__ = \'lmdb_data_pb2\'\n  # @@protoc_insertion_point(class_scope:Datum)\n  ))\n_sym_db.RegisterMessage(Datum)\n\nDataset = _reflection.GeneratedProtocolMessageType(\'Dataset\', (_message.Message,), dict(\n  DESCRIPTOR = _DATASET,\n  __module__ = \'lmdb_data_pb2\'\n  # @@protoc_insertion_point(class_scope:Dataset)\n  ))\n_sym_db.RegisterMessage(Dataset)\n\n\n# @@protoc_insertion_point(module_scope)\n'"
Datasets/lmdb_datasets.py,0,"b""import caffe_lmdb\nfrom . import lmdb_data_pb2 as pb2\nimport numpy as np\nimport multiprocessing\nimport os\n\n\nclass LMDB(object):\n    def __init__(self,lmdb_dir):\n        self.env=caffe_lmdb.Environment(lmdb_dir, map_size=int(1e12))\n\n    # --------------------------------------\n    # for LMDB writer\n\n\n\n    # --------------------------------------\n    # for LMDB reader\nclass LMDB_generator(object):\n    def __init__(self,lmdb_dir):\n        self.env=caffe_lmdb.Environment(lmdb_dir, map_size=int(1e12))\n\n    def generate_datum(self,data,target,other=None):\n        datum = pb2.Datum()\n        datum.data=data\n        datum.target=target\n        if other:\n            datum.other.extend(other)\n        # data=np.fromstring(datum.data,np.uint8).reshape(datum.other[0],np.uint16)\n        return datum\n\n    def generate_dataset(self,datas,targets,others=None):\n        dataset = pb2.Dataset()\n        assert len(datas)==len(targets),ValueError('the lengths of datas and targets are not the same')\n        for idx in xrange(len(datas)):\n            try:\n                if others==None:\n                    datum=self.generate_datum(datas[idx],targets[idx])\n                else:\n                    datum = self.generate_datum(datas[idx], targets[idx],others[idx])\n            except:\n                print('generate the datum failed at %d, continue it'%idx)\n                continue\n            dataset.datums.extend([datum])\n        return dataset\n\n    def commit_dataset(self,dataset,idx):\n        txn=self.env.begin(write=True)\n        txn.put(str(idx),dataset.SerializeToString())\n        txn.commit()\n\n    def write_classification_lmdb(self, data_loader, num_per_dataset=3000, write_shape=False):\n        # torch_data_loader are iterator that iterates a (data,target)\n        # data should be a numpy array\n        # target should be a int number\n        datas=[]\n        targets=[]\n        others=[]\n        for idx,(data,target) in enumerate(data_loader):\n            datas.append(data.tobytes())\n            targets.append(bytes(target))\n            if write_shape:\n                others.append([np.array(data.shape, np.uint16).tobytes()])\n            if (idx%num_per_dataset==0 and idx!=0) or (idx==len(data_loader)-1):\n                print('lmdb write at image %d'%idx)\n                dataset=self.generate_dataset(datas,targets,write_shape and others or None)\n                self.commit_dataset(dataset,np.ceil(1.*idx/num_per_dataset))\n                datas=[]\n                targets=[]\n                others = []\n\n    def write_lmdb_mutiprocess(self,torch_data_loader,num_thread=10,num_per_dataset=6000):\n        # TODO mutiprocess write lmdb\n        pass\n\n\nif __name__=='__main__':\n    pass"""
Datasets/mnist.py,0,"b'import numpy as np\nimport os\nimport struct\nimport base_datasets\n\nclass Mnist(base_datasets.BaseDataset):\n    # read the raw mnist data\n    def __init__(self, dir, only_test=0):\n        # dir should include t10k-images-idx3-ubyte  t10k-labels-idx1-ubyte  train-images-idx3-ubyte  train-labels-idx1-ubyte\n        # the data can be download at http://yann.lecun.com/exdb/mnist/\n        self.dir=dir\n        self.train_dir=[os.path.join(dir,\'train-images-idx3-ubyte\'),\n                        os.path.join(dir,\'train-labels-idx1-ubyte\')]\n        self.test_dir = [os.path.join(dir, \'t10k-images-idx3-ubyte\'),\n                          os.path.join(dir, \'t10k-labels-idx1-ubyte\')]\n        base_datasets.BaseDataset.__init__(self)\n        self.test_data=self.get_test_data()\n        if not only_test:\n            self.train_data=self.get_train_data()\n        self.ptest=0\n        self.ptrain=0\n\n    def norm(self,x):\n        data = x.reshape([-1, 28, 28, 1]).astype(np.float32)\n        data = (data - 167) / 167\n        return data\n\n    def get_train_data(self,norm=1):\n        #return the train dataset as a list [images,labels]\n        data=self.read_images(self.train_dir[0])\n        if norm==1:\n            data=self.norm(data)\n        return [data,self.read_labels(self.train_dir[1])]\n\n    def get_test_data(self,norm=1):\n        #return the test dataset as a list [images,labels]\n        data=self.read_images(self.test_dir[0])\n        if norm==1:\n            data=self.norm(data)\n        return [data,self.read_labels(self.test_dir[1])]\n\n    def shuffle(self,x):\n        idx=np.arange(len(x[0]))\n        np.random.shuffle(idx)\n        for i,xi in enumerate(x):\n            x[i]=xi[idx]\n        return x\n\n    def _batch(self,data,p,batch_size):\n        return [i[p-batch_size:p] for i in data]\n\n    def get_test_batch(self,batch_size):\n        if self.ptest+batch_size>=len(self.test_data):\n            self.ptest=0\n            self.test_data=self.shuffle(self.test_data)\n        self.ptest+=batch_size\n        return self._batch(self.test_data,self.ptest,batch_size)\n\n    def get_train_batch(self, batch_size):\n        if self.ptrain + batch_size >= len(self.train_data):\n            self.ptrain = 0\n            self.train_data=self.shuffle(self.train_data)\n        self.ptrain += batch_size\n        return self._batch(self.train_data,self.ptrain,batch_size)\n\n    def read_labels(self, file_name):\n        """"""\n           file_name:the byte file\'s direction\n        """"""\n        label_file=open(file_name,\'rb\')\n        print(label_file)\n        # get the basic information about the labels\n        label_file.seek(0)\n        magic_number = label_file.read(4)\n        magic_number = struct.unpack(\'>i\', magic_number)\n        print(\'Magic Number: \' + str(magic_number[0]))\n\n        data_type = label_file.read(4)\n        data_type = struct.unpack(\'>i\', data_type)\n        print(\'Number of Lables: \' + str(data_type[0]))\n\n        labels = []\n        for idx in range(data_type[0]):\n            label_file.seek(8 + idx)\n            tmp_d = label_file.read(1)\n            tmp_d = struct.unpack(\'>B\', tmp_d)\n            labels.append(tmp_d)\n        return np.array(labels)\n\n\n    def read_images(self, file_name):\n        """"""\n           file_name:the byte file\'s direction\n        """"""\n        img_file = open(file_name, \'rb\')\n        print(img_file)\n        # get the basic information about the images\n        img_file.seek(0)\n        magic_number = img_file.read(4)\n        magic_number = struct.unpack(\'>i\', magic_number)\n        print(\'Magic Number: \' + str(magic_number[0]))\n\n        data_type = img_file.read(4)\n        data_type = struct.unpack(\'>i\', data_type)\n        print(\'Number of Images: \' + str(data_type[0]))\n\n        dim = img_file.read(8)\n        dimr = struct.unpack(\'>i\', dim[0:4])\n        dimr = dimr[0]\n        print(\'Number of Rows: \' + str(dimr))\n        dimc = struct.unpack(\'>i\', dim[4:])\n        dimc = dimc[0]\n        print(\'Number of Columns:\' + str(dimc))\n\n\n        images=[]\n        for idx in range(data_type[0]):\n            image = np.ndarray(shape=(dimr, dimc))\n            img_file.seek(16 + dimc * dimr * idx)\n\n            for row in range(dimr):\n                for col in range(dimc):\n                    tmp_d = img_file.read(1)\n                    tmp_d = struct.unpack(\'>B\', tmp_d)\n                    image[row, col] = tmp_d[0]\n            images.append(image)\n        return np.array(images)\n'"
Datasets/wider.py,0,"b'import cv2\nimport h5py\nimport numpy as np\nimport cPickle as pickle\nimport os\nimport time\n\nclass WiderDataset():\n    annotation_names=[\'blur\',\'pose\',\'occlusion\',\n                     \'invalid\',\'expression\',\'illumination\']\n    def __init__(self,path,set=\'val\'):\n        self.set=set\n        self._data_path=path\n        self.cache_file=os.path.join(self._data_path,\'cache\',self.set+\'.pth\')\n        if not self._load_cache():\n            self.file_names,self.boxes,self.annotations=self._read_data()\n            pickle.dump([self.file_names,self.boxes,self.annotations],open(self.cache_file,\'w\'))\n        self.len=len(self.file_names)\n\n    def _show_pic_boxes(self,im,boxes,delay=1000):\n        for box in boxes:\n            x0,y0,x1,y1=[int(i) for i in np.round(box)]\n            cv2.rectangle(im,(x0,y0),(x1,y1),(255,0,0))\n        cv2.imshow(""draw_pic"", im)\n        cv2.waitKey(delay)\n\n    def show_pic_boxes(self,idx):\n        im=cv2.imread(self.file_names[idx])\n        self._show_pic_boxes(im,self.boxes[idx])\n\n\n    def _load_cache(self):\n        if os.path.exists(self.cache_file):\n            print \'load from cache file\',self.cache_file\n            st_time=time.time()\n            self.file_names, self.boxes, self.annotations =pickle.load(open(self.cache_file))\n            print time.time()-st_time,\'s used\'\n            return True\n        return False\n\n    def _read_data(self):\n        mat_path=self._data_path + \'/wider_face_split/wider_face_%s.mat\'%(self.set,)\n        print \'load from mat file\', mat_path\n        st_time = time.time()\n        f = h5py.File(mat_path)\n        # f=sio.loadmat(self._data_path + \'/wider_face_split/wider_face_val.mat\')\n        annotations = {\'blur\':[],\'pose\':[],\'occlusion\':[],\n                         \'invalid\':[],\'expression\':[],\'illumination\':[]}\n        boxes=[]\n        file_names = []\n        for name in self.annotation_names:\n            for folder in f[name+\'_label_list\'][0]:\n                for image in f[folder][0]:\n                    for value in f[image]:\n                        annotations[name].append(value)\n        for folder in f[\'face_bbx_list\'][0]:\n            for im_file in f[folder][0]:\n                x = np.array([bbxs for bbxs in f[im_file]])\n                x = x.transpose()\n                x[:, 2:] += x[:, :2]\n                boxes.append(x)\n        for folder in f[\'file_list\'][0]:\n            for im_file in f[folder][0]:\n                s = """".join([chr(c) for c in f[im_file]])\n                file_names.append(self._data_path + \'/images_no_fold/\' + s + \'.jpg\')\n        print time.time() - st_time, \'s used\'\n        return file_names, boxes, annotations\n\n    def sift_hard(self,idx,min_area=240,blur=True,pose=True,occlusion=True,invalid=True):\n        # area = 0 for no area sift\n        reserve=np.ones(len(self.boxes[idx]))\n        if min_area:\n            area=np.prod(self.boxes[idx][:,2:]-self.boxes[idx][:,:2],1)\n            # print area\n            reserve[area < min_area] = 0\n        # if max_area:\n        #     area = np.prod(self.boxes[idx][:, 2:] - self.boxes[idx][:, :2], 1)\n        #     reserve[area > max_area] = 0\n        if blur:\n            reserve[self.annotations[\'blur\'][idx]!=0]=0\n        if pose:\n            reserve[self.annotations[\'pose\'][idx]!=0]=0\n        if occlusion:\n            reserve[self.annotations[\'occlusion\'][idx]!=0]=0\n        if invalid:\n            reserve[self.annotations[\'invalid\'][idx] != 0] = 0\n        return reserve\n\n    def get_idx_annotation(self,idx):\n        annotation={}\n        for name in self.annotation_names:\n            annotation[name]=self.annotations[name][idx]\n        return annotation\n\n    def __len__(self):\n        return self.len\n\n    def __getitem__(self,idx):\n        # given a idx then read the idxth image in wider face dataset\n        # return [a numpy image with [1,height,width,BGR],boxes array ,annotations dict]\n        im = cv2.imread(self.file_names[idx])\n        while im is None:\n            idx-=1\n            im = cv2.imread(self.file_names[idx])\n        boxes=self.boxes[idx]\n        annotation=self.get_idx_annotation(idx)\n        return im,boxes,annotation'"
Pytorch/__init__.py,0,b'from __future__ import absolute_import\n'
Pytorch/augmentations.py,1,"b'# driven from https://github.com/amdegroot/ssd.pytorch\nimport torch\nfrom torchvision import transforms\nimport cv2\nimport numpy as np\nimport types\nfrom numpy import random\n\ndef intersect(box_a, box_b):\n    max_xy = np.minimum(box_a[:, 2:], box_b[2:])\n    min_xy = np.maximum(box_a[:, :2], box_b[:2])\n    inter = np.clip((max_xy - min_xy), a_min=0, a_max=np.inf)\n    return inter[:, 0] * inter[:, 1]\n\n\ndef jaccard_numpy(box_a, box_b):\n    """"""Compute the jaccard overlap of two sets of boxes.  The jaccard overlap\n    is simply the intersection over union of two boxes.\n    E.g.:\n        A \xe2\x88\xa9 B / A \xe2\x88\xaa B = A \xe2\x88\xa9 B / (area(A) + area(B) - A \xe2\x88\xa9 B)\n        The box should be [x1,y1,x2,y2]\n    Args:\n        box_a: Single numpy bounding box, Shape: [4] or Multiple bounding boxes, Shape: [num_boxes,4]\n        box_b: Single numpy bounding box, Shape: [4]\n    Return:\n        jaccard overlap: Shape: [box_a.shape[0], box_a.shape[1]]\n    """"""\n    if box_a.ndim==1:\n        box_a=box_a.reshape([1,-1])\n    inter = intersect(box_a, box_b)\n    area_a = ((box_a[:, 2]-box_a[:, 0]) *\n              (box_a[:, 3]-box_a[:, 1]))  # [A,B]\n    area_b = ((box_b[2]-box_b[0]) *\n              (box_b[3]-box_b[1]))  # [A,B]\n    union = area_a + area_b - inter\n    return inter / union  # [A,B]\n\n\nclass SSD_Compose(object):\n    """"""Composes several augmentations together.\n    Args:\n        transforms (List[Transform]): list of transforms to compose.\n    Example:\n        # >>> augmentations.Compose([\n        # >>>     transforms.CenterCrop(10),\n        # >>>     transforms.ToTensor(),\n        # >>> ])\n    """"""\n\n    def __init__(self, transforms):\n        self.transforms = transforms\n\n    def __call__(self, img, boxes=None, labels=None):\n        for t in self.transforms:\n            img, boxes, labels = t(img, boxes, labels)\n        return img, boxes, labels\n\n\nclass SSD_Lambda(object):\n    """"""Applies a lambda as a transform.""""""\n\n    def __init__(self, lambd):\n        assert isinstance(lambd, types.LambdaType)\n        self.lambd = lambd\n\n    def __call__(self, img, boxes=None, labels=None):\n        return self.lambd(img, boxes, labels)\n\nclass ConvertFromInts(object):\n    def __call__(self, image, *args):\n        image=image.astype(np.float32)\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\n\nclass SubtractMeans(object):\n    def __init__(self, mean):\n        self.mean = np.array(mean, dtype=np.float32)\n\n    def __call__(self, image, *args):\n        image = image.astype(np.float32)\n        image -= self.mean\n        image=image.astype(np.float32)\n        if len(args):\n            return (image,)\n        else:\n            return image\n\n\nclass SSD_ToAbsoluteCoords(object):\n    def __call__(self, image, boxes=None, labels=None):\n        height, width, channels = image.shape\n        boxes[:, 0] *= width\n        boxes[:, 2] *= width\n        boxes[:, 1] *= height\n        boxes[:, 3] *= height\n\n        return image, boxes, labels\n\n\nclass SSD_ToPercentCoords(object):\n    def __call__(self, image, boxes=None, labels=None):\n        height, width, channels = image.shape\n        boxes[:, 0] /= width\n        boxes[:, 2] /= width\n        boxes[:, 1] /= height\n        boxes[:, 3] /= height\n\n        return image, boxes, labels\n\n\nclass BGR_2_HSV(object):\n    def __call__(self, image, *args):\n        HSV_img = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n        if len(args):\n            return (HSV_img, *args)\n        else:\n            return HSV_img\n\nclass HSV_2_BGR(object):\n    def __call__(self, image, *args):\n        BGR_img = cv2.cvtColor(image, cv2.COLOR_HSV2BGR)\n        if len(args):\n            return (BGR_img, *args)\n        else:\n            return BGR_img\n\nclass Resize(object):\n    def __init__(self, size=300):\n        self.size = size\n\n    def __call__(self, image, *args):\n        image = cv2.resize(image, (self.size,\n                                 self.size))\n        if len(args):\n            return (image,)\n        else:\n            return image\n\n\nclass RandomSaturation(object):\n    def __init__(self, lower=0.5, upper=1.5):\n        self.lower = lower\n        self.upper = upper\n        assert self.upper >= self.lower, ""contrast upper must be >= lower.""\n        assert self.lower >= 0, ""contrast lower must be non-negative.""\n\n    def __call__(self, image, *args):\n        if random.randint(2):\n            image[:, :, 1] = (image[:,:,1]*random.uniform(self.lower, self.upper)).astype(np.uint8)\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\nclass RandomHue(object):\n    def __init__(self, delta=15.0):\n        assert delta >= 0.0 and delta <= 255\n        self.delta = delta\n\n    def __call__(self, image, *args):\n        if random.randint(2):\n            image[:, :, 0] += np.uint8(random.uniform(-self.delta, self.delta))\n            image[:, :, 0][image[:, :, 0] > 255.0] -= 255\n            image[:, :, 0][image[:, :, 0] < 0.0] += 255\n        if len(args):\n            return (image,)\n        else:\n            return image\n\nclass RandomChannel(object):\n    def __init__(self, delta=15.0):\n        assert delta >= 0.0 and delta <= 255\n        self.delta = delta\n\n    def __call__(self, image, *args):\n        channels=image.shape[-1]\n        random_switch=np.random.randint(0,2,channels)\n        for i in range(channels):\n            if random_switch[i]:\n                image[:, :, i] += np.uint8(random.uniform(-self.delta, self.delta))\n                image[image > 255.0] = 255\n                image[image < 0.0] = 0\n        if len(args):\n            return (image,)\n        else:\n            return image\n\nclass RandomValue(object):\n    def __init__(self, delta=15.0):\n        # random add or sub a random value in hsv mode\n        assert delta>=0.0 and delta<=255.0\n        self.delta = int(delta)\n    def __call__(self, image, *args):\n        if random.randint(2):\n            image[:, :, 2] += np.uint8(random.randint(-self.delta, self.delta))\n            image[:, :, 2][image[:, :, 2] > 255.0] = 255\n            image[:, :, 2][image[:, :, 2] < 0.0] = 0\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\nclass RandomLightingNoise(object):\n    def __init__(self):\n        self.perms = ((0, 1, 2), (0, 2, 1),\n                      (1, 0, 2), (1, 2, 0),\n                      (2, 0, 1), (2, 1, 0))\n\n    def __call__(self, image, *args):\n        if random.randint(2):\n            swap = self.perms[random.randint(len(self.perms))]\n            shuffle = SwapChannels(swap)  # shuffle channels\n            image = shuffle(image)\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\n\nclass ConvertColor(object):\n    def __init__(self, current=\'BGR\', transform=\'HSV\'):\n        self.transform = transform\n        self.current = current\n\n    def __call__(self, image, *args):\n        if self.current == \'BGR\' and self.transform == \'HSV\':\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n        elif self.current == \'HSV\' and self.transform == \'BGR\':\n            image = cv2.cvtColor(image, cv2.COLOR_HSV2BGR)\n        else:\n            raise NotImplementedError\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\n\nclass RandomContrast(object):\n    def __init__(self, lower=0.5, upper=1.5):\n        self.lower = lower\n        self.upper = upper\n        assert self.upper >= self.lower, ""contrast upper must be >= lower.""\n        assert self.lower >= 0, ""contrast lower must be non-negative.""\n\n    # expects float image\n    def __call__(self, image,*args):\n        if random.randint(2):\n            alpha = random.uniform(self.lower, self.upper)\n            image *= alpha\n            image=image.astype(np.uint8)\n        if len(args):\n            return (image, )\n        else:\n            return image\n\n\nclass RandomBrightness(object):\n    def __init__(self, delta=32):\n        assert delta >= 0.0\n        assert delta <= 255.0\n        self.delta = delta\n\n    def __call__(self, image, *args):\n        if random.randint(2):\n            delta = random.uniform(-self.delta, self.delta)\n            image += delta\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\nclass RandomNoise(object):\n    def __init__(self,max_noise=3):\n        self.max_noise=max_noise\n    def __call__(self,image,*args):\n        if np.random.randint(2):\n            noise=np.random.randint(-self.max_noise,self.max_noise,image.shape)\n            image=np.uint8(noise+image)\n        if len(args):\n            return (image,*args)\n        else:\n            return image\n\nclass ToTensor(object):\n    def __call__(self, cvimage, *args):\n        image=torch.from_numpy(cvimage.astype(np.float32)).permute(2, 0, 1)\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\n\nclass SSD_RandomSampleCrop(object):\n    """"""Crop\n    Arguments:\n        img (Image): the image being input during training\n        boxes (Tensor): the original bounding boxes in pt form\n        labels (Tensor): the class labels for each bbox\n        mode (float tuple): the min and max jaccard overlaps\n    Return:\n        (img, boxes, classes)\n            img (Image): the cropped image\n            boxes (Tensor): the adjusted bounding boxes in pt form\n            labels (Tensor): the class labels for each bbox\n    """"""\n    def __init__(self,sample_options=None):\n        if sample_options is None:\n            self.sample_options = (\n                # using entire original input image\n                None,\n                # sample a patch s.t. MIN jaccard w/ obj in .1,.3,.4,.7,.9\n                (0.1, None),\n                (0.3, None),\n                (0.7, None),\n                (0.9, None),\n                # randomly sample a patch\n                (None, None),\n            )\n        else:\n            self.sample_options=sample_options\n\n    def __call__(self, image, boxes=None, labels=None):\n        height, width, _ = image.shape\n        while True:\n            # randomly choose a mode\n            mode = random.choice(self.sample_options)\n            if mode is None:\n                return image, boxes, labels\n\n            min_iou, max_iou = mode\n            if min_iou is None:\n                min_iou = float(\'-inf\')\n            if max_iou is None:\n                max_iou = float(\'inf\')\n\n            # max trails (50)\n            for _ in range(50):\n                current_image = image\n\n                w = random.uniform(0.3 * width, width)\n                h = random.uniform(0.3 * height, height)\n\n                # aspect ratio constraint b/t .5 & 2\n                if h / w < 0.5 or h / w > 2:\n                    continue\n\n                left = random.uniform(width - w)\n                top = random.uniform(height - h)\n\n                # convert to integer rect x1,y1,x2,y2\n                rect = np.array([int(left), int(top), int(left+w), int(top+h)])\n\n                # calculate IoU (jaccard overlap) b/t the cropped and gt boxes\n                overlap = jaccard_numpy(boxes, rect)\n\n                # is min and max overlap constraint satisfied? if not try again\n                if overlap.min() < min_iou and max_iou < overlap.max():\n                    continue\n\n                # cut the crop from the image\n                current_image = current_image[rect[1]:rect[3], rect[0]:rect[2],\n                                              :]\n\n                # keep overlap with gt box IF center in sampled patch\n                centers = (boxes[:, :2] + boxes[:, 2:]) / 2.0\n\n                # mask in all gt boxes that above and to the left of centers\n                m1 = (rect[0] < centers[:, 0]) * (rect[1] < centers[:, 1])\n\n                # mask in all gt boxes that under and to the right of centers\n                m2 = (rect[2] > centers[:, 0]) * (rect[3] > centers[:, 1])\n\n                # mask in that both m1 and m2 are true\n                mask = m1 * m2\n\n                # have any valid boxes? try again if not\n                if not mask.any():\n                    continue\n\n                # take only matching gt boxes\n                current_boxes = boxes[mask, :].copy()\n\n                # take only matching gt labels\n                current_labels = labels[mask]\n\n                # should we use the box left and top corner or the crop\'s\n                current_boxes[:, :2] = np.maximum(current_boxes[:, :2],\n                                                  rect[:2])\n                # adjust to crop (by substracting crop\'s left,top)\n                current_boxes[:, :2] -= rect[:2]\n\n                current_boxes[:, 2:] = np.minimum(current_boxes[:, 2:],\n                                                  rect[2:])\n                # adjust to crop (by substracting crop\'s left,top)\n                current_boxes[:, 2:] -= rect[:2]\n\n                return current_image, current_boxes, current_labels\n\nclass Padding(object):\n    def __init__(self, size=1,type=\'constant\',constant_color=(255,255,255)):\n        self.size = size\n        self.type = type\n        self.constant_color=list(constant_color)\n\n    def __call__(self, image, *args):\n        size=self.size\n        if self.type==\'constant\':\n            image = cv2.copyMakeBorder(image, size, size, size, size, cv2.BORDER_CONSTANT, value=self.constant_color)\n        elif self.type==\'reflect\':\n            image = cv2.copyMakeBorder(image, size, size, size, size, cv2.BORDER_REFLECT)\n        elif self.type==\'replicate\':\n            image = cv2.copyMakeBorder(image, size, size, size, size, cv2.BORDER_REPLICATE)\n\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\nclass RandomCrop(object):\n    def __init__(self,padding):\n        self.padding=padding\n\n    def __call__(self,image,*args):\n        xi=random.randint(0,self.padding*2)\n        yi=random.randint(0,self.padding*2)\n        image=image[xi:-(2*self.padding-xi),yi:-(self.padding*2-yi),:]\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\nclass Scale(object):\n    def __init__(self,dim):\n        self.dim=dim\n    def __call__(self,image,*args):\n        image=cv2.resize(image,self.dim)\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\nclass Flip(object):\n    def __init__(self,dim=1,percentage=0.5):\n        """"""1 for horizontal flip\n        0 for vertical flip\n        -1 for both flip""""""\n        self.dim=dim\n        self.percentage=percentage\n\n    def __call__(self, image, *args):\n        if np.random.rand()<self.percentage:\n            cv2.flip(image,self.dim,image)\n        #inplace flip\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\nclass SSD_Expand(object):\n    def __init__(self, mean):\n        self.mean = mean\n\n    def __call__(self, image, boxes, labels):\n        if random.randint(2):\n            return image, boxes, labels\n\n        height, width, depth = image.shape\n        ratio = random.uniform(1, 4)\n        left = random.uniform(0, width*ratio - width)\n        top = random.uniform(0, height*ratio - height)\n\n        expand_image = np.zeros(\n            (int(height*ratio), int(width*ratio), depth),\n            dtype=image.dtype)\n        expand_image[:, :, :] = self.mean\n        expand_image[int(top):int(top + height),\n                     int(left):int(left + width)] = image\n        image = expand_image\n\n        boxes = boxes.copy()\n        boxes[:, :2] += (int(left), int(top))\n        boxes[:, 2:] += (int(left), int(top))\n\n        return image, boxes, labels\n\n\nclass SSD_RandomMirror(object):\n    def __call__(self, image, boxes, classes):\n        _, width, _ = image.shape\n        if random.randint(2):\n            image = image[:, ::-1]\n            boxes = boxes.copy()\n            boxes[:, 0::2] = width - boxes[:, 2::-2]\n        return image, boxes, classes\n\n\nclass SwapChannels(object):\n    def __init__(self, swaps):\n        self.swaps = swaps\n\n    def __call__(self, image, *args):\n        """"""\n        Arguments:\n            image (Tensor): image tensor to be transformed\n        Returns:\n            a tensor with channels swapped according to swap\n        """"""\n        temp = image.clone()\n        for i in range(3):\n            temp[i] = image[self.swaps[i]]\n        if len(args):\n            return (image, *args)\n        else:\n            return image\n\n\nclass SSD_PhotometricDistort(object):\n    def __init__(self):\n        self.pd = [\n            RandomContrast(),\n            ConvertColor(transform=\'HSV\'),\n            RandomSaturation(),\n            RandomHue(),\n            ConvertColor(current=\'HSV\', transform=\'BGR\'),\n            RandomContrast()\n        ]\n        self.rand_brightness = RandomBrightness()\n        self.rand_light_noise = RandomLightingNoise()\n\n    def __call__(self, image, boxes, labels):\n        im = image.copy()\n        im, boxes, labels = self.rand_brightness(im, boxes, labels)\n        if random.randint(2):\n            distort = SSD_Compose(self.pd[:-1])\n        else:\n            distort = SSD_Compose(self.pd[1:])\n        im, boxes, labels = distort(im, boxes, labels)\n        return self.rand_light_noise(im, boxes, labels)\n\n\nclass SSDAugmentation(object):\n    def __init__(self, size=300, mean=(104, 117, 123)):\n        self.mean = mean\n        self.size = size\n        self.augment = SSD_Compose([\n            ConvertFromInts(),\n            SSD_ToAbsoluteCoords(),\n            SSD_PhotometricDistort(),\n            SSD_Expand(self.mean),\n            SSD_RandomSampleCrop(),\n            SSD_RandomMirror(),\n            SSD_ToPercentCoords(),\n            Resize(self.size),\n            SubtractMeans(self.mean)\n        ])\n\n    def __call__(self, img, boxes, labels):\n        return self.augment(img, boxes, labels)\n\ndef get_advanced_transform(dim,padding=5,random_crop=5,hue=True,\n                           saturation=True,value=True,horizontal_flip=True,\n                           random_noise=0,mean=(127.5,127.5,127.5),std=(127.5,127.5,127.5),\n                           other_functions=()):\n    # loader must be cv2 loader\n    # other functions will be added after the HSV transform\n    trans=[]\n    if dim!=None:\n        trans.append(Scale(dim))\n    if padding:\n        trans.append(Padding(int(padding)))\n    if random_crop:\n        trans.append(RandomCrop(int(random_crop)))\n    if hue or saturation or value:\n        trans.append(BGR_2_HSV())\n    if hue:\n        trans.append(RandomHue())\n    if saturation:\n        trans.append(RandomSaturation())\n    if value:\n        trans.append(RandomValue())\n    if hue or saturation or value:\n        trans.append(HSV_2_BGR())\n    for func in other_functions:\n        trans.append(func)\n    if horizontal_flip:\n        trans.append(Flip(1))\n    if random_noise:\n        trans.append(RandomNoise(random_noise))\n    trans.append(ToTensor())\n    # normalize method: (x_channel-mean)/std\n    trans.append(transforms.Normalize(mean,std))\n    return transforms.Compose(trans)\n\ndef get_advanced_transform_test(dim,mean=(127.5,127.5,127.5),std=(127.5,127.5,127.5)):\n    # loader must be cv2 loader\n    return transforms.Compose([\n        Scale(dim),\n        ToTensor(),\n        transforms.Normalize(mean,std),\n    ])\n\ndef cv2_loader(path):\n    image=cv2.imread(path)\n    if image is None:\n        pass\n    return image'"
Pytorch/eval.py,1,"b'from torch.autograd import Variable\nfrom .utils import AverageMeter\n\ndef eval_classification_net(net,testloader,use_cuda=True):\n    # evaluation a classification net\n    # the testloader should return (input, labels(not one-hot version))\n    # return an Tensor with shape [1] for accuracy(%)\n    net.train(False)\n    top1 = AverageMeter()\n    for inputs, targets in testloader:\n        if use_cuda:\n            inputs=inputs.cuda()\n            targets=targets.cuda()\n        outputs = net(Variable(inputs))\n        res1,=compute_accuracy(outputs, targets, topk=(1,))\n        top1.update(res1)\n    return top1.avg[0]\n\ndef eval_classification_net_topk(net,testloader,use_cuda=True,topk=(1,)):\n    # evaluation a classification net\n    # the testloader should return (input, labels(not one-hot version))\n    # return an Tensor with shape [1] for accuracy(%)\n    net.train(False)\n    tops=[]\n    for i in topk:\n        tops.append(AverageMeter())\n    for inputs, targets in testloader:\n        if use_cuda:\n            inputs=inputs.cuda()\n            targets=targets.cuda()\n        outputs = net(Variable(inputs))\n        res=compute_accuracy(outputs, targets, topk=topk)\n        for i,_ in enumerate(topk):\n            tops[i].update(res[i])\n    return [i.avg[0] for i in tops]\n\ndef compute_accuracy(output, target, topk=(1,)):\n    """"""Computes the precision@k for the specified values of k""""""\n    if isinstance(output,Variable):\n        output=output.data\n    if isinstance(target,Variable):\n        target=target.data\n    maxk = max(topk)\n    batch_size = target.size(0)\n\n    _, pred = output.topk(maxk, 1, True, True)\n    pred = pred.t()\n    correct = pred.eq(target.view(1, -1).expand_as(pred))\n\n    res = []\n    for k in topk:\n        correct_k = correct[:k].view(-1).float().sum(0)\n        res.append(correct_k.mul_(100.0 / batch_size))\n    return res'"
Pytorch/train.py,5,"b'import torch.optim as optim\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch\nfrom .eval import eval_classification_net\nimport os\nimport time\nfrom .utils import AverageMeter\nfrom .eval import compute_accuracy\nfrom ..funcs import Logger\n\ndef train_classification_net(net,trainloader,testloader=None,save_path=\'/tmp/pytorch_train_tmp.pth\',base_lr=0.01,\n                             num_epoch=5,use_cuda=True,optimizer=None,lr_change=None,\n                             print_iter=500,save_tmp_epoch=10,log=True,criterion=None):\n    # train a classification net\n    # the trainloader should return (input, labels(not one-hot version))\n    # the criterion is CrossEntropyLoss by default\n    logger=Logger(log and save_path+\'.log\' or None)\n    if optimizer==None:\n        optimizer=optim.Adam(net.parameters(),lr=base_lr)\n    if criterion==None:\n        criterion = nn.CrossEntropyLoss()\n    if use_cuda:\n        criterion=criterion.cuda()\n        net=net.cuda()\n\n    batch_time=AverageMeter()\n    load_time=AverageMeter()\n    top1=AverageMeter()\n    end_time=time.time()\n    for epoch in range(num_epoch):\n        running_loss = AverageMeter()\n        for iter_idx, (inputs,labels) in enumerate(trainloader,0):\n            load_time.update(time.time()-end_time)\n            # TODO learning rate change function\n            if use_cuda:\n                inputs=inputs.cuda(async=True)\n                labels=labels.cuda(async=True)\n            inputs_var,labels_var=Variable(inputs),Variable(labels)\n\n            outputs=net(inputs_var)\n            loss=criterion(outputs,labels_var)\n            prec1, = compute_accuracy(outputs, labels, topk=(1, ))\n            top1.update(prec1[0])\n            # compute gradient and do SGD step\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n            running_loss.update(loss.data[0])\n\n            batch_time.update(time.time()-end_time)\n            end_time = time.time()\n\n            if iter_idx%print_iter==0:\n                logger(""Epoch-Iter [%d/%d][%d/%d] Time_tot/load [%f][%f] loss [%f] Prec@1 [%f]""%(\n                      epoch+1,num_epoch,iter_idx,len(trainloader),batch_time.avg,load_time.avg,running_loss.avg,top1.avg))\n                running_loss.reset()\n                load_time.reset()\n                batch_time.reset()\n                top1.reset()\n        if testloader:\n            net.train(False)\n            acc=eval_classification_net(net,testloader)\n            net.train()\n            logger(\'-- Validate at Epoch [%d] Prec@1 [%f]\'%(epoch+1, acc))\n        if epoch%save_tmp_epoch==0:\n            torch.save(net.state_dict(), save_path+\'.tmp\')\n            print(""%s %s saved"" % (time.strftime(\'%H:%M:%S\'), save_path+\'.tmp\'))\n    if save_path:\n        torch.save(net.state_dict(), save_path)\n        os.system(\'rm %s\'%save_path+\'.tmp\')\n'"
Pytorch/utils.py,3,"b'import torch\nimport numpy as np\n\nclass Resize_preprocess(object):\n    """"""Rescales the input PIL.Image to the given \'size_w,size_h\'.\n    """"""\n\n    def __init__(self, size_w,size_h):\n        self.size = (size_w,size_h)\n\n    def __call__(self, img):\n        return img.resize(self.size)\n\nclass AverageMeter(object):\n    """"""Computes and stores the average and current value""""""\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum / self.count\n\ndef calculate_mean_std(loader):\n    # the image should be preprocessed by torch.transform.ToTensor(), so the value is in [0,1]\n    sum=np.ones(3)\n    cnt=0\n    for datas,_ in loader:\n        cnt+=len(datas)\n        for data in datas:\n            data=data.numpy()\n            sum+=data.sum(1).sum(1)/np.prod(data.shape[1:])\n    mean=sum/cnt\n    error=np.ones(3)\n    _mean=mean.reshape([3,1,1])\n    for datas,_ in loader:\n        cnt+=len(datas)\n        for data in datas:\n            data=data.numpy()\n            error+=((data-_mean)**2).sum(1).sum(1)/np.prod(data.shape[1:])\n    std=np.sqrt(error/cnt)\n    return mean,std\n\ndef no_strict_load_state_dict(net, state_dict):\n    r""""""Copies parameters and buffers from :attr:`state_dict` into\n    this module and its descendants. If :attr:`strict` is ``True``, then\n    the keys of :attr:`state_dict` must exactly match the keys returned\n    by this module\'s :meth:`~torch.nn.Module.state_dict` function.\n\n    Arguments:\n        state_dict (dict): a dict containing parameters and\n            persistent buffers.\n        strict (bool, optional): whether to strictly enforce that the keys\n            in :attr:`state_dict` match the keys returned by this module\'s\n            :meth:`~torch.nn.Module.state_dict` function. Default: ``True``\n    """"""\n    missing_keys = []\n    unexpected_keys = []\n    error_msgs = []\n\n    # copy state_dict so _load_from_state_dict can modify it\n    metadata = getattr(state_dict, \'_metadata\', None)\n    state_dict = state_dict.copy()\n    if metadata is not None:\n        state_dict._metadata = metadata\n\n    def load(module, prefix=\'\'):\n        local_metadata = {} if metadata is None else metadata.get(prefix[:-1], {})\n        module._load_from_state_dict(\n            state_dict, prefix, local_metadata, False, missing_keys, unexpected_keys, error_msgs)\n        for name, child in module._modules.items():\n            if child is not None:\n                load(child, prefix + name + \'.\')\n\n    load(net)'"
Tensorflow/__init__.py,0,b''
Tensorflow/constructor.py,0,"b""# this file if for constructing the tensorflow network quickly\n# consisting a lot of functions\n\nimport numpy as np\nimport tensorflow as tf\n\n# ==========Variables=============\n\ndef weight_variable_norm(shape):\n    #   generate a variable with the name of 'bias'.\n    #  reuturn a Variable whose shape is 'shape'\n    initial = tf.truncated_normal(shape, stddev=0.1, name='weight')\n    weight=tf.Variable(initial)\n    add_weight_l2_regularation(weight)\n    return weight\n\n\ndef bias_variable_zero(shape):\n    #   generate a variable with\n    initial = tf.constant(0.1, shape=shape, name='bias')\n    return tf.Variable(initial)\n\n\ndef in_shape(input):\n    # return the list format of the input tensor\n    return input.get_shape().as_list()\n\n\ndef to_categorical(y, nb_classes=None):\n    '''Convert class vector (integers from 0 to nb_classes) to binary class matrix, for use with categorical_crossentropy.\n\n    # Arguments\n        y: class vector to be converted into a matrix\n        nb_classes: total number of classes\n\n    # Returns\n        A binary matrix representation of the input.\n    '''\n    if not nb_classes:\n        nb_classes = np.max(y)+1\n    Y = np.zeros((len(y), nb_classes))\n    for i in range(len(y)):\n        Y[i, y[i]] = 1.\n    return Y\n\n\n# ===========Convolution=============\n\ndef conv2d(name, input, numout, kernel_size, strides=(1, 1, 1, 1), padding='SAME'):\n    # the standard conv2d generator\n    in_channel = in_shape(input)[3]\n    with tf.name_scope(name):\n        W = weight_variable_norm([kernel_size, kernel_size, in_channel, numout])\n        b = bias_variable_zero([numout])\n        conv = tf.nn.conv2d(input, W, strides=strides, padding=padding)\n        conv = tf.nn.bias_add(conv, b)\n    return conv\n\ndef conv2d_with_weight(name,input,weights,biases,strides=(1,1,1,1),padding='SAME'):\n    # the standard conv2d generator with weights and biases given\n    in_channel = in_shape(input)[3]\n    with tf.name_scope(name):\n        W = tf.Variable(weights)\n        b = tf.Variable(biases)\n        conv = tf.nn.conv2d(input, W, strides=strides, padding=padding)\n        conv = tf.nn.bias_add(conv, b)\n    return conv\n\ndef conv3x3(name, input, numout):\n    # the standard 3x3 conv2d used in many situation\n    return conv2d(name,input,numout,3)\n\n\n# ==========Fully Connected=========\n\ndef fc(name,input,numout,with_relu=1):\n    input = tf.reshape(input,[-1,np.prod(in_shape(input)[1:])])\n    in_channel = in_shape(input)[1]\n    with tf.name_scope(name):\n        W = weight_variable_norm([in_channel, numout])\n        b = bias_variable_zero([numout])\n        rst= tf.matmul(input,W)+b\n        if with_relu:\n            rst=tf.nn.relu(rst)\n    return rst\n\n\n# ===========Pooling=============\n\ndef max_pool2d(name,input,ksize=(1,2,2,1),strides=(1,2,2,1)):\n    # the standard pooling\n    return\n    tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n\n\ndef pool2x2(name, input):\n    # poolinh with\n    with tf.name_scope(name):\n        return tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n\n\n# ===========Activation=====\n\ndef prule(name,input):\n    with tf.name_scope(name):\n        pos=tf.nn.relu(input,'pos')\n        shape=in_shape(input)[-1]\n        w=weight_variable_norm([shape])\n        neg=tf.nn.relu(-input,'neg')*w\n        rst=pos+neg\n    return rst\n\n# ===========Loss============\n\ndef classific_loss(y,y_):\n    # the shape of y and y_ is [None,class_num]\n    # return cross_entropy loss\n    diff = tf.nn.softmax_cross_entropy_with_logits(y, y_)\n    cross_entropy = tf.reduce_mean(diff)\n    return cross_entropy\n\nl2_weight_loss=[]\ndef add_weight_l2_regularation(weights):\n    l2_weight_loss.append(tf.nn.l2_loss(weights))\n\ndef add_l2_loss(loss,factor=0.001):\n    for i in l2_weight_loss:\n        loss+=i*factor\n    return loss\n\n# ===========Evaluate===========\n\ndef classific_accurancy(y,y_):\n    # the shape of y and y_ is [None,class_num]\n    correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    return accuracy"""
Tensorflow/graph.py,0,b'import tensorflow as tf\n\ndef session_config(gpu_mem_factor):\n    config = tf.ConfigProto()\n    config.gpu_options.per_process_gpu_memory_fraction = gpu_mem_factor\n    return config'
analysis/CaffeA.py,0,"b'from __future__ import absolute_import\nfrom collections import OrderedDict\nfrom .layers import *\nfrom .roi import *\n\ndef profiling(net, input=None):\n    # input is either a Blob with the shape of (batch,h,w,c) or a dict of them\n    layers=[]\n    if isinstance(input,dict):\n        blob_dict = OrderedDict(input)\n        not_ref = [input[k] for k in input]\n    else:\n        input_name=\'data\'\n        if hasattr(net.net,\'input\'):\n            input_name=net.net.input[0]\n        blob_dict = OrderedDict({input_name: input})\n        not_ref=[input]\n    for i, layer in enumerate(net.net.layer):\n        out = None\n        if len(layer.top) == 1 and len(layer.bottom) == 1:\n            if layer.type == \'Convolution\':\n                param = layer.convolution_param\n                out = Conv(blob_dict[layer.bottom[0]], param.kernel_size, param.num_output, param.stride,\n                             param.pad, None, layer.name, group_size=param.group)\n            if layer.type == \'InnerProduct\':\n                param=layer.inner_product_param\n                out= fc(blob_dict[layer.bottom[0]],param.num_output,None,layer.name)\n            if layer.type == \'ReLU\':\n                out = Activation(blob_dict[layer.bottom[0]], \'relu\', layer.name)\n            if layer.type == \'PReLU\':\n                out = Activation(blob_dict[layer.bottom[0]], \'prelu\', layer.name)\n            if layer.type == \'Pooling\':\n                param = layer.pooling_param\n                out = Pool(blob_dict[layer.bottom[0]], param.kernel_size, param.stride,\n                             param.pad, layer.name,param.pool,ceil=True)\n            if layer.type == \'Normalize\':\n                out = Norm(blob_dict[layer.bottom[0]], \'norm\', layer.name)\n            if layer.type == \'BatchNorm\':\n                out= Norm(blob_dict[layer.bottom[0]],\'batch_norm\',layer.name)\n            if layer.type== \'LRN\':\n                out= Norm(blob_dict[layer.bottom[0]],\'lrn\',layer.name)\n            if layer.type == \'Permute\':\n                shape=[blob_dict[layer.bottom[0]][dim-1] for dim in layer.permute_param.order[1:]]\n                out = Permute(blob_dict[layer.bottom[0]],shape,layer.name)\n            if layer.type == \'Flatten\':\n                out = Flatten(blob_dict[layer.bottom[0]], layer.name)\n            if layer.type == \'Scale\':\n                out =Scale (blob_dict[layer.bottom[0]], name = layer.name)\n            if layer.type == \'Softmax\':\n                out =Softmax (blob_dict[layer.bottom[0]], name = layer.name)\n            if layer.type == \'Dropout\':\n                out =Dropout (blob_dict[layer.bottom[0]], name = layer.name)\n            if layer.type == \'Reshape\':\n                out =Reshape (blob_dict[layer.bottom[0]],shape=layer.reshape_param.shape.dim, name = layer.name)\n            if out:\n                try:\n                    not_ref.remove(blob_dict[layer.bottom[0]])\n                except:\n                    pass\n                blob_dict[layer.top[0]] = out()\n                not_ref.append(blob_dict[layer.top[0]])\n                layers.append(out)\n            else:\n                assert \'layer type: %s cannot be P\' % (layer.type)\n        elif len(layer.bottom)>1:\n            # for multi input layer\n            if layer.type==\'Eltwise\':\n                param=layer.eltwise_param\n                out = Eltwise([blob_dict[bottom] for bottom in layer.bottom],\n                              type=param.EltwiseOp.Name(param.operation),name=layer.name)\n            if layer.type==\'PSROIPooling\':\n                param=layer.psroi_pooling_param\n                out = PSROIPool(blob_dict[layer.bottom[0]],blob_dict[layer.bottom[1]],\n                                param.output_dim,param.group_size)\n            if layer.type==\'ROIPooling\':\n                param=layer.roi_pooling_param\n                out = ROIPool(blob_dict[layer.bottom[0]],blob_dict[layer.bottom[1]],\n                              param.pooled_w,param.pooled_h,layer.name)\n            if layer.type == ""Concat"":\n                param = layer.concat_param\n                out = Concat([blob_dict[bottom] for bottom in layer.bottom],param.axis,layer.name)\n            if out:\n                for bottom in layer.bottom:\n                    try:\n                        not_ref.remove(blob_dict[bottom])\n                    except:\n                        pass\n                blob_dict[layer.top[0]] = out()\n                not_ref.append(blob_dict[layer.top[0]])\n                layers.append(out)\n            else:\n                assert \'layer type: %s cannot be P\' % (layer.type)\n        elif len(layer.top)>1:\n            if layer.type == \'Slice\':\n                param=layer.slice_param\n                out =Slice (blob_dict[layer.bottom[0]], name = layer.name,slice_point=param.slice_point,axis=param.axis)\n            if out:\n                try:\n                    not_ref.remove(blob_dict[layer.bottom[0]])\n                except:\n                    pass\n                for o,top in zip(out(),layer.top):\n                    blob_dict[top] = o\n                    not_ref.append(blob_dict[top])\n                layers.append(out)\n    return blob_dict,layers'"
analysis/MxnetA.py,0,"b""from __future__ import absolute_import\nimport mxnet as mx\nimport mxnet.symbol as sym\nimport json\nfrom analysis.layers import *\nimport re\nimport ctypes\n\nfrom mxnet.ndarray import NDArray\nimport mxnet.ndarray as nd\nfrom mxnet.base import NDArrayHandle, py_str\n\n\n\nblob_dict=[]\ntracked_layers = []\n\ndef tmpnet():\n    x=sym.Variable('data')\n    y=sym.Convolution(x,kernel=(3,3),num_filter=32)\n    y=sym.Activation(y,'relu')\n    y = sym.Convolution(y, kernel=(3, 3), num_filter=64,stride=(2,2),num_group=2)\n    y=sym.softmax(y)\n    return y\n\ndef analyse(data_infos,module_json,data_name='data'):\n\n    datas={}\n    for info in data_infos:\n        datas[info[1]]=info[2]\n    nodes=json.loads(module_json)['nodes']\n    input=[]\n    out=None\n    for node in nodes:\n        name=node['name']\n        bottoms=[str(nodes[i[0]]['name']) for i in node['inputs']]\n        for i,bottom in enumerate(bottoms):\n            if bottom+'_output' in datas:\n                bottoms[i]=datas[bottom+'_output']\n            elif bottom+'_0' in datas:\n                bottoms[i]=datas[bottom+'_0']\n            elif bottom in datas:\n                bottoms[i]=datas[bottom]\n            else:\n                cur_node=node\n                while True:\n                    bottom = [str(nodes[inp[0]]['name']) for inp in cur_node['inputs']][0]\n                    if bottom + '_output' in datas:\n                        bottoms[i] = datas[bottom + '_output']\n                        break\n                    elif bottom + '_0' in datas:\n                        bottoms[i] = datas[bottom + '_0']\n                        break\n                    elif bottom in datas:\n                        bottoms[i] = datas[bottom]\n                        break\n                    try:\n                        bottom_node = nodes[cur_node['inputs'][0][0]]\n                    except:\n                        pass\n                    cur_node=bottom_node\n        if data_name==name:\n            input.append(Blob(datas[data_name]))\n        elif node['op']=='Convolution':\n            kernel=eval(node['attrs']['kernel'])\n            num_out=eval(node['attrs']['num_filter'])\n            group_size=eval(node['attrs'].get('num_group','1'))\n            pad=eval(node['attrs'].get('pad','(0,0)'))\n            stride=eval(node['attrs'].get('stride','(1,1)'))\n            x=Blob(bottoms[0])\n            out=Conv(x,kernel_size=kernel,stride=stride,pad=pad,\n                     num_out=num_out,group_size=group_size,name=name)\n            tracked_layers.append(out)\n        elif node['op']=='BatchNorm':\n            x=Blob(bottoms[0])\n            out = Norm(x, 'batch_norm',name=name)\n            tracked_layers.append(out)\n        elif node['op']=='FullyConnected':\n            x=Blob(bottoms[0])\n            num_hidden=eval(node['attrs']['num_hidden'])\n            out=Fc(x,num_hidden,name=name)\n            tracked_layers.append(out)\n        elif node['op']=='Activation':\n            pass\n        elif 'elemwise' in node['op']:\n            pass\n\n\nclass Monitor(object):\n    def __init__(self, interval=1, pattern='.*', sort=False):\n        def stat(x):\n            return x.shape\n        self.stat_func = stat\n        self.interval = interval\n        self.activated = False\n        self.queue = []\n        self.step = 0\n        self.exes = []\n        self.re_prog = re.compile(pattern)\n        self.sort = sort\n        def stat_helper(name, array):\n            array = ctypes.cast(array, NDArrayHandle)\n            array = NDArray(array, writable=False)\n            if not self.activated or not self.re_prog.match(py_str(name)):\n                return\n            self.queue.append((self.step, py_str(name), stat(array)))\n        self.stat_helper = stat_helper\n\n    def install(self, exe):\n        exe.set_monitor_callback(self.stat_helper)\n        self.exes.append(exe)\n\n    def tic(self):\n        if self.step % self.interval == 0:\n            for exe in self.exes:\n                for array in exe.arg_arrays:\n                    array.wait_to_read()\n                for array in exe.aux_arrays:\n                    array.wait_to_read()\n            self.queue = []\n            self.activated = True\n        self.step += 1\n\n    def toc(self):\n        if not self.activated:\n            return []\n        for exe in self.exes:\n            for array in exe.arg_arrays:\n                array.wait_to_read()\n            for array in exe.aux_arrays:\n                array.wait_to_read()\n        for exe in self.exes:\n            for name, array in zip(exe._symbol.list_arguments(), exe.arg_arrays):\n                self.queue.append((self.step, name, self.stat_func(array)))\n            for name, array in zip(exe._symbol.list_auxiliary_states(), exe.aux_arrays):\n                # if self.re_prog.match(name):\n                self.queue.append((self.step, name, self.stat_func(array)))\n        self.activated = False\n        res = []\n        if self.sort:\n            self.queue.sort(key=lambda x: x[1])\n        for n, k, v_list in self.queue:\n            res.append((n, k, v_list))\n        self.queue = []\n        return res\n    def toc_print(self):\n        pass\n\ndef profiling_symbol(symbol,data_shape,data_name='data'):\n    monitor = Monitor()\n    model=mx.mod.Module(symbol)\n    model.bind(data_shapes=[(data_name,tuple(data_shape))])\n    model.install_monitor(monitor)\n    model.init_params()\n    monitor.tic()\n    model.forward(mx.io.DataBatch(data=(nd.ones(data_shape),)))\n    data_infos=monitor.toc()\n    module_json=symbol.tojson()\n    analyse(data_infos,module_json,data_name)\n"""
analysis/PytorchA.py,7,"b'from __future__ import absolute_import\nimport torch\nimport torch.nn as nn\nimport numpy as np\nfrom torch.autograd import Variable\nfrom collections import OrderedDict\nfrom .layers import *\nfrom . import save_csv\nfrom .utils import print_by_layers\n\ntracked_layers=[]\nblob_dict=[]\nlayer_name_dict={}\n\ndef _analyse(module,raw_input):\n    input=[]\n    for i in raw_input:\n        if isinstance(i,torch.Tensor):\n            s = i.size()\n            input.append(Blob(s))\n    out=None\n    name=layer_name_dict[module]\n    if isinstance(module,nn.Conv2d):\n        out=Conv(input[0],module.kernel_size,module.out_channels,\n                 module.stride,module.padding,group_size=module.groups,name=name)\n    elif isinstance(module,nn.ConvTranspose2d):\n        out=Conv(input[0],module.kernel_size,module.out_channels,\n                 module.stride,module.padding,group_size=module.groups,name=name,transpose=True)\n    elif isinstance(module,nn.BatchNorm2d):\n        out=Norm(input[0],\'batch_norm\',name=name)\n    elif isinstance(module,nn.Linear):\n        out=fc(input[0],module.out_features,name=name)\n    elif isinstance(module,nn.MaxPool2d):\n        out = pool(input[0], module.kernel_size,module.stride,module.padding,\n                   name=name,pool_type=\'max\')\n    elif isinstance(module,nn.AvgPool2d):\n        out = pool(input[0], module.kernel_size,module.stride,module.padding,\n                   name=name,pool_type=\'avg\')\n    elif isinstance(module,nn.ReLU):\n        out = Activation(input[0],\'relu\',name=name)\n    elif isinstance(module,nn.Conv3d):\n        out=Conv(input[0],module.kernel_size,module.out_channels,\n                 module.stride,module.padding,group_size=module.groups,name=name)\n\n    if out:\n        tracked_layers.append(out)\n    else:\n        print(\'WARNING: skip Module {}\' .format(module))\n\ndef module_hook(module, input, output):\n    # print(\'module hook\')\n    # print module\n    # for i in input:\n    #     print (\'input\',i.size())\n    # for i in output:\n    #     print(\'out\', i.size())\n    _analyse(module,input)\n\ndef register(module):\n    module.register_forward_hook(module_hook)\n\ndef analyse(net, inputs):\n    """"""\n    analyse the network given input\n    :param net: torch.nn.Module\n    :param inputs: torch.Variable, torch.Tensor or list of them\n    :return: blob_dict, tracked_layers\n    """"""\n    del tracked_layers[:]\n    del blob_dict[:]\n    if not isinstance(inputs,(list,tuple)):\n        raw_inputs=[inputs]\n    else:\n        raw_inputs=inputs\n    _inputs=[]\n    for name,layer in net.named_modules():\n        layer_name_dict[layer]=name\n    for i in raw_inputs:\n        if isinstance(i,Variable):\n            _inputs.append(i)\n        elif isinstance(i,torch.Tensor):\n            _inputs.append(Variable(i))\n        elif isinstance(i,np.ndarray):\n            _inputs.append(Variable(torch.Tensor(i)))\n        else:\n            raise NotImplementedError(""Not Support the input type {}"".format(type(i)))\n    net.apply(register)\n    net.forward(*_inputs)\n    for _,m in net.named_modules():\n        m._forward_hooks.clear()\n    print_by_layers(tracked_layers)\n    return blob_dict,tracked_layers\n\ndef profilling(net,input):\n    """""" Old API of analyse """"""\n    return analyse(net,input)'"
analysis/__init__.py,0,b'from .layers import *\nfrom .roi import *\nfrom .utils import *\nfrom .blob import *'
analysis/blob.py,0,"b""import numpy as np\n\n# the blob with shape of (c,h,w) or (batch,c,h,w) for image\n# the blob with shape of (batch,c,t,h,w) for video\nclass Blob():\n    def __init__(self,shape,father=None):\n        shape=[int(i) for i in shape]\n        self._data=None\n        self.shape=[int(i) for i in list(shape)]\n        self.father=type(father)==list and father or [father]\n\n    @property\n    def data(self):\n        raise NotImplementedError('Blob.data is removed from this version of nn_tools, you should use .shape')\n\n    @property\n    def size(self):\n        return np.prod(self.shape)\n\n    @property\n    def w(self):\n        if self.dim in [3,4,5]:\n            return self.shape[-1]\n        else:\n            raise NotImplementedError('Blob attribute w is only supported for 2D or 3D feature map')\n\n    @property\n    def h(self):\n        if self.dim in [3,4,5]:\n            return self.shape[-2]\n        else:\n            raise NotImplementedError('Blob attribute h is only supported for 2D or 3D feature map')\n\n    @property\n    def t(self):\n        # time attribute\n        if self.dim in [5]:\n            # 3D feature map\n            return self.shape[3]\n        else:\n            raise NotImplementedError('Blob attribute t is only supported for 3D feature map')\n\n    @property\n    def c(self):\n        if self.dim in [3,4]:\n            # 2D feature map\n            return self.shape[-3]\n        elif self.dim in [5]:\n            # 3D feature map\n            return self.shape[1]\n        else:\n            raise NotImplementedError('Blob attribute h is only supported for 2D or 3D feature map')\n\n    @property\n    def batch_size(self):\n        return self.shape[0]\n\n    @property\n    def dim(self):\n        return len(self.shape)\n\n    def new(self,father):\n        return Blob(self.shape,father)\n\n    def __getitem__(self, key):\n        return self.shape[key]\n\n    def __str__(self):\n        return str(self.shape)\n\n    def flaten(self):\n        return Blob([np.prod(self.shape)])"""
analysis/layers.py,0,"b'import numpy as np\nfrom .blob import Blob\n\n\nbox=[]\n\nclass Base(object):\n    def __init__(self,input,name=\'\'):\n        def transfer_input(_input):\n            if isinstance(_input,Base):\n                _input=_input()\n                assert isinstance(input,Blob),\'The input of layer %s is not Blob, please use nn_tools.P.blob.Blob as input\'%name\n            return _input\n        if type(input)==list:\n            # if multi input\n            self.input=[transfer_input(i) for i in input]\n            self.input_size = np.sum([np.prod(i.shape) for i in self.input])\n            self.muti_input=True\n        else:\n            self.input = transfer_input(input)\n            self.input_size = np.prod(self.input.shape)\n            self.muti_input = False\n        self.name=name\n        self.weight_size=0\n        self.activation_size=None\n        self.dot=0\n        self.add=0\n        self.pow=0\n        self.compare=0\n        self.ops=0\n        self.out=None\n        self.layer_info=None\n        box.append(self)\n\n    def __call__(self, *args, **kwargs):\n        return self.out\n    def __setattr__(self, key, value):\n        if key==\'out\' and value!=None:\n            if type(value) is list:\n                self.activation_size=0\n                for i in value:\n                    self.activation_size+=np.prod(i.shape)\n            else:\n                self.activation_size=np.prod(value.shape)\n        return object.__setattr__(self, key,value)\n    def __getattribute__(self, item):\n        if item==\'ops\':\n            try:\n                self.ops=self.pow+self.add+self.dot+self.compare\n            except:\n                print(""CRITICAL WARNING: Layer {} ops cannot be calculated, set to 0."".format(self.name))\n                self.ops=0\n        return object.__getattribute__(self,item)\n\nclass Norm(Base):\n    valid_tuple=(\'norm\',\'batch_norm\',\'lrn\')\n    def __init__(self,input,type,name=None):\n        if type not in Norm.valid_tuple:\n            raise NameError(\'the norm type:\' + type + \' is not supported. \' \\\n                             \'the valid type is: \' + str(Activation.valid_tuple))\n        if name == None: name = type\n        Base.__init__(self, input, name=name)\n        getattr(self, type)()\n        self.out = self.input.new(self)\n\n    def norm(self):\n        self.dot = self.input_size\n        self.add = self.input_size\n\n    def batch_norm(self):\n        self.dot = self.input_size\n        self.add = self.input_size\n\n    def lrn(self):\n        self.dot = self.input_size\n        self.add = self.input_size\n\nclass Activation(Base):\n    #valid tuple lists the valid activation function type\n    valid_tuple=(\'relu\',\'tanh\',\'prelu\')\n    def __init__(self,input,type,name=None):\n        if type not in Activation.valid_tuple:\n            raise NameError(\'the activation type:\'+type+\' is not supported. \' \\\n                            \'the valid type is: \'+str(Activation.valid_tuple))\n        if name==None:name=type\n        Base.__init__(self,input,name=name)\n        getattr(self,type)()\n        self.out=self.input.new(self)\n\n    def relu(self):\n        self.compare=self.input_size\n\n    def sigmoid(self):\n        self.add=self.dot=self.pow=self.input_size\n\n    def tanh(self):\n        self.dot=self.input_size\n        self.add=self.pow=self.input_size*2\n\n    def prelu(self):\n        self.compare=self.input_size\n        self.dot=self.input_size\n\n\nclass Sliding(Base):\n    def __init__(self,input,kernel_size,num_out,stride=1,pad=0,name=\'sliding\',ceil=False,transpose=False):\n        # input is the instance of blob.Blob with shape (c,h,w) or (batch,c,h,w)\n        super(Sliding,self).__init__(input,name=name)\n        if self.input.dim==4:\n            conv_dims=2\n        elif self.input.dim==5:\n            conv_dims=3\n            self.input_t=self.input.t\n        else:\n            raise ValueError(\'Sliding must have a input with 2D Map(batch,c,w,h) or 3D Map(batch,c,d,w,h)\')\n        self.input_w = self.input.w\n        self.input_h = self.input.h\n        self.batch_size = self.input.batch_size\n        self.in_channel = self.input.c\n\n        if type(kernel_size) == int:\n            self.kernel_size = [kernel_size] * conv_dims\n        elif len(kernel_size)==1:\n            self.kernel_size = [kernel_size[0] for i in range(conv_dims)]\n        else:\n            assert len(kernel_size)==conv_dims\n            self.kernel_size = [i for i in kernel_size]\n        if type(stride) == int:\n            self.stride = [stride] * conv_dims\n        else:\n            self.stride = [i for i in stride]\n            if len(self.stride) == 1:\n                self.stride = [self.stride[0]] * conv_dims\n            elif len(self.stride) == 0:\n                self.stride = [1] * conv_dims\n        if type(pad) == int:\n            self.pad = [pad] * conv_dims\n        else:\n            self.pad = [i for i in pad]\n            if len(self.pad) == 1:\n                self.pad *= conv_dims\n            elif len(self.pad) == 0:\n                self.pad = [0] * conv_dims\n        self.num_out = num_out\n        self.layer_info =\'kernel=%s,stride=%s,pad=%s\'%(\'x\'.join([str(_) for _ in self.kernel_size]),\n                                                       \'x\'.join([str(_) for _ in self.stride]),\n                                                       \'x\'.join([str(_) for _ in self.pad]))\n        if transpose:\n            self.layer_info += \',transpose\'\n        # calc out\n\n        outs=[]\n\n        for i in range(self.input.dim-2):\n            if not transpose:\n                if not ceil:\n                    outs.append(np.floor(float(self.input[2+i] + self.pad[i] * 2 - self.kernel_size[i]) / self.stride[i]) + 1)\n                else:\n                    outs.append(np.ceil(float(self.input[2+i] + self.pad[i] * 2 - self.kernel_size[i]) / self.stride[i]) + 1)\n            else:\n                # transpose\n                outs.append((self.input[2+i] - 1) * self.stride[i] - 2 * self.pad[i] + self.kernel_size[i])\n        #     if not ceil:\n        #         out_h = np.floor(float(self.input_w + self.pad[0] * 2 - self.kernel_size[0]) / self.stride[0]) + 1\n        #         out_w = np.floor(float(self.input_h + self.pad[1] * 2 - self.kernel_size[1]) / self.stride[1]) + 1\n        #         out_t = np.floor(float(self.input_t + self.pad[2] * 2 - self.kernel_size[2]) / self.stride[2]) + 1\n        #     else:\n        #         out_w = np.ceil(float(self.input_w + self.pad[0] * 2 - self.kernel_size[0]) / self.stride[0]) + 1\n        #         out_h = np.ceil(float(self.input_h + self.pad[1] * 2 - self.kernel_size[1]) / self.stride[1]) + 1\n        #         out_t = np.ceil(float(self.input_h + self.pad[1] * 2 - self.kernel_size[1]) / self.stride[1]) + 1\n        # else:\n        #     # transpose\n        #     out_w = (self.input_w - 1) * self.stride[0] - 2 * self.pad[0] + self.kernel_size[0]\n        #     out_h = (self.input_h - 1) * self.stride[1] - 2 * self.pad[1] + self.kernel_size[1]\n\n        self.out = Blob([self.batch_size, num_out]+outs, self)\n\nclass Conv(Sliding):\n    def __init__(self,input,kernel_size,num_out,stride=1,pad=0,\n                 activation=\'relu\',name=\'conv\',ceil=False,group_size=1,transpose=False):\n        if isinstance(input,Base):\n            input=input()\n        Sliding.__init__(self,input,kernel_size,num_out,stride,pad,name=name,ceil=ceil,transpose=transpose)\n        self.layer_info+=\',num_out=%d\'%(num_out)\n        self.dot = np.prod(self.out.shape) * np.prod(self.kernel_size) * self.in_channel\n        self.weight_size = np.prod(self.kernel_size) * num_out * self.in_channel\n        if group_size!=1:\n            self.layer_info += \',group_size=%d\' % (group_size)\n            self.dot /= group_size\n            self.weight_size /= group_size\n        self.add = self.dot\n        if activation:\n            Activation(self.out,activation)\n\nclass Pool(Sliding):\n    def __init__(self,input,kernel_size,stride=1,pad=0,name=\'pool\',pool_type=\'max\',ceil=False):\n        # pool_type: 0 is max, 1 is avg/ave in Caffe\n        if isinstance(input,Base):\n            input=input()\n        Sliding.__init__(self,input,kernel_size,input.c,stride,pad,name=name,ceil=ceil)\n        self.pool_type=pool_type\n        self.layer_info+=\',type=%s\'%(pool_type)\n        if pool_type in [\'max\',0]:\n            self.compare= np.prod(self.out.shape) * (np.prod(self.kernel_size) - 1)\n        elif pool_type in [\'avg\',\'ave\',1]:\n            self.add = np.prod(self.input.shape)\n            self.dot = np.prod(self.out.shape)\n        else:\n            print(""WARNING, NOT IMPLEMENT POOL TYPE %s PROFILING at %s, CONTINUE""%(pool_type,name))\npool=Pool\n\nclass InnerProduct(Base):\n    def __init__(self,input,num_out,activation=\'relu\',name=\'innerproduct\'):\n        if isinstance(input,Base):\n            input=input()\n        Base.__init__(self,input,name=name)\n        self.left_dim=np.prod(input.shape[1:])\n        self.num_out=num_out\n        self.dot=self.num_out*self.input_size\n        self.add=self.num_out*self.input_size\n        self.out=Blob([input[0],self.num_out],self)\n        self.weight_size = self.num_out * self.left_dim\n        if activation:\n            Activation(self.out,activation)\nFc=InnerProduct\nfc=InnerProduct\n\nclass Permute(Base):\n    def __init__(self, input,dims, name=\'permute\'):\n        super(Permute,self).__init__(input,name)\n        self.out = Blob(dims,self)\n\nclass Flatten(Base):\n    def __init__(self,input, name=\'permute\'):\n        super(Flatten, self).__init__(input, name)\n        dim=[np.prod(input.shape)]\n        self.out = Blob(dim, self)\n\nclass Eltwise(Base):\n    def __init__(self,inputs,type=\'sum\',name=\'eltwise\'):\n        super(Eltwise,self).__init__(inputs,name,)\n        self.out=inputs[0].new(self)\n        if type in [\'sum\',\'SUM\']:\n            self.add=np.prod(self.out.shape)\n        elif type in [\'product\',\'PROD\']:\n            self.dot=np.prod(self.out.shape)\n        elif type in [\'max\',\'MAX\']:\n            self.compare=np.prod(self.out.shape)\n        else:\n            raise AttributeError(\'the Eltwise layer type must be sum, max or product\')\n\nclass Slice(Base):\n    def __init__(self,input,slice_point,axis,name=\'slice\'):\n        super(Slice,self).__init__(input,name,)\n        self.out=[]\n        last=0\n        for p in slice_point:\n            print(p,list(input.shape))\n            shape1=list(input.shape)\n            shape1[axis] = p-last\n            last=p\n            self.out+=[Blob(shape1)]\n        shape1 = list(input.shape)\n        print(last,shape1,input.shape[axis])\n        shape1[axis] = input.shape[axis] - last\n        self.out += [Blob(shape1)]\n\nclass Reshape(Base):\n    def __init__(self,input,shape,name=\'reshape\'):\n        super(Reshape,self).__init__(input,name)\n        shape=list(shape)\n        for i in range(len(shape)):\n            if shape[i]==0:\n                shape[i]=input.shape[i]\n        self.out=Blob(shape)\n\n\nclass Concat(Base):\n    def __init__(self,inputs,axis,name=\'concat\'):\n        super(Concat,self).__init__(inputs,name,)\n        outc=0\n        for input in inputs:\n            outc+=input[axis]\n        self.out=Blob(inputs[0].shape,self)\n        self.out.shape[axis]=outc\n\nclass Scale(Base):\n    def __init__(self, input, factor=None, name=\'scale\'):\n        super(Scale, self).__init__(input, name, )\n        self.out = input.new(self)\n\n        self.dot=self.input_size\n        # TODO scale analysis\n\nclass Softmax(Base):\n    def __init__(self, input, factor=None, name=\'softmax\'):\n        super(Softmax, self).__init__(input, name, )\n        self.out = input.new(self)\n        self.power=self.input_size\n        self.add=self.input_size\n        self.dot=self.input_size\n        self.layer_info=""softmax""\n\nclass Dropout(Base):\n    def __init__(self,input,name=\'dropout\'):\n        if isinstance(input,Base):\n            input=input()\n        Base.__init__(self,input,name=name)\n        self.out = input.new(self)'"
analysis/roi.py,0,"b""import numpy as np\nfrom .blob import Blob\nfrom .layers import Base\n\n\nclass Flatten(Base):\n    def __init__(self,input, name='permute'):\n        super(Flatten, self).__init__(input, name)\n        dim=[np.prod(input.data.shape)]\n        self.out = Blob(dim, self)\n\nclass PSROIPool(Base):\n    def __init__(self,input,rois,output_dim,group_size,name='psroipool'):\n        super(PSROIPool,self).__init__([input,rois],name)\n        self.rois=rois\n        dim=[rois.shape[0],output_dim,group_size,group_size]\n        self.out=Blob(dim,self)\n        self.layer_info='output_dim:%d,group_size:%d'%(output_dim,group_size)\n\n        # TODO PSROIPOOL ANALYSIS\n\nclass ROIPool(Base):\n    def __init__(self,input,rois,pooled_w,pooled_h,name='roipool'):\n        super(ROIPool,self).__init__([input,rois],name)\n        self.rois = rois\n        dim=[rois.shape[0],pooled_w,pooled_h,input[3]]\n        self.out = Blob(dim, self)\n        self.layer_info = 'roi pooled:%dx%d' % (pooled_w, pooled_h)\n\n        # TODO PSROIPOOL ANALYSIS"""
analysis/utils.py,0,"b""import csv,pprint\nfrom .layers import Base\n\nDEFAULT_ITEMS=('name', 'layer_info', 'input', 'out', 'dot', 'add', 'compare', 'ops', 'weight_size', 'activation_size')\n\ndef get_human_readable(num):\n    units=['','K','M','G','T','P']\n    idx=0\n    while .001*num>1:\n        num=.001*num\n        idx+=1\n    if idx>=len(units):\n        return '%.3e'%num\n    return '%.3f'%num+units[idx]\n\ndef get_items_data(item_names, layers):\n    items = []\n    layers_sum = [0] * len(item_names)\n    for layer in layers:\n        print_line = []\n        for idx, param in enumerate(item_names):\n            item = getattr(layer, param)\n            if type(item) == list:\n                s = ''\n                for i in item:\n                    s += ' ' + str(i)\n            else:\n                s = str(item)\n            try:\n                num = int(item)\n                layers_sum[idx] += num\n            except:\n                pass\n            print_line.append(s)\n        items.append(print_line)\n    return items,layers_sum\n\ndef save_csv(layers, csv_save_path='/tmp/analyse.csv',\n             save_items=DEFAULT_ITEMS,\n             print_detail=False, human_readable=True):\n    # layers = get_layer_blox_from_blobs(blobs)\n    items,layers_sum=get_items_data(save_items,layers)\n    if csv_save_path!=None:\n        with open(csv_save_path,'w') as file:\n            writer=csv.writer(file)\n            writer.writerow(save_items)\n            for layer in items:\n                writer.writerow(layer)\n        print('saved at {}!'.format(csv_save_path))\n\ndef get_layer_blox_from_blobs(blobs):\n    layers=[]\n    def creator_search(blob):\n        for father in blob.father:\n            if isinstance(father,Base) and father not in layers:\n                layers.append(father)\n                if father.muti_input==True:\n                    for input in father.input:\n                        creator_search(input)\n                else:\n                    creator_search(father.input)\n    for blob in blobs:\n        creator_search(blob)\n    return layers\n\ndef print_table(datas,names):\n\n    types=[]\n    for i in datas[0]:\n        try:\n            i=int(float(i))\n            types.append('I')\n        except:\n            types.append('S')\n    for l in datas:\n        s=''\n        for i,t in zip(l,types):\n            if t=='I':\n\n                i=int(float(i))\n                s+=('%.1E'%i).center(10)\n            else:\n                i=str(i)\n                if len(i)>20:\n                    i=i[:17]+'...'\n                s+=i.center(20)\n            s+='|'\n        print(s)\n    s = ''\n    for i,t in zip(names,types):\n\n        if t == 'I':\n            s += i.center(10)\n        else:\n            if len(i) > 20:\n                i = i[:17] + '...'\n            s += i.center(20)\n        s += '|'\n    print(s)\n\ndef print_by_layers(layers,print_detail=True,human_readable=True, print_items=DEFAULT_ITEMS):\n    items, layers_sum=get_items_data(print_items,layers)\n    if print_detail:\n        layers_sum[0] = 'SUM'\n        items.append(layers_sum)\n        print_table(items,print_items)\n    else:\n        items=[]\n        for idx,item in enumerate(layers_sum):\n            if item>0:\n                if human_readable:\n                    items.append('%s:%s' % (print_items[idx], get_human_readable(item)))\n                else:\n                    items.append('%s:%.3e'%(print_items[idx],item))\n        print(items)\n    return items\n\ndef print_by_blob(blobs, print_items=DEFAULT_ITEMS):\n    layers=get_layer_blox_from_blobs(blobs)\n    print_by_layers(layers,print_items)"""
example/alexnet_pytorch_to_caffe.py,2,"b""import sys\nsys.path.insert(0,'.')\nimport torch\nfrom torch.autograd import Variable\nfrom torchvision.models.alexnet import alexnet\nimport pytorch_to_caffe\n\nif __name__=='__main__':\n    name='alexnet'\n    net=alexnet(True)\n    net.eval()\n    input=Variable(torch.ones([1,3,226,226]))\n    pytorch_to_caffe.trans_net(net,input,name)\n    pytorch_to_caffe.save_prototxt('{}.prototxt'.format(name))\n    pytorch_to_caffe.save_caffemodel('{}.caffemodel'.format(name))"""
example/densenet_pytorch_to_caffe.py,2,"b""import sys\nsys.path.insert(0,'.')\nsys.path.append('../')\nimport torch\nfrom torch.autograd import Variable\nfrom torchvision.models.densenet import *\nimport pytorch_to_caffe\n\nif __name__=='__main__':\n    name='densenet121'\n    net=densenet121(True)\n    input=Variable(torch.ones([1,3,224,224]))\n    net.eval()\n    pytorch_to_caffe.trans_net(net,input,name)\n    pytorch_to_caffe.save_prototxt('{}.prototxt'.format(name))\n    pytorch_to_caffe.save_caffemodel('{}.caffemodel'.format(name))"""
example/inceptionv3_pytorch_to_caffe.py,2,"b""import sys\nsys.path.insert(0,'.')\nimport torch\nfrom torch.autograd import Variable\nfrom torchvision.models.inception import inception_v3\nimport pytorch_to_caffe\n\nif __name__=='__main__':\n    name='inception_v3'\n    net=inception_v3(True,transform_input=False)\n    net.eval()\n    input=Variable(torch.ones([1,3,299,299]))\n    pytorch_to_caffe.trans_net(net,input,name)\n    pytorch_to_caffe.save_prototxt('{}.prototxt'.format(name))\n    pytorch_to_caffe.save_caffemodel('{}.caffemodel'.format(name))"""
example/resnet_pytorch_analysis_example.py,2,"b'import torch\nimport torch.nn as nn\nfrom torchvision.models import resnet\nimport pytorch_analyser\n\n""""""\nresnet 101: 8G MAC\nresnet 50: 4G MAC\nresnet 18: 1.8G MAC\n""""""\n\nif __name__==\'__main__\':\n    resnet18=resnet.resnet18()\n    input_tensor=torch.ones(1,3,224,224)\n    blob_dict, tracked_layers=pytorch_analyser.analyse(resnet18,input_tensor)\n    pytorch_analyser.save_csv(tracked_layers,\'/tmp/analysis.csv\')\n\n'"
example/resnet_pytorch_to_caffe.py,2,"b""import sys\nsys.path.insert(0,'.')\nimport torch\nfrom torch.autograd import Variable\nfrom torchvision.models.resnet import *\nimport pytorch_to_caffe\n\n\nif __name__=='__main__':\n    name='resnet18'\n    net=resnet18(True)\n    net.eval()\n    input=Variable(torch.ones([1,3,224,224]))\n    pytorch_to_caffe.trans_net(net,input,name)\n    pytorch_to_caffe.save_prototxt('{}.prototxt'.format(name))\n    pytorch_to_caffe.save_caffemodel('{}.caffemodel'.format(name))"""
example/testify_pytorch_to_caffe_example.py,8,"b'import caffe\nimport torch\nimport numpy as np\nimport argparse\nfrom collections import OrderedDict\nfrom torch.autograd import Variable\nimport torch.nn as nn\n\ndef arg_parse():\n    parser=argparse.ArgumentParser()\n    parser.add_argument(\'--model\',\'-m\',default=\'alexnet\')\n    parser.add_argument(\'--decimal\',\'-d\',default=2)\n    parser.add_argument(\'--gpu\',\'-gpu\',action=\'store_true\')\n    args=parser.parse_args()\n    return args\n\ndef generate_random(shape,gpu=False):\n    data_np=np.random.rand(np.prod(shape)).reshape(shape)\n    data_torch=Variable(torch.Tensor(data_np))\n    if gpu:\n        data_torch=data_torch.cuda()\n    return [data_np],[data_torch]\n\ndef get_input_size(caffe_net):\n    input_name = caffe_net.inputs[0]\n    return caffe_net.blobs[input_name].data.shape\n\ndef forward_torch(net,data):\n    blobs=OrderedDict()\n    module2name={}\n    for layer_name,m in net.named_modules():\n        layer_name=layer_name.replace(\'.\',\'_\')\n        module2name[m]=layer_name\n        # turn off all the inplace operation\n        if hasattr(m,\'inplace\'):\n            m.inplace=False\n    def forward_hook(m,i,o):\n        o_np = o.data.cpu().numpy()\n        blobs[module2name[m]]=o_np\n    for m in net.modules():\n        m.register_forward_hook(forward_hook)\n    output=net.forward(*data)\n    if isinstance(output,tuple):\n        outputs=[]\n        for o in output:\n            outputs.append(o.data.cpu().numpy())\n    else:\n        outputs=[output.data.cpu().numpy()]\n    return blobs,outputs\n\ndef forward_caffe(net,data):\n    for input_name,d in zip(net.inputs,data):\n        net.blobs[input_name].data[...] = d\n    rst=net.forward()\n    blobs=OrderedDict()\n    blob2layer={}\n    for layer_name,tops in net.top_names.items():\n        for top in tops:\n            blob2layer[top]=layer_name\n    for name,value in net.blobs.items():\n        layer_name=blob2layer[name]\n        value=value.data\n        if layer_name in blobs:\n            blobs[layer_name].append(value)\n        else:\n            blobs[layer_name]=[value]\n    outputs = []\n    for output_name in net.outputs:\n        outputs.append(rst[output_name])\n    return blobs,outputs\n\ndef test(net_caffe,net_torch,data_np,data_torch,args):\n    blobs_caffe, rsts_caffe = forward_caffe(net_caffe, data_np)\n    blobs_torch, rsts_torchs = forward_torch(net_torch, data_torch)\n    # test the output of every layer\n    for layer, value in blobs_caffe.items():\n        if layer in blobs_torch:\n            value_torch = blobs_torch[layer]\n            value = value[0]\n            if value.size!=value_torch.size:continue\n            if \'relu\' in layer: continue\n            try:\n                np.testing.assert_almost_equal(value, value_torch, decimal=args.decimal)\n                print(""TEST layer {}: PASS"".format(layer))\n            except:\n                print(""TEST layer {}: FAIL"".format(layer))\n                # np.testing.assert_almost_equal(np.clip(value, min=0), np.clip(value_torch, min=0))\n    # test the output\n    print(""TEST output"")\n    for rst_caffe,rst_torch in zip(rsts_caffe,rsts_torchs):\n        np.testing.assert_almost_equal(rst_caffe, rst_torch, decimal=args.decimal)\n    print(""TEST output: PASS"")\n\nif __name__==\'__main__\':\n    args=arg_parse()\n\n    if args.model==\'alexnet\':\n        # Alexnet example\n        from torchvision.models.alexnet import alexnet\n        net_torch = alexnet(True).eval()\n        if args.gpu:\n            net_torch.cuda()\n        try:\n            net_caffe = caffe.Net(\'alexnet.prototxt\', \'alexnet.caffemodel\', caffe.TEST)\n        except:\n            raise (""Please run alexnet_pytorch_to_caffe.py first"")\n        shape=get_input_size(net_caffe)\n        data_np,data_torch=generate_random(shape,args.gpu)\n        test(net_caffe,net_torch,data_np,data_torch,args)\n\n    elif args.model==\'resnet18\':\n        # ResNet example\n        from torchvision.models.resnet import resnet18\n        net_torch = resnet18(True).eval()\n        if args.gpu:\n            net_torch.cuda()\n        net_caffe = caffe.Net(\'resnet18.prototxt\', \'resnet18.caffemodel\', caffe.TEST)\n        shape = get_input_size(net_caffe)\n        data_np, data_torch = generate_random(shape, args.gpu)\n        test(net_caffe,net_torch,data_np,data_torch,args)\n    elif args.model==\'inception_v3\':\n        # Inception_v3 example\n        from torchvision.models.inception import inception_v3\n        net_torch = inception_v3(True,transform_input=False).eval()\n        if args.gpu:\n            net_torch.cuda()\n        net_caffe = caffe.Net(\'inception_v3.prototxt\', \'inception_v3.caffemodel\', caffe.TEST)\n        shape = get_input_size(net_caffe)\n        data_np, data_torch = generate_random(shape, args.gpu)\n        test(net_caffe,net_torch,data_np,data_torch,args)\n    else:\n        raise NotImplementedError()\n\n'"
example/vgg19_pytorch_to_caffe.py,2,"b""import sys\nsys.path.insert(0,'.')\nimport torch\nfrom torch.autograd import Variable\nfrom torchvision.models.vgg import vgg19\nimport pytorch_to_caffe\n\nif __name__=='__main__':\n    name='vgg19'\n    net=vgg19(True)\n    net.eval()\n    input=Variable(torch.ones([1,3,224,224]))\n    pytorch_to_caffe.trans_net(net,input,name)\n    pytorch_to_caffe.save_prototxt('{}.prototxt'.format(name))\n    pytorch_to_caffe.save_caffemodel('{}.caffemodel'.format(name))"""
