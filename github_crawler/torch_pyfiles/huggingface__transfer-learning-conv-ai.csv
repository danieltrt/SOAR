file_path,api_count,code
convai_evaluation.py,11,"b'# # Copyright (c) 2019-present, HuggingFace Inc.\n# All rights reserved.\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\nimport random\nimport logging\nfrom pprint import pformat\nfrom collections import defaultdict\nfrom functools import partial\nfrom tqdm import trange\n\nimport torch\nimport torch.nn.functional as F\nfrom parlai.core.agents import Agent\nfrom parlai.scripts.eval_model import setup_args as base_setup_args\nfrom projects.convai2.eval_hits import eval_hits, setup_args as setup_args_hits\nfrom projects.convai2.eval_f1 import eval_f1, setup_args as setup_args_f1\nfrom projects.convai2.eval_ppl import eval_ppl, setup_args as setup_args_ppl\nfrom projects.convai2.build_dict import build_dict\nfrom transformers import (OpenAIGPTDoubleHeadsModel, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer,\n                                  GPT2DoubleHeadsModel, GPT2LMHeadModel, GPT2Tokenizer)\n\nfrom train import build_input_from_segments, pad_dataset, SPECIAL_TOKENS, add_special_tokens_\nfrom utils import download_pretrained_model, AttrDict\nfrom interact import sample_sequence\n\nclass TransformerAgent(Agent):\n    @staticmethod\n    def add_cmdline_args(argparser):\n        agent_args = argparser.add_argument_group(\'Agent parameters\')\n        agent_args.add_argument(""--model_checkpoint"", type=str, default="""", help=""Path, url or short name of the model. Must be OpenAIGPT."")\n        agent_args.add_argument(""--max_history"", type=int, default=2, help=""Number of previous utterances to keep in history"")\n        agent_args.add_argument(""--device"", type=str, default=""cuda"" if torch.cuda.is_available() else ""cpu"", help=""Device (cuda or cpu)"")\n        agent_args.add_argument(""--eval_type"", type=str, default=""hits@1"", help=""hits@1, ppl or f1"")\n        agent_args.add_argument(""--no_sample"", action=\'store_true\')\n        agent_args.add_argument(""--max_length"", type=int, default=20)\n        agent_args.add_argument(""--min_length"", type=int, default=1)\n        agent_args.add_argument(""--seed"", type=int, default=0)\n        agent_args.add_argument(""--temperature"", type=int, default=0.7)\n        agent_args.add_argument(""--top_k"", type=int, default=20)\n        agent_args.add_argument(""--top_p"", type=float, default=0.9, help=""Nucleus filtering (top-p) before sampling (<=0.0: no filtering)"")\n        return argparser\n\n    def __init__(self, opt, shared=None):\n        super(TransformerAgent, self).__init__(opt, shared)\n\n        args = AttrDict(opt)  # to keep most commands identical to the interact.py script\n        self.args = args\n\n        logging.basicConfig(level=logging.INFO)\n        self.logger = logging.getLogger(__file__)\n        self.logger.info(pformat(args))\n\n        random.seed(args.seed)\n        torch.random.manual_seed(args.seed)\n        torch.cuda.manual_seed(args.seed)\n\n        if shared is None:\n            self.logger.info(""Get pretrained model and tokenizer"")\n            if args.model_checkpoint == """":\n                args.model_checkpoint = download_pretrained_model()\n            if \'gpt2\' in args.model_checkpoint:\n                self.tokenizer = GPT2Tokenizer.from_pretrained(args.model_checkpoint)\n                model_class = GPT2DoubleHeadsModel if self.args.eval_type == ""hits@1"" else GPT2LMHeadModel\n            else:\n                self.tokenizer = OpenAIGPTTokenizer.from_pretrained(args.model_checkpoint)\n                model_class = OpenAIGPTDoubleHeadsModel if self.args.eval_type == ""hits@1"" else OpenAIGPTLMHeadModel\n\n            self.model_checkpoint = model_class.from_pretrained(args.model_checkpoint)\n            self.model_checkpoint.to(args.device)\n\n            self.logger.info(""Build BPE prefix dictionary"")\n            convai_dict = build_dict()\n            assert len(convai_dict) == 19304\n            self.prefix2words = self.get_prefix2words(convai_dict)\n        else:\n            self.model_checkpoint = shared[\'model\']\n            self.tokenizer = shared[\'tokenizer\']\n            self.prefix2words = shared[\'prefix2words\']\n        add_special_tokens_(self.model_checkpoint, self.tokenizer)\n        self.special_tokens_ids = self.tokenizer.convert_tokens_to_ids(SPECIAL_TOKENS)\n\n        self.persona = []\n        self.history = []\n        self.labels = []\n\n        self.reset()\n\n    def observe(self, observation):\n        if self.episode_done:\n            self.reset()\n\n        if self.labels:\n            # Add the previous response to the history\n            self.history.append(self.labels)\n\n        if \'labels\' in observation or \'eval_labels\' in observation:\n            text = observation.get(\'labels\', observation.get(\'eval_labels\', [[]]))[0]\n            self.labels = self.tokenizer.encode(text)\n\n        if \'text\' in observation:\n            text = observation[\'text\']\n            for subtext in text.split(\'\\n\'):\n                subtext = subtext.strip()\n                if subtext.startswith(\'your persona:\'):\n                    subtext = subtext.replace(\'your persona:\', \'\').strip()\n                    self.persona.append(self.tokenizer.encode(subtext))\n                else:\n                    self.history.append(self.tokenizer.encode(subtext))\n\n        self.history = self.history[-(2*self.args.max_history+1):]\n\n        candidates = []\n        if \'label_candidates\' in observation:\n            for candidate in observation[\'label_candidates\']:\n                candidates.append((self.tokenizer.encode(candidate), candidate))\n        self.candidates = candidates\n\n        self.episode_done = observation[\'episode_done\']\n        self.observation = observation\n        return observation\n\n    def act(self):\n        reply = {}\n\n        if self.args.eval_type == ""hits@1"" and len(self.candidates) > 0:\n            instances = defaultdict(list)\n            for candidate, _ in self.candidates:\n                instance = build_input_from_segments(self.persona, self.history, candidate, self.tokenizer)\n                for input_name, input_array in instance.items():\n                    instances[input_name].append(input_array)\n\n            inputs = pad_dataset(instances, padding=self.special_tokens_ids[-1])\n\n            tensor_inputs = {}\n            for input_name in [""input_ids"", ""mc_token_ids"", ""token_type_ids""]:\n                tensor = torch.tensor(inputs[input_name], device=self.args.device)\n                tensor = tensor.view((-1, len(self.candidates)) + tensor.shape[1:])\n                tensor_inputs[input_name] = tensor\n\n            with torch.no_grad():\n                mc_logits = self.model_checkpoint(**tensor_inputs)[1]\n\n            val, ind = torch.sort(mc_logits[0], descending=True)\n\n            ypred = self.candidates[ind[0].item()][1] # match\n            tc = []\n            for j in range(len(self.candidates)):\n                tc.append(self.candidates[ind[j].item()][1])\n            reply = {\'text\': ypred, \'text_candidates\': tc}\n        else:\n            # We are in interactive of f1 evaluation mode => just sample\n            with torch.no_grad():\n                out_ids = sample_sequence(self.persona, self.history, self.tokenizer, self.model_checkpoint, self.args)\n            out_text = self.tokenizer.decode(out_ids, skip_special_tokens=True,\n                                             clean_up_tokenization_spaces=(self.args.eval_type != \'f1\'))\n            reply = {\'text\': out_text}\n\n        return reply\n\n    def next_word_probability(self, partial_out):\n        """"""Return probability distribution over next words given an input and\n        partial true output. This is used to calculate the per-word perplexity.\n        """"""\n        partial_out_ids = self.tokenizer.encode(\' \'.join(partial_out))\n        instance = build_input_from_segments(self.persona, self.history, partial_out_ids,\n                                             self.tokenizer, with_eos=False)\n\n        input_ids = torch.tensor(instance[""input_ids""], device=self.args.device).unsqueeze(0)\n        token_type_ids = torch.tensor(instance[""token_type_ids""], device=self.args.device).unsqueeze(0)\n\n        with torch.no_grad():\n            logits = self.model_checkpoint(input_ids, token_type_ids=token_type_ids)\n\n        if isinstance(logits, tuple):  # for gpt2 and maybe others\n            logits = logits[0]\n        probs = F.softmax(logits[0, -1], dim=0)\n\n        dist = {}\n        for prefix_id, words in self.prefix2words.items():\n            for word, ratio in words.items():\n                dist[word] = probs[prefix_id].item() * ratio\n        return dist\n\n    def get_prefix2words(self, convai_dict, smoothing_freq=5):\n        """""" map BPE-prefix => dict(full_words beginning with BPE-prefix, associated words_counts) """"""\n        prefix2words = defaultdict(dict)\n        for i in trange(len(convai_dict)):\n            word = convai_dict[i]\n            freq = convai_dict.freq[word] + smoothing_freq\n            bpe_tokens = self.tokenizer.bpe(word).split(\' \')\n            prefix_id = self.tokenizer.convert_tokens_to_ids(bpe_tokens[0])\n            prefix2words[prefix_id].update(dict([(word, freq)]))\n\n        for prefix_id, words in prefix2words.items():\n            total_counts = sum(words.values())\n            prefix2words[prefix_id] = dict((word, count/total_counts) for word, count in words.items())\n\n        return prefix2words\n\n    def share(self):\n        shared = super(TransformerAgent, self).share()\n        shared[\'tokenizer\'] = self.tokenizer\n        shared[\'model\'] = self.model_checkpoint\n        shared[\'prefix2words\'] = self.prefix2words\n        return shared\n\n    def reset(self):\n        self.persona = []\n        self.history = []\n        self.labels = []\n        self.candidates = []\n        self.episode_done = True\n        self.observation = None\n\n\nif __name__ == \'__main__\':\n    parser = base_setup_args(None)\n    parser.set_params(\n        model=\'convai_evaluation:TransformerAgent\')\n    opt = parser.parse_args(print_args=False)\n\n    if opt[\'eval_type\'] == ""hits@1"":\n        setup_args = setup_args_hits(None)\n        eval_fct = partial(eval_hits, print_parser=setup_args)\n    elif opt[\'eval_type\'] == ""ppl"":\n        setup_args = setup_args_ppl(None)\n        eval_fct = eval_ppl\n    elif opt[\'eval_type\'] == ""f1"":\n        setup_args = setup_args_f1(None)\n        eval_fct = partial(eval_f1, print_parser=setup_args)\n    else:\n        raise ValueError\n\n    setup_args.set_params(\n        model=\'convai_evaluation:TransformerAgent\')\n    opt = setup_args.parse_args(print_args=False)\n\n    eval_fct(opt)\n'"
example_entry.py,0,"b'""""""\nEach entry in personachat is a dict with two keys personality and utterances, the dataset is a list of entries.\npersonality:  list of strings containing the personality of the agent\nutterances: list of dictionaries, each of which has two keys which are lists of strings.\n    candidates: [next_utterance_candidate_1, ..., next_utterance_candidate_19]\n        The last candidate is the ground truth response observed in the conversational data\n    history: [dialog_turn_0, ... dialog_turn N], where N is an odd number since the other user starts every conversation.\nPreprocessing:\n    - Spaces before periods at end of sentences\n    - everything lowercase\n""""""\nEXAMPLE_ENTRY = {\n    ""personality"": [""i like to remodel homes ."", ""i like to go hunting ."",\n                    ""i like to shoot a bow ."", ""my favorite holiday is halloween .""],\n    ""utterances"": [\n        {""candidates"": [\n            ""my mom was single with 3 boys , so we never left the projects ."",\n            ""i try to wear all black every day . it makes me feel comfortable ."",\n            ""well nursing stresses you out so i wish luck with sister"",\n            ""yeah just want to pick up nba nfl getting old"",\n            ""i really like celine dion . what about you ?"", ""no . i live near farms ."",\n            ""i wish i had a daughter , i\'m a boy mom . they\'re beautiful boys though still ""\n            ""lucky"",\n            ""yeah when i get bored i play gone with the wind my favorite movie ."",\n            ""hi how are you ? i\'m eating dinner with my hubby and 2 kids ."",\n            ""were you married to your high school sweetheart ? i was ."",\n            ""that is great to hear ! are you a competitive rider ?"",\n            ""hi , i\'m doing ok . i\'m a banker . how about you ?"", ""i\'m 5 years old"",\n            ""hi there . how are you today ?"",\n            ""i totally understand how stressful that can be ."",\n            ""yeah sometimes you do not know what you are actually watching"",\n            ""mother taught me to cook ! we are looking for an exterminator ."",\n            ""i enjoy romantic movie . what is your favorite season ? mine is summer ."",\n            ""editing photos takes a lot of work ."",\n            ""you must be very fast . hunting is one of my favorite hobbies .""\n        ],\n        ""history"": [\n            ""hi , how are you doing ? i\'m getting ready to do some cheetah chasing to stay in shape ."",\n        ]\n        },\n        {""candidates"": [""hello i am doing well how are you ?"",\n                        ""ll something like that . do you play games ?"",\n                        ""does anything give you relief ? i hate taking medicine ""\n                        ""for mine ."",\n                        ""i decorate cakes at a local bakery ! and you ?"",\n                        ""do you eat lots of meat"",\n                        ""i am so weird that i like to collect people and cats"",\n                        ""how are your typing skills ?"",\n                        ""yeah . i am headed to the gym in a bit to weight lift ."",\n                        ""yeah you have plenty of time"",\n                        ""metal is my favorite , but i can accept that people ""\n                        ""listen to country . haha"",\n                        ""that\'s why you desire to be controlled . let me control ""\n                        ""you person one ."",\n                        ""two dogs they are the best , how about you ?"",\n                        ""you do art ? what kind of art do you do ?"",\n                        ""i love watching baseball outdoors on sunny days ."",\n                        ""oh i see . do you ever think about moving ? i do , ""\n                        ""it is what i want ."",\n                        ""sure . i wish it were winter . the sun really hurts my ""\n                        ""blue eyes ."",\n                        ""are we pretending to play tennis"",\n                        ""i am rich and have all of my dreams fulfilled already"",\n                        ""they tire me so , i probably sleep about 10 hrs a day ""\n                        ""because of them ."",\n                        ""i also remodel homes when i am not out bow hunting .""],\n         ""history"": [\n            ""hi , how are you doing ? i\'m getting ready to do some cheetah chasing to stay in shape ."",\n             ""you must be very fast . hunting is one of my favorite hobbies ."",\n             ""i am ! for my hobby i like to do canning or some whittling ."",]\n         },\n        {""candidates"": [""yes they do but i say no to them lol"",\n                        ""i have trouble getting along with family ."",\n                        ""i live in texas , what kind of stuff do you do in ""\n                        ""toronto ?"",\n                        ""that\'s so unique ! veganism and line dancing usually ""\n                        ""don\'t mix !"",\n                        ""no , it isn\'t that big . do you travel a lot"",\n                        ""that\'s because they are real ; what do you do for ""\n                        ""work ?"",\n                        ""i am lazy all day lol . my mom wants me to get a job ""\n                        ""and move out"",\n                        ""i was born on arbor day , so plant a tree in my name"",\n                        ""okay , i should not tell you , its against the rules ""\n                        ""but my name is sarah , call me o"",\n                        ""hello how are u tonight"",\n                        ""cool . . . my parents love country music that\'s why i ""\n                        ""hate it"",\n                        ""i am an accountant . what do you do ?"",\n                        ""what do your parents do ? my dad is a mechanic ."",\n                        ""how are you liking it ?"",\n                        ""i really am too . great talking to you too ."",\n                        ""cool . whats it like working there ?"",\n                        ""one daughter . she\'s pre med"",\n                        ""no and all men is taller than me why can\'t i find a ""\n                        ""man to dance with"",\n                        ""i live in utah , and my family live in england , ""\n                        ""so i understand"",\n                        ""that\'s awesome . do you have a favorite season or ""\n                        ""time of year ?""],\n         ""history"": [\n             ""hi , how are you doing ? i\'m getting ready to do some cheetah chasing to stay in shape ."",\n             ""you must be very fast . hunting is one of my favorite hobbies ."",\n             ""i am ! for my hobby i like to do canning or some whittling ."",\n             ""i also remodel homes when i am not out bow hunting ."",\n             ""that\'s neat . when i was in high school i placed 6th in 100m dash !"", ]\n         },\n    ]\n}\n'"
interact.py,12,"b'# # Copyright (c) 2019-present, HuggingFace Inc.\n# All rights reserved.\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\nimport logging\nimport random\nfrom argparse import ArgumentParser\nfrom itertools import chain\nfrom pprint import pformat\nimport warnings\n\nimport torch\nimport torch.nn.functional as F\n\nfrom transformers import OpenAIGPTLMHeadModel, OpenAIGPTTokenizer, GPT2LMHeadModel, GPT2Tokenizer\nfrom train import SPECIAL_TOKENS, build_input_from_segments, add_special_tokens_\nfrom utils import get_dataset, download_pretrained_model\n\ndef top_filtering(logits, top_k=0., top_p=0.9, threshold=-float(\'Inf\'), filter_value=-float(\'Inf\')):\n    """""" Filter a distribution of logits using top-k, top-p (nucleus) and/or threshold filtering\n        Args:\n            logits: logits distribution shape (vocabulary size)\n            top_k: <=0: no filtering, >0: keep only top k tokens with highest probability.\n            top_p: <=0.0: no filtering, >0.0: keep only a subset S of candidates, where S is the smallest subset\n                whose total probability mass is greater than or equal to the threshold top_p.\n                In practice, we select the highest probability tokens whose cumulative probability mass exceeds\n                the threshold top_p.\n            threshold: a minimal threshold to keep logits\n    """"""\n    assert logits.dim() == 1  # Only work for batch size 1 for now - could update but it would obfuscate a bit the code\n    top_k = min(top_k, logits.size(-1))\n    if top_k > 0:\n        # Remove all tokens with a probability less than the last token in the top-k tokens\n        indices_to_remove = logits < torch.topk(logits, top_k)[0][..., -1, None]\n        logits[indices_to_remove] = filter_value\n\n    if top_p > 0.0:\n        # Compute cumulative probabilities of sorted tokens\n        sorted_logits, sorted_indices = torch.sort(logits, descending=True)\n        cumulative_probabilities = torch.cumsum(F.softmax(sorted_logits, dim=-1), dim=-1)\n\n        # Remove tokens with cumulative probability above the threshold\n        sorted_indices_to_remove = cumulative_probabilities > top_p\n        # Shift the indices to the right to keep also the first token above the threshold\n        sorted_indices_to_remove[..., 1:] = sorted_indices_to_remove[..., :-1].clone()\n        sorted_indices_to_remove[..., 0] = 0\n\n        # Back to unsorted indices and set them to -infinity\n        indices_to_remove = sorted_indices[sorted_indices_to_remove]\n        logits[indices_to_remove] = filter_value\n\n    indices_to_remove = logits < threshold\n    logits[indices_to_remove] = filter_value\n\n    return logits\n\n\ndef sample_sequence(personality, history, tokenizer, model, args, current_output=None):\n    special_tokens_ids = tokenizer.convert_tokens_to_ids(SPECIAL_TOKENS)\n    if current_output is None:\n        current_output = []\n\n    for i in range(args.max_length):\n        instance = build_input_from_segments(personality, history, current_output, tokenizer, with_eos=False)\n\n        input_ids = torch.tensor(instance[""input_ids""], device=args.device).unsqueeze(0)\n        token_type_ids = torch.tensor(instance[""token_type_ids""], device=args.device).unsqueeze(0)\n\n        logits = model(input_ids, token_type_ids=token_type_ids)\n        if isinstance(logits, tuple):  # for gpt2 and maybe others\n            logits = logits[0]\n        logits = logits[0, -1, :] / args.temperature\n        logits = top_filtering(logits, top_k=args.top_k, top_p=args.top_p)\n        probs = F.softmax(logits, dim=-1)\n\n        prev = torch.topk(probs, 1)[1] if args.no_sample else torch.multinomial(probs, 1)\n        if i < args.min_length and prev.item() in special_tokens_ids:\n            while prev.item() in special_tokens_ids:\n                if probs.max().item() == 1:\n                    warnings.warn(""Warning: model generating special token with probability 1."")\n                    break  # avoid infinitely looping over special token\n                prev = torch.multinomial(probs, num_samples=1)\n\n        if prev.item() in special_tokens_ids:\n            break\n        current_output.append(prev.item())\n\n    return current_output\n\ndef run():\n    parser = ArgumentParser()\n    parser.add_argument(""--dataset_path"", type=str, default="""", help=""Path or url of the dataset. If empty download from S3."")\n    parser.add_argument(""--dataset_cache"", type=str, default=\'./dataset_cache\', help=""Path or url of the dataset cache"")\n    parser.add_argument(""--model"", type=str, default=""openai-gpt"", help=""Model type (openai-gpt or gpt2)"", choices=[\'openai-gpt\', \'gpt2\'])  # anything besides gpt2 will load openai-gpt\n    parser.add_argument(""--model_checkpoint"", type=str, default="""", help=""Path, url or short name of the model"")\n    parser.add_argument(""--max_history"", type=int, default=2, help=""Number of previous utterances to keep in history"")\n    parser.add_argument(""--device"", type=str, default=""cuda"" if torch.cuda.is_available() else ""cpu"", help=""Device (cuda or cpu)"")\n\n    parser.add_argument(""--no_sample"", action=\'store_true\', help=""Set to use greedy decoding instead of sampling"")\n    parser.add_argument(""--max_length"", type=int, default=20, help=""Maximum length of the output utterances"")\n    parser.add_argument(""--min_length"", type=int, default=1, help=""Minimum length of the output utterances"")\n    parser.add_argument(""--seed"", type=int, default=0, help=""Seed"")\n    parser.add_argument(""--temperature"", type=int, default=0.7, help=""Sampling softmax temperature"")\n    parser.add_argument(""--top_k"", type=int, default=0, help=""Filter top-k tokens before sampling (<=0: no filtering)"")\n    parser.add_argument(""--top_p"", type=float, default=0.9, help=""Nucleus filtering (top-p) before sampling (<=0.0: no filtering)"")\n    args = parser.parse_args()\n\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__file__)\n    logger.info(pformat(args))\n\n    if args.model_checkpoint == """":\n        if args.model == \'gpt2\':\n            raise ValueError(""Interacting with GPT2 requires passing a finetuned model_checkpoint"")\n        else:\n            args.model_checkpoint = download_pretrained_model()\n\t\n\t\n    if args.seed != 0:\n    \trandom.seed(args.seed)\n    \ttorch.random.manual_seed(args.seed)\n    \ttorch.cuda.manual_seed(args.seed)\n\n\n    logger.info(""Get pretrained model and tokenizer"")\n    tokenizer_class, model_class = (GPT2Tokenizer, GPT2LMHeadModel) if args.model == \'gpt2\' else (OpenAIGPTTokenizer, OpenAIGPTLMHeadModel)\n    tokenizer = tokenizer_class.from_pretrained(args.model_checkpoint)\n    model = model_class.from_pretrained(args.model_checkpoint)\n    model.to(args.device)\n    add_special_tokens_(model, tokenizer)\n\n    logger.info(""Sample a personality"")\n    dataset = get_dataset(tokenizer, args.dataset_path, args.dataset_cache)\n    personalities = [dialog[""personality""] for dataset in dataset.values() for dialog in dataset]\n    personality = random.choice(personalities)\n    logger.info(""Selected personality: %s"", tokenizer.decode(chain(*personality)))\n\n    history = []\n    while True:\n        raw_text = input("">>> "")\n        while not raw_text:\n            print(\'Prompt should not be empty!\')\n            raw_text = input("">>> "")\n        history.append(tokenizer.encode(raw_text))\n        with torch.no_grad():\n            out_ids = sample_sequence(personality, history, tokenizer, model, args)\n        history.append(out_ids)\n        history = history[-(2*args.max_history+1):]\n        out_text = tokenizer.decode(out_ids, skip_special_tokens=True)\n        print(out_text)\n\n\nif __name__ == ""__main__"":\n    run()\n'"
test_special_tokens.py,0,"b'from pathlib import Path\nimport shutil\nimport unittest\n\nfrom transformers import OpenAIGPTTokenizer, GPT2Tokenizer\nfrom train import ATTR_TO_SPECIAL_TOKEN, SPECIAL_TOKENS\n\nclass TestSpecialTokenTreatment(unittest.TestCase):\n\n    def setUp(self):\n        self.save_dir = Path(\'utest_save_dir\')\n        self.save_dir.mkdir(exist_ok=True)\n\n    def tearDown(self):\n        shutil.rmtree(self.save_dir)\n\n    def test_special_tokens_checkpoint_behavior(self):\n        toks = [OpenAIGPTTokenizer.from_pretrained(\'openai-gpt\'), GPT2Tokenizer.from_pretrained(\'gpt2\')]\n        for tok in toks:\n            self.assertEqual(len(tok.added_tokens_encoder), 0)\n            tok.add_special_tokens(ATTR_TO_SPECIAL_TOKEN)\n            self.assertEqual(len(tok.added_tokens_encoder), 5)\n            # Make sure we never split\n            self.assertEqual(len(tok.tokenize(""<bos> <speaker1>"")), 2)\n            ids = tok.convert_tokens_to_ids(SPECIAL_TOKENS)\n            self.assertTrue(all([x > 0 for x in ids]),\n                            f\'some tokens failed to tokenize {SPECIAL_TOKENS} -> {ids}\')\n            # Need to mantain indices through save. (this is also tested in pytorch-transformers)\n            tok.save_pretrained(self.save_dir)\n            tok_loaded = tok.from_pretrained(str(self.save_dir))\n            ids2 = tok_loaded.convert_tokens_to_ids(SPECIAL_TOKENS)\n            self.assertListEqual(ids, ids2)\n'"
train.py,16,"b'# Copyright (c) 2019-present, HuggingFace Inc.\n# All rights reserved. This source code is licensed under the BSD-style license found in the LICENSE file in the root directory of this source tree.\nimport os\nimport math\nimport logging\nfrom pprint import pformat\nfrom argparse import ArgumentParser\nfrom collections import defaultdict\nfrom itertools import chain\n\nimport torch\nfrom torch.nn.parallel import DistributedDataParallel\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom ignite.engine import Engine, Events\nfrom ignite.handlers import ModelCheckpoint\nfrom ignite.metrics import Accuracy, Loss, MetricsLambda, RunningAverage\nfrom ignite.contrib.handlers import ProgressBar, PiecewiseLinear\nfrom ignite.contrib.handlers.tensorboard_logger import TensorboardLogger, OutputHandler, OptimizerParamsHandler\nfrom transformers import (AdamW, OpenAIGPTDoubleHeadsModel, OpenAIGPTTokenizer,\n                                  GPT2DoubleHeadsModel, GPT2Tokenizer, WEIGHTS_NAME, CONFIG_NAME)\n\nfrom utils import get_dataset, make_logdir\n\nSPECIAL_TOKENS = [""<bos>"", ""<eos>"", ""<speaker1>"", ""<speaker2>"", ""<pad>""]\nATTR_TO_SPECIAL_TOKEN = {\'bos_token\': \'<bos>\', \'eos_token\': \'<eos>\', \'pad_token\': \'<pad>\',\n                         \'additional_special_tokens\': [\'<speaker1>\', \'<speaker2>\']}\nMODEL_INPUTS = [""input_ids"", ""mc_token_ids"", ""lm_labels"", ""mc_labels"", ""token_type_ids""]\nPADDED_INPUTS = [""input_ids"", ""lm_labels"", ""token_type_ids""]\n\nlogger = logging.getLogger(__file__)\n\ndef average_distributed_scalar(scalar, args):\n    """""" Average a scalar over the nodes if we are in distributed training. We use this for distributed evaluation. """"""\n    if args.local_rank == -1:\n        return scalar\n    scalar_t = torch.tensor(scalar, dtype=torch.float, device=args.device) / torch.distributed.get_world_size()\n    torch.distributed.all_reduce(scalar_t, op=torch.distributed.ReduceOp.SUM)\n    return scalar_t.item()\n\n\ndef pad_dataset(dataset, padding=0):\n    """""" Pad the dataset. This could be optimized by defining a Dataset class and padding at the batch level, but this is simpler. """"""\n    max_l = max(len(x) for x in dataset[""input_ids""])\n    for name in PADDED_INPUTS:\n        dataset[name] = [x + [padding if name != ""lm_labels"" else -100] * (max_l - len(x)) for x in dataset[name]]\n    return dataset\n\n\ndef add_special_tokens_(model, tokenizer):\n    """""" Add special tokens to the tokenizer and the model if they have not already been added. """"""\n    orig_num_tokens = len(tokenizer.encoder)\n    num_added_tokens = tokenizer.add_special_tokens(ATTR_TO_SPECIAL_TOKEN) # doesn\'t add if they are already there\n    if num_added_tokens > 0:\n        model.resize_token_embeddings(new_num_tokens=orig_num_tokens + num_added_tokens)\n\ndef build_input_from_segments(persona, history, reply, tokenizer, lm_labels=False, with_eos=True):\n    """""" Build a sequence of input from 3 segments: persona, history and last reply. """"""\n    bos, eos, speaker1, speaker2 = tokenizer.convert_tokens_to_ids(SPECIAL_TOKENS[:-1])\n    sequence = [[bos] + list(chain(*persona))] + history + [reply + ([eos] if with_eos else [])]\n    sequence = [sequence[0]] + [[speaker2 if (len(sequence)-i) % 2 else speaker1] + s for i, s in enumerate(sequence[1:])]\n    instance = {}\n    instance[""input_ids""] = list(chain(*sequence))\n    instance[""token_type_ids""] = [speaker2 if i % 2 else speaker1 for i, s in enumerate(sequence) for _ in s]\n    instance[""mc_token_ids""] = len(instance[""input_ids""]) - 1\n    instance[""lm_labels""] = [-100] * len(instance[""input_ids""])\n    if lm_labels:\n        instance[""lm_labels""] = ([-100] * sum(len(s) for s in sequence[:-1])) + [-100] + sequence[-1][1:]\n    return instance\n\n\ndef get_data_loaders(args, tokenizer):\n    """""" Prepare the dataset for training and evaluation """"""\n    personachat = get_dataset(tokenizer, args.dataset_path, args.dataset_cache)\n\n    logger.info(""Build inputs and labels"")\n    datasets = {""train"": defaultdict(list), ""valid"": defaultdict(list)}\n    for dataset_name, dataset in personachat.items():\n        num_candidates = len(dataset[0][""utterances""][0][""candidates""])\n        if args.num_candidates > 0 and dataset_name == \'train\':\n            num_candidates = min(args.num_candidates, num_candidates)\n        for dialog in dataset:\n            persona = dialog[""personality""].copy()\n            for _ in range(args.personality_permutations):\n                for utterance in dialog[""utterances""]:\n                    history = utterance[""history""][-(2*args.max_history+1):]\n                    for j, candidate in enumerate(utterance[""candidates""][-num_candidates:]):\n                        lm_labels = bool(j == num_candidates-1)\n                        instance = build_input_from_segments(persona, history, candidate, tokenizer, lm_labels)\n                        for input_name, input_array in instance.items():\n                            datasets[dataset_name][input_name].append(input_array)\n                    datasets[dataset_name][""mc_labels""].append(num_candidates - 1)\n                    datasets[dataset_name][""n_candidates""] = num_candidates\n                persona = [persona[-1]] + persona[:-1]  # permuted personalities\n\n    logger.info(""Pad inputs and convert to Tensor"")\n    tensor_datasets = {""train"": [], ""valid"": []}\n    for dataset_name, dataset in datasets.items():\n        dataset = pad_dataset(dataset, padding=tokenizer.convert_tokens_to_ids(SPECIAL_TOKENS[-1]))\n        for input_name in MODEL_INPUTS:\n            tensor = torch.tensor(dataset[input_name])\n            if input_name != ""mc_labels"":\n                tensor = tensor.view((-1, datasets[dataset_name][""n_candidates""]) + tensor.shape[1:])\n            tensor_datasets[dataset_name].append(tensor)\n\n    logger.info(""Build train and validation dataloaders"")\n    train_dataset, valid_dataset = TensorDataset(*tensor_datasets[""train""]), TensorDataset(*tensor_datasets[""valid""])\n    train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset) if args.distributed else None\n    valid_sampler = torch.utils.data.distributed.DistributedSampler(valid_dataset) if args.distributed else None\n    train_loader = DataLoader(train_dataset, sampler=train_sampler, batch_size=args.train_batch_size, shuffle=(not args.distributed))\n    valid_loader = DataLoader(valid_dataset, sampler=valid_sampler, batch_size=args.valid_batch_size, shuffle=False)\n\n    logger.info(""Train dataset (Batch, Candidates, Seq length): {}"".format(train_dataset.tensors[0].shape))\n    logger.info(""Valid dataset (Batch, Candidates, Seq length): {}"".format(valid_dataset.tensors[0].shape))\n    return train_loader, valid_loader, train_sampler, valid_sampler\n\n\ndef train():\n    parser = ArgumentParser()\n    parser.add_argument(""--dataset_path"", type=str, default="""", help=""Path or url of the dataset. If empty download from S3."")\n    parser.add_argument(""--dataset_cache"", type=str, default=\'./dataset_cache\', help=""Path or url of the dataset cache"")\n    parser.add_argument(""--model_checkpoint"", type=str, default=""openai-gpt"", help=""Path, url or short name of the model"")\n    parser.add_argument(""--num_candidates"", type=int, default=2, help=""Number of candidates for training"")\n    parser.add_argument(""--max_history"", type=int, default=2, help=""Number of previous exchanges to keep in history"")\n    parser.add_argument(""--train_batch_size"", type=int, default=4, help=""Batch size for training"")\n    parser.add_argument(""--valid_batch_size"", type=int, default=4, help=""Batch size for validation"")\n    parser.add_argument(""--gradient_accumulation_steps"", type=int, default=8, help=""Accumulate gradients on several steps"")\n    parser.add_argument(""--lr"", type=float, default=6.25e-5, help=""Learning rate"")\n    parser.add_argument(""--lm_coef"", type=float, default=1.0, help=""LM loss coefficient"")\n    parser.add_argument(""--mc_coef"", type=float, default=1.0, help=""Multiple-choice loss coefficient"")\n    parser.add_argument(""--max_norm"", type=float, default=1.0, help=""Clipping gradient norm"")\n    parser.add_argument(""--n_epochs"", type=int, default=3, help=""Number of training epochs"")\n    parser.add_argument(""--personality_permutations"", type=int, default=1, help=""Number of permutations of personality sentences"")\n    parser.add_argument(""--eval_before_start"", action=\'store_true\', help=""If true start with a first evaluation before training"")\n    parser.add_argument(""--device"", type=str, default=""cuda"" if torch.cuda.is_available() else ""cpu"", help=""Device (cuda or cpu)"")\n    parser.add_argument(""--fp16"", type=str, default="""", help=""Set to O0, O1, O2 or O3 for fp16 training (see apex documentation)"")\n    parser.add_argument(""--local_rank"", type=int, default=-1, help=""Local rank for distributed training (-1: not distributed)"")\n    args = parser.parse_args()\n\n    # logging is set to INFO (resp. WARN) for main (resp. auxiliary) process. logger.info => log main process only, logger.warning => log all processes\n    logging.basicConfig(level=logging.INFO if args.local_rank in [-1, 0] else logging.WARN)\n    logger.warning(""Running process %d"", args.local_rank)  # This is a logger.warning: it will be printed by all distributed processes\n    logger.info(""Arguments: %s"", pformat(args))\n\n    # Initialize distributed training if needed\n    args.distributed = (args.local_rank != -1)\n    if args.distributed:\n        torch.cuda.set_device(args.local_rank)\n        args.device = torch.device(""cuda"", args.local_rank)\n        torch.distributed.init_process_group(backend=\'nccl\', init_method=\'env://\')\n\n    logger.info(""Prepare tokenizer, pretrained model and optimizer."")\n    tokenizer_class = GPT2Tokenizer if ""gpt2"" in args.model_checkpoint else OpenAIGPTTokenizer # cant use Autotokenizer because checkpoint could be a Path\n    tokenizer = tokenizer_class.from_pretrained(args.model_checkpoint)\n\n\n    model_class = GPT2DoubleHeadsModel if ""gpt2"" in args.model_checkpoint else OpenAIGPTDoubleHeadsModel\n    model = model_class.from_pretrained(args.model_checkpoint)\n    model.to(args.device)\n    # Add special tokens if they are not already added\n    add_special_tokens_(model, tokenizer)\n    optimizer = AdamW(model.parameters(), lr=args.lr, correct_bias=True)\n\n    # Prepare model for FP16 and distributed training if needed (order is important, distributed should be the last)\n    if args.fp16:\n        from apex import amp  # Apex is only required if we use fp16 training\n        model, optimizer = amp.initialize(model, optimizer, opt_level=args.fp16)\n    if args.distributed:\n        model = DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)\n\n    logger.info(""Prepare datasets"")\n    train_loader, val_loader, train_sampler, valid_sampler = get_data_loaders(args, tokenizer)\n\n    # Training function and trainer\n    def update(engine, batch):\n        model.train()\n        batch = tuple(input_tensor.to(args.device) for input_tensor in batch)\n        input_ids, mc_token_ids, lm_labels, mc_labels, token_type_ids = batch\n        (lm_loss), (mc_loss), *_ = model(\n            input_ids, token_type_ids=token_type_ids, mc_token_ids=mc_token_ids,\n            mc_labels=mc_labels, lm_labels=lm_labels\n        )\n        loss = (lm_loss * args.lm_coef + mc_loss * args.mc_coef) / args.gradient_accumulation_steps\n        if args.fp16:\n            with amp.scale_loss(loss, optimizer) as scaled_loss:\n                scaled_loss.backward()\n            torch.nn.utils.clip_grad_norm_(amp.master_params(optimizer), args.max_norm)\n        else:\n            loss.backward()\n            torch.nn.utils.clip_grad_norm_(model.parameters(), args.max_norm)\n        if engine.state.iteration % args.gradient_accumulation_steps == 0:\n            optimizer.step()\n            optimizer.zero_grad()\n        return loss.item()\n    trainer = Engine(update)\n\n    # Evaluation function and evaluator (evaluator output is the input of the metrics)\n    def inference(engine, batch):\n        model.eval()\n        with torch.no_grad():\n            batch = tuple(input_tensor.to(args.device) for input_tensor in batch)\n            input_ids, mc_token_ids, lm_labels, mc_labels, token_type_ids = batch\n            logger.info(tokenizer.decode(input_ids[0, -1, :].tolist()))\n            # if we dont send labels to model, it doesnt return losses\n            lm_logits, mc_logits, *_ = model(\n                input_ids, token_type_ids=token_type_ids, mc_token_ids=mc_token_ids,\n            )\n            lm_logits_flat_shifted = lm_logits[..., :-1, :].contiguous().view(-1, lm_logits.size(-1))\n            lm_labels_flat_shifted = lm_labels[..., 1:].contiguous().view(-1)\n            return (lm_logits_flat_shifted, mc_logits), (lm_labels_flat_shifted, mc_labels)\n    evaluator = Engine(inference)\n\n    # Attach evaluation to trainer: we evaluate when we start the training and at the end of each epoch\n    trainer.add_event_handler(Events.EPOCH_COMPLETED, lambda _: evaluator.run(val_loader))\n    if args.n_epochs < 1:\n        trainer.add_event_handler(Events.COMPLETED, lambda _: evaluator.run(val_loader))\n    if args.eval_before_start:\n        trainer.add_event_handler(Events.STARTED, lambda _: evaluator.run(val_loader))\n\n    # Make sure distributed data samplers split the dataset nicely between the distributed processes\n    if args.distributed:\n        trainer.add_event_handler(Events.EPOCH_STARTED, lambda engine: train_sampler.set_epoch(engine.state.epoch))\n        evaluator.add_event_handler(Events.EPOCH_STARTED, lambda engine: valid_sampler.set_epoch(engine.state.epoch))\n\n    # Linearly decrease the learning rate from lr to zero\n    scheduler = PiecewiseLinear(optimizer, ""lr"", [(0, args.lr), (args.n_epochs * len(train_loader), 0.0)])\n    trainer.add_event_handler(Events.ITERATION_STARTED, scheduler)\n\n    # Prepare metrics - note how we compute distributed metrics\n    RunningAverage(output_transform=lambda x: x).attach(trainer, ""loss"")\n    metrics = {""nll"": Loss(torch.nn.CrossEntropyLoss(ignore_index=-100), output_transform=lambda x: (x[0][0], x[1][0])),\n               ""accuracy"": Accuracy(output_transform=lambda x: (x[0][1], x[1][1]))}\n    metrics.update({""average_nll"": MetricsLambda(average_distributed_scalar, metrics[""nll""], args),\n                    ""average_accuracy"": MetricsLambda(average_distributed_scalar, metrics[""accuracy""], args)})\n    metrics[""average_ppl""] = MetricsLambda(math.exp, metrics[""average_nll""])\n    for name, metric in metrics.items():\n        metric.attach(evaluator, name)\n\n    # On the main process: add progress bar, tensorboard, checkpoints and save model, configuration and tokenizer before we start to train\n    if args.local_rank in [-1, 0]:\n        pbar = ProgressBar(persist=True)\n        pbar.attach(trainer, metric_names=[""loss""])\n        evaluator.add_event_handler(Events.COMPLETED, lambda _: pbar.log_message(""Validation: %s"" % pformat(evaluator.state.metrics)))\n\n        log_dir = make_logdir(args.model_checkpoint)\n        tb_logger = TensorboardLogger(log_dir)\n\n        tb_logger.attach(trainer, log_handler=OutputHandler(tag=""training"", metric_names=[""loss""]), event_name=Events.ITERATION_COMPLETED)\n        tb_logger.attach(trainer, log_handler=OptimizerParamsHandler(optimizer), event_name=Events.ITERATION_STARTED)\n        tb_logger.attach(evaluator, log_handler=OutputHandler(tag=""validation"", metric_names=list(metrics.keys()), another_engine=trainer), event_name=Events.EPOCH_COMPLETED)\n\n        checkpoint_handler = ModelCheckpoint(log_dir, \'checkpoint\', save_interval=1, n_saved=3)\n        trainer.add_event_handler(Events.EPOCH_COMPLETED, checkpoint_handler, {\'mymodel\': getattr(model, \'module\', model)})  # ""getattr"" takes care of distributed encapsulation\n\n        torch.save(args, log_dir + \'/model_training_args.bin\')\n        getattr(model, \'module\', model).config.to_json_file(os.path.join(log_dir, CONFIG_NAME))\n        tokenizer.save_pretrained(log_dir)\n\n    # Run the training\n    trainer.run(train_loader, max_epochs=args.n_epochs)\n\n    # On the main process: close tensorboard logger and rename the last checkpoint (for easy re-loading with OpenAIGPTModel.from_pretrained method)\n    if args.local_rank in [-1, 0] and args.n_epochs > 0:\n        os.rename(os.path.join(log_dir, checkpoint_handler._saved[-1][1]), os.path.join(log_dir, WEIGHTS_NAME))  # TODO: PR in ignite to have better access to saved file paths (cleaner)\n        tb_logger.close()\n\nif __name__ == ""__main__"":\n    train()\n'"
utils.py,2,"b'# Copyright (c) 2019-present, HuggingFace Inc.\n# All rights reserved. This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\nfrom datetime import datetime\nimport json\nimport logging\nimport os\nimport tarfile\nimport tempfile\nimport socket\n\nimport torch\n\nfrom transformers import cached_path\n\nPERSONACHAT_URL = ""https://s3.amazonaws.com/datasets.huggingface.co/personachat/personachat_self_original.json""\nHF_FINETUNED_MODEL = ""https://s3.amazonaws.com/models.huggingface.co/transfer-learning-chatbot/gpt_personachat_cache.tar.gz""\n\nlogger = logging.getLogger(__file__)\n\ndef download_pretrained_model():\n    """""" Download and extract finetuned model from S3 """"""\n    resolved_archive_file = cached_path(HF_FINETUNED_MODEL)\n    tempdir = tempfile.mkdtemp()\n    logger.info(""extracting archive file {} to temp dir {}"".format(resolved_archive_file, tempdir))\n    with tarfile.open(resolved_archive_file, \'r:gz\') as archive:\n        archive.extractall(tempdir)\n    return tempdir\n\n\ndef get_dataset(tokenizer, dataset_path, dataset_cache):\n    """""" Get tokenized PERSONACHAT dataset from S3 or cache.""""""\n    dataset_path = dataset_path or PERSONACHAT_URL\n    dataset_cache = dataset_cache + \'_\' + type(tokenizer).__name__  # To avoid using GPT cache for GPT-2 and vice-versa\n    if dataset_cache and os.path.isfile(dataset_cache):\n        logger.info(""Load tokenized dataset from cache at %s"", dataset_cache)\n        dataset = torch.load(dataset_cache)\n    else:\n        logger.info(""Download dataset from %s"", dataset_path)\n        personachat_file = cached_path(dataset_path)\n        with open(personachat_file, ""r"", encoding=""utf-8"") as f:\n            dataset = json.loads(f.read())\n\n        logger.info(""Tokenize and encode the dataset"")\n        def tokenize(obj):\n            if isinstance(obj, str):\n                return tokenizer.convert_tokens_to_ids(tokenizer.tokenize(obj))\n            if isinstance(obj, dict):\n                return dict((n, tokenize(o)) for n, o in obj.items())\n            return list(tokenize(o) for o in obj)\n        dataset = tokenize(dataset)\n        torch.save(dataset, dataset_cache)\n    return dataset\n\n\nclass AttrDict(dict):\n    def __init__(self, *args, **kwargs):\n        super(AttrDict, self).__init__(*args, **kwargs)\n        self.__dict__ = self\n\n\ndef make_logdir(model_name: str):\n    """"""Create unique path to save results and checkpoints, e.g. runs/Sep22_19-45-59_gpu-7_gpt2""""""\n    # Code copied from ignite repo\n    current_time = datetime.now().strftime(\'%b%d_%H-%M-%S\')\n    logdir = os.path.join(\n        \'runs\', current_time + \'_\' + socket.gethostname() + \'_\' + model_name)\n    return logdir\n'"
