file_path,api_count,code
gradcam.py,12,"b'import argparse\nimport cv2\nimport numpy as np\nimport torch\nfrom torch.autograd import Function\nfrom torchvision import models\n\nclass FeatureExtractor():\n    """""" Class for extracting activations and \n    registering gradients from targetted intermediate layers """"""\n\n    def __init__(self, model, target_layers):\n        self.model = model\n        self.target_layers = target_layers\n        self.gradients = []\n\n    def save_gradient(self, grad):\n        self.gradients.append(grad)\n\n    def __call__(self, x):\n        outputs = []\n        self.gradients = []\n        for name, module in self.model._modules.items():\n            x = module(x)\n            if name in self.target_layers:\n                x.register_hook(self.save_gradient)\n                outputs += [x]\n        return outputs, x\n\n\nclass ModelOutputs():\n    """""" Class for making a forward pass, and getting:\n    1. The network output.\n    2. Activations from intermeddiate targetted layers.\n    3. Gradients from intermeddiate targetted layers. """"""\n\n    def __init__(self, model, feature_module, target_layers):\n        self.model = model\n        self.feature_module = feature_module\n        self.feature_extractor = FeatureExtractor(self.feature_module, target_layers)\n\n    def get_gradients(self):\n        return self.feature_extractor.gradients\n\n    def __call__(self, x):\n        target_activations = []\n        for name, module in self.model._modules.items():\n            if module == self.feature_module:\n                target_activations, x = self.feature_extractor(x)\n            elif ""avgpool"" in name.lower():\n                x = module(x)\n                x = x.view(x.size(0),-1)\n            else:\n                x = module(x)\n        \n        return target_activations, x\n\n\ndef preprocess_image(img):\n    means = [0.485, 0.456, 0.406]\n    stds = [0.229, 0.224, 0.225]\n\n    preprocessed_img = img.copy()[:, :, ::-1]\n    for i in range(3):\n        preprocessed_img[:, :, i] = preprocessed_img[:, :, i] - means[i]\n        preprocessed_img[:, :, i] = preprocessed_img[:, :, i] / stds[i]\n    preprocessed_img = \\\n        np.ascontiguousarray(np.transpose(preprocessed_img, (2, 0, 1)))\n    preprocessed_img = torch.from_numpy(preprocessed_img)\n    preprocessed_img.unsqueeze_(0)\n    input = preprocessed_img.requires_grad_(True)\n    return input\n\n\ndef show_cam_on_image(img, mask):\n    heatmap = cv2.applyColorMap(np.uint8(255 * mask), cv2.COLORMAP_JET)\n    heatmap = np.float32(heatmap) / 255\n    cam = heatmap + np.float32(img)\n    cam = cam / np.max(cam)\n    cv2.imwrite(""cam.jpg"", np.uint8(255 * cam))\n\n\nclass GradCam:\n    def __init__(self, model, feature_module, target_layer_names, use_cuda):\n        self.model = model\n        self.feature_module = feature_module\n        self.model.eval()\n        self.cuda = use_cuda\n        if self.cuda:\n            self.model = model.cuda()\n\n        self.extractor = ModelOutputs(self.model, self.feature_module, target_layer_names)\n\n    def forward(self, input):\n        return self.model(input)\n\n    def __call__(self, input, index=None):\n        if self.cuda:\n            features, output = self.extractor(input.cuda())\n        else:\n            features, output = self.extractor(input)\n\n        if index == None:\n            index = np.argmax(output.cpu().data.numpy())\n\n        one_hot = np.zeros((1, output.size()[-1]), dtype=np.float32)\n        one_hot[0][index] = 1\n        one_hot = torch.from_numpy(one_hot).requires_grad_(True)\n        if self.cuda:\n            one_hot = torch.sum(one_hot.cuda() * output)\n        else:\n            one_hot = torch.sum(one_hot * output)\n\n        self.feature_module.zero_grad()\n        self.model.zero_grad()\n        one_hot.backward(retain_graph=True)\n\n        grads_val = self.extractor.get_gradients()[-1].cpu().data.numpy()\n\n        target = features[-1]\n        target = target.cpu().data.numpy()[0, :]\n\n        weights = np.mean(grads_val, axis=(2, 3))[0, :]\n        cam = np.zeros(target.shape[1:], dtype=np.float32)\n\n        for i, w in enumerate(weights):\n            cam += w * target[i, :, :]\n\n        cam = np.maximum(cam, 0)\n        cam = cv2.resize(cam, input.shape[2:])\n        cam = cam - np.min(cam)\n        cam = cam / np.max(cam)\n        return cam\n\n\nclass GuidedBackpropReLU(Function):\n\n    @staticmethod\n    def forward(self, input):\n        positive_mask = (input > 0).type_as(input)\n        output = torch.addcmul(torch.zeros(input.size()).type_as(input), input, positive_mask)\n        self.save_for_backward(input, output)\n        return output\n\n    @staticmethod\n    def backward(self, grad_output):\n        input, output = self.saved_tensors\n        grad_input = None\n\n        positive_mask_1 = (input > 0).type_as(grad_output)\n        positive_mask_2 = (grad_output > 0).type_as(grad_output)\n        grad_input = torch.addcmul(torch.zeros(input.size()).type_as(input),\n                                   torch.addcmul(torch.zeros(input.size()).type_as(input), grad_output,\n                                                 positive_mask_1), positive_mask_2)\n\n        return grad_input\n\n\nclass GuidedBackpropReLUModel:\n    def __init__(self, model, use_cuda):\n        self.model = model\n        self.model.eval()\n        self.cuda = use_cuda\n        if self.cuda:\n            self.model = model.cuda()\n\n        def recursive_relu_apply(module_top):\n            for idx, module in module_top._modules.items():\n                recursive_relu_apply(module)\n                if module.__class__.__name__ == \'ReLU\':\n                    module_top._modules[idx] = GuidedBackpropReLU.apply\n                \n        # replace ReLU with GuidedBackpropReLU\n        recursive_relu_apply(self.model)\n\n    def forward(self, input):\n        return self.model(input)\n\n    def __call__(self, input, index=None):\n        if self.cuda:\n            output = self.forward(input.cuda())\n        else:\n            output = self.forward(input)\n\n        if index == None:\n            index = np.argmax(output.cpu().data.numpy())\n\n        one_hot = np.zeros((1, output.size()[-1]), dtype=np.float32)\n        one_hot[0][index] = 1\n        one_hot = torch.from_numpy(one_hot).requires_grad_(True)\n        if self.cuda:\n            one_hot = torch.sum(one_hot.cuda() * output)\n        else:\n            one_hot = torch.sum(one_hot * output)\n\n        # self.model.features.zero_grad()\n        # self.model.classifier.zero_grad()\n        one_hot.backward(retain_graph=True)\n\n        output = input.grad.cpu().data.numpy()\n        output = output[0, :, :, :]\n\n        return output\n\n\ndef get_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\'--use-cuda\', action=\'store_true\', default=False,\n                        help=\'Use NVIDIA GPU acceleration\')\n    parser.add_argument(\'--image-path\', type=str, default=\'./examples/both.png\',\n                        help=\'Input image path\')\n    args = parser.parse_args()\n    args.use_cuda = args.use_cuda and torch.cuda.is_available()\n    if args.use_cuda:\n        print(""Using GPU for acceleration"")\n    else:\n        print(""Using CPU for computation"")\n\n    return args\n\ndef deprocess_image(img):\n    """""" see https://github.com/jacobgil/keras-grad-cam/blob/master/grad-cam.py#L65 """"""\n    img = img - np.mean(img)\n    img = img / (np.std(img) + 1e-5)\n    img = img * 0.1\n    img = img + 0.5\n    img = np.clip(img, 0, 1)\n    return np.uint8(img*255)\n\n\nif __name__ == \'__main__\':\n    """""" python grad_cam.py <path_to_image>\n    1. Loads an image with opencv.\n    2. Preprocesses it for VGG19 and converts to a pytorch variable.\n    3. Makes a forward pass to find the category index with the highest score,\n    and computes intermediate activations.\n    Makes the visualization. """"""\n\n    args = get_args()\n\n    # Can work with any model, but it assumes that the model has a\n    # feature method, and a classifier method,\n    # as in the VGG models in torchvision.\n    model = models.resnet50(pretrained=True)\n    grad_cam = GradCam(model=model, feature_module=model.layer4, \\\n                       target_layer_names=[""2""], use_cuda=args.use_cuda)\n\n    img = cv2.imread(args.image_path, 1)\n    img = np.float32(cv2.resize(img, (224, 224))) / 255\n    input = preprocess_image(img)\n\n    # If None, returns the map for the highest scoring category.\n    # Otherwise, targets the requested index.\n    target_index = None\n    mask = grad_cam(input, target_index)\n\n    show_cam_on_image(img, mask)\n\n    gb_model = GuidedBackpropReLUModel(model=model, use_cuda=args.use_cuda)\n    print(model._modules.items())\n    gb = gb_model(input, index=target_index)\n    gb = gb.transpose((1, 2, 0))\n    cam_mask = cv2.merge([mask, mask, mask])\n    cam_gb = deprocess_image(cam_mask*gb)\n    gb = deprocess_image(gb)\n\n    cv2.imwrite(\'gb.jpg\', gb)\n    cv2.imwrite(\'cam_gb.jpg\', cam_gb)'"
