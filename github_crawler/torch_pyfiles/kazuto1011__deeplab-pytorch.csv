file_path,api_count,code
convert.py,2,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2017-11-15\n\nfrom __future__ import absolute_import, division, print_function\n\nimport re\nimport traceback\nfrom collections import Counter, OrderedDict\n\nimport click\nimport numpy as np\nimport torch\nfrom addict import Dict\n\nfrom libs import caffe_pb2\nfrom libs.models import DeepLabV1_ResNet101, DeepLabV2_ResNet101_MSC\n\n\ndef parse_caffemodel(model_path):\n    caffemodel = caffe_pb2.NetParameter()\n    with open(model_path, ""rb"") as f:\n        caffemodel.MergeFromString(f.read())\n\n    # Check trainable layers\n    print(\n        *Counter(\n            [(layer.type, len(layer.blobs)) for layer in caffemodel.layer]\n        ).most_common(),\n        sep=""\\n"",\n    )\n\n    params = OrderedDict()\n    previous_layer_type = None\n    for layer in caffemodel.layer:\n        # Skip the shared branch\n        if ""res075"" in layer.name or ""res05"" in layer.name:\n            continue\n\n        print(\n            ""\\033[34m[Caffe]\\033[00m"",\n            ""{} ({}): {}"".format(layer.name, layer.type, len(layer.blobs)),\n        )\n\n        # Convolution or Dilated Convolution\n        if ""Convolution"" in layer.type:\n            params[layer.name] = {}\n            params[layer.name][""kernel_size""] = layer.convolution_param.kernel_size[0]\n            params[layer.name][""weight""] = list(layer.blobs[0].data)\n            if len(layer.blobs) == 2:\n                params[layer.name][""bias""] = list(layer.blobs[1].data)\n            if len(layer.convolution_param.stride) == 1:  # or []\n                params[layer.name][""stride""] = layer.convolution_param.stride[0]\n            else:\n                params[layer.name][""stride""] = 1\n            if len(layer.convolution_param.pad) == 1:  # or []\n                params[layer.name][""padding""] = layer.convolution_param.pad[0]\n            else:\n                params[layer.name][""padding""] = 0\n            if isinstance(layer.convolution_param.dilation, int):\n                params[layer.name][""dilation""] = layer.convolution_param.dilation\n            elif len(layer.convolution_param.dilation) == 1:\n                params[layer.name][""dilation""] = layer.convolution_param.dilation[0]\n            else:\n                params[layer.name][""dilation""] = 1\n        # Fully-connected\n        elif ""InnerProduct"" in layer.type:\n            params[layer.name] = {}\n            params[layer.name][""weight""] = list(layer.blobs[0].data)\n            if len(layer.blobs) == 2:\n                params[layer.name][""bias""] = list(layer.blobs[1].data)\n        # Batch Normalization\n        elif ""BatchNorm"" in layer.type:\n            params[layer.name] = {}\n            params[layer.name][""running_mean""] = (\n                np.array(layer.blobs[0].data) / layer.blobs[2].data[0]\n            )\n            params[layer.name][""running_var""] = (\n                np.array(layer.blobs[1].data) / layer.blobs[2].data[0]\n            )\n            params[layer.name][""eps""] = layer.batch_norm_param.eps\n            params[layer.name][\n                ""momentum""\n            ] = layer.batch_norm_param.moving_average_fraction\n            params[layer.name][""num_batches_tracked""] = np.array(0)\n            batch_norm_layer = layer.name\n        # Scale\n        elif ""Scale"" in layer.type:\n            assert previous_layer_type == ""BatchNorm""\n            params[batch_norm_layer][""weight""] = list(layer.blobs[0].data)\n            params[batch_norm_layer][""bias""] = list(layer.blobs[1].data)\n        elif ""Pooling"" in layer.type:\n            params[layer.name] = {}\n            params[layer.name][""kernel_size""] = layer.pooling_param.kernel_size\n            params[layer.name][""stride""] = layer.pooling_param.stride\n            params[layer.name][""padding""] = layer.pooling_param.pad\n\n        previous_layer_type = layer.type\n\n    return params\n\n\n# Hard coded translater\ndef translate_layer_name(source, target=""base""):\n    def layer_block_branch(source, target):\n        target += ""layer{}"".format(source[0][0])\n        if len(source[0][1:]) == 1:\n            block = {""a"": 1, ""b"": 2, ""c"": 3}.get(source[0][1:])\n        else:\n            block = int(source[0][2:]) + 1\n        target += "".block{}"".format(block)\n        branch = source[1][6:]\n        if branch == ""1"":\n            target += "".shortcut""\n        elif branch == ""2a"":\n            target += "".reduce""\n        elif branch == ""2b"":\n            target += "".conv3x3""\n        elif branch == ""2c"":\n            target += "".increase""\n        return target\n\n    source = source.split(""_"")\n\n    if ""pool"" in source[0]:\n        target += ""layer1.pool""\n    elif ""fc"" in source[0]:\n        if len(source) == 3:\n            stage = source[2]\n            target += ""aspp.{}"".format(stage)\n        else:\n            target += ""fc""\n    elif ""conv1"" in source[0]:\n        target += ""layer1.conv1.conv""\n    elif ""conv1"" in source[1]:\n        target += ""layer1.conv1.bn""\n    elif ""res"" in source[0]:\n        source[0] = source[0].replace(""res"", """")\n        target = layer_block_branch(source, target)\n        target += "".conv""\n    elif ""bn"" in source[0]:\n        source[0] = source[0].replace(""bn"", """")\n        target = layer_block_branch(source, target)\n        target += "".bn""\n\n    return target\n\n\n@click.command()\n@click.option(\n    ""-d"",\n    ""--dataset"",\n    type=click.Choice([""voc12"", ""coco""]),\n    required=True,\n    help=""Caffemodel"",\n)\ndef main(dataset):\n    """"""\n    Convert caffemodels to pytorch models\n    """"""\n\n    WHITELIST = [""kernel_size"", ""stride"", ""padding"", ""dilation"", ""eps"", ""momentum""]\n    CONFIG = Dict(\n        {\n            ""voc12"": {\n                # For loading the provided VOC 2012 caffemodel\n                ""PATH_CAFFE_MODEL"": ""data/models/voc12/deeplabv2_resnet101_msc/caffemodel/train2_iter_20000.caffemodel"",\n                ""PATH_PYTORCH_MODEL"": ""data/models/voc12/deeplabv2_resnet101_msc/caffemodel/deeplabv2_resnet101_msc-vocaug.pth"",\n                ""N_CLASSES"": 21,\n                ""MODEL"": ""DeepLabV2_ResNet101_MSC"",\n                ""HEAD"": ""base."",\n            },\n            ""coco"": {\n                # For loading the provided initial weights pre-trained on COCO\n                ""PATH_CAFFE_MODEL"": ""data/models/coco/deeplabv1_resnet101/caffemodel/init.caffemodel"",\n                ""PATH_PYTORCH_MODEL"": ""data/models/coco/deeplabv1_resnet101/caffemodel/deeplabv1_resnet101-coco.pth"",\n                ""N_CLASSES"": 91,\n                ""MODEL"": ""DeepLabV1_ResNet101"",\n                ""HEAD"": """",\n            },\n        }.get(dataset)\n    )\n\n    params = parse_caffemodel(CONFIG.PATH_CAFFE_MODEL)\n\n    model = eval(CONFIG.MODEL)(n_classes=CONFIG.N_CLASSES)\n    model.eval()\n    reference_state_dict = model.state_dict()\n\n    rel_tol = 1e-7\n\n    converted_state_dict = OrderedDict()\n    for caffe_layer, caffe_layer_dict in params.items():\n        for param_name, caffe_values in caffe_layer_dict.items():\n            pytorch_layer = translate_layer_name(caffe_layer, CONFIG.HEAD)\n            if pytorch_layer:\n                pytorch_param = pytorch_layer + ""."" + param_name\n\n                # Parameter check\n                if param_name in WHITELIST:\n                    pytorch_values = eval(""model."" + pytorch_param)\n                    if isinstance(pytorch_values, tuple):\n                        assert (\n                            pytorch_values[0] == caffe_values\n                        ), ""Inconsistent values: {} @{} (Caffe), {} @{} (PyTorch)"".format(\n                            caffe_values,\n                            caffe_layer + ""/"" + param_name,\n                            pytorch_values,\n                            pytorch_param,\n                        )\n                    else:\n                        assert (\n                            abs(pytorch_values - caffe_values) < rel_tol\n                        ), ""Inconsistent values: {} @{} (Caffe), {} @{} (PyTorch)"".format(\n                            caffe_values,\n                            caffe_layer + ""/"" + param_name,\n                            pytorch_values,\n                            pytorch_param,\n                        )\n                    print(\n                        ""\\033[34m[Passed!]\\033[00m"",\n                        (caffe_layer + ""/"" + param_name).ljust(35),\n                        ""->"",\n                        pytorch_param,\n                    )\n                    continue\n\n                # Weight conversion\n                if pytorch_param in reference_state_dict:\n                    caffe_values = torch.tensor(caffe_values)\n                    caffe_values = caffe_values.view_as(\n                        reference_state_dict[pytorch_param]\n                    )\n                    converted_state_dict[pytorch_param] = caffe_values\n                    print(\n                        ""\\033[32m[Copied!]\\033[00m"",\n                        (caffe_layer + ""/"" + param_name).ljust(35),\n                        ""->"",\n                        pytorch_param,\n                    )\n\n    print(""\\033[32mVerify the converted model\\033[00m"")\n    model.load_state_dict(converted_state_dict)\n\n    print(\'Saving to ""{}""\'.format(CONFIG.PATH_PYTORCH_MODEL))\n    torch.save(converted_state_dict, CONFIG.PATH_PYTORCH_MODEL)\n\n\nif __name__ == ""__main__"":\n    main()\n'"
demo.py,13,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author: Kazuto Nakashima\n# URL:    https://kazuto1011.github.io\n# Date:   07 January 2019\n\nfrom __future__ import absolute_import, division, print_function\n\nimport click\nimport cv2\nimport matplotlib\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport yaml\nfrom addict import Dict\n\nfrom libs.models import *\nfrom libs.utils import DenseCRF\n\n\ndef get_device(cuda):\n    cuda = cuda and torch.cuda.is_available()\n    device = torch.device(""cuda"" if cuda else ""cpu"")\n    if cuda:\n        current_device = torch.cuda.current_device()\n        print(""Device:"", torch.cuda.get_device_name(current_device))\n    else:\n        print(""Device: CPU"")\n    return device\n\n\ndef get_classtable(CONFIG):\n    with open(CONFIG.DATASET.LABELS) as f:\n        classes = {}\n        for label in f:\n            label = label.rstrip().split(""\\t"")\n            classes[int(label[0])] = label[1].split("","")[0]\n    return classes\n\n\ndef setup_postprocessor(CONFIG):\n    # CRF post-processor\n    postprocessor = DenseCRF(\n        iter_max=CONFIG.CRF.ITER_MAX,\n        pos_xy_std=CONFIG.CRF.POS_XY_STD,\n        pos_w=CONFIG.CRF.POS_W,\n        bi_xy_std=CONFIG.CRF.BI_XY_STD,\n        bi_rgb_std=CONFIG.CRF.BI_RGB_STD,\n        bi_w=CONFIG.CRF.BI_W,\n    )\n    return postprocessor\n\n\ndef preprocessing(image, device, CONFIG):\n    # Resize\n    scale = CONFIG.IMAGE.SIZE.TEST / max(image.shape[:2])\n    image = cv2.resize(image, dsize=None, fx=scale, fy=scale)\n    raw_image = image.astype(np.uint8)\n\n    # Subtract mean values\n    image = image.astype(np.float32)\n    image -= np.array(\n        [\n            float(CONFIG.IMAGE.MEAN.B),\n            float(CONFIG.IMAGE.MEAN.G),\n            float(CONFIG.IMAGE.MEAN.R),\n        ]\n    )\n\n    # Convert to torch.Tensor and add ""batch"" axis\n    image = torch.from_numpy(image.transpose(2, 0, 1)).float().unsqueeze(0)\n    image = image.to(device)\n\n    return image, raw_image\n\n\ndef inference(model, image, raw_image=None, postprocessor=None):\n    _, _, H, W = image.shape\n\n    # Image -> Probability map\n    logits = model(image)\n    logits = F.interpolate(logits, size=(H, W), mode=""bilinear"", align_corners=False)\n    probs = F.softmax(logits, dim=1)[0]\n    probs = probs.cpu().numpy()\n\n    # Refine the prob map with CRF\n    if postprocessor and raw_image is not None:\n        probs = postprocessor(raw_image, probs)\n\n    labelmap = np.argmax(probs, axis=0)\n\n    return labelmap\n\n\n@click.group()\n@click.pass_context\ndef main(ctx):\n    """"""\n    Demo with a trained model\n    """"""\n\n    print(""Mode:"", ctx.invoked_subcommand)\n\n\n@main.command()\n@click.option(\n    ""-c"",\n    ""--config-path"",\n    type=click.File(),\n    required=True,\n    help=""Dataset configuration file in YAML"",\n)\n@click.option(\n    ""-m"",\n    ""--model-path"",\n    type=click.Path(exists=True),\n    required=True,\n    help=""PyTorch model to be loaded"",\n)\n@click.option(\n    ""-i"",\n    ""--image-path"",\n    type=click.Path(exists=True),\n    required=True,\n    help=""Image to be processed"",\n)\n@click.option(\n    ""--cuda/--cpu"", default=True, help=""Enable CUDA if available [default: --cuda]""\n)\n@click.option(""--crf"", is_flag=True, show_default=True, help=""CRF post-processing"")\ndef single(config_path, model_path, image_path, cuda, crf):\n    """"""\n    Inference from a single image\n    """"""\n\n    # Setup\n    CONFIG = Dict(yaml.load(config_path))\n    device = get_device(cuda)\n    torch.set_grad_enabled(False)\n\n    classes = get_classtable(CONFIG)\n    postprocessor = setup_postprocessor(CONFIG) if crf else None\n\n    model = eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)\n    state_dict = torch.load(model_path, map_location=lambda storage, loc: storage)\n    model.load_state_dict(state_dict)\n    model.eval()\n    model.to(device)\n    print(""Model:"", CONFIG.MODEL.NAME)\n\n    # Inference\n    image = cv2.imread(image_path, cv2.IMREAD_COLOR)\n    image, raw_image = preprocessing(image, device, CONFIG)\n    labelmap = inference(model, image, raw_image, postprocessor)\n    labels = np.unique(labelmap)\n\n    # Show result for each class\n    rows = np.floor(np.sqrt(len(labels) + 1))\n    cols = np.ceil((len(labels) + 1) / rows)\n\n    plt.figure(figsize=(10, 10))\n    ax = plt.subplot(rows, cols, 1)\n    ax.set_title(""Input image"")\n    ax.imshow(raw_image[:, :, ::-1])\n    ax.axis(""off"")\n\n    for i, label in enumerate(labels):\n        mask = labelmap == label\n        ax = plt.subplot(rows, cols, i + 2)\n        ax.set_title(classes[label])\n        ax.imshow(raw_image[..., ::-1])\n        ax.imshow(mask.astype(np.float32), alpha=0.5)\n        ax.axis(""off"")\n\n    plt.tight_layout()\n    plt.show()\n\n\n@main.command()\n@click.option(\n    ""-c"",\n    ""--config-path"",\n    type=click.File(),\n    required=True,\n    help=""Dataset configuration file in YAML"",\n)\n@click.option(\n    ""-m"",\n    ""--model-path"",\n    type=click.Path(exists=True),\n    required=True,\n    help=""PyTorch model to be loaded"",\n)\n@click.option(\n    ""--cuda/--cpu"", default=True, help=""Enable CUDA if available [default: --cuda]""\n)\n@click.option(""--crf"", is_flag=True, show_default=True, help=""CRF post-processing"")\n@click.option(""--camera-id"", type=int, default=0, show_default=True, help=""Device ID"")\ndef live(config_path, model_path, cuda, crf, camera_id):\n    """"""\n    Inference from camera stream\n    """"""\n\n    # Setup\n    CONFIG = Dict(yaml.load(config_path))\n    device = get_device(cuda)\n    torch.set_grad_enabled(False)\n    torch.backends.cudnn.benchmark = True\n\n    classes = get_classtable(CONFIG)\n    postprocessor = setup_postprocessor(CONFIG) if crf else None\n\n    model = eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)\n    state_dict = torch.load(model_path, map_location=lambda storage, loc: storage)\n    model.load_state_dict(state_dict)\n    model.eval()\n    model.to(device)\n    print(""Model:"", CONFIG.MODEL.NAME)\n\n    # UVC camera stream\n    cap = cv2.VideoCapture(camera_id)\n    cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*""YUYV""))\n\n    def colorize(labelmap):\n        # Assign a unique color to each label\n        labelmap = labelmap.astype(np.float32) / CONFIG.DATASET.N_CLASSES\n        colormap = cm.jet_r(labelmap)[..., :-1] * 255.0\n        return np.uint8(colormap)\n\n    def mouse_event(event, x, y, flags, labelmap):\n        # Show a class name of a mouse-overed pixel\n        label = labelmap[y, x]\n        name = classes[label]\n        print(name)\n\n    window_name = ""{} + {}"".format(CONFIG.MODEL.NAME, CONFIG.DATASET.NAME)\n    cv2.namedWindow(window_name, cv2.WINDOW_AUTOSIZE)\n\n    while True:\n        _, frame = cap.read()\n        image, raw_image = preprocessing(frame, device, CONFIG)\n        labelmap = inference(model, image, raw_image, postprocessor)\n        colormap = colorize(labelmap)\n\n        # Register mouse callback function\n        cv2.setMouseCallback(window_name, mouse_event, labelmap)\n\n        # Overlay prediction\n        cv2.addWeighted(colormap, 0.5, raw_image, 0.5, 0.0, raw_image)\n\n        # Quit by pressing ""q"" key\n        cv2.imshow(window_name, raw_image)\n        if cv2.waitKey(10) == ord(""q""):\n            break\n\n\nif __name__ == ""__main__"":\n    main()\n'"
hubconf.py,2,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author: Kazuto Nakashima\n# URL:    https://kazuto1011.github.io\n# Date:   20 December 2018\n\nfrom __future__ import print_function\n\n\ndef deeplabv2_resnet101(pretrained=False, **kwargs):\n    """"""\n    DeepLab v2 model with ResNet-101 backbone\n    n_classes (int): the number of classes\n    """"""\n\n    if pretrained:\n        raise NotImplementedError(\n            ""Please download from ""\n            ""https://github.com/kazuto1011/deeplab-pytorch/tree/master#performance""\n        )\n\n    from libs.models.deeplabv2 import DeepLabV2\n    from libs.models.msc import MSC\n\n    base = DeepLabV2(n_blocks=[3, 4, 23, 3], atrous_rates=[6, 12, 18, 24], **kwargs)\n    model = MSC(base=base, scales=[0.5, 0.75])\n\n    return model\n\n\nif __name__ == ""__main__"":\n    import torch.hub\n\n    model = torch.hub.load(\n        ""kazuto1011/deeplab-pytorch"",\n        ""deeplabv2_resnet101"",\n        n_classes=182,\n        force_reload=True,\n    )\n\n    print(model)\n'"
main.py,21,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author: Kazuto Nakashima\n# URL:    https://kazuto1011.github.io\n# Date:   07 January 2019\n\nfrom __future__ import absolute_import, division, print_function\n\nimport json\nimport multiprocessing\nimport os\n\nimport click\nimport joblib\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport yaml\nfrom addict import Dict\nfrom PIL import Image\nfrom tensorboardX import SummaryWriter\nfrom torchnet.meter import MovingAverageValueMeter\nfrom tqdm import tqdm\n\nfrom libs.datasets import get_dataset\nfrom libs.models import *\nfrom libs.utils import DenseCRF, PolynomialLR, scores\n\n\ndef makedirs(dirs):\n    if not os.path.exists(dirs):\n        os.makedirs(dirs)\n\n\ndef get_device(cuda):\n    cuda = cuda and torch.cuda.is_available()\n    device = torch.device(""cuda"" if cuda else ""cpu"")\n    if cuda:\n        print(""Device:"")\n        for i in range(torch.cuda.device_count()):\n            print(""    {}:"".format(i), torch.cuda.get_device_name(i))\n    else:\n        print(""Device: CPU"")\n    return device\n\n\ndef get_params(model, key):\n    # For Dilated FCN\n    if key == ""1x"":\n        for m in model.named_modules():\n            if ""layer"" in m[0]:\n                if isinstance(m[1], nn.Conv2d):\n                    for p in m[1].parameters():\n                        yield p\n    # For conv weight in the ASPP module\n    if key == ""10x"":\n        for m in model.named_modules():\n            if ""aspp"" in m[0]:\n                if isinstance(m[1], nn.Conv2d):\n                    yield m[1].weight\n    # For conv bias in the ASPP module\n    if key == ""20x"":\n        for m in model.named_modules():\n            if ""aspp"" in m[0]:\n                if isinstance(m[1], nn.Conv2d):\n                    yield m[1].bias\n\n\ndef resize_labels(labels, size):\n    """"""\n    Downsample labels for 0.5x and 0.75x logits by nearest interpolation.\n    Other nearest methods result in misaligned labels.\n    -> F.interpolate(labels, shape, mode=\'nearest\')\n    -> cv2.resize(labels, shape, interpolation=cv2.INTER_NEAREST)\n    """"""\n    new_labels = []\n    for label in labels:\n        label = label.float().numpy()\n        label = Image.fromarray(label).resize(size, resample=Image.NEAREST)\n        new_labels.append(np.asarray(label))\n    new_labels = torch.LongTensor(new_labels)\n    return new_labels\n\n\n@click.group()\n@click.pass_context\ndef main(ctx):\n    """"""\n    Training and evaluation\n    """"""\n    print(""Mode:"", ctx.invoked_subcommand)\n\n\n@main.command()\n@click.option(\n    ""-c"",\n    ""--config-path"",\n    type=click.File(),\n    required=True,\n    help=""Dataset configuration file in YAML"",\n)\n@click.option(\n    ""--cuda/--cpu"", default=True, help=""Enable CUDA if available [default: --cuda]""\n)\ndef train(config_path, cuda):\n    """"""\n    Training DeepLab by v2 protocol\n    """"""\n\n    # Configuration\n    CONFIG = Dict(yaml.load(config_path))\n    device = get_device(cuda)\n    torch.backends.cudnn.benchmark = True\n\n    # Dataset\n    dataset = get_dataset(CONFIG.DATASET.NAME)(\n        root=CONFIG.DATASET.ROOT,\n        split=CONFIG.DATASET.SPLIT.TRAIN,\n        ignore_label=CONFIG.DATASET.IGNORE_LABEL,\n        mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R),\n        augment=True,\n        base_size=CONFIG.IMAGE.SIZE.BASE,\n        crop_size=CONFIG.IMAGE.SIZE.TRAIN,\n        scales=CONFIG.DATASET.SCALES,\n        flip=True,\n    )\n    print(dataset)\n\n    # DataLoader\n    loader = torch.utils.data.DataLoader(\n        dataset=dataset,\n        batch_size=CONFIG.SOLVER.BATCH_SIZE.TRAIN,\n        num_workers=CONFIG.DATALOADER.NUM_WORKERS,\n        shuffle=True,\n    )\n    loader_iter = iter(loader)\n\n    # Model check\n    print(""Model:"", CONFIG.MODEL.NAME)\n    assert (\n        CONFIG.MODEL.NAME == ""DeepLabV2_ResNet101_MSC""\n    ), \'Currently support only ""DeepLabV2_ResNet101_MSC""\'\n\n    # Model setup\n    model = eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)\n    state_dict = torch.load(CONFIG.MODEL.INIT_MODEL)\n    print(""    Init:"", CONFIG.MODEL.INIT_MODEL)\n    for m in model.base.state_dict().keys():\n        if m not in state_dict.keys():\n            print(""    Skip init:"", m)\n    model.base.load_state_dict(state_dict, strict=False)  # to skip ASPP\n    model = nn.DataParallel(model)\n    model.to(device)\n\n    # Loss definition\n    criterion = nn.CrossEntropyLoss(ignore_index=CONFIG.DATASET.IGNORE_LABEL)\n    criterion.to(device)\n\n    # Optimizer\n    optimizer = torch.optim.SGD(\n        # cf lr_mult and decay_mult in train.prototxt\n        params=[\n            {\n                ""params"": get_params(model.module, key=""1x""),\n                ""lr"": CONFIG.SOLVER.LR,\n                ""weight_decay"": CONFIG.SOLVER.WEIGHT_DECAY,\n            },\n            {\n                ""params"": get_params(model.module, key=""10x""),\n                ""lr"": 10 * CONFIG.SOLVER.LR,\n                ""weight_decay"": CONFIG.SOLVER.WEIGHT_DECAY,\n            },\n            {\n                ""params"": get_params(model.module, key=""20x""),\n                ""lr"": 20 * CONFIG.SOLVER.LR,\n                ""weight_decay"": 0.0,\n            },\n        ],\n        momentum=CONFIG.SOLVER.MOMENTUM,\n    )\n\n    # Learning rate scheduler\n    scheduler = PolynomialLR(\n        optimizer=optimizer,\n        step_size=CONFIG.SOLVER.LR_DECAY,\n        iter_max=CONFIG.SOLVER.ITER_MAX,\n        power=CONFIG.SOLVER.POLY_POWER,\n    )\n\n    # Setup loss logger\n    writer = SummaryWriter(os.path.join(CONFIG.EXP.OUTPUT_DIR, ""logs"", CONFIG.EXP.ID))\n    average_loss = MovingAverageValueMeter(CONFIG.SOLVER.AVERAGE_LOSS)\n\n    # Path to save models\n    checkpoint_dir = os.path.join(\n        CONFIG.EXP.OUTPUT_DIR,\n        ""models"",\n        CONFIG.EXP.ID,\n        CONFIG.MODEL.NAME.lower(),\n        CONFIG.DATASET.SPLIT.TRAIN,\n    )\n    makedirs(checkpoint_dir)\n    print(""Checkpoint dst:"", checkpoint_dir)\n\n    # Freeze the batch norm pre-trained on COCO\n    model.train()\n    model.module.base.freeze_bn()\n\n    for iteration in tqdm(\n        range(1, CONFIG.SOLVER.ITER_MAX + 1),\n        total=CONFIG.SOLVER.ITER_MAX,\n        dynamic_ncols=True,\n    ):\n\n        # Clear gradients (ready to accumulate)\n        optimizer.zero_grad()\n\n        loss = 0\n        for _ in range(CONFIG.SOLVER.ITER_SIZE):\n            try:\n                _, images, labels = next(loader_iter)\n            except:\n                loader_iter = iter(loader)\n                _, images, labels = next(loader_iter)\n\n            # Propagate forward\n            logits = model(images.to(device))\n\n            # Loss\n            iter_loss = 0\n            for logit in logits:\n                # Resize labels for {100%, 75%, 50%, Max} logits\n                _, _, H, W = logit.shape\n                labels_ = resize_labels(labels, size=(H, W))\n                iter_loss += criterion(logit, labels_.to(device))\n\n            # Propagate backward (just compute gradients wrt the loss)\n            iter_loss /= CONFIG.SOLVER.ITER_SIZE\n            iter_loss.backward()\n\n            loss += float(iter_loss)\n\n        average_loss.add(loss)\n\n        # Update weights with accumulated gradients\n        optimizer.step()\n\n        # Update learning rate\n        scheduler.step(epoch=iteration)\n\n        # TensorBoard\n        if iteration % CONFIG.SOLVER.ITER_TB == 0:\n            writer.add_scalar(""loss/train"", average_loss.value()[0], iteration)\n            for i, o in enumerate(optimizer.param_groups):\n                writer.add_scalar(""lr/group_{}"".format(i), o[""lr""], iteration)\n            for i in range(torch.cuda.device_count()):\n                writer.add_scalar(\n                    ""gpu/device_{}/memory_cached"".format(i),\n                    torch.cuda.memory_cached(i) / 1024 ** 3,\n                    iteration,\n                )\n\n            if False:\n                for name, param in model.module.base.named_parameters():\n                    name = name.replace(""."", ""/"")\n                    # Weight/gradient distribution\n                    writer.add_histogram(name, param, iteration, bins=""auto"")\n                    if param.requires_grad:\n                        writer.add_histogram(\n                            name + ""/grad"", param.grad, iteration, bins=""auto""\n                        )\n\n        # Save a model\n        if iteration % CONFIG.SOLVER.ITER_SAVE == 0:\n            torch.save(\n                model.module.state_dict(),\n                os.path.join(checkpoint_dir, ""checkpoint_{}.pth"".format(iteration)),\n            )\n\n    torch.save(\n        model.module.state_dict(), os.path.join(checkpoint_dir, ""checkpoint_final.pth"")\n    )\n\n\n@main.command()\n@click.option(\n    ""-c"",\n    ""--config-path"",\n    type=click.File(),\n    required=True,\n    help=""Dataset configuration file in YAML"",\n)\n@click.option(\n    ""-m"",\n    ""--model-path"",\n    type=click.Path(exists=True),\n    required=True,\n    help=""PyTorch model to be loaded"",\n)\n@click.option(\n    ""--cuda/--cpu"", default=True, help=""Enable CUDA if available [default: --cuda]""\n)\ndef test(config_path, model_path, cuda):\n    """"""\n    Evaluation on validation set\n    """"""\n\n    # Configuration\n    CONFIG = Dict(yaml.load(config_path))\n    device = get_device(cuda)\n    torch.set_grad_enabled(False)\n\n    # Dataset\n    dataset = get_dataset(CONFIG.DATASET.NAME)(\n        root=CONFIG.DATASET.ROOT,\n        split=CONFIG.DATASET.SPLIT.VAL,\n        ignore_label=CONFIG.DATASET.IGNORE_LABEL,\n        mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R),\n        augment=False,\n    )\n    print(dataset)\n\n    # DataLoader\n    loader = torch.utils.data.DataLoader(\n        dataset=dataset,\n        batch_size=CONFIG.SOLVER.BATCH_SIZE.TEST,\n        num_workers=CONFIG.DATALOADER.NUM_WORKERS,\n        shuffle=False,\n    )\n\n    # Model\n    model = eval(CONFIG.MODEL.NAME)(n_classes=CONFIG.DATASET.N_CLASSES)\n    state_dict = torch.load(model_path, map_location=lambda storage, loc: storage)\n    model.load_state_dict(state_dict)\n    model = nn.DataParallel(model)\n    model.eval()\n    model.to(device)\n\n    # Path to save logits\n    logit_dir = os.path.join(\n        CONFIG.EXP.OUTPUT_DIR,\n        ""features"",\n        CONFIG.EXP.ID,\n        CONFIG.MODEL.NAME.lower(),\n        CONFIG.DATASET.SPLIT.VAL,\n        ""logit"",\n    )\n    makedirs(logit_dir)\n    print(""Logit dst:"", logit_dir)\n\n    # Path to save scores\n    save_dir = os.path.join(\n        CONFIG.EXP.OUTPUT_DIR,\n        ""scores"",\n        CONFIG.EXP.ID,\n        CONFIG.MODEL.NAME.lower(),\n        CONFIG.DATASET.SPLIT.VAL,\n    )\n    makedirs(save_dir)\n    save_path = os.path.join(save_dir, ""scores.json"")\n    print(""Score dst:"", save_path)\n\n    preds, gts = [], []\n    for image_ids, images, gt_labels in tqdm(\n        loader, total=len(loader), dynamic_ncols=True\n    ):\n        # Image\n        images = images.to(device)\n\n        # Forward propagation\n        logits = model(images)\n\n        # Save on disk for CRF post-processing\n        for image_id, logit in zip(image_ids, logits):\n            filename = os.path.join(logit_dir, image_id + "".npy"")\n            np.save(filename, logit.cpu().numpy())\n\n        # Pixel-wise labeling\n        _, H, W = gt_labels.shape\n        logits = F.interpolate(\n            logits, size=(H, W), mode=""bilinear"", align_corners=False\n        )\n        probs = F.softmax(logits, dim=1)\n        labels = torch.argmax(probs, dim=1)\n\n        preds += list(labels.cpu().numpy())\n        gts += list(gt_labels.numpy())\n\n    # Pixel Accuracy, Mean Accuracy, Class IoU, Mean IoU, Freq Weighted IoU\n    score = scores(gts, preds, n_class=CONFIG.DATASET.N_CLASSES)\n\n    with open(save_path, ""w"") as f:\n        json.dump(score, f, indent=4, sort_keys=True)\n\n\n@main.command()\n@click.option(\n    ""-c"",\n    ""--config-path"",\n    type=click.File(),\n    required=True,\n    help=""Dataset configuration file in YAML"",\n)\n@click.option(\n    ""-j"",\n    ""--n-jobs"",\n    type=int,\n    default=multiprocessing.cpu_count(),\n    show_default=True,\n    help=""Number of parallel jobs"",\n)\ndef crf(config_path, n_jobs):\n    """"""\n    CRF post-processing on pre-computed logits\n    """"""\n\n    # Configuration\n    CONFIG = Dict(yaml.load(config_path))\n    torch.set_grad_enabled(False)\n    print(""# jobs:"", n_jobs)\n\n    # Dataset\n    dataset = get_dataset(CONFIG.DATASET.NAME)(\n        root=CONFIG.DATASET.ROOT,\n        split=CONFIG.DATASET.SPLIT.VAL,\n        ignore_label=CONFIG.DATASET.IGNORE_LABEL,\n        mean_bgr=(CONFIG.IMAGE.MEAN.B, CONFIG.IMAGE.MEAN.G, CONFIG.IMAGE.MEAN.R),\n        augment=False,\n    )\n    print(dataset)\n\n    # CRF post-processor\n    postprocessor = DenseCRF(\n        iter_max=CONFIG.CRF.ITER_MAX,\n        pos_xy_std=CONFIG.CRF.POS_XY_STD,\n        pos_w=CONFIG.CRF.POS_W,\n        bi_xy_std=CONFIG.CRF.BI_XY_STD,\n        bi_rgb_std=CONFIG.CRF.BI_RGB_STD,\n        bi_w=CONFIG.CRF.BI_W,\n    )\n\n    # Path to logit files\n    logit_dir = os.path.join(\n        CONFIG.EXP.OUTPUT_DIR,\n        ""features"",\n        CONFIG.EXP.ID,\n        CONFIG.MODEL.NAME.lower(),\n        CONFIG.DATASET.SPLIT.VAL,\n        ""logit"",\n    )\n    print(""Logit src:"", logit_dir)\n    if not os.path.isdir(logit_dir):\n        print(""Logit not found, run first: python main.py test [OPTIONS]"")\n        quit()\n\n    # Path to save scores\n    save_dir = os.path.join(\n        CONFIG.EXP.OUTPUT_DIR,\n        ""scores"",\n        CONFIG.EXP.ID,\n        CONFIG.MODEL.NAME.lower(),\n        CONFIG.DATASET.SPLIT.VAL,\n    )\n    makedirs(save_dir)\n    save_path = os.path.join(save_dir, ""scores_crf.json"")\n    print(""Score dst:"", save_path)\n\n    # Process per sample\n    def process(i):\n        image_id, image, gt_label = dataset.__getitem__(i)\n\n        filename = os.path.join(logit_dir, image_id + "".npy"")\n        logit = np.load(filename)\n\n        _, H, W = image.shape\n        logit = torch.FloatTensor(logit)[None, ...]\n        logit = F.interpolate(logit, size=(H, W), mode=""bilinear"", align_corners=False)\n        prob = F.softmax(logit, dim=1)[0].numpy()\n\n        image = image.astype(np.uint8).transpose(1, 2, 0)\n        prob = postprocessor(image, prob)\n        label = np.argmax(prob, axis=0)\n\n        return label, gt_label\n\n    # CRF in multi-process\n    results = joblib.Parallel(n_jobs=n_jobs, verbose=10, pre_dispatch=""all"")(\n        [joblib.delayed(process)(i) for i in range(len(dataset))]\n    )\n\n    preds, gts = zip(*results)\n\n    # Pixel Accuracy, Mean Accuracy, Class IoU, Mean IoU, Freq Weighted IoU\n    score = scores(gts, preds, n_class=CONFIG.DATASET.N_CLASSES)\n\n    with open(save_path, ""w"") as f:\n        json.dump(score, f, indent=4, sort_keys=True)\n\n\nif __name__ == ""__main__"":\n    main()\n'"
libs/__init__.py,0,b''
libs/caffe_pb2.py,0,"b'# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: caffe.proto\n\nimport sys\n\n_b = sys.version_info[0] < 3 and (lambda x: x) or (lambda x: x.encode(""latin1""))\nfrom google.protobuf.internal import enum_type_wrapper\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf import descriptor_pb2\n\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n    name=""caffe.proto"",\n    package=""caffe"",\n    serialized_pb=_b(\n        \'\\n\\x0b\\x63\\x61\\x66\\x66\\x65.proto\\x12\\x05\\x63\\x61\\x66\\x66\\x65""\\x1c\\n\\tBlobShape\\x12\\x0f\\n\\x03\\x64im\\x18\\x01 \\x03(\\x03\\x42\\x02\\x10\\x01""\\xcc\\x01\\n\\tBlobProto\\x12\\x1f\\n\\x05shape\\x18\\x07 \\x01(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x10\\n\\x04\\x64\\x61ta\\x18\\x05 \\x03(\\x02\\x42\\x02\\x10\\x01\\x12\\x10\\n\\x04\\x64iff\\x18\\x06 \\x03(\\x02\\x42\\x02\\x10\\x01\\x12\\x17\\n\\x0b\\x64ouble_data\\x18\\x08 \\x03(\\x01\\x42\\x02\\x10\\x01\\x12\\x17\\n\\x0b\\x64ouble_diff\\x18\\t \\x03(\\x01\\x42\\x02\\x10\\x01\\x12\\x0e\\n\\x03num\\x18\\x01 \\x01(\\x05:\\x01\\x30\\x12\\x13\\n\\x08\\x63hannels\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x11\\n\\x06height\\x18\\x03 \\x01(\\x05:\\x01\\x30\\x12\\x10\\n\\x05width\\x18\\x04 \\x01(\\x05:\\x01\\x30""2\\n\\x0f\\x42lobProtoVector\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x01 \\x03(\\x0b\\x32\\x10.caffe.BlobProto""\\x81\\x01\\n\\x05\\x44\\x61tum\\x12\\x10\\n\\x08\\x63hannels\\x18\\x01 \\x01(\\x05\\x12\\x0e\\n\\x06height\\x18\\x02 \\x01(\\x05\\x12\\r\\n\\x05width\\x18\\x03 \\x01(\\x05\\x12\\x0c\\n\\x04\\x64\\x61ta\\x18\\x04 \\x01(\\x0c\\x12\\r\\n\\x05label\\x18\\x05 \\x01(\\x05\\x12\\x12\\n\\nfloat_data\\x18\\x06 \\x03(\\x02\\x12\\x16\\n\\x07\\x65ncoded\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse""\\x8a\\x02\\n\\x0f\\x46illerParameter\\x12\\x16\\n\\x04type\\x18\\x01 \\x01(\\t:\\x08\\x63onstant\\x12\\x10\\n\\x05value\\x18\\x02 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03min\\x18\\x03 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03max\\x18\\x04 \\x01(\\x02:\\x01\\x31\\x12\\x0f\\n\\x04mean\\x18\\x05 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03std\\x18\\x06 \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x06sparse\\x18\\x07 \\x01(\\x05:\\x02-1\\x12\\x42\\n\\rvariance_norm\\x18\\x08 \\x01(\\x0e\\x32#.caffe.FillerParameter.VarianceNorm:\\x06\\x46\\x41N_IN""4\\n\\x0cVarianceNorm\\x12\\n\\n\\x06\\x46\\x41N_IN\\x10\\x00\\x12\\x0b\\n\\x07\\x46\\x41N_OUT\\x10\\x01\\x12\\x0b\\n\\x07\\x41VERAGE\\x10\\x02""\\x8e\\x02\\n\\x0cNetParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05input\\x18\\x03 \\x03(\\t\\x12%\\n\\x0binput_shape\\x18\\x08 \\x03(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x11\\n\\tinput_dim\\x18\\x04 \\x03(\\x05\\x12\\x1d\\n\\x0e\\x66orce_backward\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1e\\n\\x05state\\x18\\x06 \\x01(\\x0b\\x32\\x0f.caffe.NetState\\x12\\x19\\n\\ndebug_info\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\x12$\\n\\x05layer\\x18\\x64 \\x03(\\x0b\\x32\\x15.caffe.LayerParameter\\x12\\\'\\n\\x06layers\\x18\\x02 \\x03(\\x0b\\x32\\x17.caffe.V1LayerParameter""\\x9c\\n\\n\\x0fSolverParameter\\x12\\x0b\\n\\x03net\\x18\\x18 \\x01(\\t\\x12&\\n\\tnet_param\\x18\\x19 \\x01(\\x0b\\x32\\x13.caffe.NetParameter\\x12\\x11\\n\\ttrain_net\\x18\\x01 \\x01(\\t\\x12\\x10\\n\\x08test_net\\x18\\x02 \\x03(\\t\\x12,\\n\\x0ftrain_net_param\\x18\\x15 \\x01(\\x0b\\x32\\x13.caffe.NetParameter\\x12+\\n\\x0etest_net_param\\x18\\x16 \\x03(\\x0b\\x32\\x13.caffe.NetParameter\\x12$\\n\\x0btrain_state\\x18\\x1a \\x01(\\x0b\\x32\\x0f.caffe.NetState\\x12#\\n\\ntest_state\\x18\\x1b \\x03(\\x0b\\x32\\x0f.caffe.NetState\\x12\\x11\\n\\ttest_iter\\x18\\x03 \\x03(\\x05\\x12\\x18\\n\\rtest_interval\\x18\\x04 \\x01(\\x05:\\x01\\x30\\x12 \\n\\x11test_compute_loss\\x18\\x13 \\x01(\\x08:\\x05\\x66\\x61lse\\x12!\\n\\x13test_initialization\\x18  \\x01(\\x08:\\x04true\\x12\\x0f\\n\\x07\\x62\\x61se_lr\\x18\\x05 \\x01(\\x02\\x12\\x0f\\n\\x07\\x64isplay\\x18\\x06 \\x01(\\x05\\x12\\x17\\n\\x0c\\x61verage_loss\\x18! \\x01(\\x05:\\x01\\x31\\x12\\x10\\n\\x08max_iter\\x18\\x07 \\x01(\\x05\\x12\\x14\\n\\titer_size\\x18$ \\x01(\\x05:\\x01\\x31\\x12\\x11\\n\\tlr_policy\\x18\\x08 \\x01(\\t\\x12\\r\\n\\x05gamma\\x18\\t \\x01(\\x02\\x12\\r\\n\\x05power\\x18\\n \\x01(\\x02\\x12\\x10\\n\\x08momentum\\x18\\x0b \\x01(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x0c \\x01(\\x02\\x12\\x1f\\n\\x13regularization_type\\x18\\x1d \\x01(\\t:\\x02L2\\x12\\x10\\n\\x08stepsize\\x18\\r \\x01(\\x05\\x12\\x11\\n\\tstepvalue\\x18"" \\x03(\\x05\\x12\\x1a\\n\\x0e\\x63lip_gradients\\x18# \\x01(\\x02:\\x02-1\\x12\\x13\\n\\x08snapshot\\x18\\x0e \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0fsnapshot_prefix\\x18\\x0f \\x01(\\t\\x12\\x1c\\n\\rsnapshot_diff\\x18\\x10 \\x01(\\x08:\\x05\\x66\\x61lse\\x12K\\n\\x0fsnapshot_format\\x18% \\x01(\\x0e\\x32%.caffe.SolverParameter.SnapshotFormat:\\x0b\\x42INARYPROTO\\x12;\\n\\x0bsolver_mode\\x18\\x11 \\x01(\\x0e\\x32!.caffe.SolverParameter.SolverMode:\\x03GPU\\x12\\x14\\n\\tdevice_id\\x18\\x12 \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0brandom_seed\\x18\\x14 \\x01(\\x03:\\x02-1\\x12\\x11\\n\\x04type\\x18( \\x01(\\t:\\x03SGD\\x12\\x14\\n\\x05\\x64\\x65lta\\x18\\x1f \\x01(\\x02:\\x05\\x31\\x65-08\\x12\\x18\\n\\tmomentum2\\x18\\\' \\x01(\\x02:\\x05\\x30.999\\x12\\x11\\n\\trms_decay\\x18& \\x01(\\x02\\x12\\x19\\n\\ndebug_info\\x18\\x17 \\x01(\\x08:\\x05\\x66\\x61lse\\x12""\\n\\x14snapshot_after_train\\x18\\x1c \\x01(\\x08:\\x04true\\x12;\\n\\x0bsolver_type\\x18\\x1e \\x01(\\x0e\\x32!.caffe.SolverParameter.SolverType:\\x03SGD""+\\n\\x0eSnapshotFormat\\x12\\x08\\n\\x04HDF5\\x10\\x00\\x12\\x0f\\n\\x0b\\x42INARYPROTO\\x10\\x01""\\x1e\\n\\nSolverMode\\x12\\x07\\n\\x03\\x43PU\\x10\\x00\\x12\\x07\\n\\x03GPU\\x10\\x01""U\\n\\nSolverType\\x12\\x07\\n\\x03SGD\\x10\\x00\\x12\\x0c\\n\\x08NESTEROV\\x10\\x01\\x12\\x0b\\n\\x07\\x41\\x44\\x41GRAD\\x10\\x02\\x12\\x0b\\n\\x07RMSPROP\\x10\\x03\\x12\\x0c\\n\\x08\\x41\\x44\\x41\\x44\\x45LTA\\x10\\x04\\x12\\x08\\n\\x04\\x41\\x44\\x41M\\x10\\x05""l\\n\\x0bSolverState\\x12\\x0c\\n\\x04iter\\x18\\x01 \\x01(\\x05\\x12\\x13\\n\\x0blearned_net\\x18\\x02 \\x01(\\t\\x12!\\n\\x07history\\x18\\x03 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x17\\n\\x0c\\x63urrent_step\\x18\\x04 \\x01(\\x05:\\x01\\x30""N\\n\\x08NetState\\x12!\\n\\x05phase\\x18\\x01 \\x01(\\x0e\\x32\\x0c.caffe.Phase:\\x04TEST\\x12\\x10\\n\\x05level\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\r\\n\\x05stage\\x18\\x03 \\x03(\\t""s\\n\\x0cNetStateRule\\x12\\x1b\\n\\x05phase\\x18\\x01 \\x01(\\x0e\\x32\\x0c.caffe.Phase\\x12\\x11\\n\\tmin_level\\x18\\x02 \\x01(\\x05\\x12\\x11\\n\\tmax_level\\x18\\x03 \\x01(\\x05\\x12\\r\\n\\x05stage\\x18\\x04 \\x03(\\t\\x12\\x11\\n\\tnot_stage\\x18\\x05 \\x03(\\t""\\xa3\\x01\\n\\tParamSpec\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x31\\n\\nshare_mode\\x18\\x02 \\x01(\\x0e\\x32\\x1d.caffe.ParamSpec.DimCheckMode\\x12\\x12\\n\\x07lr_mult\\x18\\x03 \\x01(\\x02:\\x01\\x31\\x12\\x15\\n\\ndecay_mult\\x18\\x04 \\x01(\\x02:\\x01\\x31""*\\n\\x0c\\x44imCheckMode\\x12\\n\\n\\x06STRICT\\x10\\x00\\x12\\x0e\\n\\nPERMISSIVE\\x10\\x01""\\xc4\\x16\\n\\x0eLayerParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04type\\x18\\x02 \\x01(\\t\\x12\\x0e\\n\\x06\\x62ottom\\x18\\x03 \\x03(\\t\\x12\\x0b\\n\\x03top\\x18\\x04 \\x03(\\t\\x12\\x1b\\n\\x05phase\\x18\\n \\x01(\\x0e\\x32\\x0c.caffe.Phase\\x12\\x13\\n\\x0bloss_weight\\x18\\x05 \\x03(\\x02\\x12\\x1f\\n\\x05param\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.ParamSpec\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x07 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x16\\n\\x0epropagate_down\\x18\\x0b \\x03(\\x08\\x12$\\n\\x07include\\x18\\x08 \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12$\\n\\x07\\x65xclude\\x18\\t \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12\\x37\\n\\x0ftransform_param\\x18\\x64 \\x01(\\x0b\\x32\\x1e.caffe.TransformationParameter\\x12(\\n\\nloss_param\\x18\\x65 \\x01(\\x0b\\x32\\x14.caffe.LossParameter\\x12\\x30\\n\\x0e\\x61\\x63\\x63uracy_param\\x18\\x66 \\x01(\\x0b\\x32\\x18.caffe.AccuracyParameter\\x12I\\n\\x1b\\x61\\x64\\x61ptive_bias_channel_param\\x18\\x94\\x01 \\x01(\\x0b\\x32#.caffe.AdaptiveBiasChannelParameter\\x12,\\n\\x0c\\x61rgmax_param\\x18g \\x01(\\x0b\\x32\\x16.caffe.ArgMaxParameter\\x12\\x34\\n\\x10\\x62\\x61tch_norm_param\\x18\\x8b\\x01 \\x01(\\x0b\\x32\\x19.caffe.BatchNormParameter\\x12)\\n\\nbias_param\\x18\\x8d\\x01 \\x01(\\x0b\\x32\\x14.caffe.BiasParameter\\x12\\x38\\n\\x12\\x62ias_channel_param\\x18\\x95\\x01 \\x01(\\x0b\\x32\\x1b.caffe.BiasChannelParameter\\x12,\\n\\x0c\\x63oncat_param\\x18h \\x01(\\x0b\\x32\\x16.caffe.ConcatParameter\\x12?\\n\\x16\\x63ontrastive_loss_param\\x18i \\x01(\\x0b\\x32\\x1f.caffe.ContrastiveLossParameter\\x12\\x36\\n\\x11\\x63onvolution_param\\x18j \\x01(\\x0b\\x32\\x1b.caffe.ConvolutionParameter\\x12(\\n\\ndata_param\\x18k \\x01(\\x0b\\x32\\x14.caffe.DataParameter\\x12\\x32\\n\\x0f\\x64\\x65nse_crf_param\\x18\\x92\\x01 \\x01(\\x0b\\x32\\x18.caffe.DenseCRFParameter\\x12@\\n\\x16\\x64omain_transform_param\\x18\\x93\\x01 \\x01(\\x0b\\x32\\x1f.caffe.DomainTransformParameter\\x12.\\n\\rdropout_param\\x18l \\x01(\\x0b\\x32\\x17.caffe.DropoutParameter\\x12\\x33\\n\\x10\\x64ummy_data_param\\x18m \\x01(\\x0b\\x32\\x19.caffe.DummyDataParameter\\x12.\\n\\reltwise_param\\x18n \\x01(\\x0b\\x32\\x17.caffe.EltwiseParameter\\x12\\\'\\n\\telu_param\\x18\\x8c\\x01 \\x01(\\x0b\\x32\\x13.caffe.ELUParameter\\x12+\\n\\x0b\\x65mbed_param\\x18\\x89\\x01 \\x01(\\x0b\\x32\\x15.caffe.EmbedParameter\\x12&\\n\\texp_param\\x18o \\x01(\\x0b\\x32\\x13.caffe.ExpParameter\\x12/\\n\\rflatten_param\\x18\\x87\\x01 \\x01(\\x0b\\x32\\x17.caffe.FlattenParameter\\x12\\x31\\n\\x0fhdf5_data_param\\x18p \\x01(\\x0b\\x32\\x18.caffe.HDF5DataParameter\\x12\\x35\\n\\x11hdf5_output_param\\x18q \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter\\x12\\x33\\n\\x10hinge_loss_param\\x18r \\x01(\\x0b\\x32\\x19.caffe.HingeLossParameter\\x12\\x33\\n\\x10image_data_param\\x18s \\x01(\\x0b\\x32\\x19.caffe.ImageDataParameter\\x12\\x39\\n\\x13infogain_loss_param\\x18t \\x01(\\x0b\\x32\\x1c.caffe.InfogainLossParameter\\x12\\x39\\n\\x13inner_product_param\\x18u \\x01(\\x0b\\x32\\x1c.caffe.InnerProductParameter\\x12-\\n\\x0cinterp_param\\x18\\x8f\\x01 \\x01(\\x0b\\x32\\x16.caffe.InterpParameter\\x12\\\'\\n\\tlog_param\\x18\\x86\\x01 \\x01(\\x0b\\x32\\x13.caffe.LogParameter\\x12&\\n\\tlrn_param\\x18v \\x01(\\x0b\\x32\\x13.caffe.LRNParameter\\x12\\x30\\n\\x0emat_read_param\\x18\\x97\\x01 \\x01(\\x0b\\x32\\x17.caffe.MatReadParameter\\x12\\x32\\n\\x0fmat_write_param\\x18\\x91\\x01 \\x01(\\x0b\\x32\\x18.caffe.MatWriteParameter\\x12\\x35\\n\\x11memory_data_param\\x18w \\x01(\\x0b\\x32\\x1a.caffe.MemoryDataParameter\\x12&\\n\\tmvn_param\\x18x \\x01(\\x0b\\x32\\x13.caffe.MVNParameter\\x12.\\n\\rpooling_param\\x18y \\x01(\\x0b\\x32\\x17.caffe.PoolingParameter\\x12*\\n\\x0bpower_param\\x18z \\x01(\\x0b\\x32\\x15.caffe.PowerParameter\\x12+\\n\\x0bprelu_param\\x18\\x83\\x01 \\x01(\\x0b\\x32\\x15.caffe.PReLUParameter\\x12-\\n\\x0cpython_param\\x18\\x82\\x01 \\x01(\\x0b\\x32\\x16.caffe.PythonParameter\\x12\\x33\\n\\x0freduction_param\\x18\\x88\\x01 \\x01(\\x0b\\x32\\x19.caffe.ReductionParameter\\x12(\\n\\nrelu_param\\x18{ \\x01(\\x0b\\x32\\x14.caffe.ReLUParameter\\x12/\\n\\rreshape_param\\x18\\x85\\x01 \\x01(\\x0b\\x32\\x17.caffe.ReshapeParameter\\x12+\\n\\x0bscale_param\\x18\\x8e\\x01 \\x01(\\x0b\\x32\\x15.caffe.ScaleParameter\\x12\\x38\\n\\x12seg_accuracy_param\\x18\\x90\\x01 \\x01(\\x0b\\x32\\x1b.caffe.SegAccuracyParameter\\x12.\\n\\rsigmoid_param\\x18| \\x01(\\x0b\\x32\\x17.caffe.SigmoidParameter\\x12.\\n\\rsoftmax_param\\x18} \\x01(\\x0b\\x32\\x17.caffe.SoftmaxParameter\\x12\\\'\\n\\tspp_param\\x18\\x84\\x01 \\x01(\\x0b\\x32\\x13.caffe.SPPParameter\\x12*\\n\\x0bslice_param\\x18~ \\x01(\\x0b\\x32\\x15.caffe.SliceParameter\\x12(\\n\\ntanh_param\\x18\\x7f \\x01(\\x0b\\x32\\x14.caffe.TanHParameter\\x12\\x33\\n\\x0fthreshold_param\\x18\\x80\\x01 \\x01(\\x0b\\x32\\x19.caffe.ThresholdParameter\\x12)\\n\\ntile_param\\x18\\x8a\\x01 \\x01(\\x0b\\x32\\x14.caffe.TileParameter\\x12\\x38\\n\\x12unique_label_param\\x18\\x96\\x01 \\x01(\\x0b\\x32\\x1b.caffe.UniqueLabelParameter\\x12\\x36\\n\\x11window_data_param\\x18\\x81\\x01 \\x01(\\x0b\\x32\\x1a.caffe.WindowDataParameter""\\xfc\\x01\\n\\x17TransformationParameter\\x12\\x10\\n\\x05scale\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x15\\n\\x06mirror\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x14\\n\\tcrop_size\\x18\\x03 \\x01(\\r:\\x01\\x30\\x12\\x11\\n\\tmean_file\\x18\\x04 \\x01(\\t\\x12\\x12\\n\\nmean_value\\x18\\x05 \\x03(\\x02\\x12\\x1a\\n\\x0b\\x66orce_color\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\nforce_gray\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\rscale_factors\\x18\\x08 \\x03(\\x02\\x12\\x15\\n\\ncrop_width\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x0b\\x63rop_height\\x18\\n \\x01(\\r:\\x01\\x30""\\xc2\\x01\\n\\rLossParameter\\x12\\x14\\n\\x0cignore_label\\x18\\x01 \\x01(\\x05\\x12\\x44\\n\\rnormalization\\x18\\x03 \\x01(\\x0e\\x32&.caffe.LossParameter.NormalizationMode:\\x05VALID\\x12\\x11\\n\\tnormalize\\x18\\x02 \\x01(\\x08""B\\n\\x11NormalizationMode\\x12\\x08\\n\\x04\\x46ULL\\x10\\x00\\x12\\t\\n\\x05VALID\\x10\\x01\\x12\\x0e\\n\\nBATCH_SIZE\\x10\\x02\\x12\\x08\\n\\x04NONE\\x10\\x03""L\\n\\x11\\x41\\x63\\x63uracyParameter\\x12\\x10\\n\\x05top_k\\x18\\x01 \\x01(\\r:\\x01\\x31\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12\\x14\\n\\x0cignore_label\\x18\\x03 \\x01(\\x05""\\xa2\\x01\\n\\x1c\\x41\\x64\\x61ptiveBiasChannelParameter\\x12\\x13\\n\\x08num_iter\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x17\\n\\nbg_portion\\x18\\x02 \\x01(\\x02:\\x03\\x30.2\\x12\\x17\\n\\nfg_portion\\x18\\x03 \\x01(\\x02:\\x03\\x30.2\\x12\\x1d\\n\\x0fsuppress_others\\x18\\x04 \\x01(\\x08:\\x04true\\x12\\x1c\\n\\rmargin_others\\x18\\x05 \\x01(\\x02:\\x05\\x31\\x65-05""M\\n\\x0f\\x41rgMaxParameter\\x12\\x1a\\n\\x0bout_max_val\\x18\\x01 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x10\\n\\x05top_k\\x18\\x02 \\x01(\\r:\\x01\\x31\\x12\\x0c\\n\\x04\\x61xis\\x18\\x03 \\x01(\\x05""\\xd6\\x01\\n\\x14\\x42iasChannelParameter\\x12\\x12\\n\\x07\\x62g_bias\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x07\\x66g_bias\\x18\\x02 \\x01(\\x02:\\x01\\x32\\x12\\x14\\n\\x0cignore_label\\x18\\x03 \\x03(\\x05\\x12@\\n\\nlabel_type\\x18\\x04 \\x01(\\x0e\\x32%.caffe.BiasChannelParameter.LabelType:\\x05IMAGE\\x12\\x1b\\n\\x10\\x62\\x61\\x63kground_label\\x18\\x06 \\x01(\\x05:\\x01\\x30""!\\n\\tLabelType\\x12\\t\\n\\x05IMAGE\\x10\\x01\\x12\\t\\n\\x05PIXEL\\x10\\x02""9\\n\\x0f\\x43oncatParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12\\x15\\n\\nconcat_dim\\x18\\x01 \\x01(\\r:\\x01\\x31""\\x8e\\x01\\n\\x12\\x42\\x61tchNormParameter\\x12\\x18\\n\\x10use_global_stats\\x18\\x01 \\x01(\\x08\\x12&\\n\\x17moving_average_fraction\\x18\\x02 \\x01(\\x02:\\x05\\x30.999\\x12\\x12\\n\\x03\\x65ps\\x18\\x03 \\x01(\\x02:\\x05\\x31\\x65-05\\x12""\\n\\x13update_global_stats\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse""]\\n\\rBiasParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x08num_axes\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12&\\n\\x06\\x66iller\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter""L\\n\\x18\\x43ontrastiveLossParameter\\x12\\x11\\n\\x06margin\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x1d\\n\\x0elegacy_version\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse""\\xfc\\x03\\n\\x14\\x43onvolutionParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x02 \\x01(\\x08:\\x04true\\x12\\x0b\\n\\x03pad\\x18\\x03 \\x03(\\r\\x12\\x13\\n\\x0bkernel_size\\x18\\x04 \\x03(\\r\\x12\\x0e\\n\\x06stride\\x18\\x06 \\x03(\\r\\x12\\x10\\n\\x08\\x64ilation\\x18\\x12 \\x03(\\r\\x12\\x10\\n\\x05pad_h\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_w\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x08kernel_h\\x18\\x0b \\x01(\\r\\x12\\x10\\n\\x08kernel_w\\x18\\x0c \\x01(\\r\\x12\\x10\\n\\x08stride_h\\x18\\r \\x01(\\r\\x12\\x10\\n\\x08stride_w\\x18\\x0e \\x01(\\r\\x12\\x10\\n\\x05group\\x18\\x05 \\x01(\\r:\\x01\\x31\\x12-\\n\\rweight_filler\\x18\\x07 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x08 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12;\\n\\x06\\x65ngine\\x18\\x0f \\x01(\\x0e\\x32"".caffe.ConvolutionParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x0f\\n\\x04\\x61xis\\x18\\x10 \\x01(\\x05:\\x01\\x31\\x12\\x1e\\n\\x0f\\x66orce_nd_im2col\\x18\\x11 \\x01(\\x08:\\x05\\x66\\x61lse""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02""\\xa4\\x02\\n\\rDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x04 \\x01(\\r\\x12\\x14\\n\\trand_skip\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x31\\n\\x07\\x62\\x61\\x63kend\\x18\\x08 \\x01(\\x0e\\x32\\x17.caffe.DataParameter.DB:\\x07LEVELDB\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12""\\n\\x13\\x66orce_encoded_color\\x18\\t \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x13\\n\\x08prefetch\\x18\\n \\x01(\\r:\\x01\\x34""\\x1b\\n\\x02\\x44\\x42\\x12\\x0b\\n\\x07LEVELDB\\x10\\x00\\x12\\x08\\n\\x04LMDB\\x10\\x01""\\xa3\\x01\\n\\x11\\x44\\x65nseCRFParameter\\x12\\x14\\n\\x08max_iter\\x18\\x01 \\x01(\\x05:\\x02\\x31\\x30\\x12\\x12\\n\\npos_xy_std\\x18\\x02 \\x03(\\x02\\x12\\r\\n\\x05pos_w\\x18\\x03 \\x03(\\x02\\x12\\x11\\n\\tbi_xy_std\\x18\\x04 \\x03(\\x02\\x12\\x12\\n\\nbi_rgb_std\\x18\\x05 \\x03(\\x02\\x12\\x0c\\n\\x04\\x62i_w\\x18\\x06 \\x03(\\x02\\x12 \\n\\x12output_probability\\x18\\x07 \\x01(\\x08:\\x04true""y\\n\\x18\\x44omainTransformParameter\\x12\\x13\\n\\x08num_iter\\x18\\x01 \\x01(\\x05:\\x01\\x33\\x12\\x19\\n\\rspatial_sigma\\x18\\x02 \\x01(\\x02:\\x02\\x35\\x30\\x12\\x16\\n\\x0brange_sigma\\x18\\x03 \\x01(\\x02:\\x01\\x35\\x12\\x15\\n\\nmin_weight\\x18\\x04 \\x01(\\x02:\\x01\\x30"".\\n\\x10\\x44ropoutParameter\\x12\\x1a\\n\\rdropout_ratio\\x18\\x01 \\x01(\\x02:\\x03\\x30.5""\\xa0\\x01\\n\\x12\\x44ummyDataParameter\\x12+\\n\\x0b\\x64\\x61ta_filler\\x18\\x01 \\x03(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x1f\\n\\x05shape\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x0b\\n\\x03num\\x18\\x02 \\x03(\\r\\x12\\x10\\n\\x08\\x63hannels\\x18\\x03 \\x03(\\r\\x12\\x0e\\n\\x06height\\x18\\x04 \\x03(\\r\\x12\\r\\n\\x05width\\x18\\x05 \\x03(\\r""\\xa5\\x01\\n\\x10\\x45ltwiseParameter\\x12\\x39\\n\\toperation\\x18\\x01 \\x01(\\x0e\\x32!.caffe.EltwiseParameter.EltwiseOp:\\x03SUM\\x12\\r\\n\\x05\\x63oeff\\x18\\x02 \\x03(\\x02\\x12\\x1e\\n\\x10stable_prod_grad\\x18\\x03 \\x01(\\x08:\\x04true""\\\'\\n\\tEltwiseOp\\x12\\x08\\n\\x04PROD\\x10\\x00\\x12\\x07\\n\\x03SUM\\x10\\x01\\x12\\x07\\n\\x03MAX\\x10\\x02"" \\n\\x0c\\x45LUParameter\\x12\\x10\\n\\x05\\x61lpha\\x18\\x01 \\x01(\\x02:\\x01\\x31""\\xac\\x01\\n\\x0e\\x45mbedParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x11\\n\\tinput_dim\\x18\\x02 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x03 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x04 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter""D\\n\\x0c\\x45xpParameter\\x12\\x10\\n\\x04\\x62\\x61se\\x18\\x01 \\x01(\\x02:\\x02-1\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30""9\\n\\x10\\x46lattenParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x14\\n\\x08\\x65nd_axis\\x18\\x02 \\x01(\\x05:\\x02-1""O\\n\\x11HDF5DataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x02 \\x01(\\r\\x12\\x16\\n\\x07shuffle\\x18\\x03 \\x01(\\x08:\\x05\\x66\\x61lse""(\\n\\x13HDF5OutputParameter\\x12\\x11\\n\\tfile_name\\x18\\x01 \\x01(\\t""^\\n\\x12HingeLossParameter\\x12\\x30\\n\\x04norm\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.HingeLossParameter.Norm:\\x02L1""\\x16\\n\\x04Norm\\x12\\x06\\n\\x02L1\\x10\\x01\\x12\\x06\\n\\x02L2\\x10\\x02""\\x9f\\x03\\n\\x12ImageDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x15\\n\\nbatch_size\\x18\\x04 \\x01(\\r:\\x01\\x31\\x12\\x14\\n\\trand_skip\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x07shuffle\\x18\\x08 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\nnew_height\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x14\\n\\tnew_width\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x08is_color\\x18\\x0b \\x01(\\x08:\\x04true\\x12\\x19\\n\\x0cignore_label\\x18\\x0f \\x01(\\x05:\\x03\\x32\\x35\\x35\\x12>\\n\\nlabel_type\\x18\\x10 \\x01(\\x0e\\x32#.caffe.ImageDataParameter.LabelType:\\x05IMAGE\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\x0broot_folder\\x18\\x0c \\x01(\\t:\\x00""+\\n\\tLabelType\\x12\\x08\\n\\x04NONE\\x10\\x00\\x12\\t\\n\\x05IMAGE\\x10\\x01\\x12\\t\\n\\x05PIXEL\\x10\\x02""\\\'\\n\\x15InfogainLossParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t""\\xcb\\x01\\n\\x15InnerProductParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x02 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x04 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x05 \\x01(\\x05:\\x01\\x31\\x12\\x18\\n\\ttranspose\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse""\\x90\\x01\\n\\x0fInterpParameter\\x12\\x11\\n\\x06height\\x18\\x01 \\x01(\\x05:\\x01\\x30\\x12\\x10\\n\\x05width\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x16\\n\\x0bzoom_factor\\x18\\x03 \\x01(\\x05:\\x01\\x31\\x12\\x18\\n\\rshrink_factor\\x18\\x04 \\x01(\\x05:\\x01\\x31\\x12\\x12\\n\\x07pad_beg\\x18\\x05 \\x01(\\x05:\\x01\\x30\\x12\\x12\\n\\x07pad_end\\x18\\x06 \\x01(\\x05:\\x01\\x30""D\\n\\x0cLogParameter\\x12\\x10\\n\\x04\\x62\\x61se\\x18\\x01 \\x01(\\x02:\\x02-1\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30""\\xb8\\x02\\n\\x0cLRNParameter\\x12\\x15\\n\\nlocal_size\\x18\\x01 \\x01(\\r:\\x01\\x35\\x12\\x10\\n\\x05\\x61lpha\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x04\\x62\\x65ta\\x18\\x03 \\x01(\\x02:\\x04\\x30.75\\x12\\x44\\n\\x0bnorm_region\\x18\\x04 \\x01(\\x0e\\x32\\x1e.caffe.LRNParameter.NormRegion:\\x0f\\x41\\x43ROSS_CHANNELS\\x12\\x0c\\n\\x01k\\x18\\x05 \\x01(\\x02:\\x01\\x31\\x12\\x33\\n\\x06\\x65ngine\\x18\\x06 \\x01(\\x0e\\x32\\x1a.caffe.LRNParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT""5\\n\\nNormRegion\\x12\\x13\\n\\x0f\\x41\\x43ROSS_CHANNELS\\x10\\x00\\x12\\x12\\n\\x0eWITHIN_CHANNEL\\x10\\x01""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02""]\\n\\x10MatReadParameter\\x12\\x0e\\n\\x06prefix\\x18\\x01 \\x02(\\t\\x12\\x10\\n\\x06source\\x18\\x02 \\x01(\\t:\\x00\\x12\\x10\\n\\x05strip\\x18\\x03 \\x01(\\x05:\\x01\\x30\\x12\\x15\\n\\nbatch_size\\x18\\x04 \\x01(\\x05:\\x01\\x31""Z\\n\\x11MatWriteParameter\\x12\\x0e\\n\\x06prefix\\x18\\x01 \\x02(\\t\\x12\\x10\\n\\x06source\\x18\\x02 \\x01(\\t:\\x00\\x12\\x10\\n\\x05strip\\x18\\x03 \\x01(\\x05:\\x01\\x30\\x12\\x11\\n\\x06period\\x18\\x04 \\x01(\\x05:\\x01\\x31""Z\\n\\x13MemoryDataParameter\\x12\\x12\\n\\nbatch_size\\x18\\x01 \\x01(\\r\\x12\\x10\\n\\x08\\x63hannels\\x18\\x02 \\x01(\\r\\x12\\x0e\\n\\x06height\\x18\\x03 \\x01(\\r\\x12\\r\\n\\x05width\\x18\\x04 \\x01(\\r""d\\n\\x0cMVNParameter\\x12 \\n\\x12normalize_variance\\x18\\x01 \\x01(\\x08:\\x04true\\x12\\x1e\\n\\x0f\\x61\\x63ross_channels\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x12\\n\\x03\\x65ps\\x18\\x03 \\x01(\\x02:\\x05\\x31\\x65-09""\\xa2\\x03\\n\\x10PoolingParameter\\x12\\x35\\n\\x04pool\\x18\\x01 \\x01(\\x0e\\x32"".caffe.PoolingParameter.PoolMethod:\\x03MAX\\x12\\x0e\\n\\x03pad\\x18\\x04 \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_h\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_w\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x13\\n\\x0bkernel_size\\x18\\x02 \\x01(\\r\\x12\\x10\\n\\x08kernel_h\\x18\\x05 \\x01(\\r\\x12\\x10\\n\\x08kernel_w\\x18\\x06 \\x01(\\r\\x12\\x11\\n\\x06stride\\x18\\x03 \\x01(\\r:\\x01\\x31\\x12\\x10\\n\\x08stride_h\\x18\\x07 \\x01(\\r\\x12\\x10\\n\\x08stride_w\\x18\\x08 \\x01(\\r\\x12\\x37\\n\\x06\\x65ngine\\x18\\x0b \\x01(\\x0e\\x32\\x1e.caffe.PoolingParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x1d\\n\\x0eglobal_pooling\\x18\\x0c \\x01(\\x08:\\x05\\x66\\x61lse"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02""F\\n\\x0ePowerParameter\\x12\\x10\\n\\x05power\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30""g\\n\\x0fPythonParameter\\x12\\x0e\\n\\x06module\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05layer\\x18\\x02 \\x01(\\t\\x12\\x13\\n\\tparam_str\\x18\\x03 \\x01(\\t:\\x00\\x12 \\n\\x11share_in_parallel\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse""\\xad\\x01\\n\\x12ReductionParameter\\x12=\\n\\toperation\\x18\\x01 \\x01(\\x0e\\x32%.caffe.ReductionParameter.ReductionOp:\\x03SUM\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x10\\n\\x05\\x63oeff\\x18\\x03 \\x01(\\x02:\\x01\\x31""5\\n\\x0bReductionOp\\x12\\x07\\n\\x03SUM\\x10\\x01\\x12\\x08\\n\\x04\\x41SUM\\x10\\x02\\x12\\t\\n\\x05SUMSQ\\x10\\x03\\x12\\x08\\n\\x04MEAN\\x10\\x04""\\x8d\\x01\\n\\rReLUParameter\\x12\\x19\\n\\x0enegative_slope\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\x34\\n\\x06\\x65ngine\\x18\\x02 \\x01(\\x0e\\x32\\x1b.caffe.ReLUParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02""Z\\n\\x10ReshapeParameter\\x12\\x1f\\n\\x05shape\\x18\\x01 \\x01(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x14\\n\\x08num_axes\\x18\\x03 \\x01(\\x05:\\x02-1""\\xa5\\x01\\n\\x0eScaleParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x08num_axes\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12&\\n\\x06\\x66iller\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x18\\n\\tbias_term\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\x12+\\n\\x0b\\x62ias_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter""\\xd2\\x01\\n\\x14SegAccuracyParameter\\x12I\\n\\x06metric\\x18\\x01 \\x01(\\x0e\\x32*.caffe.SegAccuracyParameter.AccuracyMetric:\\rPixelAccuracy\\x12\\x14\\n\\x0cignore_label\\x18\\x02 \\x03(\\x05\\x12\\x13\\n\\x05reset\\x18\\x03 \\x01(\\x08:\\x04true""D\\n\\x0e\\x41\\x63\\x63uracyMetric\\x12\\x11\\n\\rPixelAccuracy\\x10\\x00\\x12\\x11\\n\\rClassAccuracy\\x10\\x01\\x12\\x0c\\n\\x08PixelIOU\\x10\\x02""x\\n\\x10SigmoidParameter\\x12\\x37\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.SigmoidParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02""L\\n\\x0eSliceParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x03 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x0bslice_point\\x18\\x02 \\x03(\\r\\x12\\x14\\n\\tslice_dim\\x18\\x01 \\x01(\\r:\\x01\\x31""\\x89\\x01\\n\\x10SoftmaxParameter\\x12\\x37\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.SoftmaxParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02""r\\n\\rTanHParameter\\x12\\x34\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1b.caffe.TanHParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02""/\\n\\rTileParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\r\\n\\x05tiles\\x18\\x02 \\x01(\\x05""*\\n\\x12ThresholdParameter\\x12\\x14\\n\\tthreshold\\x18\\x01 \\x01(\\x02:\\x01\\x30""U\\n\\x14UniqueLabelParameter\\x12\\x12\\n\\nmax_labels\\x18\\x01 \\x02(\\x05\\x12\\x14\\n\\x0cignore_label\\x18\\x02 \\x03(\\x05\\x12\\x13\\n\\x0b\\x66orce_label\\x18\\x03 \\x03(\\x02""\\xc1\\x02\\n\\x13WindowDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x04 \\x01(\\r\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\x0c\\x66g_threshold\\x18\\x07 \\x01(\\x02:\\x03\\x30.5\\x12\\x19\\n\\x0c\\x62g_threshold\\x18\\x08 \\x01(\\x02:\\x03\\x30.5\\x12\\x19\\n\\x0b\\x66g_fraction\\x18\\t \\x01(\\x02:\\x04\\x30.25\\x12\\x16\\n\\x0b\\x63ontext_pad\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x17\\n\\tcrop_mode\\x18\\x0b \\x01(\\t:\\x04warp\\x12\\x1b\\n\\x0c\\x63\\x61\\x63he_images\\x18\\x0c \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\x0broot_folder\\x18\\r \\x01(\\t:\\x00""\\xeb\\x01\\n\\x0cSPPParameter\\x12\\x16\\n\\x0epyramid_height\\x18\\x01 \\x01(\\r\\x12\\x31\\n\\x04pool\\x18\\x02 \\x01(\\x0e\\x32\\x1e.caffe.SPPParameter.PoolMethod:\\x03MAX\\x12\\x33\\n\\x06\\x65ngine\\x18\\x06 \\x01(\\x0e\\x32\\x1a.caffe.SPPParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02""\\xe0\\x13\\n\\x10V1LayerParameter\\x12\\x0e\\n\\x06\\x62ottom\\x18\\x02 \\x03(\\t\\x12\\x0b\\n\\x03top\\x18\\x03 \\x03(\\t\\x12\\x0c\\n\\x04name\\x18\\x04 \\x01(\\t\\x12$\\n\\x07include\\x18  \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12$\\n\\x07\\x65xclude\\x18! \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12/\\n\\x04type\\x18\\x05 \\x01(\\x0e\\x32!.caffe.V1LayerParameter.LayerType\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x0e\\n\\x05param\\x18\\xe9\\x07 \\x03(\\t\\x12>\\n\\x0f\\x62lob_share_mode\\x18\\xea\\x07 \\x03(\\x0e\\x32$.caffe.V1LayerParameter.DimCheckMode\\x12\\x10\\n\\x08\\x62lobs_lr\\x18\\x07 \\x03(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x08 \\x03(\\x02\\x12\\x13\\n\\x0bloss_weight\\x18# \\x03(\\x02\\x12\\x30\\n\\x0e\\x61\\x63\\x63uracy_param\\x18\\x1b \\x01(\\x0b\\x32\\x18.caffe.AccuracyParameter\\x12,\\n\\x0c\\x61rgmax_param\\x18\\x17 \\x01(\\x0b\\x32\\x16.caffe.ArgMaxParameter\\x12,\\n\\x0c\\x63oncat_param\\x18\\t \\x01(\\x0b\\x32\\x16.caffe.ConcatParameter\\x12?\\n\\x16\\x63ontrastive_loss_param\\x18( \\x01(\\x0b\\x32\\x1f.caffe.ContrastiveLossParameter\\x12\\x36\\n\\x11\\x63onvolution_param\\x18\\n \\x01(\\x0b\\x32\\x1b.caffe.ConvolutionParameter\\x12(\\n\\ndata_param\\x18\\x0b \\x01(\\x0b\\x32\\x14.caffe.DataParameter\\x12.\\n\\rdropout_param\\x18\\x0c \\x01(\\x0b\\x32\\x17.caffe.DropoutParameter\\x12\\x33\\n\\x10\\x64ummy_data_param\\x18\\x1a \\x01(\\x0b\\x32\\x19.caffe.DummyDataParameter\\x12.\\n\\reltwise_param\\x18\\x18 \\x01(\\x0b\\x32\\x17.caffe.EltwiseParameter\\x12&\\n\\texp_param\\x18) \\x01(\\x0b\\x32\\x13.caffe.ExpParameter\\x12\\x31\\n\\x0fhdf5_data_param\\x18\\r \\x01(\\x0b\\x32\\x18.caffe.HDF5DataParameter\\x12\\x35\\n\\x11hdf5_output_param\\x18\\x0e \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter\\x12\\x33\\n\\x10hinge_loss_param\\x18\\x1d \\x01(\\x0b\\x32\\x19.caffe.HingeLossParameter\\x12\\x33\\n\\x10image_data_param\\x18\\x0f \\x01(\\x0b\\x32\\x19.caffe.ImageDataParameter\\x12\\x39\\n\\x13infogain_loss_param\\x18\\x10 \\x01(\\x0b\\x32\\x1c.caffe.InfogainLossParameter\\x12\\x39\\n\\x13inner_product_param\\x18\\x11 \\x01(\\x0b\\x32\\x1c.caffe.InnerProductParameter\\x12&\\n\\tlrn_param\\x18\\x12 \\x01(\\x0b\\x32\\x13.caffe.LRNParameter\\x12\\x35\\n\\x11memory_data_param\\x18\\x16 \\x01(\\x0b\\x32\\x1a.caffe.MemoryDataParameter\\x12&\\n\\tmvn_param\\x18"" \\x01(\\x0b\\x32\\x13.caffe.MVNParameter\\x12.\\n\\rpooling_param\\x18\\x13 \\x01(\\x0b\\x32\\x17.caffe.PoolingParameter\\x12*\\n\\x0bpower_param\\x18\\x15 \\x01(\\x0b\\x32\\x15.caffe.PowerParameter\\x12(\\n\\nrelu_param\\x18\\x1e \\x01(\\x0b\\x32\\x14.caffe.ReLUParameter\\x12.\\n\\rsigmoid_param\\x18& \\x01(\\x0b\\x32\\x17.caffe.SigmoidParameter\\x12.\\n\\rsoftmax_param\\x18\\\' \\x01(\\x0b\\x32\\x17.caffe.SoftmaxParameter\\x12*\\n\\x0bslice_param\\x18\\x1f \\x01(\\x0b\\x32\\x15.caffe.SliceParameter\\x12(\\n\\ntanh_param\\x18% \\x01(\\x0b\\x32\\x14.caffe.TanHParameter\\x12\\x32\\n\\x0fthreshold_param\\x18\\x19 \\x01(\\x0b\\x32\\x19.caffe.ThresholdParameter\\x12\\x35\\n\\x11window_data_param\\x18\\x14 \\x01(\\x0b\\x32\\x1a.caffe.WindowDataParameter\\x12\\x37\\n\\x0ftransform_param\\x18$ \\x01(\\x0b\\x32\\x1e.caffe.TransformationParameter\\x12(\\n\\nloss_param\\x18* \\x01(\\x0b\\x32\\x14.caffe.LossParameter\\x12&\\n\\x05layer\\x18\\x01 \\x01(\\x0b\\x32\\x17.caffe.V0LayerParameter""\\xd8\\x04\\n\\tLayerType\\x12\\x08\\n\\x04NONE\\x10\\x00\\x12\\n\\n\\x06\\x41\\x42SVAL\\x10#\\x12\\x0c\\n\\x08\\x41\\x43\\x43URACY\\x10\\x01\\x12\\n\\n\\x06\\x41RGMAX\\x10\\x1e\\x12\\x08\\n\\x04\\x42NLL\\x10\\x02\\x12\\n\\n\\x06\\x43ONCAT\\x10\\x03\\x12\\x14\\n\\x10\\x43ONTRASTIVE_LOSS\\x10%\\x12\\x0f\\n\\x0b\\x43ONVOLUTION\\x10\\x04\\x12\\x08\\n\\x04\\x44\\x41TA\\x10\\x05\\x12\\x11\\n\\rDECONVOLUTION\\x10\\\'\\x12\\x0b\\n\\x07\\x44ROPOUT\\x10\\x06\\x12\\x0e\\n\\nDUMMY_DATA\\x10 \\x12\\x12\\n\\x0e\\x45UCLIDEAN_LOSS\\x10\\x07\\x12\\x0b\\n\\x07\\x45LTWISE\\x10\\x19\\x12\\x07\\n\\x03\\x45XP\\x10&\\x12\\x0b\\n\\x07\\x46LATTEN\\x10\\x08\\x12\\r\\n\\tHDF5_DATA\\x10\\t\\x12\\x0f\\n\\x0bHDF5_OUTPUT\\x10\\n\\x12\\x0e\\n\\nHINGE_LOSS\\x10\\x1c\\x12\\n\\n\\x06IM2COL\\x10\\x0b\\x12\\x0e\\n\\nIMAGE_DATA\\x10\\x0c\\x12\\x11\\n\\rINFOGAIN_LOSS\\x10\\r\\x12\\x11\\n\\rINNER_PRODUCT\\x10\\x0e\\x12\\x07\\n\\x03LRN\\x10\\x0f\\x12\\x0f\\n\\x0bMEMORY_DATA\\x10\\x1d\\x12\\x1d\\n\\x19MULTINOMIAL_LOGISTIC_LOSS\\x10\\x10\\x12\\x07\\n\\x03MVN\\x10""\\x12\\x0b\\n\\x07POOLING\\x10\\x11\\x12\\t\\n\\x05POWER\\x10\\x1a\\x12\\x08\\n\\x04RELU\\x10\\x12\\x12\\x0b\\n\\x07SIGMOID\\x10\\x13\\x12\\x1e\\n\\x1aSIGMOID_CROSS_ENTROPY_LOSS\\x10\\x1b\\x12\\x0b\\n\\x07SILENCE\\x10$\\x12\\x0b\\n\\x07SOFTMAX\\x10\\x14\\x12\\x10\\n\\x0cSOFTMAX_LOSS\\x10\\x15\\x12\\t\\n\\x05SPLIT\\x10\\x16\\x12\\t\\n\\x05SLICE\\x10!\\x12\\x08\\n\\x04TANH\\x10\\x17\\x12\\x0f\\n\\x0bWINDOW_DATA\\x10\\x18\\x12\\r\\n\\tTHRESHOLD\\x10\\x1f""*\\n\\x0c\\x44imCheckMode\\x12\\n\\n\\x06STRICT\\x10\\x00\\x12\\x0e\\n\\nPERMISSIVE\\x10\\x01""\\xfd\\x07\\n\\x10V0LayerParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04type\\x18\\x02 \\x01(\\t\\x12\\x12\\n\\nnum_output\\x18\\x03 \\x01(\\r\\x12\\x16\\n\\x08\\x62iasterm\\x18\\x04 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x06 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x0e\\n\\x03pad\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x12\\n\\nkernelsize\\x18\\x08 \\x01(\\r\\x12\\x10\\n\\x05group\\x18\\t \\x01(\\r:\\x01\\x31\\x12\\x11\\n\\x06stride\\x18\\n \\x01(\\r:\\x01\\x31\\x12\\x35\\n\\x04pool\\x18\\x0b \\x01(\\x0e\\x32"".caffe.V0LayerParameter.PoolMethod:\\x03MAX\\x12\\x1a\\n\\rdropout_ratio\\x18\\x0c \\x01(\\x02:\\x03\\x30.5\\x12\\x15\\n\\nlocal_size\\x18\\r \\x01(\\r:\\x01\\x35\\x12\\x10\\n\\x05\\x61lpha\\x18\\x0e \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x04\\x62\\x65ta\\x18\\x0f \\x01(\\x02:\\x04\\x30.75\\x12\\x0c\\n\\x01k\\x18\\x16 \\x01(\\x02:\\x01\\x31\\x12\\x0e\\n\\x06source\\x18\\x10 \\x01(\\t\\x12\\x10\\n\\x05scale\\x18\\x11 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x08meanfile\\x18\\x12 \\x01(\\t\\x12\\x11\\n\\tbatchsize\\x18\\x13 \\x01(\\r\\x12\\x13\\n\\x08\\x63ropsize\\x18\\x14 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x15 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x32 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x10\\n\\x08\\x62lobs_lr\\x18\\x33 \\x03(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x34 \\x03(\\x02\\x12\\x14\\n\\trand_skip\\x18\\x35 \\x01(\\r:\\x01\\x30\\x12\\x1d\\n\\x10\\x64\\x65t_fg_threshold\\x18\\x36 \\x01(\\x02:\\x03\\x30.5\\x12\\x1d\\n\\x10\\x64\\x65t_bg_threshold\\x18\\x37 \\x01(\\x02:\\x03\\x30.5\\x12\\x1d\\n\\x0f\\x64\\x65t_fg_fraction\\x18\\x38 \\x01(\\x02:\\x04\\x30.25\\x12\\x1a\\n\\x0f\\x64\\x65t_context_pad\\x18: \\x01(\\r:\\x01\\x30\\x12\\x1b\\n\\rdet_crop_mode\\x18; \\x01(\\t:\\x04warp\\x12\\x12\\n\\x07new_num\\x18< \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0cnew_channels\\x18= \\x01(\\x05:\\x01\\x30\\x12\\x15\\n\\nnew_height\\x18> \\x01(\\x05:\\x01\\x30\\x12\\x14\\n\\tnew_width\\x18? \\x01(\\x05:\\x01\\x30\\x12\\x1d\\n\\x0eshuffle_images\\x18@ \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\nconcat_dim\\x18\\x41 \\x01(\\r:\\x01\\x31\\x12\\x36\\n\\x11hdf5_output_param\\x18\\xe9\\x07 \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02""W\\n\\x0ePReLUParameter\\x12&\\n\\x06\\x66iller\\x18\\x01 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x1d\\n\\x0e\\x63hannel_shared\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse*\\x1c\\n\\x05Phase\\x12\\t\\n\\x05TRAIN\\x10\\x00\\x12\\x08\\n\\x04TEST\\x10\\x01\'\n    ),\n)\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\n_PHASE = _descriptor.EnumDescriptor(\n    name=""Phase"",\n    full_name=""caffe.Phase"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""TRAIN"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""TEST"", index=1, number=1, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=16866,\n    serialized_end=16894,\n)\n_sym_db.RegisterEnumDescriptor(_PHASE)\n\nPhase = enum_type_wrapper.EnumTypeWrapper(_PHASE)\nTRAIN = 0\nTEST = 1\n\n\n_FILLERPARAMETER_VARIANCENORM = _descriptor.EnumDescriptor(\n    name=""VarianceNorm"",\n    full_name=""caffe.FillerParameter.VarianceNorm"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""FAN_IN"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""FAN_OUT"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""AVERAGE"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=658,\n    serialized_end=710,\n)\n_sym_db.RegisterEnumDescriptor(_FILLERPARAMETER_VARIANCENORM)\n\n_SOLVERPARAMETER_SNAPSHOTFORMAT = _descriptor.EnumDescriptor(\n    name=""SnapshotFormat"",\n    full_name=""caffe.SolverParameter.SnapshotFormat"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""HDF5"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""BINARYPROTO"", index=1, number=1, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=2132,\n    serialized_end=2175,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SNAPSHOTFORMAT)\n\n_SOLVERPARAMETER_SOLVERMODE = _descriptor.EnumDescriptor(\n    name=""SolverMode"",\n    full_name=""caffe.SolverParameter.SolverMode"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""CPU"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""GPU"", index=1, number=1, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=2177,\n    serialized_end=2207,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SOLVERMODE)\n\n_SOLVERPARAMETER_SOLVERTYPE = _descriptor.EnumDescriptor(\n    name=""SolverType"",\n    full_name=""caffe.SolverParameter.SolverType"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""SGD"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""NESTEROV"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ADAGRAD"", index=2, number=2, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""RMSPROP"", index=3, number=3, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ADADELTA"", index=4, number=4, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ADAM"", index=5, number=5, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=2209,\n    serialized_end=2294,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SOLVERTYPE)\n\n_PARAMSPEC_DIMCHECKMODE = _descriptor.EnumDescriptor(\n    name=""DimCheckMode"",\n    full_name=""caffe.ParamSpec.DimCheckMode"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""STRICT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""PERMISSIVE"", index=1, number=1, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=2725,\n    serialized_end=2767,\n)\n_sym_db.RegisterEnumDescriptor(_PARAMSPEC_DIMCHECKMODE)\n\n_LOSSPARAMETER_NORMALIZATIONMODE = _descriptor.EnumDescriptor(\n    name=""NormalizationMode"",\n    full_name=""caffe.LossParameter.NormalizationMode"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""FULL"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""VALID"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""BATCH_SIZE"", index=2, number=2, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""NONE"", index=3, number=3, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=6040,\n    serialized_end=6106,\n)\n_sym_db.RegisterEnumDescriptor(_LOSSPARAMETER_NORMALIZATIONMODE)\n\n_BIASCHANNELPARAMETER_LABELTYPE = _descriptor.EnumDescriptor(\n    name=""LabelType"",\n    full_name=""caffe.BiasChannelParameter.LabelType"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""IMAGE"", index=0, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""PIXEL"", index=1, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=6612,\n    serialized_end=6645,\n)\n_sym_db.RegisterEnumDescriptor(_BIASCHANNELPARAMETER_LABELTYPE)\n\n_CONVOLUTIONPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=""Engine"",\n    full_name=""caffe.ConvolutionParameter.Engine"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""DEFAULT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CAFFE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CUDNN"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7490,\n    serialized_end=7533,\n)\n_sym_db.RegisterEnumDescriptor(_CONVOLUTIONPARAMETER_ENGINE)\n\n_DATAPARAMETER_DB = _descriptor.EnumDescriptor(\n    name=""DB"",\n    full_name=""caffe.DataParameter.DB"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""LEVELDB"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""LMDB"", index=1, number=1, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7801,\n    serialized_end=7828,\n)\n_sym_db.RegisterEnumDescriptor(_DATAPARAMETER_DB)\n\n_ELTWISEPARAMETER_ELTWISEOP = _descriptor.EnumDescriptor(\n    name=""EltwiseOp"",\n    full_name=""caffe.EltwiseParameter.EltwiseOp"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""PROD"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SUM"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""MAX"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=8457,\n    serialized_end=8496,\n)\n_sym_db.RegisterEnumDescriptor(_ELTWISEPARAMETER_ELTWISEOP)\n\n_HINGELOSSPARAMETER_NORM = _descriptor.EnumDescriptor(\n    name=""Norm"",\n    full_name=""caffe.HingeLossParameter.Norm"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""L1"", index=0, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""L2"", index=1, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=9031,\n    serialized_end=9053,\n)\n_sym_db.RegisterEnumDescriptor(_HINGELOSSPARAMETER_NORM)\n\n_IMAGEDATAPARAMETER_LABELTYPE = _descriptor.EnumDescriptor(\n    name=""LabelType"",\n    full_name=""caffe.ImageDataParameter.LabelType"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""NONE"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""IMAGE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""PIXEL"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=9428,\n    serialized_end=9471,\n)\n_sym_db.RegisterEnumDescriptor(_IMAGEDATAPARAMETER_LABELTYPE)\n\n_LRNPARAMETER_NORMREGION = _descriptor.EnumDescriptor(\n    name=""NormRegion"",\n    full_name=""caffe.LRNParameter.NormRegion"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""ACROSS_CHANNELS"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""WITHIN_CHANNEL"", index=1, number=1, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=10152,\n    serialized_end=10205,\n)\n_sym_db.RegisterEnumDescriptor(_LRNPARAMETER_NORMREGION)\n\n_LRNPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=""Engine"",\n    full_name=""caffe.LRNParameter.Engine"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""DEFAULT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CAFFE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CUDNN"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7490,\n    serialized_end=7533,\n)\n_sym_db.RegisterEnumDescriptor(_LRNPARAMETER_ENGINE)\n\n_POOLINGPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n    name=""PoolMethod"",\n    full_name=""caffe.PoolingParameter.PoolMethod"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""MAX"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""AVE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""STOCHASTIC"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=10961,\n    serialized_end=11007,\n)\n_sym_db.RegisterEnumDescriptor(_POOLINGPARAMETER_POOLMETHOD)\n\n_POOLINGPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=""Engine"",\n    full_name=""caffe.PoolingParameter.Engine"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""DEFAULT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CAFFE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CUDNN"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7490,\n    serialized_end=7533,\n)\n_sym_db.RegisterEnumDescriptor(_POOLINGPARAMETER_ENGINE)\n\n_REDUCTIONPARAMETER_REDUCTIONOP = _descriptor.EnumDescriptor(\n    name=""ReductionOp"",\n    full_name=""caffe.ReductionParameter.ReductionOp"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""SUM"", index=0, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ASUM"", index=1, number=2, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SUMSQ"", index=2, number=3, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""MEAN"", index=3, number=4, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=11352,\n    serialized_end=11405,\n)\n_sym_db.RegisterEnumDescriptor(_REDUCTIONPARAMETER_REDUCTIONOP)\n\n_RELUPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=""Engine"",\n    full_name=""caffe.ReLUParameter.Engine"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""DEFAULT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CAFFE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CUDNN"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7490,\n    serialized_end=7533,\n)\n_sym_db.RegisterEnumDescriptor(_RELUPARAMETER_ENGINE)\n\n_SEGACCURACYPARAMETER_ACCURACYMETRIC = _descriptor.EnumDescriptor(\n    name=""AccuracyMetric"",\n    full_name=""caffe.SegAccuracyParameter.AccuracyMetric"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""PixelAccuracy"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ClassAccuracy"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""PixelIOU"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=11954,\n    serialized_end=12022,\n)\n_sym_db.RegisterEnumDescriptor(_SEGACCURACYPARAMETER_ACCURACYMETRIC)\n\n_SIGMOIDPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=""Engine"",\n    full_name=""caffe.SigmoidParameter.Engine"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""DEFAULT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CAFFE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CUDNN"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7490,\n    serialized_end=7533,\n)\n_sym_db.RegisterEnumDescriptor(_SIGMOIDPARAMETER_ENGINE)\n\n_SOFTMAXPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=""Engine"",\n    full_name=""caffe.SoftmaxParameter.Engine"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""DEFAULT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CAFFE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CUDNN"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7490,\n    serialized_end=7533,\n)\n_sym_db.RegisterEnumDescriptor(_SOFTMAXPARAMETER_ENGINE)\n\n_TANHPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=""Engine"",\n    full_name=""caffe.TanHParameter.Engine"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""DEFAULT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CAFFE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CUDNN"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7490,\n    serialized_end=7533,\n)\n_sym_db.RegisterEnumDescriptor(_TANHPARAMETER_ENGINE)\n\n_SPPPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n    name=""PoolMethod"",\n    full_name=""caffe.SPPParameter.PoolMethod"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""MAX"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""AVE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""STOCHASTIC"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=10961,\n    serialized_end=11007,\n)\n_sym_db.RegisterEnumDescriptor(_SPPPARAMETER_POOLMETHOD)\n\n_SPPPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=""Engine"",\n    full_name=""caffe.SPPParameter.Engine"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""DEFAULT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CAFFE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CUDNN"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=7490,\n    serialized_end=7533,\n)\n_sym_db.RegisterEnumDescriptor(_SPPPARAMETER_ENGINE)\n\n_V1LAYERPARAMETER_LAYERTYPE = _descriptor.EnumDescriptor(\n    name=""LayerType"",\n    full_name=""caffe.V1LayerParameter.LayerType"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""NONE"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ABSVAL"", index=1, number=35, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ACCURACY"", index=2, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ARGMAX"", index=3, number=30, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""BNLL"", index=4, number=2, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CONCAT"", index=5, number=3, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CONTRASTIVE_LOSS"", index=6, number=37, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""CONVOLUTION"", index=7, number=4, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""DATA"", index=8, number=5, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""DECONVOLUTION"", index=9, number=39, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""DROPOUT"", index=10, number=6, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""DUMMY_DATA"", index=11, number=32, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""EUCLIDEAN_LOSS"", index=12, number=7, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""ELTWISE"", index=13, number=25, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""EXP"", index=14, number=38, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""FLATTEN"", index=15, number=8, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""HDF5_DATA"", index=16, number=9, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""HDF5_OUTPUT"", index=17, number=10, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""HINGE_LOSS"", index=18, number=28, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""IM2COL"", index=19, number=11, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""IMAGE_DATA"", index=20, number=12, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""INFOGAIN_LOSS"", index=21, number=13, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""INNER_PRODUCT"", index=22, number=14, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""LRN"", index=23, number=15, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""MEMORY_DATA"", index=24, number=29, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""MULTINOMIAL_LOGISTIC_LOSS"",\n            index=25,\n            number=16,\n            options=None,\n            type=None,\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""MVN"", index=26, number=34, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""POOLING"", index=27, number=17, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""POWER"", index=28, number=26, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""RELU"", index=29, number=18, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SIGMOID"", index=30, number=19, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SIGMOID_CROSS_ENTROPY_LOSS"",\n            index=31,\n            number=27,\n            options=None,\n            type=None,\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SILENCE"", index=32, number=36, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SOFTMAX"", index=33, number=20, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SOFTMAX_LOSS"", index=34, number=21, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SPLIT"", index=35, number=22, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""SLICE"", index=36, number=33, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""TANH"", index=37, number=23, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""WINDOW_DATA"", index=38, number=24, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""THRESHOLD"", index=39, number=31, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=15107,\n    serialized_end=15707,\n)\n_sym_db.RegisterEnumDescriptor(_V1LAYERPARAMETER_LAYERTYPE)\n\n_V1LAYERPARAMETER_DIMCHECKMODE = _descriptor.EnumDescriptor(\n    name=""DimCheckMode"",\n    full_name=""caffe.V1LayerParameter.DimCheckMode"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""STRICT"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""PERMISSIVE"", index=1, number=1, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=2725,\n    serialized_end=2767,\n)\n_sym_db.RegisterEnumDescriptor(_V1LAYERPARAMETER_DIMCHECKMODE)\n\n_V0LAYERPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n    name=""PoolMethod"",\n    full_name=""caffe.V0LayerParameter.PoolMethod"",\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(\n            name=""MAX"", index=0, number=0, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""AVE"", index=1, number=1, options=None, type=None\n        ),\n        _descriptor.EnumValueDescriptor(\n            name=""STOCHASTIC"", index=2, number=2, options=None, type=None\n        ),\n    ],\n    containing_type=None,\n    options=None,\n    serialized_start=10961,\n    serialized_end=11007,\n)\n_sym_db.RegisterEnumDescriptor(_V0LAYERPARAMETER_POOLMETHOD)\n\n\n_BLOBSHAPE = _descriptor.Descriptor(\n    name=""BlobShape"",\n    full_name=""caffe.BlobShape"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""dim"",\n            full_name=""caffe.BlobShape.dim"",\n            index=0,\n            number=1,\n            type=3,\n            cpp_type=2,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=_descriptor._ParseOptions(\n                descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n            ),\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=22,\n    serialized_end=50,\n)\n\n\n_BLOBPROTO = _descriptor.Descriptor(\n    name=""BlobProto"",\n    full_name=""caffe.BlobProto"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""shape"",\n            full_name=""caffe.BlobProto.shape"",\n            index=0,\n            number=7,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""data"",\n            full_name=""caffe.BlobProto.data"",\n            index=1,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=_descriptor._ParseOptions(\n                descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n            ),\n        ),\n        _descriptor.FieldDescriptor(\n            name=""diff"",\n            full_name=""caffe.BlobProto.diff"",\n            index=2,\n            number=6,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=_descriptor._ParseOptions(\n                descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n            ),\n        ),\n        _descriptor.FieldDescriptor(\n            name=""double_data"",\n            full_name=""caffe.BlobProto.double_data"",\n            index=3,\n            number=8,\n            type=1,\n            cpp_type=5,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=_descriptor._ParseOptions(\n                descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n            ),\n        ),\n        _descriptor.FieldDescriptor(\n            name=""double_diff"",\n            full_name=""caffe.BlobProto.double_diff"",\n            index=4,\n            number=9,\n            type=1,\n            cpp_type=5,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=_descriptor._ParseOptions(\n                descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n            ),\n        ),\n        _descriptor.FieldDescriptor(\n            name=""num"",\n            full_name=""caffe.BlobProto.num"",\n            index=5,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""channels"",\n            full_name=""caffe.BlobProto.channels"",\n            index=6,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""height"",\n            full_name=""caffe.BlobProto.height"",\n            index=7,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""width"",\n            full_name=""caffe.BlobProto.width"",\n            index=8,\n            number=4,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=53,\n    serialized_end=257,\n)\n\n\n_BLOBPROTOVECTOR = _descriptor.Descriptor(\n    name=""BlobProtoVector"",\n    full_name=""caffe.BlobProtoVector"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""blobs"",\n            full_name=""caffe.BlobProtoVector.blobs"",\n            index=0,\n            number=1,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=259,\n    serialized_end=309,\n)\n\n\n_DATUM = _descriptor.Descriptor(\n    name=""Datum"",\n    full_name=""caffe.Datum"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""channels"",\n            full_name=""caffe.Datum.channels"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""height"",\n            full_name=""caffe.Datum.height"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""width"",\n            full_name=""caffe.Datum.width"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""data"",\n            full_name=""caffe.Datum.data"",\n            index=3,\n            number=4,\n            type=12,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b(""""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""label"",\n            full_name=""caffe.Datum.label"",\n            index=4,\n            number=5,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""float_data"",\n            full_name=""caffe.Datum.float_data"",\n            index=5,\n            number=6,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""encoded"",\n            full_name=""caffe.Datum.encoded"",\n            index=6,\n            number=7,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=312,\n    serialized_end=441,\n)\n\n\n_FILLERPARAMETER = _descriptor.Descriptor(\n    name=""FillerParameter"",\n    full_name=""caffe.FillerParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""type"",\n            full_name=""caffe.FillerParameter.type"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""constant"").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""value"",\n            full_name=""caffe.FillerParameter.value"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""min"",\n            full_name=""caffe.FillerParameter.min"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""max"",\n            full_name=""caffe.FillerParameter.max"",\n            index=3,\n            number=4,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mean"",\n            full_name=""caffe.FillerParameter.mean"",\n            index=4,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""std"",\n            full_name=""caffe.FillerParameter.std"",\n            index=5,\n            number=6,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""sparse"",\n            full_name=""caffe.FillerParameter.sparse"",\n            index=6,\n            number=7,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""variance_norm"",\n            full_name=""caffe.FillerParameter.variance_norm"",\n            index=7,\n            number=8,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_FILLERPARAMETER_VARIANCENORM],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=444,\n    serialized_end=710,\n)\n\n\n_NETPARAMETER = _descriptor.Descriptor(\n    name=""NetParameter"",\n    full_name=""caffe.NetParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""name"",\n            full_name=""caffe.NetParameter.name"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""input"",\n            full_name=""caffe.NetParameter.input"",\n            index=1,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""input_shape"",\n            full_name=""caffe.NetParameter.input_shape"",\n            index=2,\n            number=8,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""input_dim"",\n            full_name=""caffe.NetParameter.input_dim"",\n            index=3,\n            number=4,\n            type=5,\n            cpp_type=1,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""force_backward"",\n            full_name=""caffe.NetParameter.force_backward"",\n            index=4,\n            number=5,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""state"",\n            full_name=""caffe.NetParameter.state"",\n            index=5,\n            number=6,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""debug_info"",\n            full_name=""caffe.NetParameter.debug_info"",\n            index=6,\n            number=7,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""layer"",\n            full_name=""caffe.NetParameter.layer"",\n            index=7,\n            number=100,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""layers"",\n            full_name=""caffe.NetParameter.layers"",\n            index=8,\n            number=2,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=713,\n    serialized_end=983,\n)\n\n\n_SOLVERPARAMETER = _descriptor.Descriptor(\n    name=""SolverParameter"",\n    full_name=""caffe.SolverParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""net"",\n            full_name=""caffe.SolverParameter.net"",\n            index=0,\n            number=24,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""net_param"",\n            full_name=""caffe.SolverParameter.net_param"",\n            index=1,\n            number=25,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""train_net"",\n            full_name=""caffe.SolverParameter.train_net"",\n            index=2,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""test_net"",\n            full_name=""caffe.SolverParameter.test_net"",\n            index=3,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""train_net_param"",\n            full_name=""caffe.SolverParameter.train_net_param"",\n            index=4,\n            number=21,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""test_net_param"",\n            full_name=""caffe.SolverParameter.test_net_param"",\n            index=5,\n            number=22,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""train_state"",\n            full_name=""caffe.SolverParameter.train_state"",\n            index=6,\n            number=26,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""test_state"",\n            full_name=""caffe.SolverParameter.test_state"",\n            index=7,\n            number=27,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""test_iter"",\n            full_name=""caffe.SolverParameter.test_iter"",\n            index=8,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""test_interval"",\n            full_name=""caffe.SolverParameter.test_interval"",\n            index=9,\n            number=4,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""test_compute_loss"",\n            full_name=""caffe.SolverParameter.test_compute_loss"",\n            index=10,\n            number=19,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""test_initialization"",\n            full_name=""caffe.SolverParameter.test_initialization"",\n            index=11,\n            number=32,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""base_lr"",\n            full_name=""caffe.SolverParameter.base_lr"",\n            index=12,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""display"",\n            full_name=""caffe.SolverParameter.display"",\n            index=13,\n            number=6,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""average_loss"",\n            full_name=""caffe.SolverParameter.average_loss"",\n            index=14,\n            number=33,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""max_iter"",\n            full_name=""caffe.SolverParameter.max_iter"",\n            index=15,\n            number=7,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""iter_size"",\n            full_name=""caffe.SolverParameter.iter_size"",\n            index=16,\n            number=36,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""lr_policy"",\n            full_name=""caffe.SolverParameter.lr_policy"",\n            index=17,\n            number=8,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""gamma"",\n            full_name=""caffe.SolverParameter.gamma"",\n            index=18,\n            number=9,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""power"",\n            full_name=""caffe.SolverParameter.power"",\n            index=19,\n            number=10,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""momentum"",\n            full_name=""caffe.SolverParameter.momentum"",\n            index=20,\n            number=11,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""weight_decay"",\n            full_name=""caffe.SolverParameter.weight_decay"",\n            index=21,\n            number=12,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""regularization_type"",\n            full_name=""caffe.SolverParameter.regularization_type"",\n            index=22,\n            number=29,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""L2"").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stepsize"",\n            full_name=""caffe.SolverParameter.stepsize"",\n            index=23,\n            number=13,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stepvalue"",\n            full_name=""caffe.SolverParameter.stepvalue"",\n            index=24,\n            number=34,\n            type=5,\n            cpp_type=1,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""clip_gradients"",\n            full_name=""caffe.SolverParameter.clip_gradients"",\n            index=25,\n            number=35,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""snapshot"",\n            full_name=""caffe.SolverParameter.snapshot"",\n            index=26,\n            number=14,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""snapshot_prefix"",\n            full_name=""caffe.SolverParameter.snapshot_prefix"",\n            index=27,\n            number=15,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""snapshot_diff"",\n            full_name=""caffe.SolverParameter.snapshot_diff"",\n            index=28,\n            number=16,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""snapshot_format"",\n            full_name=""caffe.SolverParameter.snapshot_format"",\n            index=29,\n            number=37,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""solver_mode"",\n            full_name=""caffe.SolverParameter.solver_mode"",\n            index=30,\n            number=17,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""device_id"",\n            full_name=""caffe.SolverParameter.device_id"",\n            index=31,\n            number=18,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""random_seed"",\n            full_name=""caffe.SolverParameter.random_seed"",\n            index=32,\n            number=20,\n            type=3,\n            cpp_type=2,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""type"",\n            full_name=""caffe.SolverParameter.type"",\n            index=33,\n            number=40,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""SGD"").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""delta"",\n            full_name=""caffe.SolverParameter.delta"",\n            index=34,\n            number=31,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1e-08,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""momentum2"",\n            full_name=""caffe.SolverParameter.momentum2"",\n            index=35,\n            number=39,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.999,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""rms_decay"",\n            full_name=""caffe.SolverParameter.rms_decay"",\n            index=36,\n            number=38,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""debug_info"",\n            full_name=""caffe.SolverParameter.debug_info"",\n            index=37,\n            number=23,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""snapshot_after_train"",\n            full_name=""caffe.SolverParameter.snapshot_after_train"",\n            index=38,\n            number=28,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""solver_type"",\n            full_name=""caffe.SolverParameter.solver_type"",\n            index=39,\n            number=30,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _SOLVERPARAMETER_SNAPSHOTFORMAT,\n        _SOLVERPARAMETER_SOLVERMODE,\n        _SOLVERPARAMETER_SOLVERTYPE,\n    ],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=986,\n    serialized_end=2294,\n)\n\n\n_SOLVERSTATE = _descriptor.Descriptor(\n    name=""SolverState"",\n    full_name=""caffe.SolverState"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""iter"",\n            full_name=""caffe.SolverState.iter"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""learned_net"",\n            full_name=""caffe.SolverState.learned_net"",\n            index=1,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""history"",\n            full_name=""caffe.SolverState.history"",\n            index=2,\n            number=3,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""current_step"",\n            full_name=""caffe.SolverState.current_step"",\n            index=3,\n            number=4,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=2296,\n    serialized_end=2404,\n)\n\n\n_NETSTATE = _descriptor.Descriptor(\n    name=""NetState"",\n    full_name=""caffe.NetState"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""phase"",\n            full_name=""caffe.NetState.phase"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""level"",\n            full_name=""caffe.NetState.level"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stage"",\n            full_name=""caffe.NetState.stage"",\n            index=2,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=2406,\n    serialized_end=2484,\n)\n\n\n_NETSTATERULE = _descriptor.Descriptor(\n    name=""NetStateRule"",\n    full_name=""caffe.NetStateRule"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""phase"",\n            full_name=""caffe.NetStateRule.phase"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""min_level"",\n            full_name=""caffe.NetStateRule.min_level"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""max_level"",\n            full_name=""caffe.NetStateRule.max_level"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stage"",\n            full_name=""caffe.NetStateRule.stage"",\n            index=3,\n            number=4,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""not_stage"",\n            full_name=""caffe.NetStateRule.not_stage"",\n            index=4,\n            number=5,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=2486,\n    serialized_end=2601,\n)\n\n\n_PARAMSPEC = _descriptor.Descriptor(\n    name=""ParamSpec"",\n    full_name=""caffe.ParamSpec"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""name"",\n            full_name=""caffe.ParamSpec.name"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""share_mode"",\n            full_name=""caffe.ParamSpec.share_mode"",\n            index=1,\n            number=2,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""lr_mult"",\n            full_name=""caffe.ParamSpec.lr_mult"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""decay_mult"",\n            full_name=""caffe.ParamSpec.decay_mult"",\n            index=3,\n            number=4,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_PARAMSPEC_DIMCHECKMODE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=2604,\n    serialized_end=2767,\n)\n\n\n_LAYERPARAMETER = _descriptor.Descriptor(\n    name=""LayerParameter"",\n    full_name=""caffe.LayerParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""name"",\n            full_name=""caffe.LayerParameter.name"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""type"",\n            full_name=""caffe.LayerParameter.type"",\n            index=1,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bottom"",\n            full_name=""caffe.LayerParameter.bottom"",\n            index=2,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""top"",\n            full_name=""caffe.LayerParameter.top"",\n            index=3,\n            number=4,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""phase"",\n            full_name=""caffe.LayerParameter.phase"",\n            index=4,\n            number=10,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""loss_weight"",\n            full_name=""caffe.LayerParameter.loss_weight"",\n            index=5,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""param"",\n            full_name=""caffe.LayerParameter.param"",\n            index=6,\n            number=6,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""blobs"",\n            full_name=""caffe.LayerParameter.blobs"",\n            index=7,\n            number=7,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""propagate_down"",\n            full_name=""caffe.LayerParameter.propagate_down"",\n            index=8,\n            number=11,\n            type=8,\n            cpp_type=7,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""include"",\n            full_name=""caffe.LayerParameter.include"",\n            index=9,\n            number=8,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""exclude"",\n            full_name=""caffe.LayerParameter.exclude"",\n            index=10,\n            number=9,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""transform_param"",\n            full_name=""caffe.LayerParameter.transform_param"",\n            index=11,\n            number=100,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""loss_param"",\n            full_name=""caffe.LayerParameter.loss_param"",\n            index=12,\n            number=101,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""accuracy_param"",\n            full_name=""caffe.LayerParameter.accuracy_param"",\n            index=13,\n            number=102,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""adaptive_bias_channel_param"",\n            full_name=""caffe.LayerParameter.adaptive_bias_channel_param"",\n            index=14,\n            number=148,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""argmax_param"",\n            full_name=""caffe.LayerParameter.argmax_param"",\n            index=15,\n            number=103,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""batch_norm_param"",\n            full_name=""caffe.LayerParameter.batch_norm_param"",\n            index=16,\n            number=139,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_param"",\n            full_name=""caffe.LayerParameter.bias_param"",\n            index=17,\n            number=141,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_channel_param"",\n            full_name=""caffe.LayerParameter.bias_channel_param"",\n            index=18,\n            number=149,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""concat_param"",\n            full_name=""caffe.LayerParameter.concat_param"",\n            index=19,\n            number=104,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""contrastive_loss_param"",\n            full_name=""caffe.LayerParameter.contrastive_loss_param"",\n            index=20,\n            number=105,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""convolution_param"",\n            full_name=""caffe.LayerParameter.convolution_param"",\n            index=21,\n            number=106,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""data_param"",\n            full_name=""caffe.LayerParameter.data_param"",\n            index=22,\n            number=107,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""dense_crf_param"",\n            full_name=""caffe.LayerParameter.dense_crf_param"",\n            index=23,\n            number=146,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""domain_transform_param"",\n            full_name=""caffe.LayerParameter.domain_transform_param"",\n            index=24,\n            number=147,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""dropout_param"",\n            full_name=""caffe.LayerParameter.dropout_param"",\n            index=25,\n            number=108,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""dummy_data_param"",\n            full_name=""caffe.LayerParameter.dummy_data_param"",\n            index=26,\n            number=109,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""eltwise_param"",\n            full_name=""caffe.LayerParameter.eltwise_param"",\n            index=27,\n            number=110,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""elu_param"",\n            full_name=""caffe.LayerParameter.elu_param"",\n            index=28,\n            number=140,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""embed_param"",\n            full_name=""caffe.LayerParameter.embed_param"",\n            index=29,\n            number=137,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""exp_param"",\n            full_name=""caffe.LayerParameter.exp_param"",\n            index=30,\n            number=111,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""flatten_param"",\n            full_name=""caffe.LayerParameter.flatten_param"",\n            index=31,\n            number=135,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""hdf5_data_param"",\n            full_name=""caffe.LayerParameter.hdf5_data_param"",\n            index=32,\n            number=112,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""hdf5_output_param"",\n            full_name=""caffe.LayerParameter.hdf5_output_param"",\n            index=33,\n            number=113,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""hinge_loss_param"",\n            full_name=""caffe.LayerParameter.hinge_loss_param"",\n            index=34,\n            number=114,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""image_data_param"",\n            full_name=""caffe.LayerParameter.image_data_param"",\n            index=35,\n            number=115,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""infogain_loss_param"",\n            full_name=""caffe.LayerParameter.infogain_loss_param"",\n            index=36,\n            number=116,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""inner_product_param"",\n            full_name=""caffe.LayerParameter.inner_product_param"",\n            index=37,\n            number=117,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""interp_param"",\n            full_name=""caffe.LayerParameter.interp_param"",\n            index=38,\n            number=143,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""log_param"",\n            full_name=""caffe.LayerParameter.log_param"",\n            index=39,\n            number=134,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""lrn_param"",\n            full_name=""caffe.LayerParameter.lrn_param"",\n            index=40,\n            number=118,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mat_read_param"",\n            full_name=""caffe.LayerParameter.mat_read_param"",\n            index=41,\n            number=151,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mat_write_param"",\n            full_name=""caffe.LayerParameter.mat_write_param"",\n            index=42,\n            number=145,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""memory_data_param"",\n            full_name=""caffe.LayerParameter.memory_data_param"",\n            index=43,\n            number=119,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mvn_param"",\n            full_name=""caffe.LayerParameter.mvn_param"",\n            index=44,\n            number=120,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pooling_param"",\n            full_name=""caffe.LayerParameter.pooling_param"",\n            index=45,\n            number=121,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""power_param"",\n            full_name=""caffe.LayerParameter.power_param"",\n            index=46,\n            number=122,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""prelu_param"",\n            full_name=""caffe.LayerParameter.prelu_param"",\n            index=47,\n            number=131,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""python_param"",\n            full_name=""caffe.LayerParameter.python_param"",\n            index=48,\n            number=130,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""reduction_param"",\n            full_name=""caffe.LayerParameter.reduction_param"",\n            index=49,\n            number=136,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""relu_param"",\n            full_name=""caffe.LayerParameter.relu_param"",\n            index=50,\n            number=123,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""reshape_param"",\n            full_name=""caffe.LayerParameter.reshape_param"",\n            index=51,\n            number=133,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale_param"",\n            full_name=""caffe.LayerParameter.scale_param"",\n            index=52,\n            number=142,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""seg_accuracy_param"",\n            full_name=""caffe.LayerParameter.seg_accuracy_param"",\n            index=53,\n            number=144,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""sigmoid_param"",\n            full_name=""caffe.LayerParameter.sigmoid_param"",\n            index=54,\n            number=124,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""softmax_param"",\n            full_name=""caffe.LayerParameter.softmax_param"",\n            index=55,\n            number=125,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""spp_param"",\n            full_name=""caffe.LayerParameter.spp_param"",\n            index=56,\n            number=132,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""slice_param"",\n            full_name=""caffe.LayerParameter.slice_param"",\n            index=57,\n            number=126,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""tanh_param"",\n            full_name=""caffe.LayerParameter.tanh_param"",\n            index=58,\n            number=127,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""threshold_param"",\n            full_name=""caffe.LayerParameter.threshold_param"",\n            index=59,\n            number=128,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""tile_param"",\n            full_name=""caffe.LayerParameter.tile_param"",\n            index=60,\n            number=138,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""unique_label_param"",\n            full_name=""caffe.LayerParameter.unique_label_param"",\n            index=61,\n            number=150,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""window_data_param"",\n            full_name=""caffe.LayerParameter.window_data_param"",\n            index=62,\n            number=129,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=2770,\n    serialized_end=5654,\n)\n\n\n_TRANSFORMATIONPARAMETER = _descriptor.Descriptor(\n    name=""TransformationParameter"",\n    full_name=""caffe.TransformationParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""scale"",\n            full_name=""caffe.TransformationParameter.scale"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mirror"",\n            full_name=""caffe.TransformationParameter.mirror"",\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""crop_size"",\n            full_name=""caffe.TransformationParameter.crop_size"",\n            index=2,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mean_file"",\n            full_name=""caffe.TransformationParameter.mean_file"",\n            index=3,\n            number=4,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mean_value"",\n            full_name=""caffe.TransformationParameter.mean_value"",\n            index=4,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""force_color"",\n            full_name=""caffe.TransformationParameter.force_color"",\n            index=5,\n            number=6,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""force_gray"",\n            full_name=""caffe.TransformationParameter.force_gray"",\n            index=6,\n            number=7,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale_factors"",\n            full_name=""caffe.TransformationParameter.scale_factors"",\n            index=7,\n            number=8,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""crop_width"",\n            full_name=""caffe.TransformationParameter.crop_width"",\n            index=8,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""crop_height"",\n            full_name=""caffe.TransformationParameter.crop_height"",\n            index=9,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=5657,\n    serialized_end=5909,\n)\n\n\n_LOSSPARAMETER = _descriptor.Descriptor(\n    name=""LossParameter"",\n    full_name=""caffe.LossParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""ignore_label"",\n            full_name=""caffe.LossParameter.ignore_label"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""normalization"",\n            full_name=""caffe.LossParameter.normalization"",\n            index=1,\n            number=3,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""normalize"",\n            full_name=""caffe.LossParameter.normalize"",\n            index=2,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=False,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_LOSSPARAMETER_NORMALIZATIONMODE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=5912,\n    serialized_end=6106,\n)\n\n\n_ACCURACYPARAMETER = _descriptor.Descriptor(\n    name=""AccuracyParameter"",\n    full_name=""caffe.AccuracyParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""top_k"",\n            full_name=""caffe.AccuracyParameter.top_k"",\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.AccuracyParameter.axis"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""ignore_label"",\n            full_name=""caffe.AccuracyParameter.ignore_label"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=6108,\n    serialized_end=6184,\n)\n\n\n_ADAPTIVEBIASCHANNELPARAMETER = _descriptor.Descriptor(\n    name=""AdaptiveBiasChannelParameter"",\n    full_name=""caffe.AdaptiveBiasChannelParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""num_iter"",\n            full_name=""caffe.AdaptiveBiasChannelParameter.num_iter"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bg_portion"",\n            full_name=""caffe.AdaptiveBiasChannelParameter.bg_portion"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.2,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""fg_portion"",\n            full_name=""caffe.AdaptiveBiasChannelParameter.fg_portion"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.2,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""suppress_others"",\n            full_name=""caffe.AdaptiveBiasChannelParameter.suppress_others"",\n            index=3,\n            number=4,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""margin_others"",\n            full_name=""caffe.AdaptiveBiasChannelParameter.margin_others"",\n            index=4,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1e-05,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=6187,\n    serialized_end=6349,\n)\n\n\n_ARGMAXPARAMETER = _descriptor.Descriptor(\n    name=""ArgMaxParameter"",\n    full_name=""caffe.ArgMaxParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""out_max_val"",\n            full_name=""caffe.ArgMaxParameter.out_max_val"",\n            index=0,\n            number=1,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""top_k"",\n            full_name=""caffe.ArgMaxParameter.top_k"",\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.ArgMaxParameter.axis"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=6351,\n    serialized_end=6428,\n)\n\n\n_BIASCHANNELPARAMETER = _descriptor.Descriptor(\n    name=""BiasChannelParameter"",\n    full_name=""caffe.BiasChannelParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""bg_bias"",\n            full_name=""caffe.BiasChannelParameter.bg_bias"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""fg_bias"",\n            full_name=""caffe.BiasChannelParameter.fg_bias"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=2,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""ignore_label"",\n            full_name=""caffe.BiasChannelParameter.ignore_label"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""label_type"",\n            full_name=""caffe.BiasChannelParameter.label_type"",\n            index=3,\n            number=4,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""background_label"",\n            full_name=""caffe.BiasChannelParameter.background_label"",\n            index=4,\n            number=6,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_BIASCHANNELPARAMETER_LABELTYPE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=6431,\n    serialized_end=6645,\n)\n\n\n_CONCATPARAMETER = _descriptor.Descriptor(\n    name=""ConcatParameter"",\n    full_name=""caffe.ConcatParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.ConcatParameter.axis"",\n            index=0,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""concat_dim"",\n            full_name=""caffe.ConcatParameter.concat_dim"",\n            index=1,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=6647,\n    serialized_end=6704,\n)\n\n\n_BATCHNORMPARAMETER = _descriptor.Descriptor(\n    name=""BatchNormParameter"",\n    full_name=""caffe.BatchNormParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""use_global_stats"",\n            full_name=""caffe.BatchNormParameter.use_global_stats"",\n            index=0,\n            number=1,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=False,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""moving_average_fraction"",\n            full_name=""caffe.BatchNormParameter.moving_average_fraction"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.999,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""eps"",\n            full_name=""caffe.BatchNormParameter.eps"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1e-05,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""update_global_stats"",\n            full_name=""caffe.BatchNormParameter.update_global_stats"",\n            index=3,\n            number=4,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=6707,\n    serialized_end=6849,\n)\n\n\n_BIASPARAMETER = _descriptor.Descriptor(\n    name=""BiasParameter"",\n    full_name=""caffe.BiasParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.BiasParameter.axis"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""num_axes"",\n            full_name=""caffe.BiasParameter.num_axes"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""filler"",\n            full_name=""caffe.BiasParameter.filler"",\n            index=2,\n            number=3,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=6851,\n    serialized_end=6944,\n)\n\n\n_CONTRASTIVELOSSPARAMETER = _descriptor.Descriptor(\n    name=""ContrastiveLossParameter"",\n    full_name=""caffe.ContrastiveLossParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""margin"",\n            full_name=""caffe.ContrastiveLossParameter.margin"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""legacy_version"",\n            full_name=""caffe.ContrastiveLossParameter.legacy_version"",\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=6946,\n    serialized_end=7022,\n)\n\n\n_CONVOLUTIONPARAMETER = _descriptor.Descriptor(\n    name=""ConvolutionParameter"",\n    full_name=""caffe.ConvolutionParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""num_output"",\n            full_name=""caffe.ConvolutionParameter.num_output"",\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_term"",\n            full_name=""caffe.ConvolutionParameter.bias_term"",\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad"",\n            full_name=""caffe.ConvolutionParameter.pad"",\n            index=2,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""kernel_size"",\n            full_name=""caffe.ConvolutionParameter.kernel_size"",\n            index=3,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stride"",\n            full_name=""caffe.ConvolutionParameter.stride"",\n            index=4,\n            number=6,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""dilation"",\n            full_name=""caffe.ConvolutionParameter.dilation"",\n            index=5,\n            number=18,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad_h"",\n            full_name=""caffe.ConvolutionParameter.pad_h"",\n            index=6,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad_w"",\n            full_name=""caffe.ConvolutionParameter.pad_w"",\n            index=7,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""kernel_h"",\n            full_name=""caffe.ConvolutionParameter.kernel_h"",\n            index=8,\n            number=11,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""kernel_w"",\n            full_name=""caffe.ConvolutionParameter.kernel_w"",\n            index=9,\n            number=12,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stride_h"",\n            full_name=""caffe.ConvolutionParameter.stride_h"",\n            index=10,\n            number=13,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stride_w"",\n            full_name=""caffe.ConvolutionParameter.stride_w"",\n            index=11,\n            number=14,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""group"",\n            full_name=""caffe.ConvolutionParameter.group"",\n            index=12,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""weight_filler"",\n            full_name=""caffe.ConvolutionParameter.weight_filler"",\n            index=13,\n            number=7,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_filler"",\n            full_name=""caffe.ConvolutionParameter.bias_filler"",\n            index=14,\n            number=8,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""engine"",\n            full_name=""caffe.ConvolutionParameter.engine"",\n            index=15,\n            number=15,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.ConvolutionParameter.axis"",\n            index=16,\n            number=16,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""force_nd_im2col"",\n            full_name=""caffe.ConvolutionParameter.force_nd_im2col"",\n            index=17,\n            number=17,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_CONVOLUTIONPARAMETER_ENGINE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=7025,\n    serialized_end=7533,\n)\n\n\n_DATAPARAMETER = _descriptor.Descriptor(\n    name=""DataParameter"",\n    full_name=""caffe.DataParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""source"",\n            full_name=""caffe.DataParameter.source"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""batch_size"",\n            full_name=""caffe.DataParameter.batch_size"",\n            index=1,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""rand_skip"",\n            full_name=""caffe.DataParameter.rand_skip"",\n            index=2,\n            number=7,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""backend"",\n            full_name=""caffe.DataParameter.backend"",\n            index=3,\n            number=8,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale"",\n            full_name=""caffe.DataParameter.scale"",\n            index=4,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mean_file"",\n            full_name=""caffe.DataParameter.mean_file"",\n            index=5,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""crop_size"",\n            full_name=""caffe.DataParameter.crop_size"",\n            index=6,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mirror"",\n            full_name=""caffe.DataParameter.mirror"",\n            index=7,\n            number=6,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""force_encoded_color"",\n            full_name=""caffe.DataParameter.force_encoded_color"",\n            index=8,\n            number=9,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""prefetch"",\n            full_name=""caffe.DataParameter.prefetch"",\n            index=9,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=4,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_DATAPARAMETER_DB],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=7536,\n    serialized_end=7828,\n)\n\n\n_DENSECRFPARAMETER = _descriptor.Descriptor(\n    name=""DenseCRFParameter"",\n    full_name=""caffe.DenseCRFParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""max_iter"",\n            full_name=""caffe.DenseCRFParameter.max_iter"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=10,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pos_xy_std"",\n            full_name=""caffe.DenseCRFParameter.pos_xy_std"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pos_w"",\n            full_name=""caffe.DenseCRFParameter.pos_w"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bi_xy_std"",\n            full_name=""caffe.DenseCRFParameter.bi_xy_std"",\n            index=3,\n            number=4,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bi_rgb_std"",\n            full_name=""caffe.DenseCRFParameter.bi_rgb_std"",\n            index=4,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bi_w"",\n            full_name=""caffe.DenseCRFParameter.bi_w"",\n            index=5,\n            number=6,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""output_probability"",\n            full_name=""caffe.DenseCRFParameter.output_probability"",\n            index=6,\n            number=7,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=7831,\n    serialized_end=7994,\n)\n\n\n_DOMAINTRANSFORMPARAMETER = _descriptor.Descriptor(\n    name=""DomainTransformParameter"",\n    full_name=""caffe.DomainTransformParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""num_iter"",\n            full_name=""caffe.DomainTransformParameter.num_iter"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=3,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""spatial_sigma"",\n            full_name=""caffe.DomainTransformParameter.spatial_sigma"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=50,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""range_sigma"",\n            full_name=""caffe.DomainTransformParameter.range_sigma"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""min_weight"",\n            full_name=""caffe.DomainTransformParameter.min_weight"",\n            index=3,\n            number=4,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=7996,\n    serialized_end=8117,\n)\n\n\n_DROPOUTPARAMETER = _descriptor.Descriptor(\n    name=""DropoutParameter"",\n    full_name=""caffe.DropoutParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""dropout_ratio"",\n            full_name=""caffe.DropoutParameter.dropout_ratio"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8119,\n    serialized_end=8165,\n)\n\n\n_DUMMYDATAPARAMETER = _descriptor.Descriptor(\n    name=""DummyDataParameter"",\n    full_name=""caffe.DummyDataParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""data_filler"",\n            full_name=""caffe.DummyDataParameter.data_filler"",\n            index=0,\n            number=1,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""shape"",\n            full_name=""caffe.DummyDataParameter.shape"",\n            index=1,\n            number=6,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""num"",\n            full_name=""caffe.DummyDataParameter.num"",\n            index=2,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""channels"",\n            full_name=""caffe.DummyDataParameter.channels"",\n            index=3,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""height"",\n            full_name=""caffe.DummyDataParameter.height"",\n            index=4,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""width"",\n            full_name=""caffe.DummyDataParameter.width"",\n            index=5,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8168,\n    serialized_end=8328,\n)\n\n\n_ELTWISEPARAMETER = _descriptor.Descriptor(\n    name=""EltwiseParameter"",\n    full_name=""caffe.EltwiseParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""operation"",\n            full_name=""caffe.EltwiseParameter.operation"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""coeff"",\n            full_name=""caffe.EltwiseParameter.coeff"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stable_prod_grad"",\n            full_name=""caffe.EltwiseParameter.stable_prod_grad"",\n            index=2,\n            number=3,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_ELTWISEPARAMETER_ELTWISEOP],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8331,\n    serialized_end=8496,\n)\n\n\n_ELUPARAMETER = _descriptor.Descriptor(\n    name=""ELUParameter"",\n    full_name=""caffe.ELUParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""alpha"",\n            full_name=""caffe.ELUParameter.alpha"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8498,\n    serialized_end=8530,\n)\n\n\n_EMBEDPARAMETER = _descriptor.Descriptor(\n    name=""EmbedParameter"",\n    full_name=""caffe.EmbedParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""num_output"",\n            full_name=""caffe.EmbedParameter.num_output"",\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""input_dim"",\n            full_name=""caffe.EmbedParameter.input_dim"",\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_term"",\n            full_name=""caffe.EmbedParameter.bias_term"",\n            index=2,\n            number=3,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""weight_filler"",\n            full_name=""caffe.EmbedParameter.weight_filler"",\n            index=3,\n            number=4,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_filler"",\n            full_name=""caffe.EmbedParameter.bias_filler"",\n            index=4,\n            number=5,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8533,\n    serialized_end=8705,\n)\n\n\n_EXPPARAMETER = _descriptor.Descriptor(\n    name=""ExpParameter"",\n    full_name=""caffe.ExpParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""base"",\n            full_name=""caffe.ExpParameter.base"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale"",\n            full_name=""caffe.ExpParameter.scale"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""shift"",\n            full_name=""caffe.ExpParameter.shift"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8707,\n    serialized_end=8775,\n)\n\n\n_FLATTENPARAMETER = _descriptor.Descriptor(\n    name=""FlattenParameter"",\n    full_name=""caffe.FlattenParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.FlattenParameter.axis"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""end_axis"",\n            full_name=""caffe.FlattenParameter.end_axis"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8777,\n    serialized_end=8834,\n)\n\n\n_HDF5DATAPARAMETER = _descriptor.Descriptor(\n    name=""HDF5DataParameter"",\n    full_name=""caffe.HDF5DataParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""source"",\n            full_name=""caffe.HDF5DataParameter.source"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""batch_size"",\n            full_name=""caffe.HDF5DataParameter.batch_size"",\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""shuffle"",\n            full_name=""caffe.HDF5DataParameter.shuffle"",\n            index=2,\n            number=3,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8836,\n    serialized_end=8915,\n)\n\n\n_HDF5OUTPUTPARAMETER = _descriptor.Descriptor(\n    name=""HDF5OutputParameter"",\n    full_name=""caffe.HDF5OutputParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""file_name"",\n            full_name=""caffe.HDF5OutputParameter.file_name"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8917,\n    serialized_end=8957,\n)\n\n\n_HINGELOSSPARAMETER = _descriptor.Descriptor(\n    name=""HingeLossParameter"",\n    full_name=""caffe.HingeLossParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""norm"",\n            full_name=""caffe.HingeLossParameter.norm"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_HINGELOSSPARAMETER_NORM],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8959,\n    serialized_end=9053,\n)\n\n\n_IMAGEDATAPARAMETER = _descriptor.Descriptor(\n    name=""ImageDataParameter"",\n    full_name=""caffe.ImageDataParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""source"",\n            full_name=""caffe.ImageDataParameter.source"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""batch_size"",\n            full_name=""caffe.ImageDataParameter.batch_size"",\n            index=1,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""rand_skip"",\n            full_name=""caffe.ImageDataParameter.rand_skip"",\n            index=2,\n            number=7,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""shuffle"",\n            full_name=""caffe.ImageDataParameter.shuffle"",\n            index=3,\n            number=8,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""new_height"",\n            full_name=""caffe.ImageDataParameter.new_height"",\n            index=4,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""new_width"",\n            full_name=""caffe.ImageDataParameter.new_width"",\n            index=5,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""is_color"",\n            full_name=""caffe.ImageDataParameter.is_color"",\n            index=6,\n            number=11,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""ignore_label"",\n            full_name=""caffe.ImageDataParameter.ignore_label"",\n            index=7,\n            number=15,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=255,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""label_type"",\n            full_name=""caffe.ImageDataParameter.label_type"",\n            index=8,\n            number=16,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale"",\n            full_name=""caffe.ImageDataParameter.scale"",\n            index=9,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mean_file"",\n            full_name=""caffe.ImageDataParameter.mean_file"",\n            index=10,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""crop_size"",\n            full_name=""caffe.ImageDataParameter.crop_size"",\n            index=11,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mirror"",\n            full_name=""caffe.ImageDataParameter.mirror"",\n            index=12,\n            number=6,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""root_folder"",\n            full_name=""caffe.ImageDataParameter.root_folder"",\n            index=13,\n            number=12,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_IMAGEDATAPARAMETER_LABELTYPE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9056,\n    serialized_end=9471,\n)\n\n\n_INFOGAINLOSSPARAMETER = _descriptor.Descriptor(\n    name=""InfogainLossParameter"",\n    full_name=""caffe.InfogainLossParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""source"",\n            full_name=""caffe.InfogainLossParameter.source"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9473,\n    serialized_end=9512,\n)\n\n\n_INNERPRODUCTPARAMETER = _descriptor.Descriptor(\n    name=""InnerProductParameter"",\n    full_name=""caffe.InnerProductParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""num_output"",\n            full_name=""caffe.InnerProductParameter.num_output"",\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_term"",\n            full_name=""caffe.InnerProductParameter.bias_term"",\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""weight_filler"",\n            full_name=""caffe.InnerProductParameter.weight_filler"",\n            index=2,\n            number=3,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_filler"",\n            full_name=""caffe.InnerProductParameter.bias_filler"",\n            index=3,\n            number=4,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.InnerProductParameter.axis"",\n            index=4,\n            number=5,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""transpose"",\n            full_name=""caffe.InnerProductParameter.transpose"",\n            index=5,\n            number=6,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9515,\n    serialized_end=9718,\n)\n\n\n_INTERPPARAMETER = _descriptor.Descriptor(\n    name=""InterpParameter"",\n    full_name=""caffe.InterpParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""height"",\n            full_name=""caffe.InterpParameter.height"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""width"",\n            full_name=""caffe.InterpParameter.width"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""zoom_factor"",\n            full_name=""caffe.InterpParameter.zoom_factor"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""shrink_factor"",\n            full_name=""caffe.InterpParameter.shrink_factor"",\n            index=3,\n            number=4,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad_beg"",\n            full_name=""caffe.InterpParameter.pad_beg"",\n            index=4,\n            number=5,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad_end"",\n            full_name=""caffe.InterpParameter.pad_end"",\n            index=5,\n            number=6,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9721,\n    serialized_end=9865,\n)\n\n\n_LOGPARAMETER = _descriptor.Descriptor(\n    name=""LogParameter"",\n    full_name=""caffe.LogParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""base"",\n            full_name=""caffe.LogParameter.base"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale"",\n            full_name=""caffe.LogParameter.scale"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""shift"",\n            full_name=""caffe.LogParameter.shift"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9867,\n    serialized_end=9935,\n)\n\n\n_LRNPARAMETER = _descriptor.Descriptor(\n    name=""LRNParameter"",\n    full_name=""caffe.LRNParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""local_size"",\n            full_name=""caffe.LRNParameter.local_size"",\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""alpha"",\n            full_name=""caffe.LRNParameter.alpha"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""beta"",\n            full_name=""caffe.LRNParameter.beta"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.75,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""norm_region"",\n            full_name=""caffe.LRNParameter.norm_region"",\n            index=3,\n            number=4,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""k"",\n            full_name=""caffe.LRNParameter.k"",\n            index=4,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""engine"",\n            full_name=""caffe.LRNParameter.engine"",\n            index=5,\n            number=6,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_LRNPARAMETER_NORMREGION, _LRNPARAMETER_ENGINE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9938,\n    serialized_end=10250,\n)\n\n\n_MATREADPARAMETER = _descriptor.Descriptor(\n    name=""MatReadParameter"",\n    full_name=""caffe.MatReadParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""prefix"",\n            full_name=""caffe.MatReadParameter.prefix"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=2,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""source"",\n            full_name=""caffe.MatReadParameter.source"",\n            index=1,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""strip"",\n            full_name=""caffe.MatReadParameter.strip"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""batch_size"",\n            full_name=""caffe.MatReadParameter.batch_size"",\n            index=3,\n            number=4,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10252,\n    serialized_end=10345,\n)\n\n\n_MATWRITEPARAMETER = _descriptor.Descriptor(\n    name=""MatWriteParameter"",\n    full_name=""caffe.MatWriteParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""prefix"",\n            full_name=""caffe.MatWriteParameter.prefix"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=2,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""source"",\n            full_name=""caffe.MatWriteParameter.source"",\n            index=1,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""strip"",\n            full_name=""caffe.MatWriteParameter.strip"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""period"",\n            full_name=""caffe.MatWriteParameter.period"",\n            index=3,\n            number=4,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10347,\n    serialized_end=10437,\n)\n\n\n_MEMORYDATAPARAMETER = _descriptor.Descriptor(\n    name=""MemoryDataParameter"",\n    full_name=""caffe.MemoryDataParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""batch_size"",\n            full_name=""caffe.MemoryDataParameter.batch_size"",\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""channels"",\n            full_name=""caffe.MemoryDataParameter.channels"",\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""height"",\n            full_name=""caffe.MemoryDataParameter.height"",\n            index=2,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""width"",\n            full_name=""caffe.MemoryDataParameter.width"",\n            index=3,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10439,\n    serialized_end=10529,\n)\n\n\n_MVNPARAMETER = _descriptor.Descriptor(\n    name=""MVNParameter"",\n    full_name=""caffe.MVNParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""normalize_variance"",\n            full_name=""caffe.MVNParameter.normalize_variance"",\n            index=0,\n            number=1,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""across_channels"",\n            full_name=""caffe.MVNParameter.across_channels"",\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""eps"",\n            full_name=""caffe.MVNParameter.eps"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1e-09,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10531,\n    serialized_end=10631,\n)\n\n\n_POOLINGPARAMETER = _descriptor.Descriptor(\n    name=""PoolingParameter"",\n    full_name=""caffe.PoolingParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""pool"",\n            full_name=""caffe.PoolingParameter.pool"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad"",\n            full_name=""caffe.PoolingParameter.pad"",\n            index=1,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad_h"",\n            full_name=""caffe.PoolingParameter.pad_h"",\n            index=2,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad_w"",\n            full_name=""caffe.PoolingParameter.pad_w"",\n            index=3,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""kernel_size"",\n            full_name=""caffe.PoolingParameter.kernel_size"",\n            index=4,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""kernel_h"",\n            full_name=""caffe.PoolingParameter.kernel_h"",\n            index=5,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""kernel_w"",\n            full_name=""caffe.PoolingParameter.kernel_w"",\n            index=6,\n            number=6,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stride"",\n            full_name=""caffe.PoolingParameter.stride"",\n            index=7,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stride_h"",\n            full_name=""caffe.PoolingParameter.stride_h"",\n            index=8,\n            number=7,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stride_w"",\n            full_name=""caffe.PoolingParameter.stride_w"",\n            index=9,\n            number=8,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""engine"",\n            full_name=""caffe.PoolingParameter.engine"",\n            index=10,\n            number=11,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""global_pooling"",\n            full_name=""caffe.PoolingParameter.global_pooling"",\n            index=11,\n            number=12,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_POOLINGPARAMETER_POOLMETHOD, _POOLINGPARAMETER_ENGINE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10634,\n    serialized_end=11052,\n)\n\n\n_POWERPARAMETER = _descriptor.Descriptor(\n    name=""PowerParameter"",\n    full_name=""caffe.PowerParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""power"",\n            full_name=""caffe.PowerParameter.power"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale"",\n            full_name=""caffe.PowerParameter.scale"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""shift"",\n            full_name=""caffe.PowerParameter.shift"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11054,\n    serialized_end=11124,\n)\n\n\n_PYTHONPARAMETER = _descriptor.Descriptor(\n    name=""PythonParameter"",\n    full_name=""caffe.PythonParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""module"",\n            full_name=""caffe.PythonParameter.module"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""layer"",\n            full_name=""caffe.PythonParameter.layer"",\n            index=1,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""param_str"",\n            full_name=""caffe.PythonParameter.param_str"",\n            index=2,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""share_in_parallel"",\n            full_name=""caffe.PythonParameter.share_in_parallel"",\n            index=3,\n            number=4,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11126,\n    serialized_end=11229,\n)\n\n\n_REDUCTIONPARAMETER = _descriptor.Descriptor(\n    name=""ReductionParameter"",\n    full_name=""caffe.ReductionParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""operation"",\n            full_name=""caffe.ReductionParameter.operation"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.ReductionParameter.axis"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""coeff"",\n            full_name=""caffe.ReductionParameter.coeff"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_REDUCTIONPARAMETER_REDUCTIONOP],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11232,\n    serialized_end=11405,\n)\n\n\n_RELUPARAMETER = _descriptor.Descriptor(\n    name=""ReLUParameter"",\n    full_name=""caffe.ReLUParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""negative_slope"",\n            full_name=""caffe.ReLUParameter.negative_slope"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""engine"",\n            full_name=""caffe.ReLUParameter.engine"",\n            index=1,\n            number=2,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_RELUPARAMETER_ENGINE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11408,\n    serialized_end=11549,\n)\n\n\n_RESHAPEPARAMETER = _descriptor.Descriptor(\n    name=""ReshapeParameter"",\n    full_name=""caffe.ReshapeParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""shape"",\n            full_name=""caffe.ReshapeParameter.shape"",\n            index=0,\n            number=1,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.ReshapeParameter.axis"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""num_axes"",\n            full_name=""caffe.ReshapeParameter.num_axes"",\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11551,\n    serialized_end=11641,\n)\n\n\n_SCALEPARAMETER = _descriptor.Descriptor(\n    name=""ScaleParameter"",\n    full_name=""caffe.ScaleParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.ScaleParameter.axis"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""num_axes"",\n            full_name=""caffe.ScaleParameter.num_axes"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""filler"",\n            full_name=""caffe.ScaleParameter.filler"",\n            index=2,\n            number=3,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_term"",\n            full_name=""caffe.ScaleParameter.bias_term"",\n            index=3,\n            number=4,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_filler"",\n            full_name=""caffe.ScaleParameter.bias_filler"",\n            index=4,\n            number=5,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11644,\n    serialized_end=11809,\n)\n\n\n_SEGACCURACYPARAMETER = _descriptor.Descriptor(\n    name=""SegAccuracyParameter"",\n    full_name=""caffe.SegAccuracyParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""metric"",\n            full_name=""caffe.SegAccuracyParameter.metric"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""ignore_label"",\n            full_name=""caffe.SegAccuracyParameter.ignore_label"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""reset"",\n            full_name=""caffe.SegAccuracyParameter.reset"",\n            index=2,\n            number=3,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_SEGACCURACYPARAMETER_ACCURACYMETRIC],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11812,\n    serialized_end=12022,\n)\n\n\n_SIGMOIDPARAMETER = _descriptor.Descriptor(\n    name=""SigmoidParameter"",\n    full_name=""caffe.SigmoidParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""engine"",\n            full_name=""caffe.SigmoidParameter.engine"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_SIGMOIDPARAMETER_ENGINE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12024,\n    serialized_end=12144,\n)\n\n\n_SLICEPARAMETER = _descriptor.Descriptor(\n    name=""SliceParameter"",\n    full_name=""caffe.SliceParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.SliceParameter.axis"",\n            index=0,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""slice_point"",\n            full_name=""caffe.SliceParameter.slice_point"",\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""slice_dim"",\n            full_name=""caffe.SliceParameter.slice_dim"",\n            index=2,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12146,\n    serialized_end=12222,\n)\n\n\n_SOFTMAXPARAMETER = _descriptor.Descriptor(\n    name=""SoftmaxParameter"",\n    full_name=""caffe.SoftmaxParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""engine"",\n            full_name=""caffe.SoftmaxParameter.engine"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.SoftmaxParameter.axis"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_SOFTMAXPARAMETER_ENGINE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12225,\n    serialized_end=12362,\n)\n\n\n_TANHPARAMETER = _descriptor.Descriptor(\n    name=""TanHParameter"",\n    full_name=""caffe.TanHParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""engine"",\n            full_name=""caffe.TanHParameter.engine"",\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_TANHPARAMETER_ENGINE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12364,\n    serialized_end=12478,\n)\n\n\n_TILEPARAMETER = _descriptor.Descriptor(\n    name=""TileParameter"",\n    full_name=""caffe.TileParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""axis"",\n            full_name=""caffe.TileParameter.axis"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""tiles"",\n            full_name=""caffe.TileParameter.tiles"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12480,\n    serialized_end=12527,\n)\n\n\n_THRESHOLDPARAMETER = _descriptor.Descriptor(\n    name=""ThresholdParameter"",\n    full_name=""caffe.ThresholdParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""threshold"",\n            full_name=""caffe.ThresholdParameter.threshold"",\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        )\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12529,\n    serialized_end=12571,\n)\n\n\n_UNIQUELABELPARAMETER = _descriptor.Descriptor(\n    name=""UniqueLabelParameter"",\n    full_name=""caffe.UniqueLabelParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""max_labels"",\n            full_name=""caffe.UniqueLabelParameter.max_labels"",\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=2,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""ignore_label"",\n            full_name=""caffe.UniqueLabelParameter.ignore_label"",\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""force_label"",\n            full_name=""caffe.UniqueLabelParameter.force_label"",\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12573,\n    serialized_end=12658,\n)\n\n\n_WINDOWDATAPARAMETER = _descriptor.Descriptor(\n    name=""WindowDataParameter"",\n    full_name=""caffe.WindowDataParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""source"",\n            full_name=""caffe.WindowDataParameter.source"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale"",\n            full_name=""caffe.WindowDataParameter.scale"",\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mean_file"",\n            full_name=""caffe.WindowDataParameter.mean_file"",\n            index=2,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""batch_size"",\n            full_name=""caffe.WindowDataParameter.batch_size"",\n            index=3,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""crop_size"",\n            full_name=""caffe.WindowDataParameter.crop_size"",\n            index=4,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mirror"",\n            full_name=""caffe.WindowDataParameter.mirror"",\n            index=5,\n            number=6,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""fg_threshold"",\n            full_name=""caffe.WindowDataParameter.fg_threshold"",\n            index=6,\n            number=7,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bg_threshold"",\n            full_name=""caffe.WindowDataParameter.bg_threshold"",\n            index=7,\n            number=8,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""fg_fraction"",\n            full_name=""caffe.WindowDataParameter.fg_fraction"",\n            index=8,\n            number=9,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.25,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""context_pad"",\n            full_name=""caffe.WindowDataParameter.context_pad"",\n            index=9,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""crop_mode"",\n            full_name=""caffe.WindowDataParameter.crop_mode"",\n            index=10,\n            number=11,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""warp"").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""cache_images"",\n            full_name=""caffe.WindowDataParameter.cache_images"",\n            index=11,\n            number=12,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""root_folder"",\n            full_name=""caffe.WindowDataParameter.root_folder"",\n            index=12,\n            number=13,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12661,\n    serialized_end=12982,\n)\n\n\n_SPPPARAMETER = _descriptor.Descriptor(\n    name=""SPPParameter"",\n    full_name=""caffe.SPPParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""pyramid_height"",\n            full_name=""caffe.SPPParameter.pyramid_height"",\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pool"",\n            full_name=""caffe.SPPParameter.pool"",\n            index=1,\n            number=2,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""engine"",\n            full_name=""caffe.SPPParameter.engine"",\n            index=2,\n            number=6,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_SPPPARAMETER_POOLMETHOD, _SPPPARAMETER_ENGINE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12985,\n    serialized_end=13220,\n)\n\n\n_V1LAYERPARAMETER = _descriptor.Descriptor(\n    name=""V1LayerParameter"",\n    full_name=""caffe.V1LayerParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""bottom"",\n            full_name=""caffe.V1LayerParameter.bottom"",\n            index=0,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""top"",\n            full_name=""caffe.V1LayerParameter.top"",\n            index=1,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""name"",\n            full_name=""caffe.V1LayerParameter.name"",\n            index=2,\n            number=4,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""include"",\n            full_name=""caffe.V1LayerParameter.include"",\n            index=3,\n            number=32,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""exclude"",\n            full_name=""caffe.V1LayerParameter.exclude"",\n            index=4,\n            number=33,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""type"",\n            full_name=""caffe.V1LayerParameter.type"",\n            index=5,\n            number=5,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""blobs"",\n            full_name=""caffe.V1LayerParameter.blobs"",\n            index=6,\n            number=6,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""param"",\n            full_name=""caffe.V1LayerParameter.param"",\n            index=7,\n            number=1001,\n            type=9,\n            cpp_type=9,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""blob_share_mode"",\n            full_name=""caffe.V1LayerParameter.blob_share_mode"",\n            index=8,\n            number=1002,\n            type=14,\n            cpp_type=8,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""blobs_lr"",\n            full_name=""caffe.V1LayerParameter.blobs_lr"",\n            index=9,\n            number=7,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""weight_decay"",\n            full_name=""caffe.V1LayerParameter.weight_decay"",\n            index=10,\n            number=8,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""loss_weight"",\n            full_name=""caffe.V1LayerParameter.loss_weight"",\n            index=11,\n            number=35,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""accuracy_param"",\n            full_name=""caffe.V1LayerParameter.accuracy_param"",\n            index=12,\n            number=27,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""argmax_param"",\n            full_name=""caffe.V1LayerParameter.argmax_param"",\n            index=13,\n            number=23,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""concat_param"",\n            full_name=""caffe.V1LayerParameter.concat_param"",\n            index=14,\n            number=9,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""contrastive_loss_param"",\n            full_name=""caffe.V1LayerParameter.contrastive_loss_param"",\n            index=15,\n            number=40,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""convolution_param"",\n            full_name=""caffe.V1LayerParameter.convolution_param"",\n            index=16,\n            number=10,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""data_param"",\n            full_name=""caffe.V1LayerParameter.data_param"",\n            index=17,\n            number=11,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""dropout_param"",\n            full_name=""caffe.V1LayerParameter.dropout_param"",\n            index=18,\n            number=12,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""dummy_data_param"",\n            full_name=""caffe.V1LayerParameter.dummy_data_param"",\n            index=19,\n            number=26,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""eltwise_param"",\n            full_name=""caffe.V1LayerParameter.eltwise_param"",\n            index=20,\n            number=24,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""exp_param"",\n            full_name=""caffe.V1LayerParameter.exp_param"",\n            index=21,\n            number=41,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""hdf5_data_param"",\n            full_name=""caffe.V1LayerParameter.hdf5_data_param"",\n            index=22,\n            number=13,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""hdf5_output_param"",\n            full_name=""caffe.V1LayerParameter.hdf5_output_param"",\n            index=23,\n            number=14,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""hinge_loss_param"",\n            full_name=""caffe.V1LayerParameter.hinge_loss_param"",\n            index=24,\n            number=29,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""image_data_param"",\n            full_name=""caffe.V1LayerParameter.image_data_param"",\n            index=25,\n            number=15,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""infogain_loss_param"",\n            full_name=""caffe.V1LayerParameter.infogain_loss_param"",\n            index=26,\n            number=16,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""inner_product_param"",\n            full_name=""caffe.V1LayerParameter.inner_product_param"",\n            index=27,\n            number=17,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""lrn_param"",\n            full_name=""caffe.V1LayerParameter.lrn_param"",\n            index=28,\n            number=18,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""memory_data_param"",\n            full_name=""caffe.V1LayerParameter.memory_data_param"",\n            index=29,\n            number=22,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mvn_param"",\n            full_name=""caffe.V1LayerParameter.mvn_param"",\n            index=30,\n            number=34,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pooling_param"",\n            full_name=""caffe.V1LayerParameter.pooling_param"",\n            index=31,\n            number=19,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""power_param"",\n            full_name=""caffe.V1LayerParameter.power_param"",\n            index=32,\n            number=21,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""relu_param"",\n            full_name=""caffe.V1LayerParameter.relu_param"",\n            index=33,\n            number=30,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""sigmoid_param"",\n            full_name=""caffe.V1LayerParameter.sigmoid_param"",\n            index=34,\n            number=38,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""softmax_param"",\n            full_name=""caffe.V1LayerParameter.softmax_param"",\n            index=35,\n            number=39,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""slice_param"",\n            full_name=""caffe.V1LayerParameter.slice_param"",\n            index=36,\n            number=31,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""tanh_param"",\n            full_name=""caffe.V1LayerParameter.tanh_param"",\n            index=37,\n            number=37,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""threshold_param"",\n            full_name=""caffe.V1LayerParameter.threshold_param"",\n            index=38,\n            number=25,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""window_data_param"",\n            full_name=""caffe.V1LayerParameter.window_data_param"",\n            index=39,\n            number=20,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""transform_param"",\n            full_name=""caffe.V1LayerParameter.transform_param"",\n            index=40,\n            number=36,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""loss_param"",\n            full_name=""caffe.V1LayerParameter.loss_param"",\n            index=41,\n            number=42,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""layer"",\n            full_name=""caffe.V1LayerParameter.layer"",\n            index=42,\n            number=1,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_V1LAYERPARAMETER_LAYERTYPE, _V1LAYERPARAMETER_DIMCHECKMODE],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=13223,\n    serialized_end=15751,\n)\n\n\n_V0LAYERPARAMETER = _descriptor.Descriptor(\n    name=""V0LayerParameter"",\n    full_name=""caffe.V0LayerParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""name"",\n            full_name=""caffe.V0LayerParameter.name"",\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""type"",\n            full_name=""caffe.V0LayerParameter.type"",\n            index=1,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""num_output"",\n            full_name=""caffe.V0LayerParameter.num_output"",\n            index=2,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""biasterm"",\n            full_name=""caffe.V0LayerParameter.biasterm"",\n            index=3,\n            number=4,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""weight_filler"",\n            full_name=""caffe.V0LayerParameter.weight_filler"",\n            index=4,\n            number=5,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""bias_filler"",\n            full_name=""caffe.V0LayerParameter.bias_filler"",\n            index=5,\n            number=6,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pad"",\n            full_name=""caffe.V0LayerParameter.pad"",\n            index=6,\n            number=7,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""kernelsize"",\n            full_name=""caffe.V0LayerParameter.kernelsize"",\n            index=7,\n            number=8,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""group"",\n            full_name=""caffe.V0LayerParameter.group"",\n            index=8,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""stride"",\n            full_name=""caffe.V0LayerParameter.stride"",\n            index=9,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""pool"",\n            full_name=""caffe.V0LayerParameter.pool"",\n            index=10,\n            number=11,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""dropout_ratio"",\n            full_name=""caffe.V0LayerParameter.dropout_ratio"",\n            index=11,\n            number=12,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""local_size"",\n            full_name=""caffe.V0LayerParameter.local_size"",\n            index=12,\n            number=13,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""alpha"",\n            full_name=""caffe.V0LayerParameter.alpha"",\n            index=13,\n            number=14,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""beta"",\n            full_name=""caffe.V0LayerParameter.beta"",\n            index=14,\n            number=15,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.75,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""k"",\n            full_name=""caffe.V0LayerParameter.k"",\n            index=15,\n            number=22,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""source"",\n            full_name=""caffe.V0LayerParameter.source"",\n            index=16,\n            number=16,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""scale"",\n            full_name=""caffe.V0LayerParameter.scale"",\n            index=17,\n            number=17,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""meanfile"",\n            full_name=""caffe.V0LayerParameter.meanfile"",\n            index=18,\n            number=18,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""batchsize"",\n            full_name=""caffe.V0LayerParameter.batchsize"",\n            index=19,\n            number=19,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""cropsize"",\n            full_name=""caffe.V0LayerParameter.cropsize"",\n            index=20,\n            number=20,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""mirror"",\n            full_name=""caffe.V0LayerParameter.mirror"",\n            index=21,\n            number=21,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""blobs"",\n            full_name=""caffe.V0LayerParameter.blobs"",\n            index=22,\n            number=50,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""blobs_lr"",\n            full_name=""caffe.V0LayerParameter.blobs_lr"",\n            index=23,\n            number=51,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""weight_decay"",\n            full_name=""caffe.V0LayerParameter.weight_decay"",\n            index=24,\n            number=52,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""rand_skip"",\n            full_name=""caffe.V0LayerParameter.rand_skip"",\n            index=25,\n            number=53,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""det_fg_threshold"",\n            full_name=""caffe.V0LayerParameter.det_fg_threshold"",\n            index=26,\n            number=54,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""det_bg_threshold"",\n            full_name=""caffe.V0LayerParameter.det_bg_threshold"",\n            index=27,\n            number=55,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""det_fg_fraction"",\n            full_name=""caffe.V0LayerParameter.det_fg_fraction"",\n            index=28,\n            number=56,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=0.25,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""det_context_pad"",\n            full_name=""caffe.V0LayerParameter.det_context_pad"",\n            index=29,\n            number=58,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""det_crop_mode"",\n            full_name=""caffe.V0LayerParameter.det_crop_mode"",\n            index=30,\n            number=59,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""warp"").decode(""utf-8""),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""new_num"",\n            full_name=""caffe.V0LayerParameter.new_num"",\n            index=31,\n            number=60,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""new_channels"",\n            full_name=""caffe.V0LayerParameter.new_channels"",\n            index=32,\n            number=61,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""new_height"",\n            full_name=""caffe.V0LayerParameter.new_height"",\n            index=33,\n            number=62,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""new_width"",\n            full_name=""caffe.V0LayerParameter.new_width"",\n            index=34,\n            number=63,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""shuffle_images"",\n            full_name=""caffe.V0LayerParameter.shuffle_images"",\n            index=35,\n            number=64,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""concat_dim"",\n            full_name=""caffe.V0LayerParameter.concat_dim"",\n            index=36,\n            number=65,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""hdf5_output_param"",\n            full_name=""caffe.V0LayerParameter.hdf5_output_param"",\n            index=37,\n            number=1001,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[_V0LAYERPARAMETER_POOLMETHOD],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=15754,\n    serialized_end=16775,\n)\n\n\n_PRELUPARAMETER = _descriptor.Descriptor(\n    name=""PReLUParameter"",\n    full_name=""caffe.PReLUParameter"",\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=""filler"",\n            full_name=""caffe.PReLUParameter.filler"",\n            index=0,\n            number=1,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n        _descriptor.FieldDescriptor(\n            name=""channel_shared"",\n            full_name=""caffe.PReLUParameter.channel_shared"",\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            options=None,\n        ),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    options=None,\n    is_extendable=False,\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=16777,\n    serialized_end=16864,\n)\n\n_BLOBPROTO.fields_by_name[""shape""].message_type = _BLOBSHAPE\n_BLOBPROTOVECTOR.fields_by_name[""blobs""].message_type = _BLOBPROTO\n_FILLERPARAMETER.fields_by_name[\n    ""variance_norm""\n].enum_type = _FILLERPARAMETER_VARIANCENORM\n_FILLERPARAMETER_VARIANCENORM.containing_type = _FILLERPARAMETER\n_NETPARAMETER.fields_by_name[""input_shape""].message_type = _BLOBSHAPE\n_NETPARAMETER.fields_by_name[""state""].message_type = _NETSTATE\n_NETPARAMETER.fields_by_name[""layer""].message_type = _LAYERPARAMETER\n_NETPARAMETER.fields_by_name[""layers""].message_type = _V1LAYERPARAMETER\n_SOLVERPARAMETER.fields_by_name[""net_param""].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[""train_net_param""].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[""test_net_param""].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[""train_state""].message_type = _NETSTATE\n_SOLVERPARAMETER.fields_by_name[""test_state""].message_type = _NETSTATE\n_SOLVERPARAMETER.fields_by_name[\n    ""snapshot_format""\n].enum_type = _SOLVERPARAMETER_SNAPSHOTFORMAT\n_SOLVERPARAMETER.fields_by_name[""solver_mode""].enum_type = _SOLVERPARAMETER_SOLVERMODE\n_SOLVERPARAMETER.fields_by_name[""solver_type""].enum_type = _SOLVERPARAMETER_SOLVERTYPE\n_SOLVERPARAMETER_SNAPSHOTFORMAT.containing_type = _SOLVERPARAMETER\n_SOLVERPARAMETER_SOLVERMODE.containing_type = _SOLVERPARAMETER\n_SOLVERPARAMETER_SOLVERTYPE.containing_type = _SOLVERPARAMETER\n_SOLVERSTATE.fields_by_name[""history""].message_type = _BLOBPROTO\n_NETSTATE.fields_by_name[""phase""].enum_type = _PHASE\n_NETSTATERULE.fields_by_name[""phase""].enum_type = _PHASE\n_PARAMSPEC.fields_by_name[""share_mode""].enum_type = _PARAMSPEC_DIMCHECKMODE\n_PARAMSPEC_DIMCHECKMODE.containing_type = _PARAMSPEC\n_LAYERPARAMETER.fields_by_name[""phase""].enum_type = _PHASE\n_LAYERPARAMETER.fields_by_name[""param""].message_type = _PARAMSPEC\n_LAYERPARAMETER.fields_by_name[""blobs""].message_type = _BLOBPROTO\n_LAYERPARAMETER.fields_by_name[""include""].message_type = _NETSTATERULE\n_LAYERPARAMETER.fields_by_name[""exclude""].message_type = _NETSTATERULE\n_LAYERPARAMETER.fields_by_name[\n    ""transform_param""\n].message_type = _TRANSFORMATIONPARAMETER\n_LAYERPARAMETER.fields_by_name[""loss_param""].message_type = _LOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[""accuracy_param""].message_type = _ACCURACYPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    ""adaptive_bias_channel_param""\n].message_type = _ADAPTIVEBIASCHANNELPARAMETER\n_LAYERPARAMETER.fields_by_name[""argmax_param""].message_type = _ARGMAXPARAMETER\n_LAYERPARAMETER.fields_by_name[""batch_norm_param""].message_type = _BATCHNORMPARAMETER\n_LAYERPARAMETER.fields_by_name[""bias_param""].message_type = _BIASPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    ""bias_channel_param""\n].message_type = _BIASCHANNELPARAMETER\n_LAYERPARAMETER.fields_by_name[""concat_param""].message_type = _CONCATPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    ""contrastive_loss_param""\n].message_type = _CONTRASTIVELOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[""convolution_param""].message_type = _CONVOLUTIONPARAMETER\n_LAYERPARAMETER.fields_by_name[""data_param""].message_type = _DATAPARAMETER\n_LAYERPARAMETER.fields_by_name[""dense_crf_param""].message_type = _DENSECRFPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    ""domain_transform_param""\n].message_type = _DOMAINTRANSFORMPARAMETER\n_LAYERPARAMETER.fields_by_name[""dropout_param""].message_type = _DROPOUTPARAMETER\n_LAYERPARAMETER.fields_by_name[""dummy_data_param""].message_type = _DUMMYDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[""eltwise_param""].message_type = _ELTWISEPARAMETER\n_LAYERPARAMETER.fields_by_name[""elu_param""].message_type = _ELUPARAMETER\n_LAYERPARAMETER.fields_by_name[""embed_param""].message_type = _EMBEDPARAMETER\n_LAYERPARAMETER.fields_by_name[""exp_param""].message_type = _EXPPARAMETER\n_LAYERPARAMETER.fields_by_name[""flatten_param""].message_type = _FLATTENPARAMETER\n_LAYERPARAMETER.fields_by_name[""hdf5_data_param""].message_type = _HDF5DATAPARAMETER\n_LAYERPARAMETER.fields_by_name[""hdf5_output_param""].message_type = _HDF5OUTPUTPARAMETER\n_LAYERPARAMETER.fields_by_name[""hinge_loss_param""].message_type = _HINGELOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[""image_data_param""].message_type = _IMAGEDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    ""infogain_loss_param""\n].message_type = _INFOGAINLOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    ""inner_product_param""\n].message_type = _INNERPRODUCTPARAMETER\n_LAYERPARAMETER.fields_by_name[""interp_param""].message_type = _INTERPPARAMETER\n_LAYERPARAMETER.fields_by_name[""log_param""].message_type = _LOGPARAMETER\n_LAYERPARAMETER.fields_by_name[""lrn_param""].message_type = _LRNPARAMETER\n_LAYERPARAMETER.fields_by_name[""mat_read_param""].message_type = _MATREADPARAMETER\n_LAYERPARAMETER.fields_by_name[""mat_write_param""].message_type = _MATWRITEPARAMETER\n_LAYERPARAMETER.fields_by_name[""memory_data_param""].message_type = _MEMORYDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[""mvn_param""].message_type = _MVNPARAMETER\n_LAYERPARAMETER.fields_by_name[""pooling_param""].message_type = _POOLINGPARAMETER\n_LAYERPARAMETER.fields_by_name[""power_param""].message_type = _POWERPARAMETER\n_LAYERPARAMETER.fields_by_name[""prelu_param""].message_type = _PRELUPARAMETER\n_LAYERPARAMETER.fields_by_name[""python_param""].message_type = _PYTHONPARAMETER\n_LAYERPARAMETER.fields_by_name[""reduction_param""].message_type = _REDUCTIONPARAMETER\n_LAYERPARAMETER.fields_by_name[""relu_param""].message_type = _RELUPARAMETER\n_LAYERPARAMETER.fields_by_name[""reshape_param""].message_type = _RESHAPEPARAMETER\n_LAYERPARAMETER.fields_by_name[""scale_param""].message_type = _SCALEPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    ""seg_accuracy_param""\n].message_type = _SEGACCURACYPARAMETER\n_LAYERPARAMETER.fields_by_name[""sigmoid_param""].message_type = _SIGMOIDPARAMETER\n_LAYERPARAMETER.fields_by_name[""softmax_param""].message_type = _SOFTMAXPARAMETER\n_LAYERPARAMETER.fields_by_name[""spp_param""].message_type = _SPPPARAMETER\n_LAYERPARAMETER.fields_by_name[""slice_param""].message_type = _SLICEPARAMETER\n_LAYERPARAMETER.fields_by_name[""tanh_param""].message_type = _TANHPARAMETER\n_LAYERPARAMETER.fields_by_name[""threshold_param""].message_type = _THRESHOLDPARAMETER\n_LAYERPARAMETER.fields_by_name[""tile_param""].message_type = _TILEPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    ""unique_label_param""\n].message_type = _UNIQUELABELPARAMETER\n_LAYERPARAMETER.fields_by_name[""window_data_param""].message_type = _WINDOWDATAPARAMETER\n_LOSSPARAMETER.fields_by_name[\n    ""normalization""\n].enum_type = _LOSSPARAMETER_NORMALIZATIONMODE\n_LOSSPARAMETER_NORMALIZATIONMODE.containing_type = _LOSSPARAMETER\n_BIASCHANNELPARAMETER.fields_by_name[\n    ""label_type""\n].enum_type = _BIASCHANNELPARAMETER_LABELTYPE\n_BIASCHANNELPARAMETER_LABELTYPE.containing_type = _BIASCHANNELPARAMETER\n_BIASPARAMETER.fields_by_name[""filler""].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[""weight_filler""].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[""bias_filler""].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[""engine""].enum_type = _CONVOLUTIONPARAMETER_ENGINE\n_CONVOLUTIONPARAMETER_ENGINE.containing_type = _CONVOLUTIONPARAMETER\n_DATAPARAMETER.fields_by_name[""backend""].enum_type = _DATAPARAMETER_DB\n_DATAPARAMETER_DB.containing_type = _DATAPARAMETER\n_DUMMYDATAPARAMETER.fields_by_name[""data_filler""].message_type = _FILLERPARAMETER\n_DUMMYDATAPARAMETER.fields_by_name[""shape""].message_type = _BLOBSHAPE\n_ELTWISEPARAMETER.fields_by_name[""operation""].enum_type = _ELTWISEPARAMETER_ELTWISEOP\n_ELTWISEPARAMETER_ELTWISEOP.containing_type = _ELTWISEPARAMETER\n_EMBEDPARAMETER.fields_by_name[""weight_filler""].message_type = _FILLERPARAMETER\n_EMBEDPARAMETER.fields_by_name[""bias_filler""].message_type = _FILLERPARAMETER\n_HINGELOSSPARAMETER.fields_by_name[""norm""].enum_type = _HINGELOSSPARAMETER_NORM\n_HINGELOSSPARAMETER_NORM.containing_type = _HINGELOSSPARAMETER\n_IMAGEDATAPARAMETER.fields_by_name[\n    ""label_type""\n].enum_type = _IMAGEDATAPARAMETER_LABELTYPE\n_IMAGEDATAPARAMETER_LABELTYPE.containing_type = _IMAGEDATAPARAMETER\n_INNERPRODUCTPARAMETER.fields_by_name[""weight_filler""].message_type = _FILLERPARAMETER\n_INNERPRODUCTPARAMETER.fields_by_name[""bias_filler""].message_type = _FILLERPARAMETER\n_LRNPARAMETER.fields_by_name[""norm_region""].enum_type = _LRNPARAMETER_NORMREGION\n_LRNPARAMETER.fields_by_name[""engine""].enum_type = _LRNPARAMETER_ENGINE\n_LRNPARAMETER_NORMREGION.containing_type = _LRNPARAMETER\n_LRNPARAMETER_ENGINE.containing_type = _LRNPARAMETER\n_POOLINGPARAMETER.fields_by_name[""pool""].enum_type = _POOLINGPARAMETER_POOLMETHOD\n_POOLINGPARAMETER.fields_by_name[""engine""].enum_type = _POOLINGPARAMETER_ENGINE\n_POOLINGPARAMETER_POOLMETHOD.containing_type = _POOLINGPARAMETER\n_POOLINGPARAMETER_ENGINE.containing_type = _POOLINGPARAMETER\n_REDUCTIONPARAMETER.fields_by_name[\n    ""operation""\n].enum_type = _REDUCTIONPARAMETER_REDUCTIONOP\n_REDUCTIONPARAMETER_REDUCTIONOP.containing_type = _REDUCTIONPARAMETER\n_RELUPARAMETER.fields_by_name[""engine""].enum_type = _RELUPARAMETER_ENGINE\n_RELUPARAMETER_ENGINE.containing_type = _RELUPARAMETER\n_RESHAPEPARAMETER.fields_by_name[""shape""].message_type = _BLOBSHAPE\n_SCALEPARAMETER.fields_by_name[""filler""].message_type = _FILLERPARAMETER\n_SCALEPARAMETER.fields_by_name[""bias_filler""].message_type = _FILLERPARAMETER\n_SEGACCURACYPARAMETER.fields_by_name[\n    ""metric""\n].enum_type = _SEGACCURACYPARAMETER_ACCURACYMETRIC\n_SEGACCURACYPARAMETER_ACCURACYMETRIC.containing_type = _SEGACCURACYPARAMETER\n_SIGMOIDPARAMETER.fields_by_name[""engine""].enum_type = _SIGMOIDPARAMETER_ENGINE\n_SIGMOIDPARAMETER_ENGINE.containing_type = _SIGMOIDPARAMETER\n_SOFTMAXPARAMETER.fields_by_name[""engine""].enum_type = _SOFTMAXPARAMETER_ENGINE\n_SOFTMAXPARAMETER_ENGINE.containing_type = _SOFTMAXPARAMETER\n_TANHPARAMETER.fields_by_name[""engine""].enum_type = _TANHPARAMETER_ENGINE\n_TANHPARAMETER_ENGINE.containing_type = _TANHPARAMETER\n_SPPPARAMETER.fields_by_name[""pool""].enum_type = _SPPPARAMETER_POOLMETHOD\n_SPPPARAMETER.fields_by_name[""engine""].enum_type = _SPPPARAMETER_ENGINE\n_SPPPARAMETER_POOLMETHOD.containing_type = _SPPPARAMETER\n_SPPPARAMETER_ENGINE.containing_type = _SPPPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""include""].message_type = _NETSTATERULE\n_V1LAYERPARAMETER.fields_by_name[""exclude""].message_type = _NETSTATERULE\n_V1LAYERPARAMETER.fields_by_name[""type""].enum_type = _V1LAYERPARAMETER_LAYERTYPE\n_V1LAYERPARAMETER.fields_by_name[""blobs""].message_type = _BLOBPROTO\n_V1LAYERPARAMETER.fields_by_name[\n    ""blob_share_mode""\n].enum_type = _V1LAYERPARAMETER_DIMCHECKMODE\n_V1LAYERPARAMETER.fields_by_name[""accuracy_param""].message_type = _ACCURACYPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""argmax_param""].message_type = _ARGMAXPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""concat_param""].message_type = _CONCATPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    ""contrastive_loss_param""\n].message_type = _CONTRASTIVELOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    ""convolution_param""\n].message_type = _CONVOLUTIONPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""data_param""].message_type = _DATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""dropout_param""].message_type = _DROPOUTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""dummy_data_param""].message_type = _DUMMYDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""eltwise_param""].message_type = _ELTWISEPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""exp_param""].message_type = _EXPPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""hdf5_data_param""].message_type = _HDF5DATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    ""hdf5_output_param""\n].message_type = _HDF5OUTPUTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""hinge_loss_param""].message_type = _HINGELOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""image_data_param""].message_type = _IMAGEDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    ""infogain_loss_param""\n].message_type = _INFOGAINLOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    ""inner_product_param""\n].message_type = _INNERPRODUCTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""lrn_param""].message_type = _LRNPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    ""memory_data_param""\n].message_type = _MEMORYDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""mvn_param""].message_type = _MVNPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""pooling_param""].message_type = _POOLINGPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""power_param""].message_type = _POWERPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""relu_param""].message_type = _RELUPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""sigmoid_param""].message_type = _SIGMOIDPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""softmax_param""].message_type = _SOFTMAXPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""slice_param""].message_type = _SLICEPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""tanh_param""].message_type = _TANHPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""threshold_param""].message_type = _THRESHOLDPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    ""window_data_param""\n].message_type = _WINDOWDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    ""transform_param""\n].message_type = _TRANSFORMATIONPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""loss_param""].message_type = _LOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[""layer""].message_type = _V0LAYERPARAMETER\n_V1LAYERPARAMETER_LAYERTYPE.containing_type = _V1LAYERPARAMETER\n_V1LAYERPARAMETER_DIMCHECKMODE.containing_type = _V1LAYERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[""weight_filler""].message_type = _FILLERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[""bias_filler""].message_type = _FILLERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[""pool""].enum_type = _V0LAYERPARAMETER_POOLMETHOD\n_V0LAYERPARAMETER.fields_by_name[""blobs""].message_type = _BLOBPROTO\n_V0LAYERPARAMETER.fields_by_name[\n    ""hdf5_output_param""\n].message_type = _HDF5OUTPUTPARAMETER\n_V0LAYERPARAMETER_POOLMETHOD.containing_type = _V0LAYERPARAMETER\n_PRELUPARAMETER.fields_by_name[""filler""].message_type = _FILLERPARAMETER\nDESCRIPTOR.message_types_by_name[""BlobShape""] = _BLOBSHAPE\nDESCRIPTOR.message_types_by_name[""BlobProto""] = _BLOBPROTO\nDESCRIPTOR.message_types_by_name[""BlobProtoVector""] = _BLOBPROTOVECTOR\nDESCRIPTOR.message_types_by_name[""Datum""] = _DATUM\nDESCRIPTOR.message_types_by_name[""FillerParameter""] = _FILLERPARAMETER\nDESCRIPTOR.message_types_by_name[""NetParameter""] = _NETPARAMETER\nDESCRIPTOR.message_types_by_name[""SolverParameter""] = _SOLVERPARAMETER\nDESCRIPTOR.message_types_by_name[""SolverState""] = _SOLVERSTATE\nDESCRIPTOR.message_types_by_name[""NetState""] = _NETSTATE\nDESCRIPTOR.message_types_by_name[""NetStateRule""] = _NETSTATERULE\nDESCRIPTOR.message_types_by_name[""ParamSpec""] = _PARAMSPEC\nDESCRIPTOR.message_types_by_name[""LayerParameter""] = _LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[""TransformationParameter""] = _TRANSFORMATIONPARAMETER\nDESCRIPTOR.message_types_by_name[""LossParameter""] = _LOSSPARAMETER\nDESCRIPTOR.message_types_by_name[""AccuracyParameter""] = _ACCURACYPARAMETER\nDESCRIPTOR.message_types_by_name[\n    ""AdaptiveBiasChannelParameter""\n] = _ADAPTIVEBIASCHANNELPARAMETER\nDESCRIPTOR.message_types_by_name[""ArgMaxParameter""] = _ARGMAXPARAMETER\nDESCRIPTOR.message_types_by_name[""BiasChannelParameter""] = _BIASCHANNELPARAMETER\nDESCRIPTOR.message_types_by_name[""ConcatParameter""] = _CONCATPARAMETER\nDESCRIPTOR.message_types_by_name[""BatchNormParameter""] = _BATCHNORMPARAMETER\nDESCRIPTOR.message_types_by_name[""BiasParameter""] = _BIASPARAMETER\nDESCRIPTOR.message_types_by_name[""ContrastiveLossParameter""] = _CONTRASTIVELOSSPARAMETER\nDESCRIPTOR.message_types_by_name[""ConvolutionParameter""] = _CONVOLUTIONPARAMETER\nDESCRIPTOR.message_types_by_name[""DataParameter""] = _DATAPARAMETER\nDESCRIPTOR.message_types_by_name[""DenseCRFParameter""] = _DENSECRFPARAMETER\nDESCRIPTOR.message_types_by_name[""DomainTransformParameter""] = _DOMAINTRANSFORMPARAMETER\nDESCRIPTOR.message_types_by_name[""DropoutParameter""] = _DROPOUTPARAMETER\nDESCRIPTOR.message_types_by_name[""DummyDataParameter""] = _DUMMYDATAPARAMETER\nDESCRIPTOR.message_types_by_name[""EltwiseParameter""] = _ELTWISEPARAMETER\nDESCRIPTOR.message_types_by_name[""ELUParameter""] = _ELUPARAMETER\nDESCRIPTOR.message_types_by_name[""EmbedParameter""] = _EMBEDPARAMETER\nDESCRIPTOR.message_types_by_name[""ExpParameter""] = _EXPPARAMETER\nDESCRIPTOR.message_types_by_name[""FlattenParameter""] = _FLATTENPARAMETER\nDESCRIPTOR.message_types_by_name[""HDF5DataParameter""] = _HDF5DATAPARAMETER\nDESCRIPTOR.message_types_by_name[""HDF5OutputParameter""] = _HDF5OUTPUTPARAMETER\nDESCRIPTOR.message_types_by_name[""HingeLossParameter""] = _HINGELOSSPARAMETER\nDESCRIPTOR.message_types_by_name[""ImageDataParameter""] = _IMAGEDATAPARAMETER\nDESCRIPTOR.message_types_by_name[""InfogainLossParameter""] = _INFOGAINLOSSPARAMETER\nDESCRIPTOR.message_types_by_name[""InnerProductParameter""] = _INNERPRODUCTPARAMETER\nDESCRIPTOR.message_types_by_name[""InterpParameter""] = _INTERPPARAMETER\nDESCRIPTOR.message_types_by_name[""LogParameter""] = _LOGPARAMETER\nDESCRIPTOR.message_types_by_name[""LRNParameter""] = _LRNPARAMETER\nDESCRIPTOR.message_types_by_name[""MatReadParameter""] = _MATREADPARAMETER\nDESCRIPTOR.message_types_by_name[""MatWriteParameter""] = _MATWRITEPARAMETER\nDESCRIPTOR.message_types_by_name[""MemoryDataParameter""] = _MEMORYDATAPARAMETER\nDESCRIPTOR.message_types_by_name[""MVNParameter""] = _MVNPARAMETER\nDESCRIPTOR.message_types_by_name[""PoolingParameter""] = _POOLINGPARAMETER\nDESCRIPTOR.message_types_by_name[""PowerParameter""] = _POWERPARAMETER\nDESCRIPTOR.message_types_by_name[""PythonParameter""] = _PYTHONPARAMETER\nDESCRIPTOR.message_types_by_name[""ReductionParameter""] = _REDUCTIONPARAMETER\nDESCRIPTOR.message_types_by_name[""ReLUParameter""] = _RELUPARAMETER\nDESCRIPTOR.message_types_by_name[""ReshapeParameter""] = _RESHAPEPARAMETER\nDESCRIPTOR.message_types_by_name[""ScaleParameter""] = _SCALEPARAMETER\nDESCRIPTOR.message_types_by_name[""SegAccuracyParameter""] = _SEGACCURACYPARAMETER\nDESCRIPTOR.message_types_by_name[""SigmoidParameter""] = _SIGMOIDPARAMETER\nDESCRIPTOR.message_types_by_name[""SliceParameter""] = _SLICEPARAMETER\nDESCRIPTOR.message_types_by_name[""SoftmaxParameter""] = _SOFTMAXPARAMETER\nDESCRIPTOR.message_types_by_name[""TanHParameter""] = _TANHPARAMETER\nDESCRIPTOR.message_types_by_name[""TileParameter""] = _TILEPARAMETER\nDESCRIPTOR.message_types_by_name[""ThresholdParameter""] = _THRESHOLDPARAMETER\nDESCRIPTOR.message_types_by_name[""UniqueLabelParameter""] = _UNIQUELABELPARAMETER\nDESCRIPTOR.message_types_by_name[""WindowDataParameter""] = _WINDOWDATAPARAMETER\nDESCRIPTOR.message_types_by_name[""SPPParameter""] = _SPPPARAMETER\nDESCRIPTOR.message_types_by_name[""V1LayerParameter""] = _V1LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[""V0LayerParameter""] = _V0LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[""PReLUParameter""] = _PRELUPARAMETER\nDESCRIPTOR.enum_types_by_name[""Phase""] = _PHASE\n\nBlobShape = _reflection.GeneratedProtocolMessageType(\n    ""BlobShape"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_BLOBSHAPE,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.BlobShape)\n    ),\n)\n_sym_db.RegisterMessage(BlobShape)\n\nBlobProto = _reflection.GeneratedProtocolMessageType(\n    ""BlobProto"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_BLOBPROTO,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.BlobProto)\n    ),\n)\n_sym_db.RegisterMessage(BlobProto)\n\nBlobProtoVector = _reflection.GeneratedProtocolMessageType(\n    ""BlobProtoVector"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_BLOBPROTOVECTOR,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)\n    ),\n)\n_sym_db.RegisterMessage(BlobProtoVector)\n\nDatum = _reflection.GeneratedProtocolMessageType(\n    ""Datum"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_DATUM,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.Datum)\n    ),\n)\n_sym_db.RegisterMessage(Datum)\n\nFillerParameter = _reflection.GeneratedProtocolMessageType(\n    ""FillerParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_FILLERPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.FillerParameter)\n    ),\n)\n_sym_db.RegisterMessage(FillerParameter)\n\nNetParameter = _reflection.GeneratedProtocolMessageType(\n    ""NetParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_NETPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.NetParameter)\n    ),\n)\n_sym_db.RegisterMessage(NetParameter)\n\nSolverParameter = _reflection.GeneratedProtocolMessageType(\n    ""SolverParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_SOLVERPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.SolverParameter)\n    ),\n)\n_sym_db.RegisterMessage(SolverParameter)\n\nSolverState = _reflection.GeneratedProtocolMessageType(\n    ""SolverState"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_SOLVERSTATE,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.SolverState)\n    ),\n)\n_sym_db.RegisterMessage(SolverState)\n\nNetState = _reflection.GeneratedProtocolMessageType(\n    ""NetState"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_NETSTATE,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.NetState)\n    ),\n)\n_sym_db.RegisterMessage(NetState)\n\nNetStateRule = _reflection.GeneratedProtocolMessageType(\n    ""NetStateRule"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_NETSTATERULE,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.NetStateRule)\n    ),\n)\n_sym_db.RegisterMessage(NetStateRule)\n\nParamSpec = _reflection.GeneratedProtocolMessageType(\n    ""ParamSpec"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_PARAMSPEC,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ParamSpec)\n    ),\n)\n_sym_db.RegisterMessage(ParamSpec)\n\nLayerParameter = _reflection.GeneratedProtocolMessageType(\n    ""LayerParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_LAYERPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.LayerParameter)\n    ),\n)\n_sym_db.RegisterMessage(LayerParameter)\n\nTransformationParameter = _reflection.GeneratedProtocolMessageType(\n    ""TransformationParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_TRANSFORMATIONPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.TransformationParameter)\n    ),\n)\n_sym_db.RegisterMessage(TransformationParameter)\n\nLossParameter = _reflection.GeneratedProtocolMessageType(\n    ""LossParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_LOSSPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.LossParameter)\n    ),\n)\n_sym_db.RegisterMessage(LossParameter)\n\nAccuracyParameter = _reflection.GeneratedProtocolMessageType(\n    ""AccuracyParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_ACCURACYPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)\n    ),\n)\n_sym_db.RegisterMessage(AccuracyParameter)\n\nAdaptiveBiasChannelParameter = _reflection.GeneratedProtocolMessageType(\n    ""AdaptiveBiasChannelParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_ADAPTIVEBIASCHANNELPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.AdaptiveBiasChannelParameter)\n    ),\n)\n_sym_db.RegisterMessage(AdaptiveBiasChannelParameter)\n\nArgMaxParameter = _reflection.GeneratedProtocolMessageType(\n    ""ArgMaxParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_ARGMAXPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)\n    ),\n)\n_sym_db.RegisterMessage(ArgMaxParameter)\n\nBiasChannelParameter = _reflection.GeneratedProtocolMessageType(\n    ""BiasChannelParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_BIASCHANNELPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.BiasChannelParameter)\n    ),\n)\n_sym_db.RegisterMessage(BiasChannelParameter)\n\nConcatParameter = _reflection.GeneratedProtocolMessageType(\n    ""ConcatParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_CONCATPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ConcatParameter)\n    ),\n)\n_sym_db.RegisterMessage(ConcatParameter)\n\nBatchNormParameter = _reflection.GeneratedProtocolMessageType(\n    ""BatchNormParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_BATCHNORMPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)\n    ),\n)\n_sym_db.RegisterMessage(BatchNormParameter)\n\nBiasParameter = _reflection.GeneratedProtocolMessageType(\n    ""BiasParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_BIASPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.BiasParameter)\n    ),\n)\n_sym_db.RegisterMessage(BiasParameter)\n\nContrastiveLossParameter = _reflection.GeneratedProtocolMessageType(\n    ""ContrastiveLossParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_CONTRASTIVELOSSPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)\n    ),\n)\n_sym_db.RegisterMessage(ContrastiveLossParameter)\n\nConvolutionParameter = _reflection.GeneratedProtocolMessageType(\n    ""ConvolutionParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_CONVOLUTIONPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)\n    ),\n)\n_sym_db.RegisterMessage(ConvolutionParameter)\n\nDataParameter = _reflection.GeneratedProtocolMessageType(\n    ""DataParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_DATAPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.DataParameter)\n    ),\n)\n_sym_db.RegisterMessage(DataParameter)\n\nDenseCRFParameter = _reflection.GeneratedProtocolMessageType(\n    ""DenseCRFParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_DENSECRFPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.DenseCRFParameter)\n    ),\n)\n_sym_db.RegisterMessage(DenseCRFParameter)\n\nDomainTransformParameter = _reflection.GeneratedProtocolMessageType(\n    ""DomainTransformParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_DOMAINTRANSFORMPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.DomainTransformParameter)\n    ),\n)\n_sym_db.RegisterMessage(DomainTransformParameter)\n\nDropoutParameter = _reflection.GeneratedProtocolMessageType(\n    ""DropoutParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_DROPOUTPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.DropoutParameter)\n    ),\n)\n_sym_db.RegisterMessage(DropoutParameter)\n\nDummyDataParameter = _reflection.GeneratedProtocolMessageType(\n    ""DummyDataParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_DUMMYDATAPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)\n    ),\n)\n_sym_db.RegisterMessage(DummyDataParameter)\n\nEltwiseParameter = _reflection.GeneratedProtocolMessageType(\n    ""EltwiseParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_ELTWISEPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)\n    ),\n)\n_sym_db.RegisterMessage(EltwiseParameter)\n\nELUParameter = _reflection.GeneratedProtocolMessageType(\n    ""ELUParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_ELUPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ELUParameter)\n    ),\n)\n_sym_db.RegisterMessage(ELUParameter)\n\nEmbedParameter = _reflection.GeneratedProtocolMessageType(\n    ""EmbedParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_EMBEDPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.EmbedParameter)\n    ),\n)\n_sym_db.RegisterMessage(EmbedParameter)\n\nExpParameter = _reflection.GeneratedProtocolMessageType(\n    ""ExpParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_EXPPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ExpParameter)\n    ),\n)\n_sym_db.RegisterMessage(ExpParameter)\n\nFlattenParameter = _reflection.GeneratedProtocolMessageType(\n    ""FlattenParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_FLATTENPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.FlattenParameter)\n    ),\n)\n_sym_db.RegisterMessage(FlattenParameter)\n\nHDF5DataParameter = _reflection.GeneratedProtocolMessageType(\n    ""HDF5DataParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_HDF5DATAPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)\n    ),\n)\n_sym_db.RegisterMessage(HDF5DataParameter)\n\nHDF5OutputParameter = _reflection.GeneratedProtocolMessageType(\n    ""HDF5OutputParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_HDF5OUTPUTPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)\n    ),\n)\n_sym_db.RegisterMessage(HDF5OutputParameter)\n\nHingeLossParameter = _reflection.GeneratedProtocolMessageType(\n    ""HingeLossParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_HINGELOSSPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)\n    ),\n)\n_sym_db.RegisterMessage(HingeLossParameter)\n\nImageDataParameter = _reflection.GeneratedProtocolMessageType(\n    ""ImageDataParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_IMAGEDATAPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)\n    ),\n)\n_sym_db.RegisterMessage(ImageDataParameter)\n\nInfogainLossParameter = _reflection.GeneratedProtocolMessageType(\n    ""InfogainLossParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_INFOGAINLOSSPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)\n    ),\n)\n_sym_db.RegisterMessage(InfogainLossParameter)\n\nInnerProductParameter = _reflection.GeneratedProtocolMessageType(\n    ""InnerProductParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_INNERPRODUCTPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)\n    ),\n)\n_sym_db.RegisterMessage(InnerProductParameter)\n\nInterpParameter = _reflection.GeneratedProtocolMessageType(\n    ""InterpParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_INTERPPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.InterpParameter)\n    ),\n)\n_sym_db.RegisterMessage(InterpParameter)\n\nLogParameter = _reflection.GeneratedProtocolMessageType(\n    ""LogParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_LOGPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.LogParameter)\n    ),\n)\n_sym_db.RegisterMessage(LogParameter)\n\nLRNParameter = _reflection.GeneratedProtocolMessageType(\n    ""LRNParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_LRNPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.LRNParameter)\n    ),\n)\n_sym_db.RegisterMessage(LRNParameter)\n\nMatReadParameter = _reflection.GeneratedProtocolMessageType(\n    ""MatReadParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_MATREADPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.MatReadParameter)\n    ),\n)\n_sym_db.RegisterMessage(MatReadParameter)\n\nMatWriteParameter = _reflection.GeneratedProtocolMessageType(\n    ""MatWriteParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_MATWRITEPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.MatWriteParameter)\n    ),\n)\n_sym_db.RegisterMessage(MatWriteParameter)\n\nMemoryDataParameter = _reflection.GeneratedProtocolMessageType(\n    ""MemoryDataParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_MEMORYDATAPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)\n    ),\n)\n_sym_db.RegisterMessage(MemoryDataParameter)\n\nMVNParameter = _reflection.GeneratedProtocolMessageType(\n    ""MVNParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_MVNPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.MVNParameter)\n    ),\n)\n_sym_db.RegisterMessage(MVNParameter)\n\nPoolingParameter = _reflection.GeneratedProtocolMessageType(\n    ""PoolingParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_POOLINGPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.PoolingParameter)\n    ),\n)\n_sym_db.RegisterMessage(PoolingParameter)\n\nPowerParameter = _reflection.GeneratedProtocolMessageType(\n    ""PowerParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_POWERPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.PowerParameter)\n    ),\n)\n_sym_db.RegisterMessage(PowerParameter)\n\nPythonParameter = _reflection.GeneratedProtocolMessageType(\n    ""PythonParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_PYTHONPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.PythonParameter)\n    ),\n)\n_sym_db.RegisterMessage(PythonParameter)\n\nReductionParameter = _reflection.GeneratedProtocolMessageType(\n    ""ReductionParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_REDUCTIONPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ReductionParameter)\n    ),\n)\n_sym_db.RegisterMessage(ReductionParameter)\n\nReLUParameter = _reflection.GeneratedProtocolMessageType(\n    ""ReLUParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_RELUPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ReLUParameter)\n    ),\n)\n_sym_db.RegisterMessage(ReLUParameter)\n\nReshapeParameter = _reflection.GeneratedProtocolMessageType(\n    ""ReshapeParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_RESHAPEPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)\n    ),\n)\n_sym_db.RegisterMessage(ReshapeParameter)\n\nScaleParameter = _reflection.GeneratedProtocolMessageType(\n    ""ScaleParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_SCALEPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ScaleParameter)\n    ),\n)\n_sym_db.RegisterMessage(ScaleParameter)\n\nSegAccuracyParameter = _reflection.GeneratedProtocolMessageType(\n    ""SegAccuracyParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_SEGACCURACYPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.SegAccuracyParameter)\n    ),\n)\n_sym_db.RegisterMessage(SegAccuracyParameter)\n\nSigmoidParameter = _reflection.GeneratedProtocolMessageType(\n    ""SigmoidParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_SIGMOIDPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)\n    ),\n)\n_sym_db.RegisterMessage(SigmoidParameter)\n\nSliceParameter = _reflection.GeneratedProtocolMessageType(\n    ""SliceParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_SLICEPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.SliceParameter)\n    ),\n)\n_sym_db.RegisterMessage(SliceParameter)\n\nSoftmaxParameter = _reflection.GeneratedProtocolMessageType(\n    ""SoftmaxParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_SOFTMAXPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)\n    ),\n)\n_sym_db.RegisterMessage(SoftmaxParameter)\n\nTanHParameter = _reflection.GeneratedProtocolMessageType(\n    ""TanHParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_TANHPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.TanHParameter)\n    ),\n)\n_sym_db.RegisterMessage(TanHParameter)\n\nTileParameter = _reflection.GeneratedProtocolMessageType(\n    ""TileParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_TILEPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.TileParameter)\n    ),\n)\n_sym_db.RegisterMessage(TileParameter)\n\nThresholdParameter = _reflection.GeneratedProtocolMessageType(\n    ""ThresholdParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_THRESHOLDPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)\n    ),\n)\n_sym_db.RegisterMessage(ThresholdParameter)\n\nUniqueLabelParameter = _reflection.GeneratedProtocolMessageType(\n    ""UniqueLabelParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_UNIQUELABELPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.UniqueLabelParameter)\n    ),\n)\n_sym_db.RegisterMessage(UniqueLabelParameter)\n\nWindowDataParameter = _reflection.GeneratedProtocolMessageType(\n    ""WindowDataParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_WINDOWDATAPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)\n    ),\n)\n_sym_db.RegisterMessage(WindowDataParameter)\n\nSPPParameter = _reflection.GeneratedProtocolMessageType(\n    ""SPPParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_SPPPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.SPPParameter)\n    ),\n)\n_sym_db.RegisterMessage(SPPParameter)\n\nV1LayerParameter = _reflection.GeneratedProtocolMessageType(\n    ""V1LayerParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_V1LAYERPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)\n    ),\n)\n_sym_db.RegisterMessage(V1LayerParameter)\n\nV0LayerParameter = _reflection.GeneratedProtocolMessageType(\n    ""V0LayerParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_V0LAYERPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)\n    ),\n)\n_sym_db.RegisterMessage(V0LayerParameter)\n\nPReLUParameter = _reflection.GeneratedProtocolMessageType(\n    ""PReLUParameter"",\n    (_message.Message,),\n    dict(\n        DESCRIPTOR=_PRELUPARAMETER,\n        __module__=""caffe_pb2""\n        # @@protoc_insertion_point(class_scope:caffe.PReLUParameter)\n    ),\n)\n_sym_db.RegisterMessage(PReLUParameter)\n\n\n_BLOBSHAPE.fields_by_name[""dim""].has_options = True\n_BLOBSHAPE.fields_by_name[""dim""]._options = _descriptor._ParseOptions(\n    descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n)\n_BLOBPROTO.fields_by_name[""data""].has_options = True\n_BLOBPROTO.fields_by_name[""data""]._options = _descriptor._ParseOptions(\n    descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n)\n_BLOBPROTO.fields_by_name[""diff""].has_options = True\n_BLOBPROTO.fields_by_name[""diff""]._options = _descriptor._ParseOptions(\n    descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n)\n_BLOBPROTO.fields_by_name[""double_data""].has_options = True\n_BLOBPROTO.fields_by_name[""double_data""]._options = _descriptor._ParseOptions(\n    descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n)\n_BLOBPROTO.fields_by_name[""double_diff""].has_options = True\n_BLOBPROTO.fields_by_name[""double_diff""]._options = _descriptor._ParseOptions(\n    descriptor_pb2.FieldOptions(), _b(""\\020\\001"")\n)\n# @@protoc_insertion_point(module_scope)\n'"
libs/datasets/__init__.py,0,"b'from .voc import VOC, VOCAug\nfrom .cocostuff import CocoStuff10k, CocoStuff164k\n\n\ndef get_dataset(name):\n    return {\n        ""cocostuff10k"": CocoStuff10k,\n        ""cocostuff164k"": CocoStuff164k,\n        ""voc"": VOC,\n        ""vocaug"": VOCAug,\n    }[name]\n'"
libs/datasets/base.py,1,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2017-10-30\n\nimport random\n\nimport cv2\nimport numpy as np\nimport torch\nfrom PIL import Image\nfrom torch.utils import data\n\n\nclass _BaseDataset(data.Dataset):\n    """"""\n    Base dataset class\n    """"""\n\n    def __init__(\n        self,\n        root,\n        split,\n        ignore_label,\n        mean_bgr,\n        augment=True,\n        base_size=None,\n        crop_size=321,\n        scales=(1.0),\n        flip=True,\n    ):\n        self.root = root\n        self.split = split\n        self.ignore_label = ignore_label\n        self.mean_bgr = np.array(mean_bgr)\n        self.augment = augment\n        self.base_size = base_size\n        self.crop_size = crop_size\n        self.scales = scales\n        self.flip = flip\n        self.files = []\n        self._set_files()\n\n        cv2.setNumThreads(0)\n\n    def _set_files(self):\n        """"""\n        Create a file path/image id list.\n        """"""\n        raise NotImplementedError()\n\n    def _load_data(self, image_id):\n        """"""\n        Load the image and label in numpy.ndarray\n        """"""\n        raise NotImplementedError()\n\n    def _augmentation(self, image, label):\n        # Scaling\n        h, w = label.shape\n        if self.base_size:\n            if h > w:\n                h, w = (self.base_size, int(self.base_size * w / h))\n            else:\n                h, w = (int(self.base_size * h / w), self.base_size)\n        scale_factor = random.choice(self.scales)\n        h, w = (int(h * scale_factor), int(w * scale_factor))\n        image = cv2.resize(image, (w, h), interpolation=cv2.INTER_LINEAR)\n        label = Image.fromarray(label).resize((w, h), resample=Image.NEAREST)\n        label = np.asarray(label, dtype=np.int64)\n\n        # Padding to fit for crop_size\n        h, w = label.shape\n        pad_h = max(self.crop_size - h, 0)\n        pad_w = max(self.crop_size - w, 0)\n        pad_kwargs = {\n            ""top"": 0,\n            ""bottom"": pad_h,\n            ""left"": 0,\n            ""right"": pad_w,\n            ""borderType"": cv2.BORDER_CONSTANT,\n        }\n        if pad_h > 0 or pad_w > 0:\n            image = cv2.copyMakeBorder(image, value=self.mean_bgr, **pad_kwargs)\n            label = cv2.copyMakeBorder(label, value=self.ignore_label, **pad_kwargs)\n\n        # Cropping\n        h, w = label.shape\n        start_h = random.randint(0, h - self.crop_size)\n        start_w = random.randint(0, w - self.crop_size)\n        end_h = start_h + self.crop_size\n        end_w = start_w + self.crop_size\n        image = image[start_h:end_h, start_w:end_w]\n        label = label[start_h:end_h, start_w:end_w]\n\n        if self.flip:\n            # Random flipping\n            if random.random() < 0.5:\n                image = np.fliplr(image).copy()  # HWC\n                label = np.fliplr(label).copy()  # HW\n        return image, label\n\n    def __getitem__(self, index):\n        image_id, image, label = self._load_data(index)\n        if self.augment:\n            image, label = self._augmentation(image, label)\n        # Mean subtraction\n        image -= self.mean_bgr\n        # HWC -> CHW\n        image = image.transpose(2, 0, 1)\n        return image_id, image.astype(np.float32), label.astype(np.int64)\n\n    def __len__(self):\n        return len(self.files)\n\n    def __repr__(self):\n        fmt_str = ""Dataset: "" + self.__class__.__name__ + ""\\n""\n        fmt_str += ""    # data: {}\\n"".format(self.__len__())\n        fmt_str += ""    Split: {}\\n"".format(self.split)\n        fmt_str += ""    Root: {}"".format(self.root)\n        return fmt_str\n'"
libs/datasets/cocostuff.py,2,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2017-10-30\n\nfrom __future__ import absolute_import, print_function\n\nimport os.path as osp\nfrom glob import glob\n\nimport cv2\nimport numpy as np\nimport scipy.io as sio\nimport torch\nfrom PIL import Image\nfrom torch.utils import data\n\nfrom .base import _BaseDataset\n\n\nclass CocoStuff10k(_BaseDataset):\n    """"""COCO-Stuff 10k dataset""""""\n\n    def __init__(self, warp_image=True, **kwargs):\n        self.warp_image = warp_image\n        super(CocoStuff10k, self).__init__(**kwargs)\n\n    def _set_files(self):\n        # Create data list via {train, test, all}.txt\n        if self.split in [""train"", ""test"", ""all""]:\n            file_list = osp.join(self.root, ""imageLists"", self.split + "".txt"")\n            file_list = tuple(open(file_list, ""r""))\n            file_list = [id_.rstrip() for id_ in file_list]\n            self.files = file_list\n        else:\n            raise ValueError(""Invalid split name: {}"".format(self.split))\n\n    def _load_data(self, index):\n        # Set paths\n        image_id = self.files[index]\n        image_path = osp.join(self.root, ""images"", image_id + "".jpg"")\n        label_path = osp.join(self.root, ""annotations"", image_id + "".mat"")\n        # Load an image and label\n        image = cv2.imread(image_path, cv2.IMREAD_COLOR).astype(np.float32)\n        label = sio.loadmat(label_path)[""S""]\n        label -= 1  # unlabeled (0 -> -1)\n        label[label == -1] = 255\n        # Warping: this is just for reproducing the official scores on GitHub\n        if self.warp_image:\n            image = cv2.resize(image, (513, 513), interpolation=cv2.INTER_LINEAR)\n            label = Image.fromarray(label).resize((513, 513), resample=Image.NEAREST)\n            label = np.asarray(label)\n        return image_id, image, label\n\n\nclass CocoStuff164k(_BaseDataset):\n    """"""COCO-Stuff 164k dataset""""""\n\n    def __init__(self, **kwargs):\n        super(CocoStuff164k, self).__init__(**kwargs)\n\n    def _set_files(self):\n        # Create data list by parsing the ""images"" folder\n        if self.split in [""train2017"", ""val2017""]:\n            file_list = sorted(glob(osp.join(self.root, ""images"", self.split, ""*.jpg"")))\n            assert len(file_list) > 0, ""{} has no image"".format(\n                osp.join(self.root, ""images"", self.split)\n            )\n            file_list = [f.split(""/"")[-1].replace("".jpg"", """") for f in file_list]\n            self.files = file_list\n        else:\n            raise ValueError(""Invalid split name: {}"".format(self.split))\n\n    def _load_data(self, index):\n        # Set paths\n        image_id = self.files[index]\n        image_path = osp.join(self.root, ""images"", self.split, image_id + "".jpg"")\n        label_path = osp.join(self.root, ""annotations"", self.split, image_id + "".png"")\n        # Load an image and label\n        image = cv2.imread(image_path, cv2.IMREAD_COLOR).astype(np.float32)\n        label = cv2.imread(label_path, cv2.IMREAD_GRAYSCALE)\n        return image_id, image, label\n\n\ndef get_parent_class(value, dictionary):\n    # Get parent class with COCO-Stuff hierarchy\n    for k, v in dictionary.items():\n        if isinstance(v, list):\n            if value in v:\n                yield k\n        elif isinstance(v, dict):\n            if value in list(v.keys()):\n                yield k\n            else:\n                for res in get_parent_class(value, v):\n                    yield res\n\n\nif __name__ == ""__main__"":\n    import matplotlib\n    import matplotlib.pyplot as plt\n    import matplotlib.cm as cm\n    import torchvision\n    import yaml\n    from torchvision.utils import make_grid\n    from tqdm import tqdm\n\n    kwargs = {""nrow"": 10, ""padding"": 50}\n    batch_size = 100\n\n    dataset = CocoStuff164k(\n        root=""/media/kazuto1011/Extra/cocostuff/cocostuff-164k"",\n        split=""train2017"",\n        ignore_label=255,\n        mean_bgr=(104.008, 116.669, 122.675),\n        augment=True,\n        crop_size=321,\n        scales=(0.5, 0.75, 1.0, 1.25, 1.5),\n        flip=True,\n    )\n    print(dataset)\n\n    loader = data.DataLoader(dataset, batch_size=batch_size)\n\n    for i, (image_ids, images, labels) in tqdm(\n        enumerate(loader), total=np.ceil(len(dataset) / batch_size), leave=False\n    ):\n        if i == 0:\n            mean = torch.tensor((104.008, 116.669, 122.675))[None, :, None, None]\n            images += mean.expand_as(images)\n            image = make_grid(images, pad_value=-1, **kwargs).numpy()\n            image = np.transpose(image, (1, 2, 0))\n            mask = np.zeros(image.shape[:2])\n            mask[(image != -1)[..., 0]] = 255\n            image = np.dstack((image, mask)).astype(np.uint8)\n\n            labels = labels[:, np.newaxis, ...]\n            label = make_grid(labels, pad_value=255, **kwargs).numpy()\n            label_ = np.transpose(label, (1, 2, 0))[..., 0].astype(np.float32)\n            label = cm.jet_r(label_ / 182.0) * 255\n            mask = np.zeros(label.shape[:2])\n            label[..., 3][(label_ == 255)] = 0\n            label = label.astype(np.uint8)\n\n            tiled_images = np.hstack((image, label))\n            # cv2.imwrite(""./docs/datasets/cocostuff.png"", tiled_images)\n            plt.imshow(np.dstack((tiled_images[..., 2::-1], tiled_images[..., 3])))\n            plt.show()\n            break\n\n    class_hierarchy = ""./data/datasets/cocostuff/cocostuff_hierarchy.yaml""\n    data = yaml.load(open(class_hierarchy))\n    key = ""person""\n\n    for _ in range(3):\n        key = get_parent_class(key, data)\n        key = list(key)[0]\n        print(key)\n'"
libs/datasets/voc.py,2,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author: Kazuto Nakashima\n# URL:    https://kazuto1011.github.io\n# Date:   08 February 2019\n\nfrom __future__ import absolute_import, print_function\n\nimport os.path as osp\n\nimport cv2\nimport numpy as np\nimport torch\nfrom PIL import Image\nfrom torch.utils import data\n\nfrom .base import _BaseDataset\n\n\nclass VOC(_BaseDataset):\n    """"""\n    PASCAL VOC Segmentation dataset\n    """"""\n\n    def __init__(self, year=2012, **kwargs):\n        self.year = year\n        super(VOC, self).__init__(**kwargs)\n\n    def _set_files(self):\n        self.root = osp.join(self.root, ""VOC{}"".format(self.year))\n        self.image_dir = osp.join(self.root, ""JPEGImages"")\n        self.label_dir = osp.join(self.root, ""SegmentationClass"")\n\n        if self.split in [""train"", ""trainval"", ""val"", ""test""]:\n            file_list = osp.join(\n                self.root, ""ImageSets/Segmentation"", self.split + "".txt""\n            )\n            file_list = tuple(open(file_list, ""r""))\n            file_list = [id_.rstrip() for id_ in file_list]\n            self.files = file_list\n        else:\n            raise ValueError(""Invalid split name: {}"".format(self.split))\n\n    def _load_data(self, index):\n        # Set paths\n        image_id = self.files[index]\n        image_path = osp.join(self.root, self.image_dir, image_id + "".jpg"")\n        label_path = osp.join(self.root, self.label_dir, image_id + "".png"")\n        # Load an image\n        image = cv2.imread(image_path, cv2.IMREAD_COLOR).astype(np.float32)\n        label = np.asarray(Image.open(label_path), dtype=np.int32)\n        return image_id, image, label\n\n\nclass VOCAug(_BaseDataset):\n    """"""\n    PASCAL VOC Segmentation dataset with extra annotations\n    """"""\n\n    def __init__(self, year=2012, **kwargs):\n        self.year = year\n        super(VOCAug, self).__init__(**kwargs)\n\n    def _set_files(self):\n        self.root = osp.join(self.root, ""VOC{}"".format(self.year))\n\n        if self.split in [""train"", ""train_aug"", ""trainval"", ""trainval_aug"", ""val""]:\n            file_list = osp.join(\n                self.root, ""ImageSets/SegmentationAug"", self.split + "".txt""\n            )\n            file_list = tuple(open(file_list, ""r""))\n            file_list = [id_.rstrip().split("" "") for id_ in file_list]\n            self.files, self.labels = list(zip(*file_list))\n        else:\n            raise ValueError(""Invalid split name: {}"".format(self.split))\n\n    def _load_data(self, index):\n        # Set paths\n        image_id = self.files[index].split(""/"")[-1].split(""."")[0]\n        image_path = osp.join(self.root, self.files[index][1:])\n        label_path = osp.join(self.root, self.labels[index][1:])\n        # Load an image\n        image = cv2.imread(image_path, cv2.IMREAD_COLOR).astype(np.float32)\n        label = np.asarray(Image.open(label_path), dtype=np.int32)\n        return image_id, image, label\n\n\nif __name__ == ""__main__"":\n    import matplotlib\n    import matplotlib.pyplot as plt\n    import matplotlib.cm as cm\n    import torchvision\n    import yaml\n    from torchvision.utils import make_grid\n    from tqdm import tqdm\n\n    kwargs = {""nrow"": 10, ""padding"": 50}\n    batch_size = 100\n\n    dataset = VOCAug(\n        root=""/media/kazuto1011/Extra/VOCdevkit"",\n        split=""train_aug"",\n        ignore_label=255,\n        mean_bgr=(104.008, 116.669, 122.675),\n        year=2012,\n        augment=True,\n        base_size=None,\n        crop_size=513,\n        scales=(0.5, 0.75, 1.0, 1.25, 1.5),\n        flip=True,\n    )\n    print(dataset)\n\n    loader = data.DataLoader(dataset, batch_size=batch_size)\n\n    for i, (image_ids, images, labels) in tqdm(\n        enumerate(loader), total=np.ceil(len(dataset) / batch_size), leave=False\n    ):\n        if i == 0:\n            mean = torch.tensor((104.008, 116.669, 122.675))[None, :, None, None]\n            images += mean.expand_as(images)\n            image = make_grid(images, pad_value=-1, **kwargs).numpy()\n            image = np.transpose(image, (1, 2, 0))\n            mask = np.zeros(image.shape[:2])\n            mask[(image != -1)[..., 0]] = 255\n            image = np.dstack((image, mask)).astype(np.uint8)\n\n            labels = labels[:, np.newaxis, ...]\n            label = make_grid(labels, pad_value=255, **kwargs).numpy()\n            label_ = np.transpose(label, (1, 2, 0))[..., 0].astype(np.float32)\n            label = cm.jet_r(label_ / 21.0) * 255\n            mask = np.zeros(label.shape[:2])\n            label[..., 3][(label_ == 255)] = 0\n            label = label.astype(np.uint8)\n\n            tiled_images = np.hstack((image, label))\n            # cv2.imwrite(""./docs/datasets/voc12.png"", tiled_images)\n            plt.imshow(np.dstack((tiled_images[..., 2::-1], tiled_images[..., 3])))\n            plt.show()\n            break\n'"
libs/models/__init__.py,0,"b'from __future__ import absolute_import\nfrom .resnet import *\nfrom .deeplabv1 import *\nfrom .deeplabv2 import *\nfrom .deeplabv3 import *\nfrom .deeplabv3plus import *\nfrom .msc import *\n\n\ndef init_weights(module):\n    if isinstance(module, nn.Conv2d):\n        nn.init.kaiming_normal_(module.weight, mode=""fan_out"", nonlinearity=""relu"")\n        if module.bias is not None:\n            nn.init.constant_(module.bias, 0)\n    elif isinstance(module, nn.Linear):\n        nn.init.kaiming_normal_(module.weight, mode=""fan_out"", nonlinearity=""relu"")\n        if module.bias is not None:\n            nn.init.constant_(module.bias, 0)\n    elif isinstance(module, nn.BatchNorm2d):\n        nn.init.constant_(module.weight, 1)\n        if module.bias is not None:\n            nn.init.constant_(module.bias, 0)\n\n\ndef ResNet101(n_classes):\n    return ResNet(n_classes=n_classes, n_blocks=[3, 4, 23, 3])\n\n\ndef DeepLabV1_ResNet101(n_classes):\n    return DeepLabV1(n_classes=n_classes, n_blocks=[3, 4, 23, 3])\n\n\ndef DeepLabV2_ResNet101_MSC(n_classes):\n    return MSC(\n        base=DeepLabV2(\n            n_classes=n_classes, n_blocks=[3, 4, 23, 3], atrous_rates=[6, 12, 18, 24]\n        ),\n        scales=[0.5, 0.75],\n    )\n\n\ndef DeepLabV2S_ResNet101_MSC(n_classes):\n    return MSC(\n        base=DeepLabV2(\n            n_classes=n_classes, n_blocks=[3, 4, 23, 3], atrous_rates=[3, 6, 9, 12]\n        ),\n        scales=[0.5, 0.75],\n    )\n\n\ndef DeepLabV3_ResNet101_MSC(n_classes, output_stride=16):\n    if output_stride == 16:\n        atrous_rates = [6, 12, 18]\n    elif output_stride == 8:\n        atrous_rates = [12, 24, 36]\n    else:\n        NotImplementedError\n\n    base = DeepLabV3(\n        n_classes=n_classes,\n        n_blocks=[3, 4, 23, 3],\n        atrous_rates=atrous_rates,\n        multi_grids=[1, 2, 4],\n        output_stride=output_stride,\n    )\n\n    for name, module in base.named_modules():\n        if "".bn"" in name:\n            module.momentum = 0.9997\n\n    return MSC(base=base, scales=[0.5, 0.75])\n\n\ndef DeepLabV3Plus_ResNet101_MSC(n_classes, output_stride=16):\n    if output_stride == 16:\n        atrous_rates = [6, 12, 18]\n    elif output_stride == 8:\n        atrous_rates = [12, 24, 36]\n    else:\n        NotImplementedError\n\n    base = DeepLabV3Plus(\n        n_classes=n_classes,\n        n_blocks=[3, 4, 23, 3],\n        atrous_rates=atrous_rates,\n        multi_grids=[1, 2, 4],\n        output_stride=output_stride,\n    )\n\n    for name, module in base.named_modules():\n        if "".bn"" in name:\n            module.momentum = 0.9997\n\n    return MSC(base=base, scales=[0.5, 0.75])\n'"
libs/models/deeplabv1.py,3,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author: Kazuto Nakashima\n# URL:    https://kazuto1011.github.io\n# Date:   19 February 2019\n\nfrom __future__ import absolute_import, print_function\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom .resnet import _ResLayer, _Stem\n\n\nclass DeepLabV1(nn.Sequential):\n    """"""\n    DeepLab v1: Dilated ResNet + 1x1 Conv\n    Note that this is just a container for loading the pretrained COCO model and not mentioned as ""v1"" in papers.\n    """"""\n\n    def __init__(self, n_classes, n_blocks):\n        super(DeepLabV1, self).__init__()\n        ch = [64 * 2 ** p for p in range(6)]\n        self.add_module(""layer1"", _Stem(ch[0]))\n        self.add_module(""layer2"", _ResLayer(n_blocks[0], ch[0], ch[2], 1, 1))\n        self.add_module(""layer3"", _ResLayer(n_blocks[1], ch[2], ch[3], 2, 1))\n        self.add_module(""layer4"", _ResLayer(n_blocks[2], ch[3], ch[4], 1, 2))\n        self.add_module(""layer5"", _ResLayer(n_blocks[3], ch[4], ch[5], 1, 4))\n        self.add_module(""fc"", nn.Conv2d(2048, n_classes, 1))\n\n\nif __name__ == ""__main__"":\n    model = DeepLabV1(n_classes=21, n_blocks=[3, 4, 23, 3])\n    model.eval()\n    image = torch.randn(1, 3, 513, 513)\n\n    print(model)\n    print(""input:"", image.shape)\n    print(""output:"", model(image).shape)\n'"
libs/models/deeplabv2.py,3,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2017-11-19\n\nfrom __future__ import absolute_import, print_function\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom .resnet import _ConvBnReLU, _ResLayer, _Stem\n\n\nclass _ASPP(nn.Module):\n    """"""\n    Atrous spatial pyramid pooling (ASPP)\n    """"""\n\n    def __init__(self, in_ch, out_ch, rates):\n        super(_ASPP, self).__init__()\n        for i, rate in enumerate(rates):\n            self.add_module(\n                ""c{}"".format(i),\n                nn.Conv2d(in_ch, out_ch, 3, 1, padding=rate, dilation=rate, bias=True),\n            )\n\n        for m in self.children():\n            nn.init.normal_(m.weight, mean=0, std=0.01)\n            nn.init.constant_(m.bias, 0)\n\n    def forward(self, x):\n        return sum([stage(x) for stage in self.children()])\n\n\nclass DeepLabV2(nn.Sequential):\n    """"""\n    DeepLab v2: Dilated ResNet + ASPP\n    Output stride is fixed at 8\n    """"""\n\n    def __init__(self, n_classes, n_blocks, atrous_rates):\n        super(DeepLabV2, self).__init__()\n        ch = [64 * 2 ** p for p in range(6)]\n        self.add_module(""layer1"", _Stem(ch[0]))\n        self.add_module(""layer2"", _ResLayer(n_blocks[0], ch[0], ch[2], 1, 1))\n        self.add_module(""layer3"", _ResLayer(n_blocks[1], ch[2], ch[3], 2, 1))\n        self.add_module(""layer4"", _ResLayer(n_blocks[2], ch[3], ch[4], 1, 2))\n        self.add_module(""layer5"", _ResLayer(n_blocks[3], ch[4], ch[5], 1, 4))\n        self.add_module(""aspp"", _ASPP(ch[5], n_classes, atrous_rates))\n\n    def freeze_bn(self):\n        for m in self.modules():\n            if isinstance(m, _ConvBnReLU.BATCH_NORM):\n                m.eval()\n\n\nif __name__ == ""__main__"":\n    model = DeepLabV2(\n        n_classes=21, n_blocks=[3, 4, 23, 3], atrous_rates=[6, 12, 18, 24]\n    )\n    model.eval()\n    image = torch.randn(1, 3, 513, 513)\n\n    print(model)\n    print(""input:"", image.shape)\n    print(""output:"", model(image).shape)\n'"
libs/models/deeplabv3.py,4,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2018-03-26\n\nfrom __future__ import absolute_import, print_function\n\nfrom collections import OrderedDict\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom .resnet import _ConvBnReLU, _ResLayer, _Stem\n\n\nclass _ImagePool(nn.Module):\n    def __init__(self, in_ch, out_ch):\n        super().__init__()\n        self.pool = nn.AdaptiveAvgPool2d(1)\n        self.conv = _ConvBnReLU(in_ch, out_ch, 1, 1, 0, 1)\n\n    def forward(self, x):\n        _, _, H, W = x.shape\n        h = self.pool(x)\n        h = self.conv(h)\n        h = F.interpolate(h, size=(H, W), mode=""bilinear"", align_corners=False)\n        return h\n\n\nclass _ASPP(nn.Module):\n    """"""\n    Atrous spatial pyramid pooling with image-level feature\n    """"""\n\n    def __init__(self, in_ch, out_ch, rates):\n        super(_ASPP, self).__init__()\n        self.stages = nn.Module()\n        self.stages.add_module(""c0"", _ConvBnReLU(in_ch, out_ch, 1, 1, 0, 1))\n        for i, rate in enumerate(rates):\n            self.stages.add_module(\n                ""c{}"".format(i + 1),\n                _ConvBnReLU(in_ch, out_ch, 3, 1, padding=rate, dilation=rate),\n            )\n        self.stages.add_module(""imagepool"", _ImagePool(in_ch, out_ch))\n\n    def forward(self, x):\n        return torch.cat([stage(x) for stage in self.stages.children()], dim=1)\n\n\nclass DeepLabV3(nn.Sequential):\n    """"""\n    DeepLab v3: Dilated ResNet with multi-grid + improved ASPP\n    """"""\n\n    def __init__(self, n_classes, n_blocks, atrous_rates, multi_grids, output_stride):\n        super(DeepLabV3, self).__init__()\n\n        # Stride and dilation\n        if output_stride == 8:\n            s = [1, 2, 1, 1]\n            d = [1, 1, 2, 4]\n        elif output_stride == 16:\n            s = [1, 2, 2, 1]\n            d = [1, 1, 1, 2]\n\n        ch = [64 * 2 ** p for p in range(6)]\n        self.add_module(""layer1"", _Stem(ch[0]))\n        self.add_module(""layer2"", _ResLayer(n_blocks[0], ch[0], ch[2], s[0], d[0]))\n        self.add_module(""layer3"", _ResLayer(n_blocks[1], ch[2], ch[3], s[1], d[1]))\n        self.add_module(""layer4"", _ResLayer(n_blocks[2], ch[3], ch[4], s[2], d[2]))\n        self.add_module(\n            ""layer5"", _ResLayer(n_blocks[3], ch[4], ch[5], s[3], d[3], multi_grids)\n        )\n        self.add_module(""aspp"", _ASPP(ch[5], 256, atrous_rates))\n        concat_ch = 256 * (len(atrous_rates) + 2)\n        self.add_module(""fc1"", _ConvBnReLU(concat_ch, 256, 1, 1, 0, 1))\n        self.add_module(""fc2"", nn.Conv2d(256, n_classes, kernel_size=1))\n\n\nif __name__ == ""__main__"":\n    model = DeepLabV3(\n        n_classes=21,\n        n_blocks=[3, 4, 23, 3],\n        atrous_rates=[6, 12, 18],\n        multi_grids=[1, 2, 4],\n        output_stride=8,\n    )\n    model.eval()\n    image = torch.randn(1, 3, 513, 513)\n\n    print(model)\n    print(""input:"", image.shape)\n    print(""output:"", model(image).shape)\n'"
libs/models/deeplabv3plus.py,4,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2018-03-26\n\nfrom __future__ import absolute_import, print_function\n\nfrom collections import OrderedDict\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom .deeplabv3 import _ASPP\nfrom .resnet import _ConvBnReLU, _ResLayer, _Stem\n\n\nclass DeepLabV3Plus(nn.Module):\n    """"""\n    DeepLab v3+: Dilated ResNet with multi-grid + improved ASPP + decoder\n    """"""\n\n    def __init__(self, n_classes, n_blocks, atrous_rates, multi_grids, output_stride):\n        super(DeepLabV3Plus, self).__init__()\n\n        # Stride and dilation\n        if output_stride == 8:\n            s = [1, 2, 1, 1]\n            d = [1, 1, 2, 4]\n        elif output_stride == 16:\n            s = [1, 2, 2, 1]\n            d = [1, 1, 1, 2]\n\n        # Encoder\n        ch = [64 * 2 ** p for p in range(6)]\n        self.layer1 = _Stem(ch[0])\n        self.layer2 = _ResLayer(n_blocks[0], ch[0], ch[2], s[0], d[0])\n        self.layer3 = _ResLayer(n_blocks[1], ch[2], ch[3], s[1], d[1])\n        self.layer4 = _ResLayer(n_blocks[2], ch[3], ch[4], s[2], d[2])\n        self.layer5 = _ResLayer(n_blocks[3], ch[4], ch[5], s[3], d[3], multi_grids)\n        self.aspp = _ASPP(ch[5], 256, atrous_rates)\n        concat_ch = 256 * (len(atrous_rates) + 2)\n        self.add_module(""fc1"", _ConvBnReLU(concat_ch, 256, 1, 1, 0, 1))\n\n        # Decoder\n        self.reduce = _ConvBnReLU(256, 48, 1, 1, 0, 1)\n        self.fc2 = nn.Sequential(\n            OrderedDict(\n                [\n                    (""conv1"", _ConvBnReLU(304, 256, 3, 1, 1, 1)),\n                    (""conv2"", _ConvBnReLU(256, 256, 3, 1, 1, 1)),\n                    (""conv3"", nn.Conv2d(256, n_classes, kernel_size=1)),\n                ]\n            )\n        )\n\n    def forward(self, x):\n        h = self.layer1(x)\n        h = self.layer2(h)\n        h_ = self.reduce(h)\n        h = self.layer3(h)\n        h = self.layer4(h)\n        h = self.layer5(h)\n        h = self.aspp(h)\n        h = self.fc1(h)\n        h = F.interpolate(h, size=h_.shape[2:], mode=""bilinear"", align_corners=False)\n        h = torch.cat((h, h_), dim=1)\n        h = self.fc2(h)\n        h = F.interpolate(h, size=x.shape[2:], mode=""bilinear"", align_corners=False)\n        return h\n\n\nif __name__ == ""__main__"":\n    model = DeepLabV3Plus(\n        n_classes=21,\n        n_blocks=[3, 4, 23, 3],\n        atrous_rates=[6, 12, 18],\n        multi_grids=[1, 2, 4],\n        output_stride=16,\n    )\n    model.eval()\n    image = torch.randn(1, 3, 513, 513)\n\n    print(model)\n    print(""input:"", image.shape)\n    print(""output:"", model(image).shape)\n'"
libs/models/msc.py,3,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2018-03-26\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass MSC(nn.Module):\n    """"""\n    Multi-scale inputs\n    """"""\n\n    def __init__(self, base, scales=None):\n        super(MSC, self).__init__()\n        self.base = base\n        if scales:\n            self.scales = scales\n        else:\n            self.scales = [0.5, 0.75]\n\n    def forward(self, x):\n        # Original\n        logits = self.base(x)\n        _, _, H, W = logits.shape\n        interp = lambda l: F.interpolate(\n            l, size=(H, W), mode=""bilinear"", align_corners=False\n        )\n\n        # Scaled\n        logits_pyramid = []\n        for p in self.scales:\n            h = F.interpolate(x, scale_factor=p, mode=""bilinear"", align_corners=False)\n            logits_pyramid.append(self.base(h))\n\n        # Pixel-wise max\n        logits_all = [logits] + [interp(l) for l in logits_pyramid]\n        logits_max = torch.max(torch.stack(logits_all), dim=0)[0]\n\n        if self.training:\n            return [logits] + logits_pyramid + [logits_max]\n        else:\n            return logits_max\n'"
libs/models/resnet.py,3,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author:   Kazuto Nakashima\n# URL:      http://kazuto1011.github.io\n# Created:  2017-11-19\n\nfrom __future__ import absolute_import, print_function\n\nfrom collections import OrderedDict\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\ntry:\n    from encoding.nn import SyncBatchNorm\n\n    _BATCH_NORM = SyncBatchNorm\nexcept:\n    _BATCH_NORM = nn.BatchNorm2d\n\n_BOTTLENECK_EXPANSION = 4\n\n\nclass _ConvBnReLU(nn.Sequential):\n    """"""\n    Cascade of 2D convolution, batch norm, and ReLU.\n    """"""\n\n    BATCH_NORM = _BATCH_NORM\n\n    def __init__(\n        self, in_ch, out_ch, kernel_size, stride, padding, dilation, relu=True\n    ):\n        super(_ConvBnReLU, self).__init__()\n        self.add_module(\n            ""conv"",\n            nn.Conv2d(\n                in_ch, out_ch, kernel_size, stride, padding, dilation, bias=False\n            ),\n        )\n        self.add_module(""bn"", _BATCH_NORM(out_ch, eps=1e-5, momentum=0.999))\n\n        if relu:\n            self.add_module(""relu"", nn.ReLU())\n\n\nclass _Bottleneck(nn.Module):\n    """"""\n    Bottleneck block of MSRA ResNet.\n    """"""\n\n    def __init__(self, in_ch, out_ch, stride, dilation, downsample):\n        super(_Bottleneck, self).__init__()\n        mid_ch = out_ch // _BOTTLENECK_EXPANSION\n        self.reduce = _ConvBnReLU(in_ch, mid_ch, 1, stride, 0, 1, True)\n        self.conv3x3 = _ConvBnReLU(mid_ch, mid_ch, 3, 1, dilation, dilation, True)\n        self.increase = _ConvBnReLU(mid_ch, out_ch, 1, 1, 0, 1, False)\n        self.shortcut = (\n            _ConvBnReLU(in_ch, out_ch, 1, stride, 0, 1, False)\n            if downsample\n            else lambda x: x  # identity\n        )\n\n    def forward(self, x):\n        h = self.reduce(x)\n        h = self.conv3x3(h)\n        h = self.increase(h)\n        h += self.shortcut(x)\n        return F.relu(h)\n\n\nclass _ResLayer(nn.Sequential):\n    """"""\n    Residual layer with multi grids\n    """"""\n\n    def __init__(self, n_layers, in_ch, out_ch, stride, dilation, multi_grids=None):\n        super(_ResLayer, self).__init__()\n\n        if multi_grids is None:\n            multi_grids = [1 for _ in range(n_layers)]\n        else:\n            assert n_layers == len(multi_grids)\n\n        # Downsampling is only in the first block\n        for i in range(n_layers):\n            self.add_module(\n                ""block{}"".format(i + 1),\n                _Bottleneck(\n                    in_ch=(in_ch if i == 0 else out_ch),\n                    out_ch=out_ch,\n                    stride=(stride if i == 0 else 1),\n                    dilation=dilation * multi_grids[i],\n                    downsample=(True if i == 0 else False),\n                ),\n            )\n\n\nclass _Stem(nn.Sequential):\n    """"""\n    The 1st conv layer.\n    Note that the max pooling is different from both MSRA and FAIR ResNet.\n    """"""\n\n    def __init__(self, out_ch):\n        super(_Stem, self).__init__()\n        self.add_module(""conv1"", _ConvBnReLU(3, out_ch, 7, 2, 3, 1))\n        self.add_module(""pool"", nn.MaxPool2d(3, 2, 1, ceil_mode=True))\n\n\nclass _Flatten(nn.Module):\n    def forward(self, x):\n        return x.view(x.size(0), -1)\n\n\nclass ResNet(nn.Sequential):\n    def __init__(self, n_classes, n_blocks):\n        super(ResNet, self).__init__()\n        ch = [64 * 2 ** p for p in range(6)]\n        self.add_module(""layer1"", _Stem(ch[0]))\n        self.add_module(""layer2"", _ResLayer(n_blocks[0], ch[0], ch[2], 1, 1))\n        self.add_module(""layer3"", _ResLayer(n_blocks[1], ch[2], ch[3], 2, 1))\n        self.add_module(""layer4"", _ResLayer(n_blocks[2], ch[3], ch[4], 2, 1))\n        self.add_module(""layer5"", _ResLayer(n_blocks[3], ch[4], ch[5], 2, 1))\n        self.add_module(""pool5"", nn.AdaptiveAvgPool2d(1))\n        self.add_module(""flatten"", _Flatten())\n        self.add_module(""fc"", nn.Linear(ch[5], n_classes))\n\n\nif __name__ == ""__main__"":\n    model = ResNet(n_classes=1000, n_blocks=[3, 4, 23, 3])\n    model.eval()\n    image = torch.randn(1, 3, 224, 224)\n\n    print(model)\n    print(""input:"", image.shape)\n    print(""output:"", model(image).shape)\n'"
libs/utils/__init__.py,0,b'from __future__ import absolute_import\nfrom .crf import DenseCRF\nfrom .lr_scheduler import PolynomialLR\nfrom .metric import scores\n'
libs/utils/crf.py,0,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author: Kazuto Nakashima\n# URL:    https://kazuto1011.github.io\n# Date:   09 January 2019\n\n\nimport numpy as np\nimport pydensecrf.densecrf as dcrf\nimport pydensecrf.utils as utils\n\n\nclass DenseCRF(object):\n    def __init__(self, iter_max, pos_w, pos_xy_std, bi_w, bi_xy_std, bi_rgb_std):\n        self.iter_max = iter_max\n        self.pos_w = pos_w\n        self.pos_xy_std = pos_xy_std\n        self.bi_w = bi_w\n        self.bi_xy_std = bi_xy_std\n        self.bi_rgb_std = bi_rgb_std\n\n    def __call__(self, image, probmap):\n        C, H, W = probmap.shape\n\n        U = utils.unary_from_softmax(probmap)\n        U = np.ascontiguousarray(U)\n\n        image = np.ascontiguousarray(image)\n\n        d = dcrf.DenseCRF2D(W, H, C)\n        d.setUnaryEnergy(U)\n        d.addPairwiseGaussian(sxy=self.pos_xy_std, compat=self.pos_w)\n        d.addPairwiseBilateral(\n            sxy=self.bi_xy_std, srgb=self.bi_rgb_std, rgbim=image, compat=self.bi_w\n        )\n\n        Q = d.inference(self.iter_max)\n        Q = np.array(Q).reshape((C, H, W))\n\n        return Q\n'"
libs/utils/lr_scheduler.py,1,"b'#!/usr/bin/env python\n# coding: utf-8\n#\n# Author: Kazuto Nakashima\n# URL:    https://kazuto1011.github.io\n# Date:   09 January 2019\n\n\nfrom torch.optim.lr_scheduler import _LRScheduler\n\n\nclass PolynomialLR(_LRScheduler):\n    def __init__(self, optimizer, step_size, iter_max, power, last_epoch=-1):\n        self.step_size = step_size\n        self.iter_max = iter_max\n        self.power = power\n        super(PolynomialLR, self).__init__(optimizer, last_epoch)\n\n    def polynomial_decay(self, lr):\n        return lr * (1 - float(self.last_epoch) / self.iter_max) ** self.power\n\n    def get_lr(self):\n        if (\n            (self.last_epoch == 0)\n            or (self.last_epoch % self.step_size != 0)\n            or (self.last_epoch > self.iter_max)\n        ):\n            return [group[""lr""] for group in self.optimizer.param_groups]\n        return [self.polynomial_decay(lr) for lr in self.base_lrs]\n'"
libs/utils/metric.py,0,"b'# Originally written by wkentaro\n# https://github.com/wkentaro/pytorch-fcn/blob/master/torchfcn/utils.py\n\nimport numpy as np\n\n\ndef _fast_hist(label_true, label_pred, n_class):\n    mask = (label_true >= 0) & (label_true < n_class)\n    hist = np.bincount(\n        n_class * label_true[mask].astype(int) + label_pred[mask],\n        minlength=n_class ** 2,\n    ).reshape(n_class, n_class)\n    return hist\n\n\ndef scores(label_trues, label_preds, n_class):\n    hist = np.zeros((n_class, n_class))\n    for lt, lp in zip(label_trues, label_preds):\n        hist += _fast_hist(lt.flatten(), lp.flatten(), n_class)\n    acc = np.diag(hist).sum() / hist.sum()\n    acc_cls = np.diag(hist) / hist.sum(axis=1)\n    acc_cls = np.nanmean(acc_cls)\n    iu = np.diag(hist) / (hist.sum(axis=1) + hist.sum(axis=0) - np.diag(hist))\n    valid = hist.sum(axis=1) > 0  # added\n    mean_iu = np.nanmean(iu[valid])\n    freq = hist.sum(axis=1) / hist.sum()\n    fwavacc = (freq[freq > 0] * iu[freq > 0]).sum()\n    cls_iu = dict(zip(range(n_class), iu))\n\n    return {\n        ""Pixel Accuracy"": acc,\n        ""Mean Accuracy"": acc_cls,\n        ""Frequency Weighted IoU"": fwavacc,\n        ""Mean IoU"": mean_iu,\n        ""Class IoU"": cls_iu,\n    }\n'"
