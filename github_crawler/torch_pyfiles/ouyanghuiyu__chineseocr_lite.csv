file_path,api_count,code
app.py,0,"b'# -*- coding: utf-8 -*-\n""""""\n@author: lywen\n""""""\nimport os\nimport json\nimport time\nimport web\nimport numpy as np\nimport uuid\nfrom PIL import Image\nfrom model import  text_predict,crnn_handle\n\nweb.config.debug  = True\n\nfilelock=\'file.lock\'\nif os.path.exists(filelock):\n   os.remove(filelock)\n\nrender = web.template.render(\'templates\', base=\'base\')\n\nfrom config import *\nfrom apphelper.image import union_rbox,adjust_box_to_origin,base64_to_PIL\nfrom application import trainTicket,idcard\n\n   \n# from main import TextOcrModel\n\n\n\nbillList = [\'\xe9\x80\x9a\xe7\x94\xa8OCR\',\'\xe7\x81\xab\xe8\xbd\xa6\xe7\xa5\xa8\',\'\xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\']\n\nclass OCR:\n    """"""\xe9\x80\x9a\xe7\x94\xa8OCR\xe8\xaf\x86\xe5\x88\xab""""""\n\n    def GET(self):\n        post = {}\n        post[\'postName\'] = \'ocr\'##\xe8\xaf\xb7\xe6\xb1\x82\xe5\x9c\xb0\xe5\x9d\x80\n        post[\'height\'] = 1000\n        post[\'H\'] = 1000\n        post[\'width\'] = 600\n        post[\'W\'] = 600\n        post[\'billList\'] = billList\n        return render.ocr(post)\n\n    def POST(self):\n        t = time.time()\n        data = web.data()\n        uidJob = uuid.uuid1().__str__()\n        \n        data = json.loads(data)\n        # print(data)\n        billModel = data.get(\'billModel\',\'\')\n        # textAngle = data.get(\'textAngle\',False)##\xe6\x96\x87\xe5\xad\x97\xe6\xa3\x80\xe6\xb5\x8b\n        textLine = data.get(\'textLine\',False)##\xe5\x8f\xaa\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8d\x95\xe8\xa1\x8c\xe8\xaf\x86\xe5\x88\xab\n\n\n\n        imgString = data[\'imgString\'].encode().split(b\';base64,\')[-1]\n        img = base64_to_PIL(imgString)\n        if img is not None:\n            img = np.array(img)\n            \n        H,W = img.shape[:2]\n\n        while time.time()-t<=TIMEOUT:\n            if os.path.exists(filelock):\n                continue\n            else:\n                with open(filelock,\'w\') as f:\n                    f.write(uidJob)\n                                                \n                if textLine:\n                    ##\xe5\x8d\x95\xe8\xa1\x8c\xe8\xaf\x86\xe5\x88\xab\n                    partImg = Image.fromarray(img)\n                    text    = crnn_handle.predict(partImg)\n                    res =[ {\'text\':text,\'name\':\'0\',\'box\':[0,0,W,0,W,H,0,H]} ]\n                    os.remove(filelock)\n                    break\n                        \n                else:\n                    # detectAngle = textAngle\n                    result= text_predict(img)\n        \n        \n        \n                    if billModel==\'\' or billModel==\'\xe9\x80\x9a\xe7\x94\xa8OCR\' :\n                        # result = union_rbox(result,0.2)\n                        res = [{\'text\':x[\'text\'],\n                                \'name\':str(i),\n                                \'box\':{\'cx\':x[\'cx\'],\n                                       \'cy\':x[\'cy\'],\n                                       \'w\':x[\'w\'],\n                                       \'h\':x[\'h\'],\n                                       \'angle\':x[\'degree\']\n        \n                                      }\n                               } for i,x in enumerate(result)]\n                        # res = adjust_box_to_origin(img,angle, res)##\xe4\xbf\xae\xe6\xad\xa3box\n        \n                    elif billModel==\'\xe7\x81\xab\xe8\xbd\xa6\xe7\xa5\xa8\':\n                        res = trainTicket.trainTicket(result)\n                        res = res.res\n                        res =[ {\'text\':res[key],\'name\':key,\'box\':{}} for key in res]\n        \n                    elif billModel==\'\xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\':\n        \n                        res = idcard.idcard(result)\n                        res = res.res\n                        res =[ {\'text\':res[key],\'name\':key,\'box\':{}} for key in res]\n                        \n                    os.remove(filelock)\n                    break\n            \n        \n        timeTake = time.time()-t\n         \n        return json.dumps({\'res\':res,\'timeTake\':round(timeTake,4)},ensure_ascii=False)\n        \n\nurls = (\'/ocr\',\'OCR\',)\n\nif __name__ == ""__main__"":\n\n      app = web.application(urls, globals())\n      app.run()\n'"
config.py,0,"b'import  os\nfilt_path = os.path.abspath(__file__)\nfather_path=os.path.abspath(os.path.dirname(filt_path)+os.path.sep+""."")\n\n\n\nGPU_ID = 0\n\n#psenet\xe7\x9b\xb8\xe5\x85\xb3\npse_long_size = 960 #\xe5\x9b\xbe\xe7\x89\x87\xe9\x95\xbf\xe8\xbe\xb9\npse_model_type  = ""mobilenetv2""\npse_scale = 1\n\n\nif pse_model_type == ""mobilenetv2"" :\n    pse_model_path = os.path.join(father_path, ""models/psenet_lite_mbv2.pth"")\n\n#crnn\xe7\x9b\xb8\xe5\x85\xb3\nnh = 256\ncrnn_type  = ""lite_lstm""\n\ncrnn_vertical_model_path = os.path.join(father_path,""models/crnn_dw_lstm_vertical.pth"")\n\nif crnn_type == ""lite_lstm"":\n    LSTMFLAG = True\n    crnn_model_path =  os.path.join(father_path,""models/crnn_lite_lstm_dw_v2.pth"")\nelif crnn_type == ""lite_dense"":\n    LSTMFLAG = False\n    crnn_model_path = os.path.join(father_path, ""models/crnn_lite_dense_dw.pth"")\nelif crnn_type == ""full_lstm"":\n    LSTMFLAG = True\n    crnn_model_path = os.path.join(father_path,""models/ocr-lstm.pth"")\nelif crnn_type == ""full_dense"":\n    LSTMFLAG = False\n    crnn_model_path = os.path.join(father_path,""models/ocr-dense.pth"")\n\n# crnn_model_path = os.path.join(father_path,""models/ocr-lstm.pth"")\n\n# from crnn.keys import  alphabet\nfrom crnn.keys import  alphabetChinese as alphabet\n\n\n#angle_class\xe7\x9b\xb8\xe5\x85\xb3\nlable_map_dict  =  { 0 : ""hengdao"",  1:""hengzhen"",  2:""shudao"",  3:""shuzhen""} #hengdao: \xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe6\xa8\xaa\xe5\x90\x91\xe5\x80\x92\xe7\xab\x8b \xe5\x85\xb6\xe4\xbb\x96\xe7\xb1\xbb\xe4\xbc\xbc\nrotae_map_dict  =   {""hengdao"": 180 , ""hengzhen"": 0 , ""shudao"": 180 , ""shuzhen"": 0 } # \xe6\x96\x87\xe6\x9c\xac\xe8\xa1\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x97\x8b\xe8\xbd\xac\xe7\x9a\x84\xe8\xa7\x92\xe5\xba\xa6\nangle_type  = ""shufflenetv2_05""\n# angle_type  = ""resnet18""\nangle_model_path  =  os.path.join(father_path,""models/{}.pth"".format(angle_type))\n\nTIMEOUT=30'"
model.py,0,"b'from config import  *\nfrom crnn import FullCrnn,LiteCrnn,CRNNHandle\nfrom  psenet import  PSENet,PSENetHandel\nfrom angle_class import  AangleClassHandle,shufflenet_v2_x0_5\nfrom utils import  rotate_cut_img,solve,sort_box,draw_bbox,crop_rect\nfrom PIL import Image\nimport numpy as np\nimport cv2\n\n\n\nif  pse_model_type == ""mobilenetv2"":\n    text_detect_net = PSENet(backbone=pse_model_type, pretrained=False, result_num=6, scale=pse_scale)\n\n\ntext_handle = PSENetHandel(pse_model_path, text_detect_net, pse_scale, gpu_id=GPU_ID)\ncrnn_net = None\n\nif crnn_type == ""full_lstm"" or crnn_type == ""full_dense"":\n    crnn_net  = FullCrnn(32, 1, len(alphabet) + 1, nh, n_rnn=2, leakyRelu=False, lstmFlag=LSTMFLAG)\nelif crnn_type == ""lite_lstm"" or crnn_type == ""lite_dense"":\n    crnn_net =  LiteCrnn(32, 1, len(alphabet) + 1, nh, n_rnn=2, leakyRelu=False, lstmFlag=LSTMFLAG)\n\n\n\nassert  crnn_type is not None\ncrnn_handle  =  CRNNHandle(crnn_model_path , crnn_net , gpu_id=GPU_ID)\n\ncrnn_vertical_handle = None\nif crnn_vertical_model_path is not None:\n    crnn_vertical_net = LiteCrnn(32, 1, len(alphabet) + 1, nh, n_rnn=2, leakyRelu=False, lstmFlag=True)\n    crnn_vertical_handle = CRNNHandle(crnn_vertical_model_path , crnn_vertical_net , gpu_id=GPU_ID)\n\n\nassert angle_type in [""shufflenetv2_05""]\n\n\n\nif angle_type == ""shufflenetv2_05"":\n    angle_net = shufflenet_v2_x0_5(num_classes=len(lable_map_dict), pretrained=False)\n\n\nangle_handle = AangleClassHandle(angle_model_path,angle_net,gpu_id=GPU_ID)\n\n\n\ndef crnnRec(im, rects_re, leftAdjust=False, rightAdjust=False, alph=0.2, f=1.0):\n    """"""\n    crnn\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8cocr\xe8\xaf\x86\xe5\x88\xab\n    @@model,\n    @@converter,\n    @@im:Array\n    @@text_recs:text box\n    @@ifIm:\xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xbabox\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84img\n\n    """"""\n    results = []\n    im = Image.fromarray(im)\n    for index, rect in enumerate(rects_re):\n\n        degree, w, h, cx, cy = rect\n\n\n        # partImg, newW, newH = rotate_cut_img(im,  90  + degree  , cx, cy, w, h, leftAdjust, rightAdjust, alph)\n        partImg = crop_rect(im,  ((cx, cy ),(h, w),degree))\n        newW,newH = partImg.size\n        partImg_array  = np.uint8(partImg)\n\n        #\n        if newH > 1.5* newW:\n            partImg_array = np.rot90(partImg_array,1)\n\n        # partImg = Image.fromarray(partImg_array).convert(""RGB"")\n\n        # partImg.save(""./debug_im/{}.jpg"".format(index))\n\n        angel_index = angle_handle.predict(partImg_array)\n\n        angel_class = lable_map_dict[angel_index]\n        # print(angel_class)\n        rotate_angle = rotae_map_dict[angel_class]\n\n\n        if rotate_angle != 0 :\n            partImg_array = np.rot90(partImg_array,rotate_angle//90)\n        \n\n\n\n\n        partImg = Image.fromarray(partImg_array).convert(""RGB"")\n        #\n        # partImg.save(""./debug_im/{}.jpg"".format(index))\n        \n        partImg_ = partImg.convert(\'L\')\n\n        try:\n\n            if crnn_vertical_handle is not None and angel_class in [""shudao"", ""shuzhen""]:\n\n                simPred =  crnn_vertical_handle.predict(partImg_)\n            else:\n                simPred = crnn_handle.predict(partImg_)  ##\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe6\x96\x87\xe6\x9c\xac\n        except :\n            continue\n\n        if simPred.strip() != u\'\':\n            results.append({\'cx\': cx * f, \'cy\': cy * f, \'text\': simPred, \'w\': newW * f, \'h\': newH * f,\n                            \'degree\': degree })\n    return results\n\n\n\n\ndef text_predict(img):\n\n    # img = cv2.imread(imgpath)\n\n    preds, boxes_list, rects_re, t = text_handle.predict(img, long_size=pse_long_size)\n\n\n    img2 = draw_bbox(img, boxes_list, color=(0, 255, 0))\n    cv2.imwrite(""debug_im/draw.jpg"", img2)\n\n    result = crnnRec(np.array(img), rects_re)\n\n    return result\n\n\n\nif __name__ == ""__main__"":\n    pass\n'"
utils.py,0,"b'import  numpy as np\nimport cv2\nfrom   PIL import  Image\ndef rotate_cut_img(im, degree, x_center , y_center, w, h, leftAdjust=False, rightAdjust=False, alph=0.2):\n\n    # degree_ = degree * 180.0 / np.pi\n    # print(degree_)\n    right = 0\n    left = 0\n    if rightAdjust:\n        right = 1\n    if leftAdjust:\n        left = 1\n\n    box = (max(1, x_center - w / 2 - left * alph * (w / 2))  ##xmin\n           , y_center - h / 2,  ##ymin\n           min(x_center + w / 2 + right * alph * (w / 2), im.size[0] - 1)  ##xmax\n           , y_center + h / 2)  ##ymax\n\n    newW = box[2] - box[0]\n    newH = box[3] - box[1]\n    tmpImg = im.rotate(degree, center=(x_center, y_center)).crop(box)\n\n    return tmpImg, newW, newH\n\n\ndef crop_rect(img, rect ,alph = 0.15):\n    img  = np.asarray(img)\n    # get the parameter of the small rectangle\n    # print(""rect!"")\n    # print(rect)\n    center, size, angle = rect[0], rect[1], rect[2]\n    min_size  = min(size)\n\n    if(angle>-45):\n        center, size = tuple(map(int, center)), tuple(map(int, size))\n        # angle-=270\n        size  = ( int(size[0] + min_size*alph ) , int(size[1]  +  min_size*alph) )\n        height, width = img.shape[0], img.shape[1]\n        M = cv2.getRotationMatrix2D(center, angle, 1)\n    # size = tuple([int(rect[1][1]), int(rect[1][0])])\n        img_rot = cv2.warpAffine(img, M, (width, height))\n        # cv2.imwrite(""debug_im/img_rot.jpg"", img_rot)\n        img_crop = cv2.getRectSubPix(img_rot, size, center)\n    else:\n        center=tuple(map(int,center))\n        size = tuple([int(rect[1][1]), int(rect[1][0])])\n        size  = ( int(size[0] + min_size*alph) ,int(size[1]  + min_size*alph) )\n        angle -= 270\n        height, width = img.shape[0], img.shape[1]\n        M = cv2.getRotationMatrix2D(center, angle, 1)\n        img_rot = cv2.warpAffine(img, M, (width, height))\n        # cv2.imwrite(""debug_im/img_rot.jpg"", img_rot)\n        img_crop = cv2.getRectSubPix(img_rot, size, center)\n    img_crop = Image.fromarray(img_crop)\n    return img_crop\n\n\n\ndef draw_bbox(img_path, result, color=(255, 0, 0),thickness=2):\n    if isinstance(img_path, str):\n        img_path = cv2.imread(img_path)\n        # img_path = cv2.cvtColor(img_path, cv2.COLOR_BGR2RGB)\n    img_path = img_path.copy()\n    for point in result:\n        point = point.astype(int)\n        cv2.line(img_path, tuple(point[0]), tuple(point[1]), color, thickness)\n        cv2.line(img_path, tuple(point[1]), tuple(point[2]), color, thickness)\n        cv2.line(img_path, tuple(point[2]), tuple(point[3]), color, thickness)\n        cv2.line(img_path, tuple(point[3]), tuple(point[0]), color, thickness)\n    return img_path\n\ndef sort_box(boxs):\n    res = []\n    for box in boxs:\n        # box = [x if x>0 else 0 for x in box ]\n        x1, y1, x2, y2, x3, y3, x4, y4 = box[:8]\n        newBox = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]\n        ## sort x\n        newBox = sorted(newBox, key=lambda x: x[0])\n        x1, y1 = sorted(newBox[:2], key=lambda x: x[1])[0]\n        index = newBox.index([x1, y1])\n        newBox.pop(index)\n        newBox = sorted(newBox, key=lambda x: -x[1])\n        x4, y4 = sorted(newBox[:2], key=lambda x: x[0])[0]\n        index = newBox.index([x4, y4])\n        newBox.pop(index)\n        newBox = sorted(newBox, key=lambda x: -x[0])\n        x2, y2 = sorted(newBox[:2], key=lambda x: x[1])[0]\n        index = newBox.index([x2, y2])\n        newBox.pop(index)\n\n        newBox = sorted(newBox, key=lambda x: -x[1])\n        x3, y3 = sorted(newBox[:2], key=lambda x: x[0])[0]\n\n        res.append([x1, y1, x2, y2, x3, y3, x4, y4])\n    return res\n\n\n\n\ndef solve(box):\n    """"""\n    \xe7\xbb\x95 cx,cy\xe7\x82\xb9 w,h \xe6\x97\x8b\xe8\xbd\xac angle \xe7\x9a\x84\xe5\x9d\x90\xe6\xa0\x87\n    x = cx-w/2\n    y = cy-h/2\n    x1-cx = -w/2*cos(angle) +h/2*sin(angle)\n    y1 -cy= -w/2*sin(angle) -h/2*cos(angle)\n\n    h(x1-cx) = -wh/2*cos(angle) +hh/2*sin(angle)\n    w(y1 -cy)= -ww/2*sin(angle) -hw/2*cos(angle)\n    (hh+ww)/2sin(angle) = h(x1-cx)-w(y1 -cy)\n\n    """"""\n    x1, y1, x2, y2, x3, y3, x4, y4 = box[:8]\n    cx = (x1 + x3 + x2 + x4) / 4.0\n    cy = (y1 + y3 + y4 + y2) / 4.0\n    w = (np.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) + np.sqrt((x3 - x4) ** 2 + (y3 - y4) ** 2)) / 2\n    h = (np.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2) + np.sqrt((x1 - x4) ** 2 + (y1 - y4) ** 2)) / 2\n\n    sinA = (h * (x1 - cx) - w * (y1 - cy)) * 1.0 / (h * h + w * w) * 2\n    angle = np.arcsin(sinA)\n    return angle, w, h, cx, cy'"
angle_class/ShuffleNetV2.py,6,"b'import torch\nimport torch.nn as nn\n# from torchvision.models.utils import load_state_dict_from_url\n\n\n__all__ = [\n    \'ShuffleNetV2\', \'shufflenet_v2_x0_5\', \'shufflenet_v2_x1_0\',\n    \'shufflenet_v2_x1_5\', \'shufflenet_v2_x2_0\'\n]\n\nmodel_urls = {\n    \'shufflenetv2_x0.5\': \'https://download.pytorch.org/models/shufflenetv2_x0.5-f707e7126e.pth\',\n    \'shufflenetv2_x1.0\': \'https://download.pytorch.org/models/shufflenetv2_x1-5666bf0f80.pth\',\n    \'shufflenetv2_x1.5\': None,\n    \'shufflenetv2_x2.0\': None,\n}\n\n#\n# def channel_shuffle(x, groups):\n#     batchsize, num_channels, height, width = x.data.size()\n#     channels_per_group = num_channels // groups\n#\n#     # reshape\n#     x = x.view(batchsize, groups,\n#                channels_per_group, height, width)\n#\n#     x = torch.transpose(x, 1, 2).contiguous()\n#\n#     # flatten\n#     x = x.view(batchsize, -1, height, width)\n#\n#     return x\n\n\n\ndef channel_shuffle(x, groups):\n\n    g = groups\n    # n, c, h, w = x.size()\n    # x = x.view(n, g, c // g, h, w).permute(\n    #     0, 2, 1, 3, 4).contiguous().view(n, c, h, w)\n\n    x = x.reshape(x.shape[0], g, x.shape[1] // g, x.shape[2], x.shape[3])\n    x = x.permute(0, 2, 1, 3, 4)\n    x = x.reshape(x.shape[0], -1, x.shape[3], x.shape[4])\n    # x_proj = x[:, :(x.shape[1] // 2), :, :]\n    # x = x[:, (x.shape[1] // 2):, :, :]\n    return  x\n\nclass InvertedResidual(nn.Module):\n    def __init__(self, inp, oup, stride):\n        super(InvertedResidual, self).__init__()\n\n        if not (1 <= stride <= 3):\n            raise ValueError(\'illegal stride value\')\n        self.stride = stride\n\n        branch_features = oup // 2\n        assert (self.stride != 1) or (inp == branch_features << 1)\n\n        if self.stride > 1:\n            self.branch1 = nn.Sequential(\n                self.depthwise_conv(inp, inp, kernel_size=3, stride=self.stride, padding=1),\n                nn.BatchNorm2d(inp),\n                nn.Conv2d(inp, branch_features, kernel_size=1, stride=1, padding=0, bias=False),\n                nn.BatchNorm2d(branch_features),\n                nn.ReLU(inplace=True),\n            )\n\n        self.branch2 = nn.Sequential(\n            nn.Conv2d(inp if (self.stride > 1) else branch_features,\n                      branch_features, kernel_size=1, stride=1, padding=0, bias=False),\n            nn.BatchNorm2d(branch_features),\n            nn.ReLU(inplace=True),\n            self.depthwise_conv(branch_features, branch_features, kernel_size=3, stride=self.stride, padding=1),\n            nn.BatchNorm2d(branch_features),\n            nn.Conv2d(branch_features, branch_features, kernel_size=1, stride=1, padding=0, bias=False),\n            nn.BatchNorm2d(branch_features),\n            nn.ReLU(inplace=True),\n        )\n\n    @staticmethod\n    def depthwise_conv(i, o, kernel_size, stride=1, padding=0, bias=False):\n        return nn.Conv2d(i, o, kernel_size, stride, padding, bias=bias, groups=i)\n\n    def forward(self, x):\n        if self.stride == 1:\n            x1, x2 = x.chunk(2, dim=1)\n            out = torch.cat((x1, self.branch2(x2)), dim=1)\n        else:\n            out = torch.cat((self.branch1(x), self.branch2(x)), dim=1)\n\n        out = channel_shuffle(out, 2)\n\n        return out\n\n\nclass ShuffleNetV2(nn.Module):\n    def __init__(self, stages_repeats, stages_out_channels, num_classes=1000):\n        super(ShuffleNetV2, self).__init__()\n\n        if len(stages_repeats) != 3:\n            raise ValueError(\'expected stages_repeats as list of 3 positive ints\')\n        if len(stages_out_channels) != 5:\n            raise ValueError(\'expected stages_out_channels as list of 5 positive ints\')\n        self._stage_out_channels = stages_out_channels\n\n        input_channels = 3\n        output_channels = self._stage_out_channels[0]\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(input_channels, output_channels, 3, 2, 1, bias=False),\n            nn.BatchNorm2d(output_channels),\n            nn.ReLU(inplace=True),\n        )\n        input_channels = output_channels\n\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=(1,2), padding=1)\n\n        stage_names = [\'stage{}\'.format(i) for i in [2, 3, 4]]\n        for name, repeats, output_channels in zip(\n                stage_names, stages_repeats, self._stage_out_channels[1:]):\n            seq = [InvertedResidual(input_channels, output_channels, 2)]\n            for i in range(repeats - 1):\n                seq.append(InvertedResidual(output_channels, output_channels, 1))\n            setattr(self, name, nn.Sequential(*seq))\n            input_channels = output_channels\n\n        output_channels = self._stage_out_channels[-1]\n        self.conv5 = nn.Sequential(\n            nn.Conv2d(input_channels, output_channels, 1, 1, 0, bias=False),\n            nn.BatchNorm2d(output_channels),\n            nn.ReLU(inplace=True),\n        )\n\n        self.class_out = nn.Linear(output_channels, num_classes)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.maxpool(x)\n        x = self.stage2(x)\n        x = self.stage3(x)\n        x = self.stage4(x)\n        x = self.conv5(x)\n        x = x.mean([2, 3])  # globalpool\n        x = self.class_out(x)\n\n        return x\n\n\ndef _shufflenetv2(arch, pretrained, progress, *args, **kwargs):\n    model = ShuffleNetV2(*args, **kwargs)\n\n    # if pretrained:\n    #     model_url = model_urls[arch]\n        # if model_url is None:\n        #     raise NotImplementedError(\'pretrained {} is not supported as of now\'.format(arch))\n        # else:\n            # state_dict = load_state_dict_from_url(model_url, progress=progress)\n            # model.load_state_dict(state_dict,strict = False)\n\n    return model\n\n\ndef shufflenet_v2_x0_5(pretrained=False, progress=True, **kwargs):\n    """"""\n    Constructs a ShuffleNetV2 with 0.5x output channels, as described in\n    `""ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design""\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    """"""\n    return _shufflenetv2(\'shufflenetv2_x0.5\', pretrained, progress,\n                         [4, 8, 4], [24, 48, 96, 192, 1024], **kwargs)\n\n\ndef shufflenet_v2_x1_0(pretrained=False, progress=True, **kwargs):\n    """"""\n    Constructs a ShuffleNetV2 with 1.0x output channels, as described in\n    `""ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design""\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    """"""\n    return _shufflenetv2(\'shufflenetv2_x1.0\', pretrained, progress,\n                         [4, 8, 4], [24, 116, 232, 464, 1024], **kwargs)\n\n\ndef shufflenet_v2_x1_5(pretrained=False, progress=True, **kwargs):\n    """"""\n    Constructs a ShuffleNetV2 with 1.5x output channels, as described in\n    `""ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design""\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    """"""\n    return _shufflenetv2(\'shufflenetv2_x1.5\', pretrained, progress,\n                         [4, 8, 4], [24, 176, 352, 704, 1024], **kwargs)\n\n\ndef shufflenet_v2_x2_0(pretrained=False, progress=True, **kwargs):\n    """"""\n    Constructs a ShuffleNetV2 with 2.0x output channels, as described in\n    `""ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design""\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    """"""\n    return _shufflenetv2(\'shufflenetv2_x2.0\', pretrained, progress,\n                         [4, 8, 4], [24, 244, 488, 976, 2048], **kwargs)\n'"
angle_class/__init__.py,0,b'from .ShuffleNetV2 import shufflenet_v2_x0_5\nfrom .angle_class import AangleClassHandle'
angle_class/angle_class.py,7,"b'\nimport torch\nfrom torchvision import  transforms\nfrom torch.autograd import Variable\nimport  numpy as np\nfrom PIL import  Image\nfrom config import  angle_type\nclass AangleClassHandle():\n    def __init__(self,model_path , net , gpu_id=None ):\n        \'\'\'\n           \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96pytorch\xe6\xa8\xa1\xe5\x9e\x8b\n           :param model_path: \xe6\xa8\xa1\xe5\x9e\x8b\xe5\x9c\xb0\xe5\x9d\x80(\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe5\x8f\x82\xe6\x95\xb0\xe5\x92\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xe4\xb8\x80\xe8\xb5\xb7\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6)\n           :param net: \xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9c\xa8model_path\xe4\xb8\xad\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe6\x98\xaf\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe5\x88\x99\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x99\xe5\x87\xba\xe7\xbd\x91\xe7\xbb\x9c\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\n\n           :param gpu_id: \xe5\x9c\xa8\xe5\x93\xaa\xe4\xb8\x80\xe5\x9d\x97gpu\xe4\xb8\x8a\xe8\xbf\x90\xe8\xa1\x8c\n           \'\'\'\n\n        if gpu_id is not None and isinstance(gpu_id, int) and torch.cuda.is_available():\n            self.device = torch.device(""cuda:{}"".format(gpu_id))\n        else:\n            self.device = torch.device(""cpu"")\n        self.net = torch.load(model_path, map_location=self.device)\n        print(\'device:\', self.device)\n\n\n        self.trans = transforms.Compose([\n            # transforms.Resize((int(48 / 1.0), int(196 / 0.875))),\n            # transforms.CenterCrop((48, 196)),\n            #\n            transforms.Resize((48, 196)),\n            transforms.ToTensor(),\n            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n\n\n        if net is not None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xe5\x92\x8c\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x88\x86\xe5\xbc\x80\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xef\xbc\x8c\xe5\xb0\xb1\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8f\x82\xe6\x95\xb0\xe5\x8a\xa0\xe8\xbd\xbd\n            net = net.to(self.device)\n\n            try:\n                sk = {}\n                for k in self.net:\n                    sk[k[7:]] = self.net[k]\n\n                net.load_state_dict(sk)\n            except:\n                net.load_state_dict(self.net)\n\n            self.net = net\n            print(\'load model\')\n        self.net.eval()\n\n\n\n    def predict(self, im):\n        """"""\n        \xe9\xa2\x84\xe6\xb5\x8b\n        """"""\n        im = Image.fromarray(im).convert(""RGB"")\n        image = self.trans(im)\n        image = image.to(self.device)\n        # if torch.cuda.is_available():\n        #     image = image.cuda()\n        image = image.view(1, *image.size())\n        image = Variable(image)\n        preds = self.net(image)\n        preds = torch.softmax(preds,1)\n        preds = preds.cpu().detach().numpy()\n        preds = np.argmax(preds)\n        return preds\n'"
apphelper/image.py,0,"b'# -*- coding: utf-8 -*-\n""""""\n##\xe5\x9b\xbe\xe5\x83\x8f\xe7\x9b\xb8\xe5\x85\xb3\xe5\x87\xbd\xe6\x95\xb0\n@author: chineseocr\n""""""\nimport six\nimport base64\nimport numpy as np\nimport cv2\nfrom PIL import Image\nfrom io import BytesIO\ndef base64_to_PIL(string):\n    """"""\n    base64 string to PIL\n    """"""\n    try:    \n            base64_data = base64.b64decode(string)\n            buf = six.BytesIO()\n            buf.write(base64_data)\n            buf.seek(0)\n            img = Image.open(buf).convert(\'RGB\')\n            return img\n    except:\n        return None\n    \n    \ndef PIL_to_base64(image):\n    output = BytesIO()\n    image.save(output,format=\'png\')\n    contents = output.getvalue()\n    output.close()\n    string = base64.b64encode(contents)\n    return string\n\n\ndef solve(box):\n     """"""\n     \xe7\xbb\x95 cx,cy\xe7\x82\xb9 w,h \xe6\x97\x8b\xe8\xbd\xac angle \xe7\x9a\x84\xe5\x9d\x90\xe6\xa0\x87\n     x = cx-w/2\n     y = cy-h/2\n     x1-cx = -w/2*cos(angle) +h/2*sin(angle)\n     y1 -cy= -w/2*sin(angle) -h/2*cos(angle)\n     \n     h(x1-cx) = -wh/2*cos(angle) +hh/2*sin(angle)\n     w(y1 -cy)= -ww/2*sin(angle) -hw/2*cos(angle)\n     (hh+ww)/2sin(angle) = h(x1-cx)-w(y1 -cy)\n\n     """"""\n     x1,y1,x2,y2,x3,y3,x4,y4= box[:8]\n     cx = (x1+x3+x2+x4)/4.0\n     cy = (y1+y3+y4+y2)/4.0  \n     w = (np.sqrt((x2-x1)**2+(y2-y1)**2)+np.sqrt((x3-x4)**2+(y3-y4)**2))/2\n     h = (np.sqrt((x2-x3)**2+(y2-y3)**2)+np.sqrt((x1-x4)**2+(y1-y4)**2))/2   \n     #x = cx-w/2\n     #y = cy-h/2\n     \n     sinA = (h*(x1-cx)-w*(y1 -cy))*1.0/(h*h+w*w)*2\n     if abs(sinA)>1:\n            angle = None\n     else:\n        angle = np.arcsin(sinA)\n     return angle,w,h,cx,cy\n\n\ndef xy_rotate_box(cx,cy,w,h,angle):\n    """"""\n    \xe7\xbb\x95 cx,cy\xe7\x82\xb9 w,h \xe6\x97\x8b\xe8\xbd\xac angle \xe7\x9a\x84\xe5\x9d\x90\xe6\xa0\x87\n    x_new = (x-cx)*cos(angle) - (y-cy)*sin(angle)+cx\n    y_new = (x-cx)*sin(angle) + (y-cy)*sin(angle)+cy\n    """"""\n    \n    cx    = float(cx)\n    cy    = float(cy)\n    w     = float(w)\n    h     = float(h)\n    angle = float(angle)\n    x1,y1 = rotate(cx-w/2,cy-h/2,angle,cx,cy)\n    x2,y2 = rotate(cx+w/2,cy-h/2,angle,cx,cy)\n    x3,y3 = rotate(cx+w/2,cy+h/2,angle,cx,cy)\n    x4,y4 = rotate(cx-w/2,cy+h/2,angle,cx,cy)\n    return x1,y1,x2,y2,x3,y3,x4,y4\n \nfrom numpy import cos,sin\ndef rotate(x,y,angle,cx,cy):\n    """"""\n    \xe7\x82\xb9(x,y) \xe7\xbb\x95(cx,cy)\xe7\x82\xb9\xe6\x97\x8b\xe8\xbd\xac\n    """"""\n    #angle = angle*pi/180\n    x_new = (x-cx)*cos(angle) - (y-cy)*sin(angle)+cx\n    y_new = (x-cx)*sin(angle) + (y-cy)*cos(angle)+cy\n    return x_new,y_new\n\n\n\ndef resize_box(boxes,scale):\n    newBoxes = []\n    for box in boxes:\n        cx = box[\'cx\']*scale\n        cy = box[\'cy\']*scale\n        w  = box[\'w\']*scale\n        h  = box[\'h\']*scale\n        angle = box[\'angle\']\n        newBoxes.append({\'cx\':cx,\'cy\':cy,\'w\':w,\'h\':h,\'angle\':angle})\n    return newBoxes\n        \ndef resize_im(w,h, scale=416, max_scale=608):\n    f=float(scale)/min(h, w)\n    if max_scale is not None:\n        if  f*max(h, w)>max_scale:\n            f=float(max_scale)/max(h, w)\n    newW,newH = int(w*f),int(h*f)\n    \n    return newW-(newW%32),newH-(newH%32)\n\n\ndef get_rorate(boxes,im,degree=0):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\x8b\xe8\xbd\xac\xe8\xa7\x92\xe5\xba\xa6\xe5\x90\x8e\xe7\x9a\x84box\xe5\x8f\x8aim\n    """"""\n    imgW,imgH = im.size\n    newBoxes = []       \n    for line in boxes:\n         cx0,cy0 = imgW/2.0,imgH/2.0 \n         x1,y1,x2,y2,x3,y3,x4,y4 = xy_rotate_box(**line)\n         x1,y1  = rotate(x1,y1,-degree/180*np.pi,cx0,cy0)\n         x2,y2  = rotate(x2,y2,-degree/180*np.pi,cx0,cy0)\n         x3,y3  = rotate(x3,y3,-degree/180*np.pi,cx0,cy0)\n         x4,y4  = rotate(x4,y4,-degree/180*np.pi,cx0,cy0)\n         box = (x1,y1,x2,y2,x3,y3,x4,y4)\n         degree_,w_,h_,cx_,cy_ = solve(box)\n         newLine = {\'angle\':degree_,\'w\':w_,\'h\':h_,\'cx\':cx_,\'cy\':cy_}\n         newBoxes.append(newLine)\n    return im.rotate(degree,center=(imgW/2.0,imgH/2.0 )),newBoxes\n\n\ndef letterbox_image(image, size,fillValue=[128,128,128]):\n    \'\'\'\n    resize image with unchanged aspect ratio using padding\n    \'\'\'\n    image_h, image_w = image.shape[:2]\n    w, h = size\n    new_w = int(image_w * min(w*1.0/image_w, h*1.0/image_h))\n    new_h = int(image_h * min(w*1.0/image_w, h*1.0/image_h))\n    \n    resized_image = cv2.resize(image,(new_w,new_h))\n    if fillValue is None:\n       fillValue = [int(x.mean()) for x in cv2.split(np.array(image))]\n    boxed_image = np.zeros((size[1],size[0],3),dtype=np.uint8)\n    boxed_image[:] = fillValue\n    boxed_image[:new_h,:new_w,:] =resized_image \n\n    return boxed_image,new_w/image_w\n\n\n\n\n\n\ndef box_rotate(box,angle=0,imgH=0,imgW=0):\n    """"""\n    \xe5\xaf\xb9\xe5\x9d\x90\xe6\xa0\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x97\x8b\xe8\xbd\xac \xe9\x80\x86\xe6\x97\xb6\xe9\x92\x88\xe6\x96\xb9\xe5\x90\x91 0\\90\\180\\270,\n    """"""\n    x1,y1,x2,y2,x3,y3,x4,y4 = box[:8]\n    if angle==90:\n        x1_,y1_ = y2,imgW-x2\n        x2_,y2_ = y3,imgW-x3\n        x3_,y3_ = y4,imgW-x4\n        x4_,y4_ = y1,imgW-x1\n        \n    elif angle==180:\n        x1_,y1_ = imgW-x3,imgH-y3\n        x2_,y2_ = imgW-x4,imgH-y4\n        x3_,y3_ = imgW-x1,imgH-y1\n        x4_,y4_ = imgW-x2,imgH-y2\n        \n    elif angle==270:\n        x1_,y1_ = imgH-y4,x4\n        x2_,y2_ = imgH-y1,x1\n        x3_,y3_ = imgH-y2,x2\n        x4_,y4_ = imgH-y3,x3\n    else:\n        x1_,y1_,x2_,y2_,x3_,y3_,x4_,y4_  = x1,y1,x2,y2,x3,y3,x4,y4\n        \n    return (x1_,y1_,x2_,y2_,x3_,y3_,x4_,y4_)\n\n\n                                   \n                                \ndef rotate_cut_img(im,box,leftAdjustAlph=0.0,rightAdjustAlph=0.0):\n    angle,w,h,cx,cy = solve(box)\n    degree_ = angle*180.0/np.pi\n    \n    box = (max(1,cx-w/2-leftAdjustAlph*(w/2))##xmin\n           ,cy-h/2,##ymin\n           min(cx+w/2+rightAdjustAlph*(w/2),im.size[0]-1)##xmax\n           ,cy+h/2)##ymax\n    newW = box[2]-box[0]\n    newH = box[3]-box[1]\n    tmpImg = im.rotate(degree_,center=(cx,cy)).crop(box)\n    box = {\'cx\':cx,\'cy\':cy,\'w\':newW,\'h\':newH,\'degree\':degree_,}\n    return tmpImg,box\n\n\n\nfrom scipy.ndimage import filters,interpolation\nfrom numpy import amin, amax\ndef estimate_skew_angle(raw):\n    """"""\n    \xe4\xbc\xb0\xe8\xae\xa1\xe5\x9b\xbe\xe5\x83\x8f\xe6\x96\x87\xe5\xad\x97\xe8\xa7\x92\xe5\xba\xa6\n    """"""\n    \n    def resize_im(im, scale, max_scale=None):\n        f=float(scale)/min(im.shape[0], im.shape[1])\n        if max_scale!=None and f*max(im.shape[0], im.shape[1])>max_scale:\n            f=float(max_scale)/max(im.shape[0], im.shape[1])\n        return cv2.resize(im, (0, 0), fx=f, fy=f)\n\n    raw = resize_im(raw, scale=600, max_scale=900)\n    image = raw-amin(raw)\n    image = image/amax(image)\n    m = interpolation.zoom(image,0.5)\n    m = filters.percentile_filter(m,80,size=(20,2))\n    m = filters.percentile_filter(m,80,size=(2,20))\n    m = interpolation.zoom(m,1.0/0.5)\n\n    w,h = min(image.shape[1],m.shape[1]),min(image.shape[0],m.shape[0])\n    flat = np.clip(image[:h,:w]-m[:h,:w]+1,0,1)\n    d0,d1 = flat.shape\n    o0,o1 = int(0.1*d0),int(0.1*d1)\n    flat = amax(flat)-flat\n    flat -= amin(flat)\n    est = flat[o0:d0-o0,o1:d1-o1]\n    angles = range(-15,15)\n    estimates = []\n    for a in angles:\n        roest =interpolation.rotate(est,a,order=0,mode=\'constant\')\n        v = np.mean(roest,axis=1)\n        v = np.var(v)\n        estimates.append((v,a))\n    \n    _,a = max(estimates)\n    return a\n\n\n\n\ndef sort_box(box):\n    """"""\n    \xe5\xaf\xb9box\xe6\x8e\x92\xe5\xba\x8f,\xe5\x8f\x8a\xe9\xa1\xb5\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe7\x89\x88\n        box[index, 0] = x1\n        box[index, 1] = y1\n        box[index, 2] = x2\n        box[index, 3] = y2\n        box[index, 4] = x3\n        box[index, 5] = y3\n        box[index, 6] = x4\n        box[index, 7] = y4\n    """"""\n    \n    box = sorted(box,key=lambda x:sum([x[1],x[3],x[5],x[7]]))\n    return list(box)\n\n\ndef get_boxes( bboxes):\n    """"""\n        boxes: bounding boxes\n    """"""\n    text_recs=np.zeros((len(bboxes), 8), np.int)\n    index = 0\n    for box in bboxes:\n        \n        b1 = box[6] - box[7] / 2\n        b2 = box[6] + box[7] / 2\n        x1 = box[0]\n        y1 = box[5] * box[0] + b1\n        x2 = box[2]\n        y2 = box[5] * box[2] + b1\n        x3 = box[0]\n        y3 = box[5] * box[0] + b2\n        x4 = box[2]\n        y4 = box[5] * box[2] + b2\n        \n        disX = x2 - x1\n        disY = y2 - y1\n        width = np.sqrt(disX*disX + disY*disY)\n        fTmp0 = y3 - y1\n        fTmp1 = fTmp0 * disY / width\n        x = np.fabs(fTmp1*disX / width)\n        y = np.fabs(fTmp1*disY / width)\n        if box[5] < 0:\n           x1 -= x\n           y1 += y\n           x4 += x\n           y4 -= y\n        else:\n           x2 += x\n           y2 += y\n           x3 -= x\n           y3 -= y\n\n        text_recs[index, 0] = x1\n        text_recs[index, 1] = y1\n        text_recs[index, 2] = x2\n        text_recs[index, 3] = y2\n        text_recs[index, 4] = x3\n        text_recs[index, 5] = y3\n        text_recs[index, 6] = x4\n        text_recs[index, 7] = y4\n        index = index + 1\n        \n    boxes = []\n    for box in text_recs:\n           x1,y1 = (box[0],box[1])\n           x2,y2 = (box[2],box[3])\n           x3,y3 = (box[6],box[7])\n           x4,y4 = (box[4],box[5])\n           boxes.append([x1,y1,x2,y2,x3,y3,x4,y4])\n    boxes = np.array(boxes)\n\n    return boxes\n\n\n\ndef union_rbox(result,alpha=0.1):\n    """"""\n    \xe6\x8c\x89\xe8\xa1\x8c\xe5\x90\x88\xe5\xb9\xb6box\n    """"""            \n    def diff(box1,box2):\n        """"""\n        \xe8\xae\xa1\xe7\xae\x97box1,box2\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\n        """"""\n        cy1 = box1[\'cy\']\n        cy2 = box2[\'cy\']\n        h1  = box1[\'h\']\n        h2 = box2[\'h\']\n        \n        return abs(cy1-cy2)/max(0.01,min(h1/2,h2/2))\n    \n    def sort_group_box(boxes):\n        """"""\n        \xe5\xaf\xb9box\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\xba\x8f, \xe5\xb9\xb6\xe5\x90\x88\xe5\xb9\xb6box\n        """"""   \n        N = len(boxes)\n        boxes = sorted(boxes,key=lambda x:x[\'cx\'])\n        text  = \' \'.join([bx[\'text\'] for bx in boxes])\n        box4 = np.zeros((N,8))\n        for i in range(N):\n            cx =boxes[i][\'cx\']\n            cy = boxes[i][\'cy\']\n            degree =boxes[i][\'degree\']\n            w  = boxes[i][\'w\']\n            h = boxes[i][\'h\']\n            x1,y1,x2,y2,x3,y3,x4,y4 = xy_rotate_box(cx, cy, w, h, degree/180*np.pi)\n            box4[i] = [x1,y1,x2,y2,x3,y3,x4,y4]\n            \n        x1 = box4[:,0].min()\n        y1 = box4[:,1].min()\n        x2 = box4[:,2].max()\n        y2 = box4[:,3].min()\n        x3 = box4[:,4].max()\n        y3 = box4[:,5].max()\n        x4 = box4[:,6].min()\n        y4 = box4[:,7].max()\n        angle,w,h,cx,cy = solve([x1,y1,x2,y2,x3,y3,x4,y4])\n        if angle==None:\n            angle = 0\n        return {\'text\':text,\'cx\':cx,\'cy\':cy,\'w\':w,\'h\':h,\'degree\':angle/np.pi*180}\n    \n    \n\n    newBox = []\n    for line in result:\n        if len(newBox)==0:\n            newBox.append([line])\n        else:\n            check=False\n            for box in newBox[-1]:\n                if diff(line,box)>alpha:\n                    check = True\n                    \n            if not check:\n                newBox[-1].append(line)\n            else:\n                newBox.append([line])\n    # newBoxRes = []\n    # for bx in newBox:\n    #     try:\n    #         newBoxRes.append(sort_group_box(bx))\n    #     except:\n    #         print(bx)\n    #         newBoxRes.append(bx)\n    newBox = [sort_group_box(bx) for bx in newBox]\n    return newBox\n            \n\ndef adjust_box_to_origin(img,angle, result):\n    """"""\n    \xe8\xb0\x83\xe6\x95\xb4box\xe5\x88\xb0\xe5\x8e\x9f\xe5\x9b\xbe\xe5\x9d\x90\xe6\xa0\x87\n    """"""\n    h,w = img.shape[:2]\n    if angle in [90,270]:\n        imgW,imgH = img.shape[:2]\n        \n    else:\n        imgH,imgW= img.shape[:2]\n    newresult = []\n    for line in result:\n        cx =line[\'box\'][\'cx\']\n        cy = line[\'box\'][\'cy\']\n        degree =line[\'box\'][\'angle\']\n        w  = line[\'box\'][\'w\']\n        h = line[\'box\'][\'h\']\n        x1,y1,x2,y2,x3,y3,x4,y4 = xy_rotate_box(cx, cy, w, h, degree/180*np.pi)\n        x1,y1,x2,y2,x3,y3,x4,y4 = box_rotate([x1,y1,x2,y2,x3,y3,x4,y4],angle=(360-angle)%360,imgH=imgH,imgW=imgW)\n        box = x1,y1,x2,y2,x3,y3,x4,y4\n        newresult.append({\'name\':line[\'name\'],\'text\':line[\'text\'],\'box\':box})\n       \n    return newresult\n\n\n'"
apphelper/redisbase.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\nCreated on Sun Aug  4 23:30:48 2019\n\n@author: chineseocr\n""""""\nimport redis\nfrom apphelper.image import PIL_to_base64,base64_to_PIL\npool = redis.ConnectionPool(host=\'localhost\', port=6379, decode_responses=True)   # host\xe6\x98\xafredis\xe4\xb8\xbb\xe6\x9c\xba\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81redis\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe5\x92\x8c\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe9\x83\xbd\xe8\xb5\xb7\xe7\x9d\x80 redis\xe9\xbb\x98\xe8\xae\xa4\xe7\xab\xaf\xe5\x8f\xa3\xe6\x98\xaf6379\nconn = redis.Redis(connection_pool=pool)\njobListTable = \'job_list_table\'##job\xe5\x88\x97\xe8\xa1\xa8\nresSetTable = \'res_set_table\'##\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xe5\x88\x97\xe8\xa1\xa8\nimgStringTable=\'img_string_table\'##\xe5\x9b\xbe\xe5\x83\x8f\xe5\xad\x98\xe5\x82\xa8\xe8\xa1\xa8\nimport time\nimport uuid\n\nclass redisDataBase:\n    """"""\n    redis\xe7\x9b\xb8\xe5\x85\xb3\xe6\x93\x8d\xe4\xbd\x9c\n    """"""\n    def put_values(self,resJob,timeOut=20):\n        ##\xe5\x90\x91\xe9\x98\x9f\xe5\x88\x97\xe6\x8e\xa8\xe9\x80\x81PIL \xe5\xb9\xb6\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n        timeBegin = time.time()\n        listName = uuid.uuid1().__str__()\n        keys = []\n        for ind,line in enumerate(resJob):\n            img = line[\'img\']\n            value = PIL_to_base64(img)\n            ind = \'{}_{}\'.format(listName,ind)\n            keys.append(ind)\n            self.set_dict(imgStringTable,ind,value)\n            self.set_list(jobListTable,ind)\n            \n            \n        res = [None for key in keys]\n        while time.time()-timeBegin<timeOut:\n            res = self.get_dict(resSetTable,keys)\n            delres = [x for x in res if x is not None]\n            if len(delres)==len(keys):\n                break\n            \n        ##\xe5\x88\xa0\xe9\x99\xa4\xe8\xae\xb0\xe5\xbd\x95\n        for key in keys:\n            self.del_dict(imgStringTable,key)##\xe5\x88\xa0\xe9\x99\xa4\xe7\xbc\x93\xe5\xad\x98\xe5\x9b\xbe\xe5\x83\x8f\n            self.del_dict(resSetTable,key)##\xe5\x88\xa0\xe9\x99\xa4\xe7\xbc\x93\xe5\xad\x98\xe5\x9b\xbe\xe5\x83\x8f\n        \n                \n        for ind,text in enumerate(res):\n            resJob[ind][\'text\'] = text\n            \n        return resJob\n              \n        \n             \n        \n    def get_job(self,callback):\n        ##\xe8\x8e\xb7\xe5\x8f\x96\xe9\x98\x9f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\x9b\xbe\xe5\x83\x8f\n        ind = self.get_list(jobListTable)\n        \n        if ind is not None:\n            value = self.get_dict(imgStringTable,[ind])\n            value = value[0]\n            if value is not None:\n                value     =  base64_to_PIL(value)\n                if value is not None:\n                    value = value.convert(\'L\')\n                    value     =  callback(value)\n                else:\n                    value=\'\'\n                print(ind,value)\n                self.set_dict(resSetTable,ind,value)##\xe5\xad\x98\xe5\x82\xa8\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xe5\x88\xb0set\n                \n                        \n\n\n    def set_list(self,name,value):\n        """"""\n        \xe5\x90\x91\xe9\x98\x9f\xe5\x88\x97\xe4\xb8\xad\xe6\x8e\xa8\xe9\x80\x81\xe8\xaf\x86\xe5\x88\xab\xe5\x80\xbc\n        """"""\n        conn.rpush(name,value)\n        \n    def get_list(self,name):\n        """"""\n        \xe8\x8e\xb7\xe5\x8f\x96\xe9\x98\x9f\xe5\x88\x97\xe5\x80\xbc\n        """"""\n        value = conn.lpop(name)\n        return value\n    \n    def set_dict(self,name,key,value):\n        """"""\n        \xe8\xae\xbe\xe7\xbd\xae\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\n        """"""\n        conn.hset(name, key,value)\n        \n    def get_dict(self,name,keys):\n        """"""\n        \xe6\x89\xb9\xe9\x87\x8f\xe5\x8f\x96\xe5\x87\xba\n        """"""\n        return conn.hmget(name, keys)\n    \n    \n    def del_dict(self,name,key):\n        conn.hdel(name, key)\n        \n        \n    \n\n    \n    \n    \n    \n \n'"
application/__init__.py,0,b''
application/idcard.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\nCreated on Sun Aug  4 01:01:37 2019\n\xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe8\xaf\x86\xe5\x88\xab\n@author: chineseocr\n""""""\nfrom apphelper.image import union_rbox\nimport re\nclass idcard:\n    """"""\n    \xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe7\xbb\x93\xe6\x9e\x84\xe5\x8c\x96\xe8\xaf\x86\xe5\x88\xab\n    """"""\n    def __init__(self,result):\n        self.result = union_rbox(result,0.2)\n        self.N = len(self.result)\n        self.res = {}\n        self.full_name()\n        self.sex()\n        self.birthday()\n        self.birthNo()\n        self.address()\n        \n    \n    def full_name(self):\n        """"""\n        \xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe5\xa7\x93\xe5\x90\x8d\n        """"""\n        name={}\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            ##\xe5\x8c\xb9\xe9\x85\x8d\xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe5\xa7\x93\xe5\x90\x8d\n            res = re.findall(""\xe5\xa7\x93\xe5\x90\x8d[\\u4e00-\\u9fa5]{1,4}"",txt)\n            if len(res)>0:\n                name[\'\xe5\xa7\x93\xe5\x90\x8d\']  =res[0].replace(\'\xe5\xa7\x93\xe5\x90\x8d\',\'\')\n                self.res.update(name) \n                break\n\n    def sex(self):\n        """"""\n        \xe6\x80\xa7\xe5\x88\xab\xe5\xa5\xb3\xe6\xb0\x91\xe6\x97\x8f\xe6\xb1\x89\n        """"""\n        sex={}\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            if \'\xe7\x94\xb7\'  in txt:\n                    sex[""\xe6\x80\xa7\xe5\x88\xab""] = \'\xe7\x94\xb7\'\n            elif \'\xe5\xa5\xb3\'  in txt:\n                    sex[""\xe6\x80\xa7\xe5\x88\xab""] = \'\xe5\xa5\xb3\'\n                    \n            ##\xe6\x80\xa7\xe5\x88\xab\xe5\xa5\xb3\xe6\xb0\x91\xe6\x97\x8f\xe6\xb1\x89\n            res = re.findall("".*\xe6\xb0\x91\xe6\x97\x8f[\\u4e00-\\u9fa5]+"",txt)\n            if len(res)>0:\n                sex[""\xe6\xb0\x91\xe6\x97\x8f""] = res[0].split(\'\xe6\xb0\x91\xe6\x97\x8f\')[-1]\n                self.res.update(sex) \n                break\n                \n   \n    \n    def birthday(self):\n        """"""\n        \xe5\x87\xba\xe7\x94\x9f\xe5\xb9\xb4\xe6\x9c\x88\n        """"""\n        birth={}\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            ##\xe5\x87\xba\xe7\x94\x9f\xe5\xb9\xb4\xe6\x9c\x88\n            res = re.findall(\'\xe5\x87\xba\xe7\x94\x9f\\d*\xe5\xb9\xb4\\d*\xe6\x9c\x88\\d*\xe6\x97\xa5\',txt)\n            res = re.findall(\'\\d*\xe5\xb9\xb4\\d*\xe6\x9c\x88\\d*\xe6\x97\xa5\',txt)\n            \n            if len(res)>0:\n                birth[\'\xe5\x87\xba\xe7\x94\x9f\xe5\xb9\xb4\xe6\x9c\x88\']  =res[0].replace(\'\xe5\x87\xba\xe7\x94\x9f\',\'\').replace(\'\xe5\xb9\xb4\',\'-\').replace(\'\xe6\x9c\x88\',\'-\').replace(\'\xe6\x97\xa5\',\'\')\n                self.res.update(birth) \n                break\n                \n    def birthNo(self):\n        """"""\n        \xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe5\x8f\xb7\xe7\xa0\x81\n        """"""\n        No={}\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            ##\xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe5\x8f\xb7\xe7\xa0\x81\n            res = re.findall(\'\xe5\x8f\xb7\xe7\xa0\x81\\d*[X|x]\',txt)\n            res += re.findall(\'\xe5\x8f\xb7\xe7\xa0\x81\\d*\',txt)\n            res += re.findall(\'\\d{16,18}\',txt)\n            \n            if len(res)>0:\n                No[\'\xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe5\x8f\xb7\xe7\xa0\x81\']  =res[0].replace(\'\xe5\x8f\xb7\xe7\xa0\x81\',\'\')\n                self.res.update(No) \n                break    \n                \n    def address(self):\n        """"""\n        \xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe5\x9c\xb0\xe5\x9d\x80\n        ##\xe6\xad\xa4\xe5\xa4\x84\xe5\x9c\xb0\xe5\x9d\x80\xe5\x8c\xb9\xe9\x85\x8d\xe8\xbf\x98\xe9\x9c\x80\xe5\xae\x8c\xe5\x96\x84\n        """"""\n        add={}\n        addString=[]\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            \n            ##\xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe5\x9c\xb0\xe5\x9d\x80\n            if \'\xe4\xbd\x8f\xe5\x9d\x80\' in txt or \'\xe7\x9c\x81\' in txt or \'\xe5\xb8\x82\' in txt or \'\xe5\x8e\xbf\' in txt or \'\xe8\xa1\x97\' in txt or \'\xe6\x9d\x91\' in txt or ""\xe9\x95\x87"" in txt or ""\xe5\x8c\xba"" in txt or ""\xe5\x9f\x8e"" in txt:\n                addString.append(txt.replace(\'\xe4\xbd\x8f\xe5\x9d\x80\',\'\'))\n            \n        if len(addString)>0:\n            add[\'\xe8\xba\xab\xe4\xbb\xbd\xe8\xaf\x81\xe5\x9c\xb0\xe5\x9d\x80\']  =\'\'.join(addString)\n            self.res.update(add) \n                                \n        '"
application/trainTicket.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\nCreated on Sun Aug  4 01:01:37 2019\n\xe7\x81\xab\xe8\xbd\xa6\xe7\xa5\xa8\xe8\xaf\x86\xe5\x88\xab\n@author: chineseocr\n""""""\nfrom apphelper.image import union_rbox\nimport re\nclass trainTicket:\n    """"""\n    \xe7\x81\xab\xe8\xbd\xa6\xe7\xa5\xa8\xe7\xbb\x93\xe6\x9e\x84\xe5\x8c\x96\xe8\xaf\x86\xe5\x88\xab\n    """"""\n    def __init__(self,result):\n        self.result = union_rbox(result,0.2)\n        self.N = len(self.result)\n        self.res = {}\n        self.station()\n        self.time()\n        self.price()\n        self.full_name()\n        \n    def station(self):\n        """"""\n        \xe5\xae\x89\xe9\xa1\xba\xe7\xab\x99K492\xe8\xb4\xb5\xe9\x98\xb3\xe7\xab\x99\n        re.findall(\'[\xe4\xb8\x80-\xe9\xbe\xa5]+\xe7\xab\x99\',\'\xe5\xae\x89\xe9\xa1\xba\xe7\xab\x99K492\xe8\xb4\xb5\xe9\x98\xb3\xe7\xab\x99\'),re.findall(\'[\xe4\xb8\x80-\xe9\xbe\xa5]+\xe7\xab\x99(.+?)[][\xe4\xb8\x80-\xe9\xbe\xa5]+\xe7\xab\x99\',\'\xe5\xae\x89\xe9\xa1\xba\xe7\xab\x99K492\xe8\xb4\xb5\xe9\x98\xb3\xe7\xab\x99\')\n        \n        """"""\n        station={}\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            \n            res = re.findall(\'[\xe4\xb8\x80-\xe9\xbe\xa5]+\xe7\xab\x99\',txt),re.findall(\'[\xe4\xb8\x80-\xe9\xbe\xa5]+\xe7\xab\x99(.+?)[][\xe4\xb8\x80-\xe9\xbe\xa5]+\xe7\xab\x99\',txt)\n            if len(res[0])>1:\n                station[\'\xe5\x87\xba\xe5\x8f\x91\'],station[\'\xe5\x88\xb0\xe8\xbe\xbe\'] = res[0][0].replace(\'\xe7\xab\x99\',\'\'),res[0][1].replace(\'\xe7\xab\x99\',\'\')\n            if len(res[1])>0:\n                station[\'\xe8\xbd\xa6\xe6\xac\xa1\'] = res[1][0]\n                \n            if len(station)>0:\n                self.res.update(station)\n                break\n    \n    def time(self):\n        """"""\n        \xe6\x8f\x90\xe5\x8f\x96\xe6\x97\xa5\xe6\x9c\x9f \xe6\x97\xb6\xe9\x97\xb4 \n        """"""\n        time={}\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            ##\xe5\x8c\xb9\xe9\x85\x8d\xe6\x97\xa5\xe6\x9c\x9f\n            res = re.findall(\'[0-9]{1,4}\xe5\xb9\xb4[0-9]{1,2}\xe6\x9c\x88[0-9]{1,2}\xe6\x97\xa5\',txt)\n            if len(res)>0:\n                time[\'\xe6\x97\xa5\xe6\x9c\x9f\']  =res[0].replace(\'\xe5\xb9\xb4\',\'-\').replace(\'\xe6\x9c\x88\',\'-\').replace(\'\xe6\x97\xa5\',\'\')\n                ##\xe5\x8c\xb9\xe9\x85\x8d\xe6\x97\xb6\xe9\x97\xb4\n                res = re.findall(\'[0-9]{1,2}:[0-9]{1,2}\',txt)\n                if len(res)>0:\n                    time[\'\xe6\x97\xb6\xe9\x97\xb4\']  =res[0]\n                    self.res.update(time)\n                    break\n    \n    def price(self):\n        """"""\n        \xe8\xbd\xa6\xe7\xa5\xa8\xe4\xbb\xb7\xe6\xa0\xbc\n        """"""\n        price={}\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            ##\xe8\xbd\xa6\xe7\xa5\xa8\xe4\xbb\xb7\xe6\xa0\xbc\n            res = re.findall(\'\xef\xbf\xa5[0-9]{1,4}.[0-9]{1,2}\xe5\x85\x83\',txt)\n            res += re.findall(\'[0-9]{1,4}.[0-9]{1,2}\xe5\x85\x83\',txt)\n            res += re.findall(\'[0-9]{1,6}\xe5\x85\x83\',txt)\n            res += re.findall(\'\xef\xbf\xa5[0-9]{1,4}.[0-9]{1,2}\',txt)\n            if len(res)>0:\n                price[\'\xe8\xbd\xa6\xe7\xa5\xa8\xe4\xbb\xb7\xe6\xa0\xbc\']  =res[0].replace(\'\xef\xbf\xa5\',\'\').replace(\'\xe5\x85\x83\',\'\')\n                self.res.update(price) \n                break\n                \n    \n                \n    def full_name(self):\n        """"""\n        \xe5\xa7\x93\xe5\x90\x8d\n        """"""\n        name={}\n        for i in range(self.N):\n            txt = self.result[i][\'text\'].replace(\' \',\'\')\n            txt = txt.replace(\' \',\'\')\n            ##\xe8\xbd\xa6\xe7\xa5\xa8\xe4\xbb\xb7\xe6\xa0\xbc\n            res = re.findall(""\\d*\\*\\d*([\xe4\xb8\x80-\xe9\xbe\xa5]{1,4})"",txt)\n            if len(res)>0:\n                name[\'\xe5\xa7\x93\xe5\x90\x8d\']  =res[0]\n                self.res.update(name)                \n                \n                \n        '"
crnn/CRNN.py,6,"b'import torch\nfrom torchvision import transforms\nimport os\nimport cv2\nimport time\nimport numpy as np\n# alphabetfrom .keys import alphabet\nfrom .keys import alphabetChinese as alphabet\nfrom torch.autograd import Variable\n\nfrom .util import strLabelConverter,resizeNormalize\n\n\nconverter = strLabelConverter(\'\'.join(alphabet))\n\nclass CRNNHandle():\n    def __init__(self,model_path , net , gpu_id=None ):\n        \'\'\'\n           \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96pytorch\xe6\xa8\xa1\xe5\x9e\x8b\n           :param model_path: \xe6\xa8\xa1\xe5\x9e\x8b\xe5\x9c\xb0\xe5\x9d\x80(\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe5\x8f\x82\xe6\x95\xb0\xe5\x92\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xe4\xb8\x80\xe8\xb5\xb7\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6)\n           :param net: \xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9c\xa8model_path\xe4\xb8\xad\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe6\x98\xaf\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe5\x88\x99\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x99\xe5\x87\xba\xe7\xbd\x91\xe7\xbb\x9c\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\n\n           :param gpu_id: \xe5\x9c\xa8\xe5\x93\xaa\xe4\xb8\x80\xe5\x9d\x97gpu\xe4\xb8\x8a\xe8\xbf\x90\xe8\xa1\x8c\n           \'\'\'\n\n        if gpu_id is not None and isinstance(gpu_id, int) and torch.cuda.is_available():\n            self.device = torch.device(""cuda:{}"".format(gpu_id))\n        else:\n            self.device = torch.device(""cpu"")\n        self.net = torch.load(model_path, map_location=self.device)\n        print(\'device:\', self.device)\n\n        if net is not None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xe5\x92\x8c\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x88\x86\xe5\xbc\x80\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xef\xbc\x8c\xe5\xb0\xb1\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8f\x82\xe6\x95\xb0\xe5\x8a\xa0\xe8\xbd\xbd\n            net = net.to(self.device)\n\n            try:\n                sk = {}\n                for k in self.net:\n\n                    sk[k.replace(""module."","""")] = self.net[k]\n                    # sk[k[7:]] = self.net[k]\n\n                net.load_state_dict(sk)\n            except Exception as e:\n                print(e)\n                net.load_state_dict(self.net)\n\n            self.net = net\n            print(\'load model\')\n        self.net.eval()\n\n\n\n    def predict(self, im):\n        """"""\n        \xe9\xa2\x84\xe6\xb5\x8b\n        """"""\n        image = im.convert(\'L\')\n        scale = image.size[1] * 1.0 / 32\n        w = image.size[0] / scale\n        w = int(w)\n        transformer = resizeNormalize((w, 32))\n\n        image = transformer(image)\n        image = image.to(self.device)\n        image = image.view(1, *image.size())\n        image = Variable(image)\n        preds = self.net(image)\n \n        _, preds = preds.max(2)\n\n        preds = preds.transpose(1, 0).contiguous().view(-1)\n        preds_size = Variable(torch.IntTensor([preds.size(0)]))\n        sim_pred = converter.decode(preds.data, preds_size.data, raw=False)\n        return sim_pred\n\n\n\n'"
crnn/__init__.py,0,b'from .crnn_full import  CRnn as FullCrnn\nfrom .crnn_lite import  CRnn as LiteCrnn\nfrom .CRNN import CRNNHandle'
crnn/crnn_full.py,1,"b'import torch.nn as nn\n\n\nclass BidirectionalLSTM(nn.Module):\n\n    def __init__(self, nIn, nHidden, nOut):\n        super(BidirectionalLSTM, self).__init__()\n        self.rnn = nn.LSTM(nIn, nHidden, bidirectional=True)\n        self.embedding = nn.Linear(nHidden * 2, nOut)\n\n    def forward(self, input):\n        recurrent, _ = self.rnn(input)\n        T, b, h = recurrent.size()\n        t_rec = recurrent.view(T * b, h)\n        output = self.embedding(t_rec)  # [T * b, nOut]\n        output = output.view(T, b, -1)\n        return output\n\n\nclass CRnn(nn.Module):\n\n    def __init__(self, imgH, nc, nclass, nh, n_rnn=2, leakyRelu=False, lstmFlag=True):\n        """"""\n        \xe6\x98\xaf\xe5\x90\xa6\xe5\x8a\xa0\xe5\x85\xa5lstm\xe7\x89\xb9\xe5\xbe\x81\xe5\xb1\x82\n        """"""\n        super(CRnn, self).__init__()\n        assert imgH % 16 == 0, \'imgH has to be a multiple of 16\'\n\n        ks = [3, 3, 3, 3, 3, 3, 2]\n        ps = [1, 1, 1, 1, 1, 1, 0]\n        ss = [1, 1, 1, 1, 1, 1, 1]\n        nm = [64, 128, 256, 256, 512, 512, 512]\n        self.lstmFlag = lstmFlag\n\n        cnn = nn.Sequential()\n\n        def convRelu(i, batchNormalization=False):\n            nIn = nc if i == 0 else nm[i - 1]\n            nOut = nm[i]\n            cnn.add_module(\'conv{0}\'.format(i),\n                           nn.Conv2d(nIn, nOut, ks[i], ss[i], ps[i]))\n            if batchNormalization:\n                cnn.add_module(\'batchnorm{0}\'.format(i), nn.BatchNorm2d(nOut))\n            if leakyRelu:\n                cnn.add_module(\'relu{0}\'.format(i),\n                               nn.LeakyReLU(0.2, inplace=True))\n            else:\n                cnn.add_module(\'relu{0}\'.format(i), nn.ReLU(True))\n\n        convRelu(0)\n        cnn.add_module(\'pooling{0}\'.format(0), nn.MaxPool2d(2, 2))  # 64x16x64\n        convRelu(1)\n        cnn.add_module(\'pooling{0}\'.format(1), nn.MaxPool2d(2, 2))  # 128x8x32\n        convRelu(2, True)\n        convRelu(3)\n        cnn.add_module(\'pooling{0}\'.format(2),\n                       nn.MaxPool2d((2, 2), (2, 1), (0, 1)))  # 256x4x16\n        convRelu(4, True)\n        convRelu(5)\n        cnn.add_module(\'pooling{0}\'.format(3),\n                       nn.MaxPool2d((2, 2), (2, 1), (0, 1)))  # 512x2x16\n        convRelu(6, True)  # 512x1x16\n\n        self.cnn = cnn\n        if self.lstmFlag:\n            self.rnn = nn.Sequential(\n                BidirectionalLSTM(512, nh, nh),\n                BidirectionalLSTM(nh, nh, nclass))\n        else:\n            self.linear = nn.Linear(nh * 2, nclass)\n\n    def forward(self, input):\n        # conv features\n        conv = self.cnn(input)\n        b, c, h, w = conv.size()\n\n        assert h == 1, ""the height of conv must be 1""\n        conv = conv.squeeze(2)\n        conv = conv.permute(2, 0, 1)  # [w, b, c]\n        if self.lstmFlag:\n            # rnn features\n            output = self.rnn(conv)\n        else:\n            T, b, h = conv.size()\n\n            t_rec = conv.contiguous().view(T * b, h)\n\n            output = self.linear(t_rec)  # [T * b, nOut]\n            output = output.view(T, b, -1)\n\n        return output'"
crnn/crnn_lite.py,1,"b'import torch.nn as nn\n\n\nclass BidirectionalLSTM(nn.Module):\n\n    def __init__(self, nIn, nHidden, nOut):\n        super(BidirectionalLSTM, self).__init__()\n        self.rnn = nn.LSTM(nIn, nHidden, bidirectional=True)\n        self.embedding = nn.Linear(nHidden * 2, nOut)\n\n    def forward(self, input):\n        recurrent, _ = self.rnn(input)\n        T, b, h = recurrent.size()\n        t_rec = recurrent.view(T * b, h)\n        output = self.embedding(t_rec)  # [T * b, nOut]\n        output = output.view(T, b, -1)\n        return output\n\n\nclass CRnn(nn.Module):\n\n    def __init__(self, imgH, nc, nclass, nh, n_rnn=2, leakyRelu=False, lstmFlag=True):\n        """"""\n        \xe6\x98\xaf\xe5\x90\xa6\xe5\x8a\xa0\xe5\x85\xa5lstm\xe7\x89\xb9\xe5\xbe\x81\xe5\xb1\x82\n        """"""\n        super(CRnn, self).__init__()\n        assert imgH % 16 == 0, \'imgH has to be a multiple of 16\'\n\n        ks = [5, 3, 3, 3, 3, 3, 2]\n        ps = [2, 1, 1, 1, 1, 1, 0]\n        # ss = [1, 1, 1, 1, 1, 1, 1]\n        ss = [2, 1, 1, 1, 1, 1, 1]\n        nm = [24, 128, 256, 256, 512, 512, 512]\n        # nm = [32, 64, 128, 128, 256, 256, 256]\n        # exp_ratio = [2,2,2,2,1,1,2]\n        self.lstmFlag = lstmFlag\n\n        cnn = nn.Sequential()\n\n        def convRelu(i, batchNormalization=False):\n            nIn = nc if i == 0 else nm[i - 1]\n            nOut = nm[i]\n            # exp  = exp_ratio[i]\n            # exp_num = exp * nIn\n            if i == 0:\n                cnn.add_module(\'conv_{0}\'.format(i),\n                               nn.Conv2d(nIn , nOut , ks[i], ss[i], ps[i]))\n                cnn.add_module(\'relu_{0}\'.format(i), nn.ReLU(True))\n            else:\n\n                cnn.add_module(\'conv{0}\'.format(i),\n                               nn.Conv2d( nIn,  nIn, ks[i], ss[i], ps[i],groups=nIn))\n                if batchNormalization:\n                    cnn.add_module(\'batchnorm{0}\'.format(i), nn.BatchNorm2d(nIn))\n                cnn.add_module(\'relu{0}\'.format(i), nn.ReLU(True))\n\n                cnn.add_module(\'convproject{0}\'.format(i),\n                               nn.Conv2d(nIn, nOut, 1, 1, 0))\n                if batchNormalization:\n                    cnn.add_module(\'batchnormproject{0}\'.format(i), nn.BatchNorm2d(nOut))\n                cnn.add_module(\'relu{0}\'.format(i), nn.ReLU(True))\n\n\n\n\n        convRelu(0)\n        # cnn.add_module(\'pooling{0}\'.format(0), nn.MaxPool2d(2, 2))  # 64x16x64\n        convRelu(1)\n        cnn.add_module(\'pooling{0}\'.format(1), nn.MaxPool2d(2, 2))  # 128x8x32\n        convRelu(2, True)\n        convRelu(3)\n\n        cnn.add_module(\'pooling{0}\'.format(2),\n                       nn.MaxPool2d((2, 2), (2, 1), (0, 1)))  # 256x4x16\n\n        # cnn.add_module(\'pooling{0}\'.format(2),\n        #                nn.MaxPool2d((2, 2))) # 256x4x16\n\n        convRelu(4, True)\n        convRelu(5)\n        cnn.add_module(\'pooling{0}\'.format(3),\n                       nn.MaxPool2d((2, 2), (2, 1), (0, 1)))  # 512x2x16\n\n        # cnn.add_module(\'pooling{0}\'.format(3),\n        #                nn.MaxPool2d((2, 2))) # 256x4x16\n\n        convRelu(6, True)  # 512x1x16\n\n        self.cnn = cnn\n        if self.lstmFlag:\n            self.rnn = nn.Sequential(\n                BidirectionalLSTM(nm[-1], nh//2, nh),\n                BidirectionalLSTM(nh, nh//4, nclass)\n            )\n        else:\n            self.linear = nn.Sequential(\n                nn.Linear(nm[-1], nh//2),\n                nn.Linear(nh//2, nclass),\n            )\n\n    def forward(self, input):\n        # conv features\n        conv = self.cnn(input)\n        b, c, h, w = conv.size()\n\n        assert h == 1, ""the height of conv must be 1""\n        conv = conv.squeeze(2)\n        conv = conv.permute(2, 0, 1)  # [w, b, c]\n        if self.lstmFlag:\n            # rnn features\n            output = self.rnn(conv)\n        else:\n            T, b, h = conv.size()\n\n            t_rec = conv.contiguous().view(T * b, h)\n\n            output = self.linear(t_rec)  # [T * b, nOut]\n            output = output.view(T, b, -1)\n\n        return output'"
crnn/keys.py,0,"b'alphabetChinese =  u\'\\\'\xe7\x96\x97\xe7\xbb\x9a\xe8\xaf\x9a\xe5\xa8\x87\xe6\xba\x9c\xe9\xa2\x98\xe8\xb4\xbf\xe8\x80\x85\xe5\xbb\x96\xe6\x9b\xb4\xe7\xba\xb3\xe5\x8a\xa0\xe5\xa5\x89\xe5\x85\xac\xe4\xb8\x80\xe5\xb0\xb1\xe6\xb1\xb4\xe8\xae\xa1\xe4\xb8\x8e\xe8\xb7\xaf\xe6\x88\xbf\xe5\x8e\x9f\xe5\xa6\x87208-7\xe5\x85\xb6>:],\xef\xbc\x8c\xe9\xaa\x91\xe5\x88\x88\xe5\x85\xa8\xe6\xb6\x88\xe6\x98\x8f\xe5\x82\x88\xe5\xae\x89\xe4\xb9\x85\xe9\x92\x9f\xe5\x97\x85\xe4\xb8\x8d\xe5\xbd\xb1\xe5\xa4\x84\xe9\xa9\xbd\xe8\x9c\xbf\xe8\xb5\x84\xe5\x85\xb3\xe6\xa4\xa4\xe5\x9c\xb0\xe7\x98\xb8\xe4\xb8\x93\xe9\x97\xae\xe5\xbf\x96\xe7\xa5\xa8\xe5\xab\x89\xe7\x82\x8e\xe9\x9f\xb5\xe8\xa6\x81\xe6\x9c\x88\xe7\x94\xb0\xe8\x8a\x82\xe9\x99\x82\xe9\x84\x99\xe6\x8d\x8c\xe5\xa4\x87\xe6\x8b\xb3\xe4\xbc\xba\xe7\x9c\xbc\xe7\xbd\x91\xe7\x9b\x8e\xe5\xa4\xa7\xe5\x82\x8d\xe5\xbf\x83\xe4\xb8\x9c\xe6\x84\x89\xe6\xb1\x87\xe8\xb9\xbf\xe7\xa7\x91\xe6\xaf\x8f\xe4\xb8\x9a\xe9\x87\x8c\xe8\x88\xaa\xe6\x99\x8f\xe5\xad\x97\xe5\xb9\xb3\xe5\xbd\x95\xe5\x85\x8813\xe5\xbd\xa4\xe9\xb2\xb6\xe4\xba\xa7\xe7\xa8\x8d\xe7\x9d\xa3\xe8\x85\xb4\xe6\x9c\x89\xe8\xb1\xa1\xe5\xb2\xb3\xe6\xb3\xa8\xe7\xbb\x8d\xe5\x9c\xa8\xe6\xb3\xba\xe6\x96\x87\xe5\xae\x9a\xe6\xa0\xb8\xe5\x90\x8d\xe6\xb0\xb4\xe8\xbf\x87\xe7\x90\x86\xe8\xae\xa9\xe5\x81\xb7\xe7\x8e\x87\xe7\xad\x89\xe8\xbf\x99\xe5\x8f\x91\xe2\x80\x9d\xe4\xb8\xba\xe5\x90\xab\xe8\x82\xa5\xe9\x85\x89\xe7\x9b\xb8\xe9\x84\xb1\xe4\xb8\x83\xe7\xbc\x96\xe7\x8c\xa5\xe9\x94\x9b\xe6\x97\xa5\xe9\x95\x80\xe8\x92\x82\xe6\x8e\xb0\xe5\x80\x92\xe8\xbe\x86\xe6\xa0\xbe\xe6\xa0\x97\xe7\xbb\xbc\xe6\xb6\xa9\xe5\xb7\x9e\xe9\x9b\x8c\xe6\xbb\x91\xe9\xa6\x80\xe4\xba\x86\xe6\x9c\xba\xe5\x9d\x97\xe5\x8f\xb8\xe5\xae\xb0\xe7\x94\x99\xe5\x85\xb4\xe7\x9f\xbd\xe6\x8a\x9a\xe4\xbf\x9d\xe7\x94\xa8\xe6\xb2\xa7\xe7\xa7\xa9\xe5\xa6\x82\xe6\x94\xb6\xe6\x81\xaf\xe6\xbb\xa5\xe9\xa1\xb5\xe7\x96\x91\xe5\x9f\xa0!\xef\xbc\x81\xe5\xa7\xa5\xe5\xbc\x82\xe6\xa9\xb9\xe9\x92\x87\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\x84\xe7\x9a\x84\xe6\xa4\xb4\xe6\xb2\xab\xe5\x9b\xbd\xe7\xbb\xa5\xe7\x8d\xa0\xe6\x8a\xa5\xe5\xbc\x80\xe6\xb0\x91\xe8\x9c\x87\xe4\xbd\x95\xe5\x88\x86\xe5\x87\x87\xe9\x95\xbf\xe8\xae\xa5\xe8\x97\x8f\xe6\x8e\x8f\xe6\x96\xbd\xe7\xbe\xbd\xe4\xb8\xad\xe8\xae\xb2\xe6\xb4\xbe\xe5\x98\x9f\xe4\xba\xba\xe6\x8f\x90\xe6\xb5\xbc\xe9\x97\xb4\xe4\xb8\x96\xe8\x80\x8c\xe5\x8f\xa4\xe5\xa4\x9a\xe5\x80\xaa\xe5\x94\x87\xe9\xa5\xaf\xe6\x8e\xa7\xe5\xba\x9a\xe9\xa6\x96\xe8\xb5\x9b\xe8\x9c\x93\xe5\x91\xb3\xe6\x96\xad\xe5\x88\xb6\xe8\xa7\x89\xe6\x8a\x80\xe6\x9b\xbf\xe8\x89\xb0\xe6\xba\xa2\xe6\xbd\xae\xe5\xa4\x95\xe9\x92\xba\xe5\xa4\x96\xe6\x91\x98\xe6\x9e\x8b\xe5\x8a\xa8\xe5\x8f\x8c\xe5\x8d\x95\xe5\x95\xae\xe6\x88\xb7\xe6\x9e\x87\xe7\xa1\xae\xe9\x94\xa6\xe6\x9b\x9c\xe6\x9d\x9c\xe6\x88\x96\xe8\x83\xbd\xe6\x95\x88\xe9\x9c\x9c\xe7\x9b\x92\xe7\x84\xb6\xe4\xbe\x97\xe7\x94\xb5\xe6\x99\x81\xe6\x94\xbe\xe6\xad\xa5\xe9\xb9\x83\xe6\x96\xb0\xe6\x9d\x96\xe8\x9c\x82\xe5\x90\x92\xe6\xbf\x82\xe7\x9e\xac\xe8\xaf\x84\xe6\x80\xbb\xe9\x9a\x8d\xe5\xaf\xb9\xe7\x8b\xac\xe5\x90\x88\xe4\xb9\x9f\xe6\x98\xaf\xe5\xba\x9c\xe9\x9d\x92\xe5\xa4\xa9\xe8\xaf\xb2\xe5\xa2\x99\xe7\xbb\x84\xe6\xbb\xb4\xe7\xba\xa7\xe9\x82\x80\xe5\xb8\x98\xe7\xa4\xba\xe5\xb7\xb2\xe6\x97\xb6\xe9\xaa\xb8\xe4\xbb\x84\xe6\xb3\x85\xe5\x92\x8c\xe9\x81\xa8\xe5\xba\x97\xe9\x9b\x87\xe7\x96\xab\xe6\x8c\x81\xe5\xb7\x8d\xe8\xb8\xae\xe5\xa2\x83\xe5\x8f\xaa\xe4\xba\xa8\xe7\x9b\xae\xe9\x89\xb4\xe5\xb4\xa4\xe9\x97\xb2\xe4\xbd\x93\xe6\xb3\x84\xe6\x9d\x82\xe4\xbd\x9c\xe8\x88\xac\xe8\xbd\xb0\xe5\x8c\x96\xe8\xa7\xa3\xe8\xbf\x82\xe8\xaf\xbf\xe8\x9b\xad\xe7\x92\x80\xe8\x85\xbe\xe5\x91\x8a\xe7\x89\x88\xe6\x9c\x8d\xe7\x9c\x81\xe5\xb8\x88\xe5\xb0\x8f\xe8\xa7\x84\xe7\xa8\x8b\xe7\xba\xbf\xe6\xb5\xb7\xe5\x8a\x9e\xe5\xbc\x95\xe4\xba\x8c\xe6\xa1\xa7\xe7\x89\x8c\xe7\xa0\xba\xe6\xb4\x84\xe8\xa3\xb4\xe4\xbf\xae\xe5\x9b\xbe\xe7\x97\xab\xe8\x83\xa1\xe8\xae\xb8\xe7\x8a\x8a\xe4\xba\x8b\xe9\x83\x9b\xe5\x9f\xba\xe6\x9f\xb4\xe5\x91\xbc\xe9\xa3\x9f\xe7\xa0\x94\xe5\xa5\xb6\xe5\xbe\x8b\xe8\x9b\x8b\xe5\x9b\xa0\xe8\x91\x86\xe5\xaf\x9f\xe6\x88\x8f\xe8\xa4\x92\xe6\x88\x92\xe5\x86\x8d\xe6\x9d\x8e\xe9\xaa\x81\xe5\xb7\xa5\xe8\xb2\x82\xe6\xb2\xb9\xe9\xb9\x85\xe7\xab\xa0\xe5\x95\x84\xe4\xbc\x91\xe5\x9c\xba\xe7\xbb\x99\xe7\x9d\xa1\xe7\xba\xb7\xe8\xb1\x86\xe5\x99\xa8\xe6\x8d\x8e\xe8\xaf\xb4\xe6\x95\x8f\xe5\xad\xa6\xe4\xbc\x9a\xe6\xb5\x92\xe8\xae\xbe\xe8\xaf\x8a\xe6\xa0\xbc\xe5\xbb\x93\xe6\x9f\xa5\xe6\x9d\xa5\xe9\x9c\x93\xe5\xae\xa4\xe6\xba\x86\xef\xbf\xa0\xe8\xaf\xa1\xe5\xaf\xa5\xe7\x84\x95\xe8\x88\x9c\xe6\x9f\x92\xe7\x8b\x90\xe5\x9b\x9e\xe6\x88\x9f\xe7\xa0\xbe\xe5\x8e\x84\xe5\xae\x9e\xe7\xbf\xa9\xe5\xb0\xbf\xe4\xba\x94\xe5\x85\xa5\xe5\xbe\x84\xe6\x83\xad\xe5\x96\xb9\xe8\x82\xa1\xe5\xae\x87\xe7\xaf\x9d|;\xe7\xbe\x8e\xe6\x9c\x9f\xe4\xba\x91\xe4\xb9\x9d\xe7\xa5\xba\xe6\x89\xae\xe9\x9d\xa0\xe9\x94\x9d\xe6\xa7\x8c\xe7\xb3\xbb\xe4\xbc\x81\xe9\x85\xb0\xe9\x98\x8a\xe6\x9a\x82\xe8\x9a\x95\xe5\xbf\xbb\xe8\xb1\x81\xe6\x9c\xac\xe7\xbe\xb9\xe6\x89\xa7\xe6\x9d\xa1\xe9\x92\xa6H\xe7\x8d\x92\xe9\x99\x90\xe8\xbf\x9b\xe5\xad\xa3\xe6\xa5\xa6\xe4\xba\x8e\xe8\x8a\x98\xe7\x8e\x96\xe9\x93\x8b\xe8\x8c\xaf\xe6\x9c\xaa\xe7\xad\x94\xe7\xb2\x98\xe6\x8b\xac\xe6\xa0\xb7\xe7\xb2\xbe\xe6\xac\xa0\xe7\x9f\xa2\xe7\x94\xa5\xe5\xb8\xb7\xe5\xb5\xa9\xe6\x89\xa3\xe4\xbb\xa4\xe4\xbb\x94\xe9\xa3\x8e\xe7\x9a\x88\xe8\xa1\x8c\xe6\x94\xaf\xe9\x83\xa8\xe8\x93\x89\xe5\x88\xae\xe7\xab\x99\xe8\x9c\xa1\xe6\x95\x91\xe9\x92\x8a\xe6\xb1\x97\xe6\x9d\xbe\xe5\xab\x8c\xe6\x88\x90\xe5\x8f\xaf.\xe9\xb9\xa4\xe9\x99\xa2\xe4\xbb\x8e\xe4\xba\xa4\xe6\x94\xbf\xe6\x80\x95\xe6\xb4\xbb\xe8\xb0\x83\xe7\x90\x83\xe5\xb1\x80\xe9\xaa\x8c\xe9\xab\x8c\xe7\xac\xac\xe9\x9f\xab\xe8\xb0\x97\xe4\xb8\xb2\xe5\x88\xb0\xe5\x9c\x86\xe5\xb9\xb4\xe7\xb1\xb3/*\xe5\x8f\x8b\xe5\xbf\xbf\xe6\xa3\x80\xe5\x8c\xba\xe7\x9c\x8b\xe8\x87\xaa\xe6\x95\xa2\xe5\x88\x83\xe4\xb8\xaa\xe5\x85\xb9\xe5\xbc\x84\xe6\xb5\x81\xe7\x95\x99\xe5\x90\x8c\xe6\xb2\xa1\xe9\xbd\xbf\xe6\x98\x9f\xe8\x81\x86\xe8\xbd\xbc\xe6\xb9\x96\xe4\xbb\x80\xe4\xb8\x89\xe5\xbb\xba\xe8\x9b\x94\xe5\x84\xbf\xe6\xa4\x8b\xe6\xb1\x95\xe9\x9c\x87\xe9\xa2\xa7\xe9\xb2\xa4\xe8\xb7\x9f\xe5\x8a\x9b\xe6\x83\x85\xe7\x92\xba\xe9\x93\xa8\xe9\x99\xaa\xe5\x8a\xa1\xe6\x8c\x87\xe6\x97\x8f\xe8\xae\xad\xe6\xbb\xa6\xe9\x84\xa3\xe6\xbf\xae\xe6\x89\x92\xe5\x95\x86\xe7\xae\xb1\xe5\x8d\x81\xe5\x8f\xac\xe6\x85\xb7\xe8\xbe\x97\xe6\x89\x80\xe8\x8e\x9e\xe7\xae\xa1\xe6\x8a\xa4\xe8\x87\xad\xe6\xa8\xaa\xe7\xa1\x92\xe5\x97\x93\xe6\x8e\xa5\xe4\xbe\xa6\xe5\x85\xad\xe9\x9c\xb2\xe5\x85\x9a\xe9\xa6\x8b\xe9\xa9\xbe\xe5\x89\x96\xe9\xab\x98\xe4\xbe\xac\xe5\xa6\xaa\xe5\xb9\x82\xe7\x8c\x97\xe7\xbb\xba\xe9\xaa\x90\xe5\xa4\xae\xe9\x85\x90\xe5\xad\x9d\xe7\xad\x9d\xe8\xaf\xbe\xe5\xbe\x87\xe7\xbc\xb0\xe9\x97\xa8\xe7\x94\xb7\xe8\xa5\xbf\xe9\xa1\xb9\xe5\x8f\xa5\xe8\xb0\x99\xe7\x9e\x92\xe7\xa7\x83\xe7\xaf\x87\xe6\x95\x99\xe7\xa2\xb2\xe7\xbd\x9a\xe5\xa3\xb0\xe5\x91\x90\xe6\x99\xaf\xe5\x89\x8d\xe5\xaf\x8c\xe5\x98\xb4\xe9\xb3\x8c\xe7\xa8\x80\xe5\x85\x8d\xe6\x9c\x8b\xe5\x95\xac\xe7\x9d\x90\xe5\x8e\xbb\xe8\xb5\x88\xe9\xb1\xbc\xe4\xbd\x8f\xe8\x82\xa9\xe6\x84\x95\xe9\x80\x9f\xe6\x97\x81\xe6\xb3\xa2\xe5\x8e\x85\xe5\x81\xa5\xe8\x8c\xbc\xe5\x8e\xa5\xe9\xb2\x9f\xe8\xb0\x85\xe6\x8a\x95\xe6\x94\xb8\xe7\x82\x94\xe6\x95\xb0\xe6\x96\xb9\xe5\x87\xbb\xe5\x91\x8b\xe8\xb0\x88\xe7\xbb\xa9\xe5\x88\xab\xe6\x84\xab\xe5\x83\x9a\xe8\xba\xac\xe9\xb9\xa7\xe8\x83\xaa\xe7\x82\xb3\xe6\x8b\x9b\xe5\x96\x87\xe8\x86\xa8\xe6\xb3\xb5\xe8\xb9\xa6\xe6\xaf\x9b\xe7\xbb\x9354\xe8\xb0\xb1\xe8\xaf\x86\xe9\x99\x95\xe7\xb2\xbd\xe5\xa9\x9a\xe6\x8b\x9f\xe6\x9e\x84\xe4\xb8\x94\xe6\x90\x9c\xe4\xbb\xbb\xe6\xbd\x98\xe6\xaf\x94\xe9\x83\xa2\xe5\xa6\xa8\xe9\x86\xaa\xe9\x99\x80\xe6\xa1\x94\xe7\xa2\x98\xe6\x89\x8e\xe9\x80\x89\xe5\x93\x88\xe9\xaa\xb7\xe6\xa5\xb7\xe4\xba\xbf\xe6\x98\x8e\xe7\xbc\x86\xe8\x84\xaf\xe7\x9b\x91\xe7\x9d\xab\xe9\x80\xbb\xe5\xa9\xb5\xe5\x85\xb1\xe8\xb5\xb4\xe6\xb7\x9d\xe5\x87\xa1\xe6\x83\xa6\xe5\x8f\x8a\xe8\xbe\xbe\xe6\x8f\x96\xe8\xb0\xa9\xe6\xbe\xb9\xe5\x87\x8f\xe7\x84\xb0\xe8\x9b\xb9\xe7\x95\xaa\xe7\xa5\x81\xe6\x9f\x8f\xe5\x91\x98\xe7\xa6\x84\xe6\x80\xa1\xe5\xb3\xa4\xe9\xbe\x99\xe7\x99\xbd\xe5\x8f\xbd\xe7\x94\x9f\xe9\x97\xaf\xe8\xb5\xb7\xe7\xbb\x86\xe8\xa3\x85\xe8\xb0\x95\xe7\xab\x9f\xe8\x81\x9a\xe9\x92\x99\xe4\xb8\x8a\xe5\xaf\xbc\xe6\xb8\x8a\xe6\x8c\x89\xe8\x89\xbe\xe8\xbe\x98\xe6\x8c\xa1\xe8\x80\x92\xe7\x9b\xb9\xe9\xa5\xaa\xe8\x87\x80\xe8\xae\xb0\xe9\x82\xae\xe8\x95\x99\xe5\x8f\x97\xe5\x90\x84\xe5\x8c\xbb\xe6\x90\x82\xe6\x99\xae\xe6\xbb\x87\xe6\x9c\x97\xe8\x8c\xb8\xe5\xb8\xa6\xe7\xbf\xbb\xe9\x85\x9a(\xe5\x85\x89\xe5\xa0\xa4\xe5\xa2\x9f\xe8\x94\xb7\xe4\xb8\x87\xe5\xb9\xbb\xe3\x80\x93\xe7\x91\x99\xe8\xbe\x88\xe6\x98\xa7\xe7\x9b\x8f\xe4\xba\x98\xe8\x9b\x80\xe5\x90\x89\xe9\x93\xb0\xe8\xaf\xb7\xe5\xad\x90\xe5\x81\x87\xe9\x97\xbb\xe7\xa8\x8e\xe4\xba\x95\xe8\xaf\xa9\xe5\x93\xa8\xe5\xab\x82\xe5\xa5\xbd\xe9\x9d\xa2\xe7\x90\x90\xe6\xa0\xa1\xe9\xa6\x8a\xe9\xac\xa3\xe7\xbc\x82\xe8\x90\xa5\xe8\xae\xbf\xe7\x82\x96\xe5\x8d\xa0\xe5\x86\x9c\xe7\xbc\x80\xe5\x90\xa6\xe7\xbb\x8f\xe9\x92\x9a\xe6\xa3\xb5\xe8\xb6\x9f\xe5\xbc\xa0\xe4\xba\x9f\xe5\x90\x8f\xe8\x8c\xb6\xe8\xb0\xa8\xe6\x8d\xbb\xe8\xae\xba\xe8\xbf\xb8\xe5\xa0\x82\xe7\x8e\x89\xe4\xbf\xa1\xe5\x90\xa7\xe7\x9e\xa0\xe4\xb9\xa1\xe5\xa7\xac\xe5\xaf\xba\xe5\x92\xac\xe6\xba\x8f\xe8\x8b\x84\xe7\x9a\xbf\xe6\x84\x8f\xe8\xb5\x89\xe5\xae\x9d\xe5\xb0\x94\xe9\x92\xb0\xe8\x89\xba\xe7\x89\xb9\xe5\x94\xb3\xe8\xb8\x89\xe9\x83\xbd\xe8\x8d\xa3\xe5\x80\x9a\xe7\x99\xbb\xe8\x8d\x90\xe4\xb8\xa7\xe5\xa5\x87\xe6\xb6\xb5\xe6\x89\xb9\xe7\x82\xad\xe8\xbf\x91\xe7\xac\xa6\xe5\x82\xa9\xe6\x84\x9f\xe9\x81\x93\xe7\x9d\x80\xe8\x8f\x8a\xe8\x99\xb9\xe4\xbb\xb2\xe4\xbc\x97\xe6\x87\x88\xe6\xbf\xaf\xe9\xa2\x9e\xe7\x9c\xba\xe5\x8d\x97\xe9\x87\x8a\xe5\x8c\x97\xe7\xbc\x9d\xe6\xa0\x87\xe6\x97\xa2\xe8\x8c\x97\xe6\x95\xb4\xe6\x92\xbc\xe8\xbf\xa4\xe8\xb4\xb2\xe6\x8c\x8e\xe8\x80\xb1\xe6\x8b\x92\xe6\x9f\x90\xe5\xa6\x8d\xe5\x8d\xab\xe5\x93\x87\xe8\x8b\xb1\xe7\x9f\xb6\xe8\x97\xa9\xe6\xb2\xbb\xe4\xbb\x96\xe5\x85\x83\xe9\xa2\x86\xe8\x86\x9c\xe9\x81\xae\xe7\xa9\x97\xe8\x9b\xbe\xe9\xa3\x9e\xe8\x8d\x92\xe6\xa3\xba\xe5\x8a\xab\xe4\xb9\x88\xe5\xb8\x82\xe7\x81\xab\xe6\xb8\xa9\xe6\x8b\x88\xe6\xa3\x9a\xe6\xb4\xbc\xe8\xbd\xac\xe6\x9e\x9c\xe5\xa5\x95\xe5\x8d\xb8\xe8\xbf\xaa\xe4\xbc\xb8\xe6\xb3\xb3\xe6\x96\x97\xe9\x82\xa1\xe4\xbe\x84\xe6\xb6\xa8\xe5\xb1\xaf\xe8\x90\x8b\xe8\x83\xad\xe6\xb0\xa1\xe5\xb4\xae\xe6\x9e\x9e\xe6\x83\xa7\xe5\x86\x92\xe5\xbd\xa9\xe6\x96\x9c\xe6\x89\x8b\xe8\xb1\x9a\xe9\x9a\x8f\xe6\x97\xad\xe6\xb7\x91\xe5\xa6\x9e\xe5\xbd\xa2\xe8\x8f\x8c\xe5\x90\xb2\xe6\xb2\xb1\xe4\xba\x89\xe9\xa9\xaf\xe6\xad\xb9\xe6\x8c\x9f\xe5\x85\x86\xe6\x9f\xb1\xe4\xbc\xa0\xe8\x87\xb3\xe5\x8c\x85\xe5\x86\x85\xe5\x93\x8d\xe4\xb8\xb4\xe7\xba\xa2\xe5\x8a\x9f\xe5\xbc\xa9\xe8\xa1\xa1\xe5\xaf\x82\xe7\xa6\x81\xe8\x80\x81\xe6\xa3\x8d\xe8\x80\x86\xe6\xb8\x8d\xe7\xbb\x87\xe5\xae\xb3\xe6\xb0\xb5\xe6\xb8\x91\xe5\xb8\x83\xe8\xbd\xbd\xe9\x9d\xa5\xe5\x97\xac\xe8\x99\xbd\xe8\x8b\xb9\xe5\x92\xa8\xe5\xa8\x84\xe5\xba\x93\xe9\x9b\x89\xe6\xa6\x9c\xe5\xb8\x9c\xe5\x98\xb2\xe5\xa5\x97\xe7\x91\x9a\xe4\xba\xb2\xe7\xb0\xb8\xe6\xac\xa7\xe8\xbe\xb96\xe8\x85\xbf\xe6\x97\xae\xe6\x8a\x9b\xe5\x90\xb9\xe7\x9e\xb3\xe5\xbe\x97\xe9\x95\x93\xe6\xa2\x97\xe5\x8e\xa8\xe7\xbb\xa7\xe6\xbc\xbe\xe6\x84\xa3\xe6\x86\xa8\xe5\xa3\xab\xe7\xad\x96\xe7\xaa\x91\xe6\x8a\x91\xe8\xba\xaf\xe8\xa5\x9f\xe8\x84\x8f\xe5\x8f\x82\xe8\xb4\xb8\xe8\xa8\x80\xe5\xb9\xb2\xe7\xbb\xb8\xe9\xb3\x84\xe7\xa9\xb7\xe8\x97\x9c\xe9\x9f\xb3\xe6\x8a\x98\xe8\xaf\xa6)\xe4\xb8\xbe\xe6\x82\x8d\xe7\x94\xb8\xe7\x99\x8c\xe9\xbb\x8e\xe8\xb0\xb4\xe6\xad\xbb\xe7\xbd\xa9\xe8\xbf\x81\xe5\xaf\x92\xe9\xa9\xb7\xe8\xa2\x96\xe5\xaa\x92\xe8\x92\x8b\xe6\x8e\x98\xe6\xa8\xa1\xe7\xba\xa0\xe6\x81\xa3\xe8\xa7\x82\xe7\xa5\x96\xe8\x9b\x86\xe7\xa2\x8d\xe4\xbd\x8d\xe7\xa8\xbf\xe4\xb8\xbb\xe6\xbe\xa7\xe8\xb7\x8c\xe7\xad\x8f\xe4\xba\xac\xe9\x94\x8f\xe5\xb8\x9d\xe8\xb4\xb4\xe8\xaf\x81\xe7\xb3\xa0\xe6\x89\x8d\xe9\xbb\x84\xe9\xb2\xb8\xe7\x95\xa5\xe7\x82\xaf\xe9\xa5\xb1\xe5\x9b\x9b\xe5\x87\xba\xe5\x9b\xad\xe7\x8a\x80\xe7\x89\xa7\xe5\xae\xb9\xe6\xb1\x89\xe6\x9d\x86\xe6\xb5\x88\xe6\xb1\xb0\xe7\x91\xb7\xe9\x80\xa0\xe8\x99\xab\xe7\x98\xa9\xe6\x80\xaa\xe9\xa9\xb4\xe6\xb5\x8e\xe5\xba\x94\xe8\x8a\xb1\xe6\xb2\xa3\xe8\xb0\x94\xe5\xa4\x99\xe6\x97\x85\xe4\xbb\xb7\xe7\x9f\xbf\xe4\xbb\xa5\xe8\x80\x83su\xe5\x91\xa6\xe6\x99\x92\xe5\xb7\xa1\xe8\x8c\x85\xe5\x87\x86\xe8\x82\x9f\xe7\x93\xb4\xe8\xa9\xb9\xe4\xbb\x9f\xe8\xa4\x82\xe8\xaf\x91\xe6\xa1\x8c\xe6\xb7\xb7\xe5\xae\x81\xe6\x80\xa6\xe9\x83\x91\xe6\x8a\xbf\xe4\xba\x9b\xe4\xbd\x99\xe9\x84\x82\xe9\xa5\xb4\xe6\x94\x92\xe7\x8f\x91\xe7\xbe\xa4\xe9\x98\x96\xe5\xb2\x94\xe7\x90\xa8\xe8\x97\x93\xe9\xa2\x84\xe7\x8e\xaf\xe6\xb4\xae\xe5\xb2\x8c\xe5\xae\x80\xe6\x9d\xb2\xe7\x80\xb5\xe6\x9c\x80\xe5\xb8\xb8\xe5\x9b\xa1\xe5\x91\xa8\xe8\xb8\x8a\xe5\xa5\xb3\xe9\xbc\x93\xe8\xa2\xad\xe5\x96\x89\xe7\xae\x80\xe8\x8c\x83\xe8\x96\xaf\xe9\x81\x90\xe7\x96\x8f\xe7\xb2\xb1\xe9\xbb\x9c\xe7\xa6\xa7\xe6\xb3\x95\xe7\xae\x94\xe6\x96\xa4\xe9\x81\xa5\xe6\xb1\x9d\xe5\xa5\xa5\xe7\x9b\xb4\xe8\xb4\x9e\xe6\x92\x91\xe7\xbd\xae\xe7\xbb\xb1\xe9\x9b\x86\xe5\xa5\xb9\xe9\xa6\x85\xe9\x80\x97\xe9\x92\xa7\xe6\xa9\xb1\xe9\xad\x89[\xe6\x81\x99\xe8\xba\x81\xe5\x94\xa49\xe6\x97\xba\xe8\x86\x98\xe5\xbe\x85\xe8\x84\xbe\xe6\x83\xab\xe8\xb4\xad\xe5\x90\x97\xe4\xbe\x9d\xe7\x9b\xb2\xe5\xba\xa6\xe7\x98\xbf\xe8\xa0\x96\xe4\xbf\xbe\xe4\xb9\x8b\xe9\x95\x97\xe6\x8b\x87\xe9\xb2\xb5\xe5\x8e\x9d\xe7\xb0\xa7\xe7\xbb\xad\xe6\xac\xbe\xe5\xb1\x95\xe5\x95\x83\xe8\xa1\xa8\xe5\x89\x94\xe5\x93\x81\xe9\x92\xbb\xe8\x85\xad\xe6\x8d\x9f\xe6\xb8\x85\xe9\x94\xb6\xe7\xbb\x9f\xe6\xb6\x8c\xe5\xaf\xb8\xe6\xbb\xa8\xe8\xb4\xaa\xe9\x93\xbe\xe5\x90\xa0\xe5\x86\x88\xe4\xbc\x8e\xe8\xbf\xa5\xe5\x92\x8f\xe5\x90\x81\xe8\xa7\x88\xe9\x98\xb2\xe8\xbf\x85\xe5\xa4\xb1\xe6\xb1\xbe\xe9\x98\x94\xe9\x80\xb5\xe7\xbb\x80\xe8\x94\x91\xe5\x88\x97\xe5\xb7\x9d\xe5\x87\xad\xe5\x8a\xaa\xe7\x86\xa8\xe6\x8f\xaa\xe5\x88\xa9\xe4\xbf\xb1\xe7\xbb\x89\xe6\x8a\xa2\xe9\xb8\xa8\xe6\x88\x91\xe5\x8d\xb3\xe8\xb4\xa3\xe8\x86\xa6\xe6\x98\x93\xe6\xaf\x93\xe9\xb9\x8a\xe5\x88\xb9\xe7\x8e\xb7\xe5\xb2\xbf\xe7\xa9\xba\xe5\x98\x9e\xe7\xbb\x8a\xe6\x8e\x92\xe6\x9c\xaf\xe4\xbc\xb0\xe9\x94\xb7\xe8\xbf\x9d\xe4\xbb\xac\xe8\x8b\x9f\xe9\x93\x9c\xe6\x92\xad\xe8\x82\x98\xe4\xbb\xb6\xe7\x83\xab\xe5\xae\xa1\xe9\xb2\x82\xe5\xb9\xbf\xe5\x83\x8f\xe9\x93\x8c\xe6\x83\xb0\xe9\x93\x9f\xe5\xb7\xb3\xe8\x83\x8d\xe9\xb2\x8d\xe5\xba\xb7\xe6\x86\xa7\xe8\x89\xb2\xe6\x81\xa2\xe6\x83\xb3\xe6\x8b\xb7\xe5\xb0\xa4\xe7\x96\xb3\xe7\x9f\xa5SYFDA\xe5\xb3\x84\xe8\xa3\x95\xe5\xb8\xae\xe6\x8f\xa1\xe6\x90\x94\xe6\xb0\x90\xe6\xb0\x98\xe9\x9a\xbe\xe5\xa2\x92\xe6\xb2\xae\xe9\x9b\xa8\xe5\x8f\x81\xe7\xbc\xa5\xe6\x82\xb4\xe8\x97\x90\xe6\xb9\xab\xe5\xa8\x9f\xe8\x8b\x91\xe7\xa8\xa0\xe9\xa2\x9b\xe7\xb0\x87\xe5\x90\x8e\xe9\x98\x95\xe9\x97\xad\xe8\x95\xa4\xe7\xbc\x9a\xe6\x80\x8e\xe4\xbd\x9e\xe7\xa0\x81\xe5\x98\xa4\xe8\x94\xa1\xe7\x97\x8a\xe8\x88\xb1\xe8\x9e\xaf\xe5\xb8\x95\xe8\xb5\xab\xe6\x98\xb5\xe5\x8d\x87\xe7\x83\xac\xe5\xb2\xab\xe3\x80\x81\xe7\x96\xb5\xe8\x9c\xbb\xe9\xab\x81\xe8\x95\xa8\xe9\x9a\xb6\xe7\x83\x9b\xe6\xa2\xb0\xe4\xb8\x91\xe7\x9b\x82\xe6\xa2\x81\xe5\xbc\xba\xe9\xb2\x9b\xe7\x94\xb1\xe6\x8b\x98\xe6\x8f\x89\xe5\x8a\xad\xe9\xbe\x9f\xe6\x92\xa4\xe9\x92\xa9\xe5\x91\x95\xe5\xad\x9b\xe8\xb4\xb9\xe5\xa6\xbb\xe6\xbc\x82\xe6\xb1\x82\xe9\x98\x91\xe5\xb4\x96\xe7\xa7\xa4\xe7\x94\x98\xe9\x80\x9a\xe6\xb7\xb1\xe8\xa1\xa5\xe8\xb5\x83\xe5\x9d\x8e\xe5\xba\x8a\xe5\x95\xaa\xe6\x89\xbf\xe5\x90\xbc\xe9\x87\x8f\xe6\x9a\x87\xe9\x92\xbc\xe7\x83\xa8\xe9\x98\x82\xe6\x93\x8e\xe8\x84\xb1\xe9\x80\xae\xe7\xa7\xb0P\xe7\xa5\x9e\xe5\xb1\x9e\xe7\x9f\x97\xe5\x8d\x8e\xe5\xb1\x8a\xe7\x8b\x8d\xe8\x91\x91\xe6\xb1\xb9\xe8\x82\xb2\xe6\x82\xa3\xe7\xaa\x92\xe8\x9b\xb0\xe4\xbd\xbc\xe9\x9d\x99\xe6\xa7\x8e\xe8\xbf\x90\xe9\xb3\x97\xe5\xba\x86\xe9\x80\x9d\xe6\x9b\xbc\xe7\x96\xb1\xe5\x85\x8b\xe4\xbb\xa3\xe5\xae\x98\xe6\xad\xa4\xe9\xba\xb8\xe8\x80\xa7\xe8\x9a\x8c\xe6\x99\x9f\xe4\xbe\x8b\xe7\xa1\x80\xe6\xa6\x9b\xe5\x89\xaf\xe6\xb5\x8b\xe5\x94\xb0\xe7\xbc\xa2\xe8\xbf\xb9\xe7\x81\xac\xe9\x9c\x81\xe8\xba\xab\xe5\xb2\x81\xe8\xb5\xad\xe6\x89\x9b\xe5\x8f\x88\xe8\x8f\xa1\xe4\xb9\x9c\xe9\x9b\xbe\xe6\x9d\xbf\xe8\xaf\xbb\xe9\x99\xb7\xe5\xbe\x89\xe8\xb4\xaf\xe9\x83\x81\xe8\x99\x91\xe5\x8f\x98\xe9\x92\x93\xe8\x8f\x9c\xe5\x9c\xbe\xe7\x8e\xb0\xe7\x90\xa2\xe5\xbc\x8f\xe4\xb9\x90\xe7\xbb\xb4\xe6\xb8\x94\xe6\xb5\x9c\xe5\xb7\xa6\xe5\x90\xbe\xe8\x84\x91\xe9\x92\xa1\xe8\xad\xa6T\xe5\x95\xb5\xe6\x8b\xb4\xe5\x81\x8c\xe6\xbc\xb1\xe6\xb9\xbf\xe7\xa1\x95\xe6\xad\xa2\xe9\xaa\xbc\xe9\xad\x84\xe7\xa7\xaf\xe7\x87\xa5\xe8\x81\x94\xe8\xb8\xa2\xe7\x8e\x9b|\xe5\x88\x99\xe7\xaa\xbf\xe8\xa7\x81\xe6\x8c\xaf\xe7\x95\xbf\xe9\x80\x81\xe7\x8f\xad\xe9\x92\xbd\xe6\x82\xa8\xe8\xb5\xb5\xe5\x88\xa8\xe5\x8d\xb0\xe8\xae\xa8\xe8\xb8\x9d\xe7\xb1\x8d\xe8\xb0\xa1\xe8\x88\x8c\xe5\xb4\xa7\xe6\xb1\xbd\xe8\x94\xbd\xe6\xb2\xaa\xe9\x85\xa5\xe7\xbb\x92\xe6\x80\x96\xe8\xb4\xa2\xe5\xb8\x96\xe8\x82\xb1\xe7\xa7\x81\xe8\x8e\x8e\xe5\x8b\x8b\xe7\xbe\x94\xe9\x9c\xb8\xe5\x8a\xb1\xe5\x93\xbc\xe5\xb8\x90\xe5\xb0\x86\xe5\xb8\x85\xe6\xb8\xa0\xe7\xba\xaa\xe5\xa9\xb4\xe5\xa8\xa9\xe5\xb2\xad\xe5\x8e\x98\xe6\xbb\x95\xe5\x90\xbb\xe4\xbc\xa4\xe5\x9d\x9d\xe5\x86\xa0\xe6\x88\x8a\xe9\x9a\x86\xe7\x98\x81\xe4\xbb\x8b\xe6\xb6\xa7\xe7\x89\xa9\xe9\xbb\x8d\xe5\xb9\xb6\xe5\xa7\x97\xe5\xa5\xa2\xe8\xb9\x91\xe6\x8e\xa3\xe5\x9e\xb8\xe9\x94\xb4\xe5\x91\xbd\xe7\xae\x8d\xe6\x8d\x89\xe7\x97\x85\xe8\xbe\x96\xe7\x90\xb0\xe7\x9c\xad\xe8\xbf\xa9\xe8\x89\x98\xe7\xbb\x8c\xe7\xb9\x81\xe5\xaf\x85\xe8\x8b\xa5\xe6\xaf\x8b\xe6\x80\x9d\xe8\xaf\x89\xe7\xb1\xbb\xe8\xaf\x88\xe7\x87\xae\xe8\xbd\xb2\xe9\x85\xae\xe7\x8b\x82\xe9\x87\x8d\xe5\x8f\x8d\xe8\x81\x8c\xe7\xad\xb1\xe5\x8e\xbf\xe5\xa7\x94\xe7\xa3\x95\xe7\xbb\xa3\xe5\xa5\x96\xe6\x99\x8b\xe6\xbf\x89\xe5\xbf\x97\xe5\xbe\xbd\xe8\x82\xa0\xe5\x91\x88\xe7\x8d\x90\xe5\x9d\xbb\xe5\x8f\xa3\xe7\x89\x87\xe7\xa2\xb0\xe5\x87\xa0\xe6\x9d\x91\xe6\x9f\xbf\xe5\x8a\xb3\xe6\x96\x99\xe8\x8e\xb7\xe4\xba\xa9\xe6\x83\x95\xe6\x99\x95\xe5\x8e\x8c\xe5\x8f\xb7\xe7\xbd\xa2\xe6\xb1\xa0\xe6\xad\xa3\xe9\x8f\x96\xe7\x85\xa8\xe5\xae\xb6\xe6\xa3\x95\xe5\xa4\x8d\xe5\xb0\x9d\xe6\x87\x8b\xe8\x9c\xa5\xe9\x94\x85\xe5\xb2\x9b\xe6\x89\xb0\xe9\x98\x9f\xe5\x9d\xa0\xe7\x98\xbe\xe9\x92\xac@\xe5\x8d\xa7\xe7\x96\xa3\xe9\x95\x87\xe8\xad\xac\xe5\x86\xb0\xe5\xbd\xb7\xe9\xa2\x91\xe9\xbb\xaf\xe6\x8d\xae\xe5\x9e\x84\xe9\x87\x87\xe5\x85\xab\xe7\xbc\xaa\xe7\x98\xab\xe5\x9e\x8b\xe7\x86\xb9\xe7\xa0\xb0\xe6\xa5\xa0\xe8\xa5\x81\xe7\xae\x90\xe4\xbd\x86\xe5\x98\xb6\xe7\xbb\xb3\xe5\x95\xa4\xe6\x8b\x8d\xe7\x9b\xa5\xe7\xa9\x86\xe5\x82\xb2\xe6\xb4\x97\xe7\x9b\xaf\xe5\xa1\x98\xe6\x80\x94\xe7\xad\x9b\xe4\xb8\xbf\xe5\x8f\xb0\xe6\x81\x92\xe5\x96\x82\xe8\x91\x9b\xe6\xb0\xb8\xef\xbf\xa5\xe7\x83\x9f\xe9\x85\x92\xe6\xa1\xa6\xe4\xb9\xa6\xe7\xa0\x82\xe8\x9a\x9d\xe7\xbc\x89\xe6\x80\x81\xe7\x80\x9a\xe8\xa2\x84\xe5\x9c\xb3\xe8\xbd\xbb\xe8\x9b\x9b\xe8\xb6\x85\xe6\xa6\xa7\xe9\x81\x9b\xe5\xa7\x92\xe5\xa5\x98\xe9\x93\xae\xe5\x8f\xb3\xe8\x8d\xbd\xe6\x9c\x9b\xe5\x81\xbb\xe5\x8d\xa1\xe4\xb8\xb6\xe6\xb0\xb0\xe9\x99\x84\xe5\x81\x9a\xe9\x9d\xa9\xe7\xb4\xa2\xe6\x88\x9a\xe5\x9d\xa8\xe6\xa1\xb7\xe5\x94\x81\xe5\x9e\x85\xe6\xa6\xbb\xe5\xb2\x90\xe5\x81\x8e\xe5\x9d\x9b\xe8\x8e\xa8\xe5\xb1\xb1\xe6\xae\x8a\xe5\xbe\xae\xe9\xaa\x87\xe9\x99\x88\xe7\x88\xa8\xe6\x8e\xa8\xe5\x97\x9d\xe9\xa9\xb9\xe6\xbe\xa1\xe8\x97\x81\xe5\x91\xa4\xe5\x8d\xa4\xe5\x98\xbb\xe7\xb3\x85\xe9\x80\x9b\xe4\xbe\xb5\xe9\x83\x93\xe9\x85\x8c\xe5\xbe\xb7\xe6\x91\x87\xe2\x80\xbb\xe9\xac\x83\xe8\xa2\xab\xe6\x85\xa8\xe6\xae\xa1\xe7\xbe\xb8\xe6\x98\x8c\xe6\xb3\xa1\xe6\x88\x9b\xe9\x9e\x8b\xe6\xb2\xb3\xe5\xae\xaa\xe6\xb2\xbf\xe7\x8e\xb2\xe9\xb2\xa8\xe7\xbf\x85\xe5\x93\xbd\xe6\xba\x90\xe9\x93\x85\xe8\xaf\xad\xe7\x85\xa7\xe9\x82\xaf\xe5\x9d\x80\xe8\x8d\x83\xe4\xbd\xac\xe9\xa1\xba\xe9\xb8\xb3\xe7\x94\xba\xe9\x9c\xad\xe7\x9d\xbe\xe7\x93\xa2\xe5\xa4\xb8\xe6\xa4\x81\xe6\x99\x93\xe9\x85\xbf\xe7\x97\x88\xe5\x92\x94\xe4\xbe\x8f\xe5\x88\xb8\xe5\x99\x8e\xe6\xb9\x8d\xe7\xad\xbe\xe5\x9a\xb7\xe7\xa6\xbb\xe5\x8d\x88\xe5\xb0\x9a\xe7\xa4\xbe\xe9\x94\xa4\xe8\x83\x8c\xe5\xad\x9f\xe4\xbd\xbf\xe6\xb5\xaa\xe7\xbc\xa6\xe6\xbd\x8d\xe9\x9e\x85\xe5\x86\x9b\xe5\xa7\xb9\xe9\xa9\xb6\xe7\xac\x91\xe9\xb3\x9f\xe9\xb2\x81\xe3\x80\x8b\xe5\xad\xbd\xe9\x92\x9c\xe7\xbb\xbf\xe6\xb4\xb1\xe7\xa4\xb4\xe7\x84\xaf\xe6\xa4\xb0\xe9\xa2\x96\xe5\x9b\x94\xe4\xb9\x8c\xe5\xad\x94\xe5\xb7\xb4\xe4\xba\x92\xe6\x80\xa7\xe6\xa4\xbd\xe5\x93\x9e\xe8\x81\x98\xe6\x98\xa8\xe6\x97\xa9\xe6\x9a\xae\xe8\x83\xb6\xe7\x82\x80\xe9\x9a\xa7\xe4\xbd\x8e\xe5\xbd\x97\xe6\x98\x9d\xe9\x93\x81\xe5\x91\x93\xe6\xb0\xbd\xe8\x97\x89\xe5\x96\x94\xe7\x99\x96\xe7\x91\x97\xe5\xa7\xa8\xe6\x9d\x83\xe8\x83\xb1\xe9\x9f\xa6\xe5\xa0\x91\xe8\x9c\x9c\xe9\x85\x8b\xe6\xa5\x9d\xe7\xa0\x9d\xe6\xaf\x81\xe9\x9d\x93\xe6\xad\x99\xe9\x94\xb2\xe7\xa9\xb6\xe5\xb1\x8b\xe5\x96\xb3\xe9\xaa\xa8\xe8\xbe\xa8\xe7\xa2\x91\xe6\xad\xa6\xe9\xb8\xa0\xe5\xae\xab\xe8\xbe\x9c\xe7\x83\x8a\xe9\x80\x82\xe5\x9d\xa1\xe6\xae\x83\xe5\x9f\xb9\xe4\xbd\xa9\xe4\xbe\x9b\xe8\xb5\xb0\xe8\x9c\x88\xe8\xbf\x9f\xe7\xbf\xbc\xe5\x86\xb5\xe5\xa7\xa3\xe5\x87\x9b\xe6\xb5\x94\xe5\x90\x83\xe9\xa3\x98\xe5\x80\xba\xe7\x8a\x9f\xe9\x87\x91\xe4\xbf\x83\xe8\x8b\x9b\xe5\xb4\x87\xe5\x9d\x82\xe8\x8e\xb3\xe7\x95\x94\xe7\xbb\x82\xe5\x85\xb5\xe8\xa0\x95\xe6\x96\x8b\xe6\xa0\xb9\xe7\xa0\x8d\xe4\xba\xa2\xe6\xac\xa2\xe6\x81\xac\xe5\xb4\x94\xe5\x89\x81\xe9\xa4\x90\xe6\xa6\xab\xe5\xbf\xab\xe6\x89\xb6\xe2\x80\x96\xe6\xbf\x92\xe7\xbc\xa0\xe9\xb3\x9c\xe5\xbd\x93\xe5\xbd\xad\xe9\xa9\xad\xe6\xb5\xa6\xe7\xaf\xae\xe6\x98\x80\xe9\x94\x86\xe7\xa7\xb8\xe9\x92\xb3\xe5\xbc\x8b\xe5\xa8\xa3\xe7\x9e\x91\xe5\xa4\xb7\xe9\xbe\x9b\xe8\x8b\xab\xe6\x8b\xb1\xe8\x87\xb4%\xe5\xb5\x8a\xe9\x9a\x9c\xe9\x9a\x90\xe5\xbc\x91\xe5\x88\x9d\xe5\xa8\x93\xe6\x8a\x89\xe6\xb1\xa9\xe7\xb4\xaf\xe8\x93\x96""\xe5\x94\xac\xe5\x8a\xa9\xe8\x8b\x93\xe6\x98\x99\xe6\x8a\xbc\xe6\xaf\x99\xe7\xa0\xb4\xe5\x9f\x8e\xe9\x83\xa7\xe9\x80\xa2\xe5\x9a\x8f\xe7\x8d\xad\xe7\x9e\xbb\xe6\xba\xb1\xe5\xa9\xbf\xe8\xb5\x8a\xe8\xb7\xa8\xe6\x81\xbc\xe7\x92\xa7\xe8\x90\x83\xe5\xa7\xbb\xe8\xb2\x89\xe7\x81\xb5\xe7\x82\x89\xe5\xaf\x86\xe6\xb0\x9b\xe9\x99\xb6\xe7\xa0\xb8\xe8\xb0\xac\xe8\xa1\x94\xe7\x82\xb9\xe7\x90\x9b\xe6\xb2\x9b\xe6\x9e\xb3\xe5\xb1\x82\xe5\xb2\xb1\xe8\xaf\xba\xe8\x84\x8d\xe6\xa6\x88\xe5\x9f\x82\xe5\xbe\x81\xe5\x86\xb7\xe8\xa3\x81\xe6\x89\x93\xe8\xb9\xb4\xe7\xb4\xa0\xe7\x98\x98\xe9\x80\x9e\xe8\x9b\x90\xe8\x81\x8a\xe6\xbf\x80\xe8\x85\xb1\xe8\x90\x98\xe8\xb8\xb5\xe9\xa3\x92\xe8\x93\x9f\xe5\x90\x86\xe5\x8f\x96\xe5\x92\x99\xe7\xb0\x8b\xe6\xb6\x93\xe7\x9f\xa9\xe6\x9b\x9d\xe6\x8c\xba\xe6\x8f\xa3\xe5\xba\xa7\xe4\xbd\xa0\xe5\x8f\xb2\xe8\x88\xb5\xe7\x84\xb1\xe5\xb0\x98\xe8\x8b\x8f\xe7\xac\x88\xe8\x84\x9a\xe6\xba\x89\xe6\xa6\xa8\xe8\xaf\xb5\xe6\xa8\x8a\xe9\x82\x93\xe7\x84\x8a\xe4\xb9\x89\xe5\xba\xb6\xe5\x84\x8b\xe8\x9f\x8b\xe8\x92\xb2\xe8\xb5\xa6\xe5\x91\xb7\xe6\x9d\x9e\xe8\xaf\xa0\xe8\xb1\xaa\xe8\xbf\x98\xe8\xaf\x95\xe9\xa2\x93\xe8\x8c\x89\xe5\xa4\xaa\xe9\x99\xa4\xe7\xb4\xab\xe9\x80\x83\xe7\x97\xb4\xe8\x8d\x89\xe5\x85\x85\xe9\xb3\x95\xe7\x8f\x89\xe7\xa5\x97\xe5\xa2\xa8\xe6\xb8\xad\xe7\x83\xa9\xe8\x98\xb8\xe6\x85\x95\xe7\x92\x87\xe9\x95\xb6\xe7\xa9\xb4\xe5\xb5\x98\xe6\x81\xb6\xe9\xaa\x82\xe9\x99\xa9\xe7\xbb\x8b\xe5\xb9\x95\xe7\xa2\x89\xe8\x82\xba\xe6\x88\xb3\xe5\x88\x98\xe6\xbd\x9e\xe7\xa7\xa3\xe7\xba\xbe\xe6\xbd\x9c\xe9\x8a\xae\xe6\xb4\x9b\xe9\xa1\xbb\xe7\xbd\x98\xe9\x94\x80\xe7\x98\xaa\xe6\xb1\x9e\xe5\x85\xae\xe5\xb1\x89r\xe6\x9e\x97\xe5\x8e\x95\xe8\xb4\xa8\xe6\x8e\xa2\xe5\x88\x92\xe7\x8b\xb8\xe6\xae\x9a\xe5\x96\x84\xe7\x85\x8a\xe7\x83\xb9\xe3\x80\x92\xe9\x94\x88\xe9\x80\xaf\xe5\xae\xb8\xe8\xbe\x8d\xe6\xb3\xb1\xe6\x9f\x9a\xe8\xa2\x8d\xe8\xbf\x9c\xe8\xb9\x8b\xe5\xb6\x99\xe7\xbb\x9d\xe5\xb3\xa5\xe5\xa8\xa5\xe7\xbc\x8d\xe9\x9b\x80\xe5\xbe\xb5\xe8\xae\xa4\xe9\x95\xb1\xe8\xb0\xb7=\xe8\xb4\xa9\xe5\x8b\x89\xe6\x92\xa9\xe9\x84\xaf\xe6\x96\x90\xe6\xb4\x8b\xe9\x9d\x9e\xe7\xa5\x9a\xe6\xb3\xbe\xe8\xaf\x92\xe9\xa5\xbf\xe6\x92\xac\xe5\xa8\x81\xe6\x99\xb7\xe6\x90\xad\xe8\x8a\x8d\xe9\x94\xa5\xe7\xac\xba\xe8\x93\xa6\xe5\x80\x99\xe7\x90\x8a\xe6\xa1\xa3\xe7\xa4\x81\xe6\xb2\xbc\xe5\x8d\xb5\xe8\x8d\xa0\xe5\xbf\x91\xe6\x9c\x9d\xe5\x87\xb9\xe7\x91\x9e\xe5\xa4\xb4\xe4\xbb\xaa\xe5\xbc\xa7\xe5\xad\xb5\xe7\x95\x8f\xe9\x93\x86\xe7\xaa\x81\xe8\xa1\xb2\xe8\xbd\xa6\xe6\xb5\xa9\xe6\xb0\x94\xe8\x8c\x82\xe6\x82\x96\xe5\x8e\xa2\xe6\x9e\x95\xe9\x85\x9d\xe6\x88\xb4\xe6\xb9\xbe\xe9\x82\xb9\xe9\xa3\x9a\xe6\x94\x98\xe9\x94\x82\xe5\x86\x99\xe5\xae\xb5\xe7\xbf\x81\xe5\xb2\xb7\xe6\x97\xa0\xe5\x96\x9c\xe4\xb8\x88\xe6\x8c\x91\xe5\x97\x9f\xe7\xbb\x9b\xe6\xae\x89\xe8\xae\xae\xe6\xa7\xbd\xe5\x85\xb7\xe9\x86\x87\xe6\xb7\x9e\xe7\xac\x83\xe9\x83\xb4\xe9\x98\x85\xe9\xa5\xbc\xe5\xba\x95\xe5\xa3\x95\xe7\xa0\x9a\xe5\xbc\x88\xe8\xaf\xa2\xe7\xbc\x95\xe5\xba\xb9\xe7\xbf\x9f\xe9\x9b\xb6\xe7\xad\xb7\xe6\x9a\xa8\xe8\x88\x9f\xe9\x97\xba\xe7\x94\xaf\xe6\x92\x9e\xe9\xba\x82\xe8\x8c\x8c\xe8\x94\xbc\xe5\xbe\x88\xe7\x8f\xb2\xe6\x8d\x95\xe6\xa3\xa0\xe8\xa7\x92\xe9\x98\x89\xe5\xaa\x9b\xe5\xa8\xb2\xe8\xaf\xbd\xe5\x89\xbf\xe5\xb0\x89\xe7\x88\xb5\xe7\x9d\xac\xe9\x9f\xa9\xe8\xaf\xb0\xe5\x8c\xa3\xe5\x8d\xb1\xe7\xb3\x8d\xe9\x95\xaf\xe7\xab\x8b\xe6\xb5\x8f\xe9\x98\xb3\xe5\xb0\x91\xe7\x9b\x86\xe8\x88\x94\xe6\x93\x98\xe5\x8c\xaa\xe7\x94\xb3\xe5\xb0\xac\xe9\x93\xa3\xe6\x97\xaf\xe6\x8a\x96\xe8\xb5\x98\xe7\x93\xaf\xe5\xb1\x85\xcb\x87\xe5\x93\xae\xe6\xb8\xb8\xe9\x94\xad\xe8\x8c\x8f\xe6\xad\x8c\xe5\x9d\x8f\xe7\x94\x9a\xe7\xa7\x92\xe8\x88\x9e\xe6\xb2\x99\xe4\xbb\x97\xe5\x8a\xb2\xe6\xbd\xba\xe9\x98\xbf\xe7\x87\xa7\xe9\x83\xad\xe5\x97\x96\xe9\x9c\x8f\xe5\xbf\xa0\xe6\x9d\x90\xe5\xa5\x82\xe8\x80\x90\xe8\xb7\xba\xe7\xa0\x80\xe8\xbe\x93\xe5\xb2\x96\xe5\xaa\xb3\xe6\xb0\x9f\xe6\x9e\x81\xe6\x91\x86\xe7\x81\xbf\xe4\xbb\x8a\xe6\x89\x94\xe8\x85\xbb\xe6\x9e\x9d\xe5\xa5\x8e\xe8\x8d\xaf\xe7\x86\x84\xe5\x90\xa8\xe8\xaf\x9dq\xe9\xa2\x9d\xe6\x85\x91\xe5\x98\x8c\xe5\x8d\x8f\xe5\x96\x80\xe5\xa3\xb3\xe5\x9f\xad\xe8\xa7\x86\xe8\x91\x97\xe6\x96\xbc\xe6\x84\xa7\xe9\x99\xb2\xe7\xbf\x8c\xe5\xb3\x81\xe9\xa2\x85\xe4\xbd\x9b\xe8\x85\xb9\xe8\x81\x8b\xe4\xbe\xaf\xe5\x92\x8e\xe5\x8f\x9f\xe7\xa7\x80\xe9\xa2\x87\xe5\xad\x98\xe8\xbe\x83\xe7\xbd\xaa\xe5\x93\x84\xe5\xb2\x97\xe6\x89\xab\xe6\xa0\x8f\xe9\x92\xbe\xe7\xbe\x8c\xe5\xb7\xb1\xe7\x92\xa8\xe6\x9e\xad\xe9\x9c\x89\xe7\x85\x8c\xe6\xb6\xb8\xe8\xa1\xbf\xe9\x94\xae\xe9\x95\x9d\xe7\x9b\x8a\xe5\xb2\xa2\xe5\xa5\x8f\xe8\xbf\x9e\xe5\xa4\xaf\xe7\x9d\xbf\xe5\x86\xa5\xe5\x9d\x87\xe7\xb3\x96\xe7\x8b\x9e\xe8\xb9\x8a\xe7\xa8\xbb\xe7\x88\xb8\xe5\x88\xbf\xe8\x83\xa5\xe7\x85\x9c\xe4\xb8\xbd\xe8\x82\xbf\xe7\x92\x83\xe6\x8e\xb8\xe8\xb7\x9a\xe7\x81\xbe\xe5\x9e\x82\xe6\xa8\xbe\xe6\xbf\x91\xe4\xb9\x8e\xe8\x8e\xb2\xe7\xaa\x84\xe7\x8a\xb9\xe6\x92\xae\xe6\x88\x98\xe9\xa6\x84\xe8\xbd\xaf\xe7\xbb\x9c\xe6\x98\xbe\xe9\xb8\xa2\xe8\x83\xb8\xe5\xae\xbe\xe5\xa6\xb2\xe6\x81\x95\xe5\x9f\x94\xe8\x9d\x8c\xe4\xbb\xbd\xe9\x81\x87\xe5\xb7\xa7\xe7\x9e\x9f\xe7\xb2\x92\xe6\x81\xb0\xe5\x89\xa5\xe6\xa1\xa1\xe5\x8d\x9a\xe8\xae\xaf\xe5\x87\xaf\xe5\xa0\x87\xe9\x98\xb6\xe6\xbb\xa4\xe5\x8d\x96\xe6\x96\x8c\xe9\xaa\x9a\xe5\xbd\xac\xe5\x85\x91\xe7\xa3\xba\xe6\xa8\xb1\xe8\x88\xb7\xe4\xb8\xa4\xe5\xa8\xb1\xe7\xa6\x8f\xe4\xbb\x83\xe5\xb7\xae\xe6\x89\xbe\xe6\xa1\x81\xc3\xb7\xe5\x87\x80\xe6\x8a\x8a\xe9\x98\xb4\xe6\xb1\xa1\xe6\x88\xac\xe9\x9b\xb7\xe7\xa2\x93\xe8\x95\xb2\xe6\xa5\x9a\xe7\xbd\xa1\xe7\x84\x96\xe6\x8a\xbd\xe5\xa6\xab\xe5\x92\x92\xe4\xbb\x91\xe9\x97\xb1\xe5\xb0\xbd\xe9\x82\x91\xe8\x8f\x81\xe7\x88\xb1\xe8\xb4\xb7\xe6\xb2\xa5\xe9\x9e\x91\xe7\x89\xa1\xe5\x97\x89\xe5\xb4\xb4\xe9\xaa\xa4\xe5\xa1\x8c\xe5\x97\xa6\xe8\xae\xa2\xe6\x8b\xae\xe6\xbb\x93\xe6\x8d\xa1\xe9\x94\xbb\xe6\xac\xa1\xe5\x9d\xaa\xe6\x9d\xa9\xe8\x87\x83\xe7\xae\xac\xe8\x9e\x8d\xe7\x8f\x82\xe9\xb9\x97\xe5\xae\x97\xe6\x9e\x9a\xe9\x99\x8d\xe9\xb8\xac\xe5\xa6\xaf\xe9\x98\x84\xe5\xa0\xb0\xe7\x9b\x90\xe6\xaf\x85\xe5\xbf\x85\xe6\x9d\xa8\xe5\xb4\x83\xe4\xbf\xba\xe7\x94\xac\xe7\x8a\xb6\xe8\x8e\x98\xe8\xb4\xa7\xe8\x80\xb8\xe8\x8f\xb1\xe8\x85\xbc\xe9\x93\xb8\xe5\x94\x8f\xe7\x97\xa4\xe5\xad\x9a\xe6\xbe\xb3\xe6\x87\x92\xe6\xba\x85\xe7\xbf\x98\xe7\x96\x99\xe6\x9d\xb7\xe6\xb7\xbc\xe7\xbc\x99\xe9\xaa\xb0\xe5\x96\x8a\xe6\x82\x89\xe7\xa0\xbb\xe5\x9d\xb7\xe8\x89\x87\xe8\xb5\x81\xe7\x95\x8c\xe8\xb0\xa4\xe7\xba\xa3\xe5\xae\xb4\xe6\x99\x83\xe8\x8c\xb9\xe5\xbd\x92\xe9\xa5\xad\xe6\xa2\xa2\xe9\x93\xa1\xe8\xa1\x97\xe6\x8a\x84\xe8\x82\xbc\xe9\xac\x9f\xe8\x8b\xaf\xe9\xa2\x82\xe6\x92\xb7\xe6\x88\x88\xe7\x82\x92\xe5\x92\x86\xe8\x8c\xad\xe7\x98\x99\xe8\xb4\x9f\xe4\xbb\xb0\xe5\xae\xa2\xe7\x90\x89\xe9\x93\xa2\xe5\xb0\x81\xe5\x8d\x91\xe7\x8f\xa5\xe6\xa4\xbf\xe9\x95\xa7\xe7\xaa\xa8\xe9\xac\xb2\xe5\xaf\xbf\xe5\xbe\xa1\xe8\xa2\xa4\xe9\x93\x83\xe8\x90\x8e\xe7\xa0\x96\xe9\xa4\xae\xe8\x84\x92\xe8\xa3\xb3\xe8\x82\xaa\xe5\xad\x95\xe5\xab\xa3\xe9\xa6\x97\xe5\xb5\x87\xe6\x81\xb3\xe6\xb0\xaf\xe6\xb1\x9f\xe7\x9f\xb3\xe8\xa4\xb6\xe5\x86\xa2\xe7\xa5\xb8\xe9\x98\xbb\xe7\x8b\x88\xe7\xbe\x9e\xe9\x93\xb6\xe9\x9d\xb3\xe9\x80\x8f\xe5\x92\xb3\xe5\x8f\xbc\xe6\x95\xb7\xe8\x8a\xb7\xe5\x95\xa5\xe5\xae\x83\xe7\x93\xa4\xe5\x85\xb0\xe7\x97\x98\xe6\x87\x8a\xe9\x80\x91\xe8\x82\x8c\xe5\xbe\x80\xe6\x8d\xba\xe5\x9d\x8a\xe7\x94\xa9\xe5\x91\xbb\xe3\x80\x83\xe6\xb2\xa6\xe5\xbf\x98\xe8\x86\xbb\xe7\xa5\x9f\xe8\x8f\x85\xe5\x89\xa7\xe5\xb4\x86\xe6\x99\xba\xe5\x9d\xaf\xe8\x87\xa7\xe9\x9c\x8d\xe5\xa2\x85\xe6\x94\xbb\xe7\x9c\xaf\xe5\x80\x98\xe6\x8b\xa2\xe9\xaa\xa0\xe9\x93\x90\xe5\xba\xad\xe5\xb2\x99\xe7\x93\xa0\xe2\x80\xb2\xe7\xbc\xba\xe6\xb3\xa5\xe8\xbf\xa2\xe6\x8d\xb6?\xef\xbc\x9f\xe9\x83\x8f\xe5\x96\x99\xe6\x8e\xb7\xe6\xb2\x8c\xe7\xba\xaf\xe7\xa7\x98\xe7\xa7\x8d\xe5\x90\xac\xe7\xbb\x98\xe5\x9b\xba\xe8\x9e\xa8\xe5\x9b\xa2\xe9\xa6\x99\xe7\x9b\x97\xe5\xa6\x92\xe5\x9f\x9a\xe8\x93\x9d\xe6\x8b\x96\xe6\x97\xb1\xe8\x8d\x9e\xe9\x93\x80\xe8\xa1\x80\xe9\x81\x8f\xe6\xb1\xb2\xe8\xbe\xb0\xe5\x8f\xa9\xe6\x8b\xbd\xe5\xb9\x85\xe7\xa1\xac\xe6\x83\xb6\xe6\xa1\x80\xe6\xbc\xa0\xe6\x8e\xaa\xe6\xb3\xbc\xe5\x94\x91\xe9\xbd\x90\xe8\x82\xbe\xe5\xbf\xb5\xe9\x85\xb1\xe8\x99\x9a\xe5\xb1\x81\xe8\x80\xb6\xe6\x97\x97\xe7\xa0\xa6\xe9\x97\xb5\xe5\xa9\x89\xe9\xa6\x86\xe6\x8b\xad\xe7\xbb\x85\xe9\x9f\xa7\xe5\xbf\x8f\xe7\xaa\x9d\xe9\x86\x8b\xe8\x91\xba\xe9\xa1\xbe\xe8\xbe\x9e\xe5\x80\x9c\xe5\xa0\x86\xe8\xbe\x8b\xe9\x80\x86\xe7\x8e\x9f\xe8\xb4\xb1\xe7\x96\xbe\xe8\x91\xa3\xe6\x83\x98\xe5\x80\x8c\xe9\x94\x95\xe6\xb7\x98\xe5\x98\x80\xe8\x8e\xbd\xe4\xbf\xad\xe7\xac\x8f\xe7\xbb\x91\xe9\xb2\xb7\xe6\x9d\x88\xe6\x8b\xa9\xe8\x9f\x80\xe7\xb2\xa5\xe5\x97\xaf\xe9\xa9\xb0\xe9\x80\xbe\xe6\xa1\x88\xe8\xb0\xaa\xe8\xa4\x93\xe8\x83\xab\xe5\x93\xa9\xe6\x98\x95\xe9\xa2\x9a\xe9\xb2\xa2\xe7\xbb\xa0\xe8\xba\xba\xe9\xb9\x84\xe5\xb4\x82\xe5\x84\x92\xe4\xbf\xa8\xe4\xb8\x9d\xe5\xb0\x95\xe6\xb3\x8c\xe5\x95\x8a\xe8\x90\xb8\xe5\xbd\xb0\xe5\xb9\xba\xe5\x90\x9f\xe9\xaa\x84\xe8\x8b\xa3\xe5\xbc\xa6\xe8\x84\x8a\xe7\x91\xb0\xe3\x80\x88\xe8\xaf\x9b\xe9\x95\x81\xe6\x9e\x90\xe9\x97\xaa\xe5\x89\xaa\xe4\xbe\xa7\xe5\x93\x9f\xe6\xa1\x86\xe8\x9e\x83\xe5\xae\x88\xe5\xac\x97\xe7\x87\x95\xe7\x8b\xad\xe9\x93\x88\xe7\xbc\xae\xe6\xa6\x82\xe8\xbf\xb3\xe7\x97\xa7\xe9\xb2\xb2\xe4\xbf\xaf\xe5\x94\xae\xe7\xac\xbc\xe7\x97\xa3\xe6\x89\x89\xe6\x8c\x96\xe6\xbb\xa1\xe5\x92\x8b\xe6\x8f\xb4\xe9\x82\xb1\xe6\x89\x87\xe6\xad\xaa\xe4\xbe\xbf\xe7\x8e\x91\xe7\xbb\xa6\xe5\xb3\xa1\xe8\x9b\x87\xe5\x8f\xa8\xe3\x80\x96\xe6\xb3\xbd\xe8\x83\x83\xe6\x96\x93\xe5\x96\x8b\xe6\x80\x82\xe5\x9d\x9f\xe7\x8c\xaa\xe8\xaf\xa5\xe8\x9a\xac\xe7\x82\x95\xe5\xbc\xa5\xe8\xb5\x9e\xe6\xa3\xa3\xe6\x99\x94\xe5\xa8\xa0\xe6\x8c\xb2\xe7\x8b\xa1\xe5\x88\x9b\xe7\x96\x96\xe9\x93\x95\xe9\x95\xad\xe7\xa8\xb7\xe6\x8c\xab\xe5\xbc\xad\xe5\x95\xbe\xe7\xbf\x94\xe7\xb2\x89\xe5\xb1\xa5\xe8\x8b\x98\xe5\x93\xa6\xe6\xa5\xbc\xe7\xa7\x95\xe9\x93\x82\xe5\x9c\x9f\xe9\x94\xa3\xe7\x98\x9f\xe6\x8c\xa3\xe6\xa0\x89\xe4\xb9\xa0\xe4\xba\xab\xe6\xa1\xa2\xe8\xa2\x85\xe7\xa3\xa8\xe6\xa1\x82\xe8\xb0\xa6\xe5\xbb\xb6\xe5\x9d\x9a\xe8\x94\x9a\xe5\x99\x97\xe7\xbd\xb2\xe8\xb0\x9f\xe7\x8c\xac\xe9\x92\x8e\xe6\x81\x90\xe5\xac\x89\xe9\x9b\x92\xe5\x80\xa6\xe8\xa1\x85\xe4\xba\x8f\xe7\x92\xa9\xe7\x9d\xb9\xe5\x88\xbb\xe6\xae\xbf\xe7\x8e\x8b\xe7\xae\x97\xe9\x9b\x95\xe9\xba\xbb\xe4\xb8\x98\xe6\x9f\xaf\xe9\xaa\x86\xe4\xb8\xb8\xe5\xa1\x8d\xe8\xb0\x9a\xe6\xb7\xbb\xe9\xb2\x88\xe5\x9e\x93\xe6\xa1\x8e\xe8\x9a\xaf\xe8\x8a\xa5\xe4\xba\x88\xe9\xa3\x95\xe9\x95\xa6\xe8\xb0\x8c\xe7\xaa\x97\xe9\x86\x9a\xe8\x8f\x80\xe4\xba\xae\xe6\x90\xaa\xe8\x8e\xba\xe8\x92\xbf\xe7\xbe\x81\xe8\xb6\xb3J\xe7\x9c\x9f\xe8\xbd\xb6\xe6\x82\xac\xe8\xa1\xb7\xe9\x9d\x9b\xe7\xbf\x8a\xe6\x8e\xa9\xe5\x93\x92\xe7\x82\x85\xe6\x8e\x90\xe5\x86\xbc\xe5\xa6\xael\xe8\xb0\x90\xe7\xa8\x9a\xe8\x8d\x86\xe6\x93\x92\xe7\x8a\xaf\xe9\x99\xb5\xe8\x99\x8f\xe6\xb5\x93\xe5\xb4\xbd\xe5\x88\x8d\xe9\x99\x8c\xe5\x82\xbb\xe5\xad\x9c\xe5\x8d\x83\xe9\x9d\x96\xe6\xbc\x94\xe7\x9f\x9c\xe9\x92\x95\xe7\x85\xbd\xe6\x9d\xb0\xe9\x85\x97\xe6\xb8\x97\xe4\xbc\x9e\xe6\xa0\x8b\xe4\xbf\x97\xe6\xb3\xab\xe6\x88\x8d\xe7\xbd\x95\xe6\xb2\xbe\xe7\x96\xbd\xe7\x81\x8f\xe7\x85\xa6\xe8\x8a\xac\xe7\xa3\xb4\xe5\x8f\xb1\xe9\x98\xb1\xe6\xa6\x89\xe6\xb9\x83\xe8\x9c\x80\xe5\x8f\x89\xe9\x86\x92\xe5\xbd\xaa\xe7\xa7\x9f\xe9\x83\xa1\xe7\xaf\xb7\xe5\xb1\x8e\xe8\x89\xaf\xe5\x9e\xa2\xe9\x9a\x97\xe5\xbc\xb1\xe9\x99\xa8\xe5\xb3\xaa\xe7\xa0\xb7\xe6\x8e\xb4\xe9\xa2\x81\xe8\x83\x8e\xe9\x9b\xaf\xe7\xbb\xb5\xe8\xb4\xac\xe6\xb2\x90\xe6\x92\xb5\xe9\x9a\x98\xe7\xaf\x99\xe6\x9a\x96\xe6\x9b\xb9\xe9\x99\xa1\xe6\xa0\x93\xe5\xa1\xab\xe8\x87\xbc\xe5\xbd\xa6\xe7\x93\xb6\xe7\x90\xaa\xe6\xbd\xbc\xe5\x93\xaa\xe9\xb8\xa1\xe6\x91\xa9\xe5\x95\xa6\xe4\xbf\x9f\xe9\x94\x8b\xe5\x9f\x9f\xe8\x80\xbb\xe8\x94\xab\xe7\x96\xaf\xe7\xba\xb9\xe6\x92\x87\xe6\xaf\x92\xe7\xbb\xb6\xe7\x97\x9b\xe9\x85\xaf\xe5\xbf\x8d\xe7\x88\xaa\xe8\xb5\xb3\xe6\xad\x86\xe5\x98\xb9\xe8\xbe\x95\xe7\x83\x88\xe5\x86\x8c\xe6\x9c\xb4\xe9\x92\xb1\xe5\x90\xae\xe6\xaf\xaf\xe7\x99\x9c\xe5\xa8\x83\xe8\xb0\x80\xe9\x82\xb5\xe5\x8e\xae\xe7\x82\xbd\xe7\x92\x9e\xe9\x82\x83\xe4\xb8\x90\xe8\xbf\xbd\xe8\xaf\x8d\xe7\x93\x92\xe5\xbf\x86\xe8\xbd\xa7\xe8\x8a\xab\xe8\xb0\xaf\xe5\x96\xb7\xe5\xbc\x9f\xe5\x8d\x8a\xe5\x86\x95\xe8\xa3\x99\xe6\x8e\x96\xe5\xa2\x89\xe7\xbb\xae\xe5\xaf\x9d\xe8\x8b\x94\xe5\x8a\xbf\xe9\xa1\xb7\xe8\xa4\xa5\xe5\x88\x87\xe8\xa1\xae\xe5\x90\x9b\xe4\xbd\xb3\xe5\xab\x92\xe8\x9a\xa9\xe9\x9c\x9e\xe4\xbd\x9a\xe6\xb4\x99\xe9\x80\x8a\xe9\x95\x96\xe6\x9a\xb9\xe5\x94\x9b&\xe6\xae\x92\xe9\xa1\xb6\xe7\xa2\x97\xe7\x8d\x97\xe8\xbd\xad\xe9\x93\xba\xe8\x9b\x8a\xe5\xba\x9f\xe6\x81\xb9\xe6\xb1\xa8\xe5\xb4\xa9\xe7\x8f\x8d\xe9\x82\xa3\xe6\x9d\xb5\xe6\x9b\xb2\xe7\xba\xba\xe5\xa4\x8f\xe8\x96\xb0\xe5\x82\x80\xe9\x97\xb3\xe6\xb7\xac\xe5\xa7\x98\xe8\x88\x80\xe6\x8b\xa7\xe5\x8d\xb7\xe6\xa5\x82\xe6\x81\x8d\xe8\xae\xaa\xe5\x8e\xa9\xe5\xaf\xae\xe7\xaf\xaa\xe8\xb5\x93\xe4\xb9\x98\xe7\x81\xad\xe7\x9b\x85\xe9\x9e\xa3\xe6\xb2\x9f\xe6\x85\x8e\xe6\x8c\x82\xe9\xa5\xba\xe9\xbc\xbe\xe6\x9d\xb3\xe6\xa0\x91\xe7\xbc\xa8\xe4\xb8\x9b\xe7\xb5\xae\xe5\xa8\x8c\xe8\x87\xbb\xe5\x97\xb3\xe7\xaf\xa1\xe4\xbe\xa9\xe8\xbf\xb0\xe8\xa1\xb0\xe7\x9f\x9b\xe5\x9c\x88\xe8\x9a\x9c\xe5\x8c\x95\xe7\xad\xb9\xe5\x8c\xbf\xe6\xbf\x9e\xe6\x99\xa8\xe5\x8f\xb6\xe9\xaa\x8b\xe9\x83\x9d\xe6\x8c\x9a\xe8\x9a\xb4\xe6\xbb\x9e\xe5\xa2\x9e\xe4\xbe\x8d\xe6\x8f\x8f\xe7\x93\xa3\xe5\x90\x96\xe5\xab\xa6\xe8\x9f\x92\xe5\x8c\xbe\xe5\x9c\xa3\xe8\xb5\x8c\xe6\xaf\xa1\xe7\x99\x9e\xe6\x81\xba\xe7\x99\xbe\xe6\x9b\xb3\xe9\x9c\x80\xe7\xaf\x93\xe8\x82\xae\xe5\xba\x96\xe5\xb8\x8f\xe5\x8d\xbf\xe9\xa9\xbf\xe9\x81\x97\xe8\xb9\xac\xe9\xac\x93\xe9\xaa\xa1\xe6\xad\x89\xe8\x8a\x8e\xe8\x83\xb3\xe5\xb1\x90\xe7\xa6\xbd\xe7\x83\xa6\xe6\x99\x8c\xe5\xaf\x84\xe5\xaa\xbe\xe7\x8b\x84\xe7\xbf\xa1\xe8\x8b\x92\xe8\x88\xb9\xe5\xbb\x89\xe7\xbb\x88\xe7\x97\x9e\xe6\xae\x87\xe3\x80\x85\xe7\x95\xa6\xe9\xa5\xb6\xe6\x94\xb9\xe6\x8b\x86\xe6\x82\xbb\xe8\x90\x84\xef\xbf\xa1\xe7\x93\xbf\xe4\xb9\x83\xe8\xa8\xbe\xe6\xa1\x85\xe5\x8c\xae\xe6\xba\xa7\xe6\x8b\xa5\xe7\xba\xb1\xe9\x93\x8d\xe9\xaa\x97\xe8\x95\x83\xe9\xbe\x8b\xe7\xbc\xac\xe7\x88\xb6\xe4\xbd\x90\xe7\x96\x9a\xe6\xa0\x8e\xe9\x86\x8d\xe6\x8e\xb3\xe8\x93\x84x\xe6\x83\x86\xe9\xa2\x9c\xe9\xb2\x86\xe6\xa6\x86\xe3\x80\x94\xe7\x8c\x8e\xe6\x95\x8c\xe6\x9a\xb4\xe8\xb0\xa5\xe9\xb2\xab\xe8\xb4\xbe\xe7\xbd\x97\xe7\x8e\xbb\xe7\xbc\x84\xe6\x89\xa6\xe8\x8a\xaa\xe7\x99\xa3\xe8\x90\xbd\xe5\xbe\x92\xe8\x87\xbe\xe6\x81\xbf\xe7\x8c\xa9\xe6\x89\x98\xe9\x82\xb4\xe8\x82\x84\xe7\x89\xb5\xe6\x98\xa5\xe9\x99\x9b\xe8\x80\x80\xe5\x88\x8a\xe6\x8b\x93\xe8\x93\x93\xe9\x82\xb3\xe5\xa0\x95\xe5\xaf\x87\xe6\x9e\x89\xe6\xb7\x8c\xe5\x95\xa1\xe6\xb9\x84\xe5\x85\xbd\xe9\x85\xb7\xe8\x90\xbc\xe7\xa2\x9a\xe6\xbf\xa0\xe8\x90\xa4\xe5\xa4\xb9\xe6\x97\xac\xe6\x88\xae\xe6\xa2\xad\xe7\x90\xa5\xe6\xa4\xad\xe6\x98\x94\xe5\x8b\xba\xe8\x9c\x8a\xe7\xbb\x90\xe6\x99\x9a\xe5\xad\xba\xe5\x83\xb5\xe5\xae\xa3\xe6\x91\x84\xe5\x86\xbd\xe6\x97\xa8\xe8\x90\x8c\xe5\xbf\x99\xe8\x9a\xa4\xe7\x9c\x89\xe5\x99\xbc\xe8\x9f\x91\xe4\xbb\x98\xe5\xa5\x91\xe7\x93\x9c\xe6\x82\xbc\xe9\xa2\xa1\xe5\xa3\x81\xe6\x9b\xbe\xe7\xaa\x95\xe9\xa2\xa2\xe6\xbe\x8e\xe4\xbb\xbf\xe4\xbf\x91\xe6\xb5\x91\xe5\xb5\x8c\xe6\xb5\xa3\xe4\xb9\x8d\xe7\xa2\x8c\xe8\xa4\xaa\xe4\xb9\xb1\xe8\x94\x9f\xe9\x9a\x99\xe7\x8e\xa9\xe5\x89\x90\xe8\x91\xab\xe7\xae\xab\xe7\xba\xb2\xe5\x9b\xb4\xe4\xbc\x90\xe5\x86\xb3\xe4\xbc\x99\xe6\xbc\xa9\xe7\x91\x9f\xe5\x88\x91\xe8\x82\x93\xe9\x95\xb3\xe7\xbc\x93\xe8\xb9\xad\xe6\xb0\xa8\xe7\x9a\x93\xe5\x85\xb8\xe7\x95\xb2\xe5\x9d\x8d\xe9\x93\x91\xe6\xaa\x90\xe5\xa1\x91\xe6\xb4\x9e\xe5\x80\xac\xe5\x82\xa8\xe8\x83\xb4\xe6\xb7\xb3\xe6\x88\xbe\xe5\x90\x90\xe7\x81\xbc\xe6\x83\xba\xe5\xa6\x99\xe6\xaf\x95\xe7\x8f\x90\xe7\xbc\x88\xe8\x99\xb1\xe7\x9b\x96\xe7\xbe\xb0\xe9\xb8\xbf\xe7\xa3\x85\xe8\xb0\x93\xe9\xab\x85\xe5\xa8\xb4\xe8\x8b\xb4\xe5\x94\xb7\xe8\x9a\xa3\xe9\x9c\xb9\xe6\x8a\xa8\xe8\xb4\xa4\xe5\x94\xa0\xe7\x8a\xac\xe8\xaa\x93\xe9\x80\x8d\xe5\xba\xa0\xe9\x80\xbc\xe9\xba\x93\xe7\xb1\xbc\xe9\x87\x89\xe5\x91\x9c\xe7\xa2\xa7\xe7\xa7\xa7\xe6\xb0\xa9\xe6\x91\x94\xe9\x9c\x84\xe7\xa9\xb8\xe7\xba\xa8\xe8\xbe\x9f\xe5\xa6\x88\xe6\x98\xa0\xe5\xae\x8c\xe7\x89\x9b\xe7\xbc\xb4\xe5\x97\xb7\xe7\x82\x8a\xe6\x81\xa9\xe8\x8d\x94\xe8\x8c\x86\xe6\x8e\x89\xe7\xb4\x8a\xe6\x85\x8c\xe8\x8e\x93\xe7\xbe\x9f\xe9\x98\x99\xe8\x90\x81\xe7\xa3\x90\xe5\x8f\xa6\xe8\x95\xb9\xe8\xbe\xb1\xe9\xb3\x90\xe6\xb9\xae\xe5\x90\xa1\xe5\x90\xa9\xe5\x94\x90\xe7\x9d\xa6\xe5\x9e\xa0\xe8\x88\x92\xe5\x9c\x9c\xe5\x86\x97\xe7\x9e\xbf\xe6\xba\xba\xe8\x8a\xbe\xe5\x9b\xb1\xe5\x8c\xa0\xe5\x83\xb3\xe6\xb1\x90\xe8\x8f\xa9\xe9\xa5\xac\xe6\xbc\x93\xe9\xbb\x91\xe9\x9c\xb0\xe6\xb5\xb8\xe6\xbf\xa1\xe7\xaa\xa5\xe6\xaf\x82\xe8\x92\xa1\xe5\x85\xa2\xe9\xa9\xbb\xe9\xb9\x89\xe8\x8a\xae\xe8\xaf\x99\xe8\xbf\xab\xe9\x9b\xb3\xe5\x8e\x82\xe5\xbf\x90\xe8\x87\x86\xe7\x8c\xb4\xe9\xb8\xa3\xe8\x9a\xaa\xe6\xa0\x88\xe7\xae\x95\xe7\xbe\xa1\xe6\xb8\x90\xe8\x8e\x86\xe6\x8d\x8d\xe7\x9c\x88\xe5\x93\x93\xe8\xb6\xb4\xe8\xb9\xbc\xe5\x9f\x95\xe5\x9a\xa3\xe9\xaa\x9b\xe5\xae\x8f\xe6\xb7\x84\xe6\x96\x91\xe5\x99\x9c\xe4\xb8\xa5\xe7\x91\x9b\xe5\x9e\x83\xe6\xa4\x8e\xe8\xaf\xb1\xe5\x8e\x8b\xe5\xba\xbe\xe7\xbb\x9e\xe7\x84\x98\xe5\xbb\xbf\xe6\x8a\xa1\xe8\xbf\x84\xe6\xa3\x98\xe5\xa4\xab\xe7\xba\xac\xe9\x94\xb9\xe7\x9c\xa8\xe7\x9e\x8c\xe4\xbe\xa0\xe8\x84\x90\xe7\xab\x9e\xe7\x80\x91\xe5\xad\xb3\xe9\xaa\xa7\xe9\x81\x81\xe5\xa7\x9c\xe9\xa2\xa6\xe8\x8d\xaa\xe6\xbb\x9a\xe8\x90\xa6\xe4\xbc\xaa\xe9\x80\xb8\xe7\xb2\xb3\xe7\x88\xac\xe9\x94\x81\xe7\x9f\xa3\xe5\xbd\xb9\xe8\xb6\xa3\xe6\xb4\x92\xe9\xa2\x94\xe8\xaf\x8f\xe9\x80\x90\xe5\xa5\xb8\xe7\x94\xad\xe6\x83\xa0\xe6\x94\x80\xe8\xb9\x84\xe6\xb3\x9b\xe5\xb0\xbc\xe6\x8b\xbc\xe9\x98\xae\xe9\xb9\xb0\xe4\xba\x9a\xe9\xa2\x88\xe6\x83\x91\xe5\x8b\x92\xe3\x80\x89\xe9\x99\x85\xe8\x82\x9b\xe7\x88\xb7\xe5\x88\x9a\xe9\x92\xa8\xe4\xb8\xb0\xe5\x85\xbb\xe5\x86\xb6\xe9\xb2\xbd\xe8\xbe\x89\xe8\x94\xbb\xe7\x94\xbb\xe8\xa6\x86\xe7\x9a\xb4\xe5\xa6\x8a\xe9\xba\xa6\xe8\xbf\x94\xe9\x86\x89\xe7\x9a\x82\xe6\x93\x80\xe3\x80\x97\xe9\x85\xb6\xe5\x87\x91\xe7\xb2\xb9\xe6\x82\x9f\xe8\xaf\x80\xe7\xa1\x96\xe6\xb8\xaf\xe5\x8d\x9cz\xe6\x9d\x80\xe6\xb6\x95\xc2\xb1\xe8\x88\x8d\xe9\x93\xa0\xe6\x8a\xb5\xe5\xbc\x9b\xe6\xae\xb5\xe6\x95\x9d\xe9\x95\x90\xe5\xa5\xa0\xe6\x8b\x82\xe8\xbd\xb4\xe8\xb7\x9b\xe8\xa2\xb1et\xe6\xb2\x89\xe8\x8f\x87\xe4\xbf\x8e\xe8\x96\xaa\xe5\xb3\xa6\xe7\xa7\xad\xe8\x9f\xb9\xe5\x8e\x86\xe7\x9b\x9f\xe8\x8f\xa0\xe5\xaf\xa1\xe6\xb6\xb2\xe8\x82\xa2\xe5\x96\xbb\xe6\x9f\x93\xe8\xa3\xb1\xe6\x82\xb1\xe6\x8a\xb1\xe6\xb0\x99\xe8\xb5\xa4\xe6\x8d\x85\xe7\x8c\x9b\xe8\xb7\x91\xe6\xb0\xae\xe8\xb0\xa3\xe4\xbb\x81\xe5\xb0\xba\xe8\xbe\x8a\xe7\xaa\x8d\xe7\x83\x99\xe8\xa1\x8d\xe6\x9e\xb6\xe6\x93\xa6\xe5\x80\x8f\xe7\x92\x90\xe7\x91\x81\xe5\xb8\x81\xe6\xa5\x9e\xe8\x83\x96\xe5\xa4\x94\xe8\xb6\xb8\xe9\x82\x9b\xe6\x83\xb4\xe9\xa5\x95\xe8\x99\x94\xe8\x9d\x8e\xc2\xa7\xe5\x93\x89\xe8\xb4\x9d\xe5\xae\xbd\xe8\xbe\xab\xe7\x82\xae\xe6\x89\xa9\xe9\xa5\xb2\xe7\xb1\xbd\xe9\xad\x8f\xe8\x8f\x9f\xe9\x94\xb0\xe4\xbc\x8d\xe7\x8c\x9d\xe6\x9c\xab\xe7\x90\xb3\xe5\x93\x9a\xe8\x9b\x8e\xe9\x82\x82\xe5\x91\x80\xe5\xa7\xbf\xe9\x84\x9e\xe5\x8d\xb4\xe6\xad\xa7\xe4\xbb\x99\xe6\x81\xb8\xe6\xa4\x90\xe6\xa3\xae\xe7\x89\x92\xe5\xaf\xa4\xe8\xa2\x92\xe5\xa9\x86\xe8\x99\xa2\xe9\x9b\x85\xe9\x92\x89\xe6\x9c\xb5\xe8\xb4\xbc\xe6\xac\xb2\xe8\x8b\x9e\xe5\xaf\xb0\xe6\x95\x85\xe9\xbe\x9a\xe5\x9d\xad\xe5\x98\x98\xe5\x92\xab\xe7\xa4\xbc\xe7\xa1\xb7\xe5\x85\x80\xe7\x9d\xa2\xe6\xb1\xb6\xe2\x80\x99\xe9\x93\xb2\xe7\x83\xa7\xe7\xbb\x95\xe8\xaf\x83\xe6\xb5\x83\xe9\x92\xbf\xe5\x93\xba\xe6\x9f\x9c\xe8\xae\xbc\xe9\xa2\x8a\xe7\x92\x81\xe8\x85\x94\xe6\xb4\xbd\xe5\x92\x90\xe8\x84\xb2\xe7\xb0\x8c\xe7\xad\xa0\xe9\x95\xa3\xe7\x8e\xae\xe9\x9e\xa0\xe8\xb0\x81\xe5\x85\xbc\xe5\xa7\x86\xe6\x8c\xa5\xe6\xa2\xaf\xe8\x9d\xb4\xe8\xb0\x98\xe6\xbc\x95\xe5\x88\xb7\xe8\xba\x8f\xe5\xae\xa6\xe5\xbc\xbcb\xe5\x9e\x8c\xe5\x8a\x88\xe9\xba\x9f\xe8\x8e\x89\xe6\x8f\xad\xe7\xac\x99\xe6\xb8\x8e\xe4\xbb\x95\xe5\x97\xa4\xe4\xbb\x93\xe9\x85\x8d\xe6\x80\x8f\xe6\x8a\xac\xe9\x94\x99\xe6\xb3\xaf\xe9\x95\x8a\xe5\xad\xb0\xe7\x8c\xbf\xe9\x82\xaa\xe4\xbb\x8d\xe7\xa7\x8b\xe9\xbc\xac\xe5\xa3\xb9\xe6\xad\x87\xe5\x90\xb5\xe7\x82\xbc<\xe5\xb0\xa7\xe5\xb0\x84\xe6\x9f\xac\xe5\xbb\xb7\xe8\x83\xa7\xe9\x9c\xbe\xe5\x87\xb3\xe9\x9a\x8b\xe8\x82\x9a\xe6\xb5\xae\xe6\xa2\xa6\xe7\xa5\xa5\xe6\xa0\xaa\xe5\xa0\xb5\xe9\x80\x80L\xe9\xb9\xab\xe8\xb7\x8e\xe5\x87\xb6\xe6\xaf\xbd\xe8\x8d\x9f\xe7\x82\xab\xe6\xa0\xa9\xe7\x8e\xb3\xe7\x94\x9c\xe6\xb2\x82\xe9\xb9\xbf\xe9\xa1\xbd\xe4\xbc\xaf\xe7\x88\xb9\xe8\xb5\x94\xe8\x9b\xb4\xe5\xbe\x90\xe5\x8c\xa1\xe6\xac\xa3\xe7\x8b\xb0\xe7\xbc\xb8\xe9\x9b\xb9\xe8\x9f\x86\xe7\x96\xa4\xe9\xbb\x98\xe6\xb2\xa4\xe5\x95\x9c\xe7\x97\x82\xe8\xa1\xa3\xe7\xa6\x85wih\xe8\xbe\xbd\xe8\x91\xb3\xe9\xbb\x9d\xe9\x92\x97\xe5\x81\x9c\xe6\xb2\xbd\xe6\xa3\x92\xe9\xa6\xa8\xe9\xa2\x8c\xe8\x82\x89\xe5\x90\xb4\xe7\xa1\xab\xe6\x82\xaf\xe5\x8a\xbe\xe5\xa8\x88\xe9\xa9\xac\xe5\x95\xa7\xe5\x90\x8a\xe6\x82\x8c\xe9\x95\x91\xe5\xb3\xad\xe5\xb8\x86\xe7\x80\xa3\xe6\xb6\x89\xe5\x92\xb8\xe7\x96\xb8\xe6\xbb\x8b\xe6\xb3\xa3\xe7\xbf\xa6\xe6\x8b\x99\xe7\x99\xb8\xe9\x92\xa5\xe8\x9c\x92+\xe5\xb0\xbe\xe5\xba\x84\xe5\x87\x9d\xe6\xb3\x89\xe5\xa9\xa2\xe6\xb8\xb4\xe8\xb0\x8a\xe4\xb9\x9e\xe9\x99\x86\xe9\x94\x89\xe7\xb3\x8a\xe9\xb8\xa6\xe6\xb7\xaeIBN\xe6\x99\xa6\xe5\xbc\x97\xe4\xb9\x94\xe5\xba\xa5\xe8\x91\xa1\xe5\xb0\xbb\xe5\xb8\xad\xe6\xa9\xa1\xe5\x82\xa3\xe6\xb8\xa3\xe6\x8b\xbf\xe6\x83\xa9\xe9\xba\x8b\xe6\x96\x9b\xe7\xbc\x83\xe7\x9f\xae\xe8\x9b\x8f\xe5\xb2\x98\xe9\xb8\xbd\xe5\xa7\x90\xe8\x86\x8f\xe5\x82\xac\xe5\xa5\x94\xe9\x95\x92\xe5\x96\xb1\xe8\xa0\xa1\xe6\x91\xa7\xe9\x92\xaf\xe8\x83\xa4\xe6\x9f\xa0\xe6\x8b\x90\xe7\x92\x8b\xe9\xb8\xa5\xe5\x8d\xa2\xe8\x8d\xa1\xe5\x80\xbe^_\xe7\x8f\x80\xe9\x80\x84\xe8\x90\xa7\xe5\xa1\xbe\xe6\x8e\x87\xe8\xb4\xae\xe7\xac\x86\xe8\x81\x82\xe5\x9c\x83\xe5\x86\xb2\xe5\xb5\xacM\xe6\xbb\x94\xe7\xac\x95\xe5\x80\xbc\xe7\x82\x99\xe5\x81\xb6\xe8\x9c\xb1\xe6\x90\x90\xe6\xa2\x86\xe6\xb1\xaa\xe8\x94\xac\xe8\x85\x91\xe9\xb8\xaf\xe8\xb9\x87\xe6\x95\x9e\xe7\xbb\xaf\xe4\xbb\xa8\xe7\xa5\xaf\xe8\xb0\x86\xe6\xa2\xa7\xe7\xb3\x97\xe9\x91\xab\xe5\x95\xb8\xe8\xb1\xba\xe5\x9b\xb9\xe7\x8c\xbe\xe5\xb7\xa2\xe6\x9f\x84\xe7\x80\x9b\xe7\xad\x91\xe8\xb8\x8c\xe6\xb2\xad\xe6\x9a\x97\xe8\x8b\x81\xe9\xb1\xbf\xe8\xb9\x89\xe8\x84\x82\xe8\x98\x96\xe7\x89\xa2\xe7\x83\xad\xe6\x9c\xa8\xe5\x90\xb8\xe6\xba\x83\xe5\xae\xa0\xe5\xba\x8f\xe6\xb3\x9e\xe5\x81\xbf\xe6\x8b\x9c\xe6\xaa\xa9\xe5\x8e\x9a\xe6\x9c\x90\xe6\xaf\x97\xe8\x9e\xb3\xe5\x90\x9e\xe5\xaa\x9a\xe6\x9c\xbd\xe6\x8b\x85\xe8\x9d\x97\xe6\xa9\x98\xe7\x95\xb4\xe7\xa5\x88\xe7\xb3\x9f\xe7\x9b\xb1\xe9\x9a\xbc\xe9\x83\x9c\xe6\x83\x9c\xe7\x8f\xa0\xe8\xa3\xa8\xe9\x93\xb5\xe7\x84\x99\xe7\x90\x9a\xe5\x94\xaf\xe5\x92\x9a\xe5\x99\xaa\xe9\xaa\x8a\xe4\xb8\xab\xe6\xbb\xa2\xe5\x8b\xa4\xe6\xa3\x89\xe5\x91\xb8\xe5\x92\xa3\xe6\xb7\x80\xe9\x9a\x94\xe8\x95\xbe\xe7\xaa\x88\xe9\xa5\xa8\xe6\x8c\xa8\xe7\x85\x85\xe7\x9f\xad\xe5\x8c\x99\xe7\xb2\x95\xe9\x95\x9c\xe8\xb5\xa3\xe6\x92\x95\xe5\xa2\xa9\xe9\x85\xac\xe9\xa6\x81\xe8\xb1\x8c\xe9\xa2\x90\xe6\x8a\x97\xe9\x85\xa3\xe6\xb0\x93\xe4\xbd\x91\xe6\x90\x81\xe5\x93\xad\xe9\x80\x92\xe8\x80\xb7\xe6\xb6\xa1\xe6\xa1\x83\xe8\xb4\xbb\xe7\xa2\xa3\xe6\x88\xaa\xe7\x98\xa6\xe6\x98\xad\xe9\x95\x8c\xe8\x94\x93\xe6\xb0\x9a\xe7\x94\xb2\xe7\x8c\x95\xe8\x95\xb4\xe8\x93\xac\xe6\x95\xa3\xe6\x8b\xbe\xe7\xba\x9b\xe7\x8b\xbc\xe7\x8c\xb7\xe9\x93\x8e\xe5\x9f\x8b\xe6\x97\x96\xe7\x9f\xbe\xe8\xae\xb3\xe5\x9b\x8a\xe7\xb3\x9c\xe8\xbf\x88\xe7\xb2\x9f\xe8\x9a\x82\xe7\xb4\xa7\xe9\xb2\xb3\xe7\x98\xa2\xe6\xa0\xbd\xe7\xa8\xbc\xe7\xbe\x8a\xe9\x94\x84\xe6\x96\x9f\xe7\x9d\x81\xe6\xa1\xa5\xe7\x93\xae\xe8\xb9\x99\xe7\xa5\x89\xe9\x86\xba\xe9\xbc\xbb\xe6\x98\xb1\xe5\x89\x83\xe8\xb7\xb3\xe7\xaf\xb1\xe8\xb7\xb7\xe8\x92\x9c\xe7\xbf\x8e\xe5\xae\x85\xe6\x99\x96\xe5\x97\x91\xe5\xa3\x91\xe5\xb3\xbb\xe7\x99\xab\xe5\xb1\x8f\xe7\x8b\xa0\xe9\x99\x8b\xe8\xa2\x9c\xe9\x80\x94\xe6\x86\x8e\xe7\xa5\x80\xe8\x8e\xb9\xe6\xbb\x9f\xe4\xbd\xb6\xe6\xba\xa5\xe8\x87\xa3\xe7\xba\xa6\xe7\x9b\x9b\xe5\xb3\xb0\xe7\xa3\x81\xe6\x85\xb5\xe5\xa9\xaa\xe6\x8b\xa6\xe8\x8e\x85\xe6\x9c\x95\xe9\xb9\xa6\xe7\xb2\xb2\xe8\xa3\xa4\xe5\x93\x8e\xe7\x96\xa1\xe5\xab\x96\xe7\x90\xb5\xe7\xaa\x9f\xe5\xa0\xaa\xe8\xb0\x9b\xe5\x98\x89\xe5\x84\xa1\xe9\xb3\x9d\xe6\x96\xa9\xe9\x83\xbe\xe9\xa9\xb8\xe9\x85\x8a\xe5\xa6\x84\xe8\x83\x9c\xe8\xb4\xba\xe5\xbe\x99\xe5\x82\x85\xe5\x99\x8c\xe9\x92\xa2\xe6\xa0\x85\xe5\xba\x87\xe6\x81\x8b\xe5\x8c\x9d\xe5\xb7\xaf\xe9\x82\x88\xe5\xb0\xb8\xe9\x94\x9a\xe7\xb2\x97\xe4\xbd\x9f\xe8\x9b\x9f\xe8\x96\xb9\xe7\xba\xb5\xe8\x9a\x8a\xe9\x83\x85\xe7\xbb\xa2\xe9\x94\x90\xe8\x8b\x97\xe4\xbf\x9e\xe7\xaf\x86\xe6\xb7\x86\xe8\x86\x80\xe9\xb2\x9c\xe7\x85\x8e\xe8\xaf\xb6\xe7\xa7\xbd\xe5\xaf\xbb\xe6\xb6\xae\xe5\x88\xba\xe6\x80\x80\xe5\x99\xb6\xe5\xb7\xa8\xe8\xa4\xb0\xe9\xad\x85\xe7\x81\xb6\xe7\x81\x8c\xe6\xa1\x89\xe8\x97\x95\xe8\xb0\x9c\xe8\x88\xb8\xe8\x96\x84\xe6\x90\x80\xe6\x81\xbd\xe5\x80\x9f\xe7\x89\xaf\xe7\x97\x89\xe6\xb8\xa5\xe6\x84\xbf\xe4\xba\x93\xe8\x80\x98\xe6\x9d\xa0\xe6\x9f\xa9\xe9\x94\x94\xe8\x9a\xb6\xe9\x92\xa3\xe7\x8f\x88\xe5\x96\x98\xe8\xb9\x92\xe5\xb9\xbd\xe8\xb5\x90\xe7\xa8\x97\xe6\x99\xa4\xe8\x8e\xb1\xe6\xb3\x94\xe6\x89\xaf\xe8\x82\xaf\xe8\x8f\xaa\xe8\xa3\x86\xe8\x85\xa9\xe8\xb1\x89\xe7\x96\x86\xe9\xaa\x9c\xe8\x85\x90\xe5\x80\xad\xe7\x8f\x8f\xe5\x94\x94\xe7\xb2\xae\xe4\xba\xa1\xe6\xb6\xa6\xe6\x85\xb0\xe4\xbc\xbd\xe6\xa9\x84\xe7\x8e\x84\xe8\xaa\x89\xe9\x86\x90\xe8\x83\x86\xe9\xbe\x8a\xe7\xb2\xbc\xe5\xa1\xac\xe9\x99\x87\xe5\xbd\xbc\xe5\x89\x8a\xe5\x97\xa3\xe7\xbb\xbe\xe8\x8a\xbd\xe5\xa6\x97\xe5\x9e\xad\xe7\x98\xb4\xe7\x88\xbd\xe8\x96\x8f\xe5\xaf\xa8\xe9\xbe\x88\xe6\xb3\xa0\xe5\xbc\xb9\xe8\xb5\xa2\xe6\xbc\xaa\xe7\x8c\xab\xe5\x98\xa7\xe6\xb6\x82\xe6\x81\xa4\xe5\x9c\xad\xe8\x8c\xa7\xe7\x83\xbd\xe5\xb1\x91\xe7\x97\x95\xe5\xb7\xbe\xe8\xb5\x96\xe8\x8d\xb8\xe5\x87\xb0\xe8\x85\xae\xe7\x95\x88\xe4\xba\xb5\xe8\xb9\xb2\xe5\x81\x83\xe8\x8b\x87\xe6\xbe\x9c\xe8\x89\xae\xe6\x8d\xa2\xe9\xaa\xba\xe7\x83\x98\xe8\x8b\x95\xe6\xa2\x93\xe9\xa2\x89\xe8\x82\x87\xe5\x93\x97\xe6\x82\x84\xe6\xb0\xa4\xe6\xb6\xa0\xe8\x91\xac\xe5\xb1\xa0\xe9\xb9\xad\xe6\xa4\x8d\xe7\xab\xba\xe4\xbd\xaf\xe8\xaf\xa3\xe9\xb2\x87\xe7\x98\x80\xe9\xb2\x85\xe9\x82\xa6\xe7\xa7\xbb\xe6\xbb\x81\xe5\x86\xaf\xe8\x80\x95\xe7\x99\x94\xe6\x88\x8c\xe8\x8c\xac\xe6\xb2\x81\xe5\xb7\xa9\xe6\x82\xa0\xe6\xb9\x98\xe6\xb4\xaa\xe7\x97\xb9\xe9\x94\x9f\xe5\xbe\xaa\xe8\xb0\x8b\xe8\x85\x95\xe9\xb3\x83\xe9\x92\xa0\xe6\x8d\x9e\xe7\x84\x89\xe8\xbf\x8e\xe7\xa2\xb1\xe4\xbc\xab\xe6\x80\xa5\xe6\xa6\xb7\xe5\xa5\x88\xe9\x82\x9d\xe5\x8d\xaf\xe8\xbe\x84\xe7\x9a\xb2\xe5\x8d\x9f\xe9\x86\x9b\xe7\x95\xb9\xe5\xbf\xa7\xe7\xa8\xb3\xe9\x9b\x84\xe6\x98\xbc\xe7\xbc\xa9\xe9\x98\x88\xe7\x9d\x91\xe6\x89\x8c\xe8\x80\x97\xe6\x9b\xa6\xe6\xb6\x85\xe6\x8d\x8f\xe7\x9e\xa7\xe9\x82\x95\xe6\xb7\x96\xe6\xbc\x89\xe9\x93\x9d\xe8\x80\xa6\xe7\xa6\xb9\xe6\xb9\x9b\xe5\x96\xbd\xe8\x8e\xbc\xe7\x90\x85\xe8\xaf\xb8\xe8\x8b\x8e\xe7\xba\x82\xe7\xa1\x85\xe5\xa7\x8b\xe5\x97\xa8\xe5\x82\xa5\xe7\x87\x83\xe8\x87\x82\xe8\xb5\x85\xe5\x98\x88\xe5\x91\x86\xe8\xb4\xb5\xe5\xb1\xb9\xe5\xa3\xae\xe8\x82\x8b\xe4\xba\x8d\xe8\x9a\x80\xe5\x8d\x85\xe8\xb1\xb9\xe8\x85\x86\xe9\x82\xac\xe8\xbf\xad\xe6\xb5\x8a}\xe7\xab\xa5\xe8\x9e\x82\xe6\x8d\x90\xe5\x9c\xa9\xe5\x8b\x90\xe8\xa7\xa6\xe5\xaf\x9e\xe6\xb1\x8a\xe5\xa3\xa4\xe8\x8d\xab\xe8\x86\xba\xe6\xb8\x8c\xe8\x8a\xb3\xe6\x87\xbf\xe9\x81\xb4\xe8\x9e\x88\xe6\xb3\xb0\xe8\x93\xbc\xe8\x9b\xa4\xe8\x8c\x9c\xe8\x88\x85\xe6\x9e\xab\xe6\x9c\x94\xe8\x86\x9d\xe7\x9c\x99\xe9\x81\xbf\xe6\xa2\x85\xe5\x88\xa4\xe9\xb9\x9c\xe7\x92\x9c\xe7\x89\x8d\xe7\xbc\x85\xe5\x9e\xab\xe8\x97\xbb\xe9\xbb\x94\xe4\xbe\xa5\xe6\x83\x9a\xe6\x87\x82\xe8\xb8\xa9\xe8\x85\xb0\xe8\x85\x88\xe6\x9c\xad\xe4\xb8\x9e\xe5\x94\xbe\xe6\x85\x88\xe9\xa1\xbf\xe6\x91\xb9\xe8\x8d\xbb\xe7\x90\xac~\xe6\x96\xa7\xe6\xb2\x88\xe6\xbb\x82\xe8\x83\x81\xe8\x83\x80\xe5\xb9\x84\xe8\x8e\x9cZ\xe5\x8c\x80\xe9\x84\x84\xe6\x8e\x8c\xe7\xbb\xb0\xe8\x8c\x8e\xe7\x84\x9a\xe8\xb5\x8b\xe8\x90\xb1\xe8\xb0\x91\xe6\xb1\x81\xe9\x93\x92\xe7\x9e\x8e\xe5\xa4\xba\xe8\x9c\x97\xe9\x87\x8e\xe5\xa8\x86\xe5\x86\x80\xe5\xbc\xaf\xe7\xaf\x81\xe6\x87\xb5\xe7\x81\x9e\xe9\x9a\xbd\xe8\x8a\xa1\xe8\x84\x98\xe4\xbf\x90\xe8\xbe\xa9\xe8\x8a\xaf\xe6\x8e\xba\xe5\x96\x8f\xe8\x86\x88\xe8\x9d\x88\xe8\xa7\x90\xe6\x82\x9a\xe8\xb8\xb9\xe8\x94\x97\xe7\x86\xa0\xe9\xbc\xa0\xe5\x91\xb5\xe6\x8a\x93\xe6\xa9\xbc\xe5\xb3\xa8\xe7\x95\x9c\xe7\xbc\x94\xe7\xa6\xbe\xe5\xb4\xad\xe5\xbc\x83\xe7\x86\x8a\xe6\x91\x92\xe5\x87\xb8\xe6\x8b\x97\xe7\xa9\xb9\xe8\x92\x99\xe6\x8a\x92\xe7\xa5\x9b\xe5\x8a\x9d\xe9\x97\xab\xe6\x89\xb3\xe9\x98\xb5\xe9\x86\x8c\xe8\xb8\xaa\xe5\x96\xb5\xe4\xbe\xa3\xe6\x90\xac\xe4\xbb\x85\xe8\x8d\xa7\xe8\xb5\x8e\xe8\x9d\xbe\xe7\x90\xa6\xe4\xb9\xb0\xe5\xa9\xa7\xe7\x9e\x84\xe5\xaf\x93\xe7\x9a\x8e\xe5\x86\xbb\xe8\xb5\x9d\xe7\xae\xa9\xe8\x8e\xab\xe7\x9e\xb0\xe9\x83\x8a\xe7\xac\xab\xe5\xa7\x9d\xe7\xad\x92\xe6\x9e\xaa\xe9\x81\xa3\xe7\x85\xb8\xe8\xa2\x8b\xe8\x88\x86\xe7\x97\xb1\xe6\xb6\x9b\xe6\xaf\x8d\xe3\x80\x87\xe5\x90\xaf\xe8\xb7\xb5\xe8\x80\x99\xe7\xbb\xb2\xe7\x9b\x98\xe9\x81\x82\xe6\x98\x8a\xe6\x90\x9e\xe6\xa7\xbf\xe8\xaf\xac\xe7\xba\xb0\xe6\xb3\x93\xe6\x83\xa8\xe6\xaa\xac\xe4\xba\xbb\xe8\xb6\x8aCo\xe6\x86\xa9\xe7\x86\xb5\xe7\xa5\xb7\xe9\x92\x92\xe6\x9a\xa7\xe5\xa1\x94\xe9\x98\x97\xe8\x83\xb0\xe5\x92\x84\xe5\xa8\xb6\xe9\xad\x94\xe7\x90\xb6\xe9\x92\x9e\xe9\x82\xbb\xe6\x89\xac\xe6\x9d\x89\xe6\xae\xb4\xe5\x92\xbd\xe5\xbc\x93\xe3\x80\x86\xe9\xab\xbb\xe3\x80\x91\xe5\x90\xad\xe6\x8f\xbd\xe9\x9c\x86\xe6\x8b\x84\xe6\xae\x96\xe8\x84\x86\xe5\xbd\xbb\xe5\xb2\xa9\xe8\x8a\x9d\xe5\x8b\x83\xe8\xbe\xa3\xe5\x89\x8c\xe9\x92\x9d\xe5\x98\x8e\xe7\x94\x84\xe4\xbd\x98\xe7\x9a\x96\xe4\xbc\xa6\xe6\x8e\x88\xe5\xbe\x95\xe6\x86\x94\xe6\x8c\xaa\xe7\x9a\x87\xe5\xba\x9e\xe7\xa8\x94\xe8\x8a\x9c\xe8\xb8\x8f\xe6\xba\xb4\xe5\x85\x96\xe5\x8d\x92\xe6\x93\xa2\xe9\xa5\xa5\xe9\xb3\x9e\xe7\x85\xb2\xe2\x80\xb0\xe8\xb4\xa6\xe9\xa2\x97\xe5\x8f\xbb\xe6\x96\xaf\xe6\x8d\xa7\xe9\xb3\x8d\xe7\x90\xae\xe8\xae\xb9\xe8\x9b\x99\xe7\xba\xbd\xe8\xb0\xad\xe9\x85\xb8\xe5\x85\x94\xe8\x8e\x92\xe7\x9d\x87\xe4\xbc\x9f\xe8\xa7\x91\xe7\xbe\xb2\xe5\x97\x9c\xe5\xae\x9c\xe8\xa4\x90\xe6\x97\x8e\xe8\xbe\x9b\xe5\x8d\xa6\xe8\xaf\x98\xe7\xad\x8b\xe9\x8e\x8f\xe6\xba\xaa\xe6\x8c\x9b\xe7\x86\x94\xe9\x98\x9c\xe6\x99\xb0\xe9\xb3\x85\xe4\xb8\xa2\xe5\xa5\x9a\xe7\x81\xb8\xe5\x91\xb1\xe7\x8c\xae\xe9\x99\x89\xe9\xbb\x9b\xe9\xb8\xaa\xe7\x94\xbe\xe8\x90\xa8\xe7\x96\xae\xe6\x8b\xaf\xe6\xb4\xb2\xe7\x96\xb9\xe8\xbe\x91\xe5\x8f\x99\xe6\x81\xbb\xe8\xb0\x92\xe5\x85\x81\xe6\x9f\x94\xe7\x83\x82\xe6\xb0\x8f\xe9\x80\x85\xe6\xbc\x86\xe6\x8b\x8e\xe6\x83\x8b\xe6\x89\x88\xe6\xb9\x9f\xe7\xba\xad\xe5\x95\x95\xe6\x8e\xac\xe6\x93\x9e\xe5\x93\xa5\xe5\xbf\xbd\xe6\xb6\xa4\xe9\xb8\xb5\xe9\x9d\xa1\xe9\x83\x97\xe7\x93\xb7\xe6\x89\x81\xe5\xbb\x8a\xe6\x80\xa8\xe9\x9b\x8f\xe9\x92\xae\xe6\x95\xa6E\xe6\x87\xa6\xe6\x86\x8b\xe6\xb1\x80\xe6\x8b\x9a\xe5\x95\x89\xe8\x85\x8c\xe5\xb2\xb8f\xe7\x97\xbc\xe7\x9e\x85\xe5\xb0\x8a\xe5\x92\x80\xe7\x9c\xa9\xe9\xa3\x99\xe5\xbf\x8c\xe4\xbb\x9d\xe8\xbf\xa6\xe7\x86\xac\xe6\xaf\xab\xe8\x83\xaf\xe7\xaf\x91\xe8\x8c\x84\xe8\x85\xba\xe5\x87\x84\xe8\x88\x9b\xe7\xa2\xb4\xe9\x94\xb5\xe8\xaf\xa7\xe7\xbe\xaf\xe5\xbe\x8c\xe6\xbc\x8f\xe6\xb1\xa4\xe5\xae\x93\xe4\xbb\x9e\xe8\x9a\x81\xe5\xa3\xb6\xe8\xb0\xb0\xe7\x9a\x91\xe9\x93\x84\xe6\xa3\xb0\xe7\xbd\x94\xe8\xbe\x85\xe6\x99\xb6\xe8\x8b\xa6\xe7\x89\x9f\xe9\x97\xbd\\\xe7\x83\x83\xe9\xa5\xae\xe8\x81\xbf\xe4\xb8\x99\xe8\x9b\xb3\xe6\x9c\xb1\xe7\x85\xa4\xe6\xb6\x94\xe9\xb3\x96\xe7\x8a\x81\xe7\xbd\x90\xe8\x8d\xbc\xe7\xa0\x92\xe6\xb7\xa6\xe5\xa6\xa4\xe9\xbb\x8f\xe6\x88\x8e\xe5\xad\x91\xe5\xa9\x95\xe7\x91\xbe\xe6\x88\xa2\xe9\x92\xb5\xe6\x9e\xa3\xe6\x8d\x8b\xe7\xa0\xa5\xe8\xa1\xa9\xe7\x8b\x99\xe6\xa1\xa0\xe7\xa8\xa3\xe9\x98\x8e\xe8\x82\x83\xe6\xa2\x8f\xe8\xaf\xab\xe5\xad\xaa\xe6\x98\xb6\xe5\xa9\x8a\xe8\xa1\xab\xe5\x97\x94\xe4\xbe\x83\xe5\xa1\x9e\xe8\x9c\x83\xe6\xa8\xb5\xe5\xb3\x92\xe8\xb2\x8c\xe5\xb1\xbf\xe6\xac\xba\xe7\xbc\xab\xe9\x98\x90\xe6\xa0\x96\xe8\xaf\x9f\xe7\x8f\x9e\xe8\x8d\xad\xe5\x90\x9d\xe8\x90\x8d\xe5\x97\xbd\xe6\x81\x82\xe5\x95\xbb\xe8\x9c\xb4\xe7\xa3\xac\xe5\xb3\x8b\xe4\xbf\xb8\xe8\xb1\xab\xe8\xb0\x8e\xe5\xbe\x8a\xe9\x95\x8d\xe9\x9f\xac\xe9\xad\x87\xe6\x99\xb4U\xe5\x9b\x9f\xe7\x8c\x9c\xe8\x9b\xae\xe5\x9d\x90\xe5\x9b\xbf\xe4\xbc\xb4\xe4\xba\xad\xe8\x82\x9d\xe4\xbd\x97\xe8\x9d\xa0\xe5\xa6\x83\xe8\x83\x9e\xe6\xbb\xa9\xe6\xa6\xb4\xe6\xb0\x96\xe5\x9e\xa9\xe8\x8b\x8b\xe7\xa0\xa3\xe6\x89\xaa\xe9\xa6\x8f\xe5\xa7\x93\xe8\xbd\xa9\xe5\x8e\x89\xe5\xa4\xa5\xe4\xbe\x88\xe7\xa6\x80\xe5\x9e\x92\xe5\xb2\x91\xe8\xb5\x8f\xe9\x92\x9b\xe8\xbe\x90\xe7\x97\x94\xe6\x8a\xab\xe7\xba\xb8\xe7\xa2\xb3\xe2\x80\x9c\xe5\x9d\x9e\xe8\xa0\x93\xe6\x8c\xa4\xe8\x8d\xa5\xe6\xb2\x85\xe6\x82\x94\xe9\x93\xa7\xe5\xb8\xbc\xe8\x92\x8c\xe8\x9d\x87apyng\xe5\x93\x80\xe6\xb5\x86\xe7\x91\xb6\xe5\x87\xbf\xe6\xa1\xb6\xe9\xa6\x88\xe7\x9a\xae\xe5\xa5\xb4\xe8\x8b\x9c\xe4\xbd\xa4\xe4\xbc\xb6\xe6\x99\x97\xe9\x93\xb1\xe7\x82\xac\xe4\xbc\x98\xe5\xbc\x8a\xe6\xb0\xa2\xe6\x81\x83\xe7\x94\xab\xe6\x94\xa5\xe7\xab\xaf\xe9\x94\x8c\xe7\x81\xb0\xe7\xa8\xb9\xe7\x82\x9d\xe6\x9b\x99\xe9\x82\x8b\xe4\xba\xa5\xe7\x9c\xb6\xe7\xa2\xbe\xe6\x8b\x89\xe8\x90\x9d\xe7\xbb\x94\xe6\x8d\xb7\xe6\xb5\x8d\xe8\x85\x8b\xe5\xa7\x91\xe8\x8f\x96\xe5\x87\x8c\xe6\xb6\x9e\xe9\xba\xbd\xe9\x94\xa2\xe6\xa1\xa8\xe6\xbd\xa2\xe7\xbb\x8e\xe9\x95\xb0\xe6\xae\x86\xe9\x94\x91\xe6\xb8\x9d\xe9\x93\xac\xe5\x9b\xb0\xe7\xbb\xbd\xe8\xa7\x8e\xe5\x8c\x88\xe7\xb3\x99\xe6\x9a\x91\xe8\xa3\xb9\xe9\xb8\x9f\xe7\x9b\x94\xe8\x82\xbd\xe8\xbf\xb7\xe7\xb6\xa6\xe3\x80\x8e\xe4\xba\xb3\xe4\xbd\x9d\xe4\xbf\x98\xe9\x92\xb4\xe8\xa7\x87\xe9\xaa\xa5\xe4\xbb\x86\xe7\x96\x9d\xe8\xb7\xaa\xe5\xa9\xb6\xe9\x83\xaf\xe7\x80\xb9\xe5\x94\x89\xe8\x84\x96\xe8\xb8\x9e\xe9\x92\x88\xe6\x99\xbe\xe5\xbf\x92\xe6\x89\xbc\xe7\x9e\xa9\xe5\x8f\x9b\xe6\xa4\x92\xe7\x96\x9f\xe5\x97\xa1\xe9\x82\x97\xe8\x82\x86\xe8\xb7\x86\xe7\x8e\xab\xe5\xbf\xa1\xe6\x8d\xa3\xe5\x92\xa7\xe5\x94\x86\xe8\x89\x84\xe8\x98\x91\xe6\xbd\xa6\xe7\xac\x9b\xe9\x98\x9a\xe6\xb2\xb8\xe6\xb3\xbb\xe6\x8e\x8a\xe8\x8f\xbd\xe8\xb4\xab\xe6\x96\xa5\xe9\xab\x82\xe5\xad\xa2\xe9\x95\x82\xe8\xb5\x82\xe9\xba\x9d\xe9\xb8\xbe\xe5\xb1\xa1\xe8\xa1\xac\xe8\x8b\xb7\xe6\x81\xaa\xe5\x8f\xa0\xe5\xb8\x8c\xe7\xb2\xa4\xe7\x88\xbb\xe5\x96\x9d\xe8\x8c\xab\xe6\x83\xac\xe9\x83\xb8\xe7\xbb\xbb\xe5\xba\xb8\xe6\x92\x85\xe7\xa2\x9f\xe5\xae\x84\xe5\xa6\xb9\xe8\x86\x9b\xe5\x8f\xae\xe9\xa5\xb5\xe5\xb4\x9b\xe5\x97\xb2\xe6\xa4\x85\xe5\x86\xa4\xe6\x90\x85\xe5\x92\x95\xe6\x95\x9b\xe5\xb0\xb9\xe5\x9e\xa6\xe9\x97\xb7\xe8\x9d\x89\xe9\x9c\x8e\xe5\x8b\xb0\xe8\xb4\xa5\xe8\x93\x91\xe6\xb3\xb8\xe8\x82\xa4\xe9\xb9\x8c\xe5\xb9\x8c\xe7\x84\xa6\xe6\xb5\xa0\xe9\x9e\x8d\xe5\x88\x81\xe8\x88\xb0\xe4\xb9\x99\xe7\xab\xbf\xe8\xa3\x94\xe3\x80\x82\xe8\x8c\xb5\xe5\x87\xbd\xe4\xbc\x8a\xe5\x85\x84\xe4\xb8\xa8\xe5\xa8\x9c\xe5\x8c\x8d\xe8\xac\x87\xe8\x8e\xaa\xe5\xae\xa5\xe4\xbc\xbc\xe8\x9d\xbd\xe7\xbf\xb3\xe9\x85\xaa\xe7\xbf\xa0\xe7\xb2\x91\xe8\x96\x87\xe7\xa5\xa2\xe9\xaa\x8f\xe8\xb5\xa0\xe5\x8f\xabQ\xe5\x99\xa4\xe5\x99\xbb\xe7\xab\x96\xe8\x8a\x97\xe8\x8e\xa0\xe6\xbd\xad\xe4\xbf\x8a\xe7\xbe\xbf\xe8\x80\x9cO\xe9\x83\xab\xe8\xb6\x81\xe5\x97\xaa\xe5\x9b\x9a\xe8\xb9\xb6\xe8\x8a\x92\xe6\xb4\x81\xe7\xac\x8b\xe9\xb9\x91\xe6\x95\xb2\xe7\xa1\x9d\xe5\x95\xb6\xe5\xa0\xa1\xe6\xb8\xb2\xe6\x8f\xa9\xe3\x80\x8f\xe6\x90\xba\xe5\xae\xbf\xe9\x81\x92\xe9\xa2\x8d\xe6\x89\xad\xe6\xa3\xb1\xe5\x89\xb2\xe8\x90\x9c\xe8\x94\xb8\xe8\x91\xb5\xe7\x90\xb4\xe6\x8d\x82\xe9\xa5\xb0\xe8\xa1\x99\xe8\x80\xbf\xe6\x8e\xa0\xe5\x8b\x9f\xe5\xb2\x82\xe7\xaa\x96\xe6\xb6\x9f\xe8\x94\xba\xe7\x98\xa4\xe6\x9f\x9e\xe7\x9e\xaa\xe6\x80\x9c\xe5\x8c\xb9\xe8\xb7\x9d\xe6\xa5\x94\xe7\x82\x9c\xe5\x93\x86\xe7\xa7\xa6\xe7\xbc\x8e\xe5\xb9\xbc\xe8\x8c\x81\xe7\xbb\xaa\xe7\x97\xa8\xe6\x81\xa8\xe6\xa5\xb8\xe5\xa8\x85\xe7\x93\xa6\xe6\xa1\xa9\xe9\x9b\xaa\xe5\xac\xb4\xe4\xbc\x8f\xe6\xa6\x94\xe5\xa6\xa5\xe9\x93\xbf\xe6\x8b\x8c\xe7\x9c\xa0\xe9\x9b\x8d\xe7\xbc\x87\xe2\x80\x98\xe5\x8d\x93\xe6\x90\x93\xe5\x93\x8c\xe8\xa7\x9e\xe5\x99\xa9\xe5\xb1\x88\xe5\x93\xa7\xe9\xab\x93\xe5\x92\xa6\xe5\xb7\x85\xe5\xa8\x91\xe4\xbe\x91\xe6\xb7\xab\xe8\x86\xb3\xe7\xa5\x9d\xe5\x8b\xbe\xe5\xa7\x8a\xe8\x8e\xb4\xe8\x83\x84\xe7\x96\x83\xe8\x96\x9b\xe8\x9c\xb7\xe8\x83\x9b\xe5\xb7\xb7\xe8\x8a\x99\xe8\x8a\x8b\xe7\x86\x99\xe9\x97\xb0\xe5\x8b\xbf\xe7\xaa\x83\xe7\x8b\xb1\xe5\x89\xa9\xe9\x92\x8f\xe5\xb9\xa2\xe9\x99\x9f\xe9\x93\x9b\xe6\x85\xa7\xe9\x9d\xb4\xe8\x80\x8dk\xe6\xb5\x99\xe6\xb5\x87\xe9\xa3\xa8\xe6\x83\x9f\xe7\xbb\x97\xe7\xa5\x9c\xe6\xbe\x88\xe5\x95\xbc\xe5\x92\xaa\xe7\xa3\xb7\xe6\x91\x9e\xe8\xaf\x85\xe9\x83\xa6\xe6\x8a\xb9\xe8\xb7\x83\xe5\xa3\xac\xe5\x90\x95\xe8\x82\x96\xe7\x90\x8f\xe9\xa2\xa4\xe5\xb0\xb4\xe5\x89\xa1\xe6\x8a\xa0\xe5\x87\x8b\xe8\xb5\x9a\xe6\xb3\x8a\xe6\xb4\xa5\xe5\xae\x95\xe6\xae\xb7\xe5\x80\x94\xe6\xb0\xb2\xe6\xbc\xab\xe9\x82\xba\xe6\xb6\x8e\xe6\x80\xa0$\xe5\x9e\xae\xe8\x8d\xac\xe9\x81\xb5\xe4\xbf\x8f\xe5\x8f\xb9\xe5\x99\xa2\xe9\xa5\xbd\xe8\x9c\x98\xe5\xad\x99\xe7\xad\xb5\xe7\x96\xbc\xe9\x9e\xad\xe7\xbe\xa7\xe7\x89\xa6\xe7\xae\xad\xe6\xbd\xb4c\xe7\x9c\xb8\xe7\xa5\xad\xe9\xab\xaf\xe5\x95\x96\xe5\x9d\xb3\xe6\x84\x81\xe8\x8a\xa9\xe9\xa9\xae\xe5\x80\xa1\xe5\xb7\xbd\xe7\xa9\xb0\xe6\xb2\x83\xe8\x83\x9a\xe6\x80\x92\xe5\x87\xa4\xe6\xa7\x9b\xe5\x89\x82\xe8\xb6\xb5\xe5\xab\x81v\xe9\x82\xa2\xe7\x81\xaf\xe9\x84\xa2\xe6\xa1\x90\xe7\x9d\xbd\xe6\xaa\x97\xe9\x94\xaf\xe6\xa7\x9f\xe5\xa9\xb7\xe5\xb5\x8b\xe5\x9c\xbb\xe8\xaf\x97\xe8\x95\x88\xe9\xa2\xa0\xe9\x81\xad\xe7\x97\xa2\xe8\x8a\xb8\xe6\x80\xaf\xe9\xa6\xa5\xe7\xab\xad\xe9\x94\x97\xe5\xbe\x9c\xe6\x81\xad\xe9\x81\x8d\xe7\xb1\x81\xe5\x89\x91\xe5\x98\xb1\xe8\x8b\xa1\xe9\xbe\x84\xe5\x83\xa7\xe6\xa1\x91\xe6\xbd\xb8\xe5\xbc\x98\xe6\xbe\xb6\xe6\xa5\xb9\xe6\x82\xb2\xe8\xae\xab\xe6\x84\xa4\xe8\x85\xa5\xe6\x82\xb8\xe8\xb0\x8d\xe6\xa4\xb9\xe5\x91\xa2\xe6\xa1\x93\xe8\x91\xad\xe6\x94\xab\xe9\x98\x80\xe7\xbf\xb0\xe8\xba\xb2\xe6\x95\x96\xe6\x9f\x91\xe9\x83\x8e\xe7\xac\xa8\xe6\xa9\x87\xe5\x91\x83\xe9\xad\x81\xe7\x87\x8e\xe8\x84\x93\xe8\x91\xa9\xe7\xa3\x8b\xe5\x9e\x9b\xe7\x8e\xba\xe7\x8b\xae\xe6\xb2\x93\xe7\xa0\x9c\xe8\x95\x8a\xe9\x94\xba\xe7\xbd\xb9\xe8\x95\x89\xe7\xbf\xb1\xe8\x99\x90\xe9\x97\xbe\xe5\xb7\xab\xe6\x97\xa6\xe8\x8c\xb1\xe5\xac\xb7\xe6\x9e\xaf\xe9\xb9\x8f\xe8\xb4\xa1\xe8\x8a\xb9\xe6\xb1\x9b\xe7\x9f\xab\xe7\xbb\x81\xe6\x8b\xa3\xe7\xa6\xba\xe4\xbd\x83\xe8\xae\xa3\xe8\x88\xab\xe6\x83\xaf\xe4\xb9\xb3\xe8\xb6\x8b\xe7\x96\xb2\xe6\x8c\xbd\xe5\xb2\x9a\xe8\x99\xbe\xe8\xa1\xbe\xe8\xa0\xb9\xe8\xb9\x82\xe9\xa3\x93\xe6\xb0\xa6\xe9\x93\x96\xe5\xad\xa9\xe7\xa8\x9e\xe7\x91\x9c\xe5\xa3\x85\xe6\x8e\x80\xe5\x8b\x98\xe5\xa6\x93\xe7\x95\x85\xe9\xab\x8bW\xe5\xba\x90\xe7\x89\xb2\xe8\x93\xbf\xe6\xa6\x95\xe7\xbb\x83\xe5\x9e\xa3\xe5\x94\xb1\xe9\x82\xb8\xe8\x8f\xb2\xe6\x98\x86\xe5\xa9\xba\xe7\xa9\xbf\xe7\xbb\xa1\xe9\xba\x92\xe8\x9a\xb1\xe6\x8e\x82\xe6\x84\x9a\xe6\xb3\xb7\xe6\xb6\xaa\xe6\xbc\xb3\xe5\xa6\xa9\xe5\xa8\x89\xe6\xa6\x84\xe8\xae\xb7\xe8\xa7\x85\xe6\x97\xa7\xe8\x97\xa4\xe7\x85\xae\xe5\x91\x9b\xe6\x9f\xb3\xe8\x85\x93\xe5\x8f\xad\xe5\xba\xb5\xe7\x83\xb7\xe9\x98\xa1\xe7\xbd\x82\xe8\x9c\x95\xe6\x93\x82\xe7\x8c\x96\xe5\x92\xbf\xe5\xaa\xb2\xe8\x84\x89\xe3\x80\x90\xe6\xb2\x8f\xe8\xb2\x85\xe9\xbb\xa0\xe7\x86\x8f\xe5\x93\xb2\xe7\x83\x81\xe5\x9d\xa6\xe9\x85\xb5\xe5\x85\x9c\xc3\x97\xe6\xbd\x87\xe6\x92\x92\xe5\x89\xbd\xe7\x8f\xa9\xe5\x9c\xb9\xe4\xb9\xbe\xe6\x91\xb8\xe6\xa8\x9f\xe5\xb8\xbd\xe5\x97\x92\xe8\xa5\x84\xe9\xad\x82\xe8\xbd\xbf\xe6\x86\xac\xe9\x94\xa1\xe3\x80\x95\xe5\x96\x83\xe7\x9a\x86\xe5\x92\x96\xe9\x9a\x85\xe8\x84\xb8\xe6\xae\x8b\xe6\xb3\xae\xe8\xa2\x82\xe9\xb9\x82\xe7\x8f\x8a\xe5\x9b\xa4\xe6\x8d\x86\xe5\x92\xa4\xe8\xaf\xaf\xe5\xbe\xa8\xe9\x97\xb9\xe6\xb7\x99\xe8\x8a\x8a\xe6\xb7\x8b\xe6\x80\x86\xe5\x9b\x97\xe6\x8b\xa8\xe6\xa2\xb3\xe6\xb8\xa4RG\xe7\xbb\xa8\xe8\x9a\x93\xe5\xa9\x80\xe5\xb9\xa1\xe7\x8b\xa9\xe9\xba\xbe\xe8\xb0\xa2\xe5\x94\xa2\xe8\xa3\xb8\xe6\x97\x8c\xe4\xbc\x89\xe7\xba\xb6\xe8\xa3\x82\xe9\xa9\xb3\xe7\xa0\xbc\xe5\x92\x9b\xe6\xbe\x84\xe6\xa8\xa8\xe8\xb9\x88\xe5\xae\x99\xe6\xbe\x8d\xe5\x80\x8d\xe8\xb2\x94\xe6\x93\x8d\xe5\x8b\x87\xe8\x9f\xa0\xe6\x91\x88\xe7\xa0\xa7\xe8\x99\xac\xe5\xa4\x9f\xe7\xbc\x81\xe6\x82\xa6\xe8\x97\xbf\xe6\x92\xb8\xe8\x89\xb9\xe6\x91\x81\xe6\xb7\xb9\xe8\xb1\x87\xe8\x99\x8e\xe6\xa6\xad\xcb\x89\xe5\x90\xb1d\xc2\xb0\xe5\x96\xa7\xe8\x8d\x80\xe8\xb8\xb1\xe4\xbe\xae\xe5\xa5\x8b\xe5\x81\x95\xe9\xa5\xb7\xe7\x8a\x8d\xe6\x83\xae\xe5\x9d\x91\xe7\x92\x8e\xe5\xbe\x98\xe5\xae\x9b\xe5\xa6\x86\xe8\xa2\x88\xe5\x80\xa9\xe7\xaa\xa6\xe6\x98\x82\xe8\x8d\x8f\xe4\xb9\x96K\xe6\x80\x85\xe6\x92\xb0\xe9\xb3\x99\xe7\x89\x99\xe8\xa2\x81\xe9\x85\x9eX\xe7\x97\xbf\xe7\x90\xbc\xe9\x97\xb8\xe9\x9b\x81\xe8\xb6\xbe\xe8\x8d\x9a\xe8\x99\xbb\xe6\xb6\x9d\xe3\x80\x8a\xe6\x9d\x8f\xe9\x9f\xad\xe5\x81\x88\xe7\x83\xa4\xe7\xbb\xab\xe9\x9e\x98\xe5\x8d\x89\xe7\x97\x87\xe9\x81\xa2\xe8\x93\xa5\xe8\xaf\x8b\xe6\x9d\xad\xe8\x8d\xa8\xe5\x8c\x86\xe7\xab\xa3\xe7\xb0\xaa\xe8\xbe\x99\xe6\x95\x95\xe8\x99\x9e\xe4\xb8\xb9\xe7\xbc\xad\xe5\x92\xa9\xe9\xbb\x9fm\xe6\xb7\xa4\xe7\x91\x95\xe5\x92\x82\xe9\x93\x89\xe7\xa1\xbc\xe8\x8c\xa8\xe5\xb6\x82\xe7\x97\x92\xe7\x95\xb8\xe6\x95\xac\xe6\xb6\xbf\xe7\xb2\xaa\xe7\xaa\x98\xe7\x86\x9f\xe5\x8f\x94\xe5\xab\x94\xe7\x9b\xbe\xe5\xbf\xb1\xe8\xa3\x98\xe6\x86\xbe\xe6\xa2\xb5\xe8\xb5\xa1\xe7\x8f\x99\xe5\x92\xaf\xe5\xa8\x98\xe5\xba\x99\xe6\xba\xaf\xe8\x83\xba\xe8\x91\xb1\xe7\x97\xaa\xe6\x91\x8a\xe8\x8d\xb7\xe5\x8d\x9e\xe4\xb9\x92\xe9\xab\xa6\xe5\xaf\x90\xe9\x93\xad\xe5\x9d\xa9\xe8\x83\x97\xe6\x9e\xb7\xe7\x88\x86\xe6\xba\x9f\xe5\x9a\xbc\xe7\xbe\x9a\xe7\xa0\xac\xe8\xbd\xa8\xe6\x83\x8a\xe6\x8c\xa0\xe7\xbd\x84\xe7\xab\xbd\xe8\x8f\x8f\xe6\xb0\xa7\xe6\xb5\x85\xe6\xa5\xa3\xe7\x9b\xbc\xe6\x9e\xa2\xe7\x82\xb8\xe9\x98\x86\xe6\x9d\xaf\xe8\xb0\x8f\xe5\x99\xac\xe6\xb7\x87\xe6\xb8\xba\xe4\xbf\xaa\xe7\xa7\x86\xe5\xa2\x93\xe6\xb3\xaa\xe8\xb7\xbb\xe7\xa0\x8c\xe7\x97\xb0\xe5\x9e\xa1\xe6\xb8\xa1\xe8\x80\xbd\xe9\x87\x9c\xe8\xae\xb6\xe9\xb3\x8e\xe7\x85\x9e\xe5\x91\x97\xe9\x9f\xb6\xe8\x88\xb6\xe7\xbb\xb7\xe9\xb9\xb3\xe7\xbc\x9c\xe6\x97\xb7\xe9\x93\x8a\xe7\x9a\xb1\xe9\xbe\x8c\xe6\xaa\x80\xe9\x9c\x96\xe5\xa5\x84\xe6\xa7\x90\xe8\x89\xb3\xe8\x9d\xb6\xe6\x97\x8b\xe5\x93\x9d\xe8\xb5\xb6\xe9\xaa\x9e\xe8\x9a\xa7\xe8\x85\x8a\xe7\x9b\x88\xe4\xb8\x81`\xe8\x9c\x9a\xe7\x9f\xb8\xe8\x9d\x99\xe7\x9d\xa8\xe5\x9a\x93\xe5\x83\xbb\xe9\xac\xbc\xe9\x86\xb4\xe5\xa4\x9c\xe5\xbd\x9d\xe7\xa3\x8a\xe7\xac\x94\xe6\x8b\x94\xe6\xa0\x80\xe7\xb3\x95\xe5\x8e\xa6\xe9\x82\xb0\xe7\xba\xab\xe9\x80\xad\xe7\xba\xa4\xe7\x9c\xa6\xe8\x86\x8a\xe9\xa6\x8d\xe8\xba\x87\xe7\x83\xaf\xe8\x98\xbc\xe5\x86\xac\xe8\xaf\xa4\xe6\x9a\x84\xe9\xaa\xb6\xe5\x93\x91\xe7\x98\xa0\xe3\x80\x8d\xe8\x87\x8a\xe4\xb8\x95\xe6\x84\x88\xe5\x92\xb1\xe8\x9e\xba\xe6\x93\x85\xe8\xb7\x8b\xe6\x90\x8f\xe7\xa1\xaa\xe8\xb0\x84\xe7\xac\xa0\xe6\xb7\xa1\xe5\x98\xbf\xe9\xaa\x85\xe8\xb0\xa7\xe9\xbc\x8e\xe7\x9a\x8b\xe5\xa7\x9a\xe6\xad\xbc\xe8\xa0\xa2\xe9\xa9\xbc\xe8\x80\xb3\xe8\x83\xac\xe6\x8c\x9d\xe6\xb6\xaf\xe7\x8b\x97\xe8\x92\xbd\xe5\xad\x93\xe7\x8a\xb7\xe5\x87\x89\xe8\x8a\xa6\xe7\xae\xb4\xe9\x93\xa4\xe5\xad\xa4\xe5\x98\x9b\xe5\x9d\xa4V\xe8\x8c\xb4\xe6\x9c\xa6\xe6\x8c\x9e\xe5\xb0\x96\xe6\xa9\x99\xe8\xaf\x9e\xe6\x90\xb4\xe7\xa2\x87\xe6\xb4\xb5\xe6\xb5\x9a\xe5\xb8\x9a\xe8\x9c\x8d\xe6\xbc\xaf\xe6\x9f\x98\xe5\x9a\x8e\xe8\xae\xbd\xe8\x8a\xad\xe8\x8d\xa4\xe5\x92\xbb\xe7\xa5\xa0\xe7\xa7\x89\xe8\xb7\x96\xe5\x9f\x83\xe5\x90\x93\xe7\xb3\xaf\xe7\x9c\xb7\xe9\xa6\x92\xe6\x83\xb9\xe5\xa8\xbc\xe9\xb2\x91\xe5\xab\xa9\xe8\xae\xb4\xe8\xbd\xae\xe7\x9e\xa5\xe9\x9d\xb6\xe8\xa4\x9a\xe4\xb9\x8f\xe7\xbc\xa4\xe5\xae\x8b\xe5\xb8\xa7\xe5\x88\xa0\xe9\xa9\xb1\xe7\xa2\x8e\xe6\x89\x91\xe4\xbf\xa9\xe4\xbf\x84\xe5\x81\x8f\xe6\xb6\xa3\xe7\xab\xb9\xe5\x99\xb1\xe7\x9a\x99\xe4\xbd\xb0\xe6\xb8\x9a\xe5\x94\xa7\xe6\x96\xa1#\xe9\x95\x89\xe5\x88\x80\xe5\xb4\x8e\xe7\xad\x90\xe4\xbd\xa3\xe5\xa4\xad\xe8\xb4\xb0\xe8\x82\xb4\xe5\xb3\x99\xe5\x93\x94\xe8\x89\xbf\xe5\x8c\x90\xe7\x89\xba\xe9\x95\x9b\xe7\xbc\x98\xe4\xbb\xa1\xe5\xab\xa1\xe5\x8a\xa3\xe6\x9e\xb8\xe5\xa0\x80\xe6\xa2\xa8\xe7\xb0\xbf\xe9\xb8\xad\xe8\x92\xb8\xe4\xba\xa6\xe7\xa8\xbd\xe6\xb5\xb4{\xe8\xa1\xa2\xe6\x9d\x9f\xe6\xa7\xb2j\xe9\x98\x81\xe6\x8f\x8d\xe7\x96\xa5\xe6\xa3\x8b\xe6\xbd\x8b\xe8\x81\xaa\xe7\xaa\x9c\xe4\xb9\x93\xe7\x9d\x9b\xe6\x8f\x92\xe5\x86\x89\xe9\x98\xaa\xe8\x8b\x8d\xe6\x90\xbd\xe3\x80\x8c\xe8\x9f\xbe\xe8\x9e\x9f\xe5\xb9\xb8\xe4\xbb\x87\xe6\xa8\xbd\xe6\x92\x82\xe6\x85\xa2\xe8\xb7\xa4\xe5\xb9\x94\xe4\xbf\x9a\xe6\xb7\x85\xe8\xa6\x83\xe8\xa7\x8a\xe6\xba\xb6\xe5\xa6\x96\xe5\xb8\x9b\xe4\xbe\xa8\xe6\x9b\xb0\xe5\xa6\xbe\xe6\xb3\x97\'\n'"
crnn/util.py,4,"b'#!/usr/bin/python\n# encoding: utf-8\n\nimport torch\nimport torch.nn as nn\nimport collections\nfrom PIL import  Image\nimport  numpy as np\nfrom torchvision import  transforms\n\n\nclass resizeNormalize(object):\n\n    def __init__(self, size, interpolation=Image.BILINEAR):\n        self.size = size\n        self.interpolation = interpolation\n\n    def __call__(self, img):\n        size = self.size\n        imgW, imgH = size\n        scale = img.size[1] * 1.0 / imgH\n        w = img.size[0] / scale\n        w = int(w)\n        img = img.resize((w, imgH), self.interpolation)\n        w, h = img.size\n        if w <= imgW:\n            newImage = np.zeros((imgH, imgW), dtype=\'uint8\')\n            newImage[:] = 255\n            newImage[:, :w] = np.array(img)\n            img = Image.fromarray(newImage)\n        else:\n            img = img.resize((imgW, imgH), self.interpolation)\n        # img = (np.array(img)/255.0-0.5)/0.5\n        img = transforms.ToTensor()(img)\n        img.sub_(0.5).div_(0.5)\n        return img\n\n\nclass strLabelConverter(object):\n\n    def __init__(self, alphabet):\n        self.alphabet = alphabet + \'\xc3\xa7\'  # for `-1` index\n        self.dict = {}\n        for i, char in enumerate(alphabet):\n            # NOTE: 0 is reserved for \'blank\' required by wrap_ctc\n            self.dict[char] = i + 1\n    def encode(self, text, depth=0):\n        """"""Support batch or single str.""""""\n        length = []\n        result=[]\n        for str in text:\n            length.append(len(str))\n            for char in str:\n               #print(char)\n               index = self.dict[char]\n               result.append(index)\n        text = result\n        return (torch.IntTensor(text), torch.IntTensor(length))\n\n    def decode(self, t, length, raw=False):\n        if length.numel() == 1:\n            length = length[0]\n            t = t[:length]\n            if raw:\n                return \'\'.join([self.alphabet[i - 1] for i in t])\n            else:\n                char_list = []\n                for i in range(length):\n                    if t[i] != 0 and (not (i > 0 and t[i - 1] == t[i])):\n                        char_list.append(self.alphabet[t[i] - 1])\n                return \'\'.join(char_list)\n        else:\n            texts = []\n            index = 0\n            for i in range(length.numel()):\n                l = length[i]\n                texts.append(self.decode(\n                    t[index:index + l], torch.IntTensor([l]), raw=raw))\n                index += l\n            return texts\n\n\nclass averager(object):\n\n    def __init__(self):\n        self.reset()\n\n    def add(self, v):\n        self.n_count += v.data.numel()\n        # NOTE: not `+= v.sum()`, which will add a node in the compute graph,\n        # which lead to memory leak\n        self.sum += v.data.sum()\n\n    def reset(self):\n        self.n_count = 0\n        self.sum = 0\n\n    def val(self):\n        res = 0\n        if self.n_count != 0:\n            res = self.sum / float(self.n_count)\n        return res\n\n\ndef oneHot(v, v_length, nc):\n    batchSize = v_length.size(0)\n    maxLength = v_length.max()\n    v_onehot = torch.FloatTensor(batchSize, maxLength, nc).fill_(0)\n    acc = 0\n    for i in range(batchSize):\n        length = v_length[i]\n        label = v[acc:acc + length].view(-1, 1).long()\n        v_onehot[i, :length].scatter_(1, label, 1.0)\n        acc += length\n    return v_onehot\n\n\ndef loadData(v, data):\n    # v.data.resize_(data.size()).copy_(data)\n    v.resize_(data.size()).copy_(data)\n\n\ndef prettyPrint(v):\n    print(\'Size {0}, Type: {1}\'.format(str(v.size()), v.data.type()))\n    print(\'| Max: %f | Min: %f | Mean: %f\' % (v.max().data[0], v.min().data[0], v.mean().data[0]))\n\n\ndef assureRatio(img):\n    """"""Ensure imgH <= imgW.""""""\n    b, c, h, w = img.size()\n    if h > w:\n        main = nn.UpsamplingBilinear2d(size=(h, h), scale_factor=None)\n        img = main(img)\n    return img'"
onnx/convert_onnx.py,3,"b'import  sys\nimport  mxnet as mx\nsys.path.insert(0,"".."")\nfrom crnn import LiteCrnn\nfrom utils0nnx import  load_model\nimport  torch\nfrom angle_class import shufflenet_v2_x0_5\n\nfrom crnn.keys import alphabetChinese as alphabet\nnh = 256\nnet   = shufflenet_v2_x0_5(num_classes=4, pretrained=False)\n\nnet = load_model(net, \'../models/shufflenetv2_05.pth\')\nnet.eval()\n\nprint(\'Finished loading model!\')\nprint(net)\ndevice = torch.device(""cpu"")\nnet = net.to(device)\n\n##################export###############\noutput_onnx = \'shufflenetv2_05.onnx\'\nprint(""==> Exporting model to ONNX format at \'{}\'"".format(output_onnx))\ninput_names = [""input""]\n# output_names = [""hm"" , ""wh""  , ""reg""]\noutput_names = [""out"" ]\ninputs = torch.randn(1, 3, 48, 196).to(device)\ntorch_out = torch.onnx._export(net, inputs, output_onnx, export_params=True, verbose=False,\n                               input_names=input_names, output_names=output_names)\n\n\nimport  os\nos.system(""python -m onnxsim {0} {0}"".format(output_onnx))'"
onnx/onnx_infer2.py,0,"b'""""""\nThis code uses the onnx model to detect faces from live video or cameras.\n""""""\nimport os,sys\nsys.path.insert(0,"".."")\nfrom pse import  decode\nimport time\n\nimport cv2\nimport numpy as np\nimport onnx\n\nfrom utils.utils import show_img, draw_bbox\n\n\n# onnx runtime\nimport onnxruntime\n\nonnx_path = ""psenetlite_mobilenetv2.onnx""\nsession = onnxruntime.InferenceSession(onnx_path)\nsession.get_modelmeta()\ninput_name = session.get_inputs()[0].name\noutput_name = session.get_outputs()[0].name\n\n# img_path = \'/home/yanghuiyu/datas/OCR_data/test_1000/image/TB1y4pSLXXXXXbEXXXXunYpLFXX.jpg\'\nimg_path = \'./\xe5\xbe\xae\xe4\xbf\xa1\xe6\x88\xaa\xe5\x9b\xbe_20180801152018.png\'\nimg_path = \'./2.jpg\'\n\n\n\n# confidences, boxes = predictor.run(image)\nroot = ""../test_images/input/*.*p*g""\nimport glob\nimgs = glob.glob(root)\nfor img_path in imgs:\n\n    orig_image = cv2.imread(img_path)\n    h, w, _ = orig_image.shape\n\n    image = orig_image.copy()\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    # if h > w :\n    #     image = np.concatenate((image , np.zeros([h,h-w,3])),axis=1)\n    # elif w > h :\n    #     image = np.concatenate((image, np.zeros([w - h,  w,3])), axis=0)\n\n    print(image.shape)\n\n    # cv2.imwrite(""temp.jpg"",image)\n\n    image = cv2.resize(image, (480, 480))\n    image = image / 255.0\n    # image = cv2.resize(image, (640, 480))\n\n    # mean = np.array([0.40789654, 0.44719302, 0.47026115],\n    #                 dtype=np.float32).reshape(1, 1, 3)\n    # std = np.array([0.28863828, 0.27408164, 0.27809835],\n    #                dtype=np.float32).reshape(1, 1, 3)\n\n    # print(image)\n\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    image = (image - mean) / std\n    image = np.transpose(image, [2, 0, 1])\n    image = np.expand_dims(image, axis=0)\n    image = image.astype(np.float32)\n\n\n\n    time_time = time.time()\n    preds = session.run([output_name], {input_name: image})\n    # print(preds[0][0])\n    preds, boxes_list = decode(preds[0][0], 1 , no_sigmode = True)\n    scale = (preds.shape[1] / w, preds.shape[0] / h)\n    if len(boxes_list):\n        boxes_list = boxes_list / scale\n\n    print(time.time() - time_time)\n    img = draw_bbox(img_path, boxes_list, color=(0, 0, 255))\n    cv2.imwrite(img_path.replace(""input"",""output""), img)'"
onnx/utils0nnx.py,1,"b'import torch\ndef check_keys(model, pretrained_state_dict):\n    ckpt_keys = set(pretrained_state_dict.keys())\n    model_keys = set(model.state_dict().keys())\n    used_pretrained_keys = model_keys & ckpt_keys\n    unused_pretrained_keys = ckpt_keys - model_keys\n    missing_keys = model_keys - ckpt_keys\n    print(\'Missing keys:{}\'.format(len(missing_keys)))\n    print(\'Unused checkpoint keys:{}\'.format(len(unused_pretrained_keys)))\n    print(\'Used keys:{}\'.format(len(used_pretrained_keys)))\n    assert len(used_pretrained_keys) > 0, \'load NONE from pretrained checkpoint\'\n    return True\n\n\ndef remove_prefix(state_dict, prefix):\n    \'\'\' Old style model is stored with all names of parameters sharing common prefix \'module.\' \'\'\'\n    print(\'remove prefix \\\'{}\\\'\'.format(prefix))\n    f = lambda x: x.split(prefix, 1)[-1] if x.startswith(prefix) else x\n    return {f(key): value for key, value in state_dict.items()}\n\n\ndef load_model(model, model_path):\n    start_epoch = 0\n    checkpoint = torch.load(model_path, map_location=lambda storage, loc: storage)\n    # print(\'loaded {}, epoch {}\'.format(model_path, checkpoint[\'epoch\']))\n    try:\n        state_dict_ = checkpoint[""state_dict""]\n        state_dict = {}\n    except:\n        state_dict_ = checkpoint\n        state_dict = {}\n    # convert data_parallal to model\n    for k in state_dict_:\n\n        if k.startswith(\'module\') and not k.startswith(\'module_list\'):\n            state_dict[k[7:]] = state_dict_[k]\n        else:\n            state_dict[k] = state_dict_[k]\n    model_state_dict = model.state_dict()\n\n    # check loaded parameters and created model parameters\n    msg = \'If you see this, your model does not fully load the \' + \\\n          \'pre-trained weight. Please make sure \' + \\\n          \'you have correctly specified --arch xxx \' + \\\n          \'or set the correct --num_classes for your own dataset.\'\n    for k in state_dict:\n        if k in model_state_dict:\n            if state_dict[k].shape != model_state_dict[k].shape:\n                print(\'Skip loading parameter {}, required shape{}, \' \\\n                      \'loaded shape{}. {}\'.format(\n                    k, model_state_dict[k].shape, state_dict[k].shape, msg))\n                state_dict[k] = model_state_dict[k]\n        else:\n            print(\'Drop parameter {}.\'.format(k) + msg)\n    for k in model_state_dict:\n        if not (k in state_dict):\n            print(\'No param {}.\'.format(k) + msg)\n            state_dict[k] = model_state_dict[k]\n    model.load_state_dict(state_dict, strict=False)\n    return model'"
psenet/PSENET.py,7,"b'import torch\nfrom torchvision import transforms\nimport os\nimport cv2\nimport time\nimport numpy as np\n\nfrom .pse import decode as pse_decode\n\n\nclass PSENetHandel():\n    def __init__(self, model_path, net, scale, gpu_id=None):\n        \'\'\'\n        \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96pytorch\xe6\xa8\xa1\xe5\x9e\x8b\n        :param model_path: \xe6\xa8\xa1\xe5\x9e\x8b\xe5\x9c\xb0\xe5\x9d\x80(\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe5\x8f\x82\xe6\x95\xb0\xe5\x92\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xe4\xb8\x80\xe8\xb5\xb7\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6)\n        :param net: \xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9c\xa8model_path\xe4\xb8\xad\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe6\x98\xaf\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe5\x88\x99\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x99\xe5\x87\xba\xe7\xbd\x91\xe7\xbb\x9c\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\n        :param img_channel: \xe5\x9b\xbe\xe5\x83\x8f\xe7\x9a\x84\xe9\x80\x9a\xe9\x81\x93\xe6\x95\xb0: 1,3\n        :param gpu_id: \xe5\x9c\xa8\xe5\x93\xaa\xe4\xb8\x80\xe5\x9d\x97gpu\xe4\xb8\x8a\xe8\xbf\x90\xe8\xa1\x8c\n        \'\'\'\n        self.scale = scale\n        if gpu_id is not None and isinstance(gpu_id, int) and torch.cuda.is_available():\n            self.device = torch.device(""cuda:{}"".format(gpu_id))\n        else:\n            self.device = torch.device(""cpu"")\n        self.net = torch.load(model_path, map_location=self.device)[\'state_dict\']\n        print(\'device:\', self.device)\n\n        # for k in net.state_dict():\n        #     print(k)\n\n\n        if net is not None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\x9b\xbe\xe5\x92\x8c\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x88\x86\xe5\xbc\x80\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xef\xbc\x8c\xe5\xb0\xb1\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8f\x82\xe6\x95\xb0\xe5\x8a\xa0\xe8\xbd\xbd\n            net = net.to(self.device)\n            net.scale = scale\n\n            try:\n                sk = {}\n                for k in self.net:\n                    sk[k[7:]] = self.net[k]\n                net.load_state_dict(sk)\n            except:\n\n                net.load_state_dict(self.net)\n\n            self.net = net\n            print(\'load model\')\n        self.net.eval()\n\n    #\n    def predict(self, img: str, long_size: int = 640):\n        \'\'\'\n        \xe5\xaf\xb9\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe5\x9b\xbe\xe5\x83\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xa2\x84\xe6\xb5\x8b\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe5\x9b\xbe\xe5\x83\x8f\xe5\x9c\xb0\xe5\x9d\x80,opecv \xe8\xaf\xbb\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe5\x81\x8f\xe6\x85\xa2\n        :param img: \xe5\x9b\xbe\xe5\x83\x8f\xe5\x9c\xb0\xe5\x9d\x80\n        :param is_numpy:\n        :return:\n        \'\'\'\n        # assert os.path.exists(img), \'file is not exists\'\n        # img = cv2.imread(img)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        h, w = img.shape[:2]\n\n        if h > w:\n            scale_h = long_size / h\n            tar_w = w * scale_h\n            tar_w = tar_w - tar_w % 32\n            tar_w = max(32, tar_w)\n            scale_w = tar_w / w\n\n        else:\n            scale_w = long_size / w\n            tar_h = h * scale_w\n            tar_h = tar_h - tar_h % 32\n            tar_h = max(32, tar_h)\n            scale_h = tar_h / h\n\n        # scale = long_size / max(h, w)\n\n        img = cv2.resize(img, None, fx=scale_w, fy=scale_h)\n\n        # \xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe7\x94\xb1(w,h)\xe5\x8f\x98\xe4\xb8\xba(1,img_channel,h,w)\n        img = img.astype(np.float32)\n        # img /= 255.0\n        # tensor = transforms.ToTensor()(img)\n        # tensor = transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])(tensor)\n        #\n\n        img = img.astype(np.float32)\n        img /= 255.0\n        img -= np.array((0.485, 0.456, 0.406))\n        img /= np.array((0.229, 0.224, 0.225))\n        tensor = transforms.ToTensor()(img)\n        tensor = tensor.unsqueeze_(0)\n        tensor = tensor.to(self.device)\n        with torch.no_grad():\n            # torch.cuda.synchronize()\n            start = time.time()\n            preds = self.net(tensor)\n\n            preds, boxes_list,rects  =  pse_decode(preds[0], self.scale)\n\n            scale = (preds.shape[1] / w, preds.shape[0] / h)\n            # print(scale)\n            # preds, boxes_list = decode(preds,num_pred=-1)\n            rects_re = [] #degree, w, h, cx, cy\n            if len(boxes_list):\n                boxes_list = boxes_list / scale\n                for rect in rects:\n                    temp_rec = []\n                    temp_rec.append(rect[-1])\n                    temp_rec.append(rect[1][1] / scale[0] )\n                    temp_rec.append(rect[1][0] / scale[1] )\n                    temp_rec.append(rect[0][0] / scale[0] )\n                    temp_rec.append(rect[0][1] / scale[1] )\n                    rects_re.append(temp_rec)\n            # torch.cuda.synchronize()\n            t = time.time() - start\n        return preds, boxes_list,rects_re, t\n'"
psenet/__init__.py,0,b'from .model import  PSENet\nfrom .PSENET import PSENetHandel'
psenet/mobilenetv2.py,1,"b'from torch import nn\n# from torchvision.models.utils import load_state_dict_from_url\nfrom collections import OrderedDict\n\n__all__ = [\'MobileNetV2\', \'mobilenet_v2\']\n\n\nmodel_urls = {\n    \'mobilenet_v2\': \'https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\',\n}\n\n\ndef _make_divisible(v, divisor, min_value=None):\n    """"""\n    This function is taken from the original tf repo.\n    It ensures that all layers have a channel number that is divisible by 8\n    It can be seen here:\n    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py\n    :param v:\n    :param divisor:\n    :param min_value:\n    :return:\n    """"""\n    if min_value is None:\n        min_value = divisor\n    new_v = max(min_value, int(v + divisor / 2) // divisor * divisor)\n    # Make sure that round down does not go down by more than 10%.\n    if new_v < 0.9 * v:\n        new_v += divisor\n    return new_v\n\n\nclass ConvBNReLU(nn.Sequential):\n    def __init__(self, in_planes, out_planes, kernel_size=3, stride=1, groups=1):\n        padding = (kernel_size - 1) // 2\n        super(ConvBNReLU, self).__init__(\n            nn.Conv2d(in_planes, out_planes, kernel_size, stride, padding, groups=groups, bias=False),\n            nn.BatchNorm2d(out_planes),\n            nn.ReLU6(inplace=True)\n        )\n\n\nclass InvertedResidual(nn.Module):\n    def __init__(self, inp, oup, stride, expand_ratio):\n        super(InvertedResidual, self).__init__()\n        self.stride = stride\n        assert stride in [1, 2]\n\n        hidden_dim = int(round(inp * expand_ratio))\n        self.use_res_connect = self.stride == 1 and inp == oup\n\n        layers = []\n        if expand_ratio != 1:\n            # pw\n            layers.append(ConvBNReLU(inp, hidden_dim, kernel_size=1))\n        layers.extend([\n            # dw\n            ConvBNReLU(hidden_dim, hidden_dim, stride=stride, groups=hidden_dim),\n            # pw-linear\n            nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False),\n            nn.BatchNorm2d(oup),\n        ])\n        self.conv = nn.Sequential(*layers)\n\n    def forward(self, x):\n        if self.use_res_connect:\n            return x + self.conv(x)\n        else:\n            return self.conv(x)\n\n\nclass MobileNetV2(nn.Module):\n    def __init__(self,width_mult=1.0,round_nearest=8,):\n        super(MobileNetV2, self).__init__()\n        block = InvertedResidual\n        input_channel = 32\n        inverted_residual_setting = [\n            # t, c, n, s\n            [1, 16, 1, 1], # 0\n            [6, 24, 2, 2], # 1\n            [6, 32, 3, 2], # 2\n            [6, 64, 4, 2], # 3\n            [6, 96, 3, 1], # 4\n            [6, 160, 3, 2],# 5\n            [6, 320, 1, 1],# 6\n        ]\n        self.feat_id = [1,2,4,6]\n        self.feat_channel = []\n\n        # only check the first element, assuming user knows t,c,n,s are required\n        if len(inverted_residual_setting) == 0 or len(inverted_residual_setting[0]) != 4:\n            raise ValueError(""inverted_residual_setting should be non-empty ""\n                             ""or a 4-element list, got {}"".format(inverted_residual_setting))\n\n        # building first layer\n        input_channel = _make_divisible(input_channel * width_mult, round_nearest)\n        features = [ConvBNReLU(3, input_channel, stride=2)]\n\n        # building inverted residual blocks\n        for id,(t, c, n, s) in enumerate(inverted_residual_setting):\n            output_channel = _make_divisible(c * width_mult, round_nearest)\n            for i in range(n):\n                stride = s if i == 0 else 1\n                features.append(block(input_channel, output_channel, stride, expand_ratio=t))\n                input_channel = output_channel\n            if id in self.feat_id  :\n                self.__setattr__(""feature_%d""%id,nn.Sequential(*features))\n                self.feat_channel.append(output_channel)\n                features = []\n\n        # weight initialization\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                nn.init.kaiming_normal_(m.weight, mode=\'fan_out\')\n                if m.bias is not None:\n                    nn.init.zeros_(m.bias)\n            elif isinstance(m, nn.BatchNorm2d):\n                nn.init.ones_(m.weight)\n                nn.init.zeros_(m.bias)\n\n    def forward(self, x):\n        y = []\n        for id in self.feat_id:\n            x = self.__getattr__(""feature_%d""%id)(x)\n            y.append(x)\n        return y\n\ndef load_model(model,state_dict):\n    new_model=model.state_dict()\n    new_keys = list(new_model.keys())\n    old_keys = list(state_dict.keys())\n    restore_dict = OrderedDict()\n    for id in range(len(new_keys)):\n        restore_dict[new_keys[id]] = state_dict[old_keys[id]]\n    model.load_state_dict(restore_dict)\n\ndef mobilenet_v2(pretrained=False, progress=True, **kwargs):\n    """"""\n    Constructs a MobileNetV2 architecture from\n    `""MobileNetV2: Inverted Residuals and Linear Bottlenecks"" <https://arxiv.org/abs/1801.04381>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    """"""\n    model = MobileNetV2(**kwargs)\n    # if pretrained:\n    #     state_dict = load_state_dict_from_url(model_urls[\'mobilenet_v2\'],\n    #                                           progress=progress)\n        # load_model(model,state_dict)\n    return model'"
psenet/model.py,5,"b""# -*- coding: utf-8 -*-\n# @Time    : 2019/1/2 17:29\n# @Author  : zhoujun\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\nfrom .resnet import resnet18, resnet34, resnet50, resnet101, resnet152\nfrom .mobilenetv2 import mobilenet_v2\n\n\nd = {'resnet18': {'model': resnet18, 'out': [64, 128, 256, 512]},\n     'resnet34': {'model': resnet34, 'out': [64, 128, 256, 512]},\n     'resnet50': {'model': resnet50, 'out': [256, 512, 1024, 2048]},\n     'resnet101': {'model': resnet101, 'out': [256, 512, 1024, 2048]},\n     'resnet152': {'model': resnet152, 'out': [256, 512, 1024, 2048]},\n     'mobilenetv2': {'model': mobilenet_v2, 'out': [24, 32, 96, 320]},\n     'mobilenetv2_lite': {'model': mobilenet_v2, 'out': [24, 32, 96, 320]}\n\n     }\n\n\ninplace = True\n\n\nclass PSENet(nn.Module):\n    def __init__(self, backbone, result_num=6, scale: int = 1, pretrained=False ):\n        super(PSENet, self).__init__()\n\n        assert backbone in d, 'backbone must in: {}'.format(d)\n        self.scale = scale\n\n        conv_out = 128\n        model, out = d[backbone]['model'], d[backbone]['out']\n        self.backbone = model(pretrained=pretrained)\n        # Reduce channels\n        # Top layer\n\n        self.toplayer = nn.Sequential(nn.Conv2d(out[3], conv_out, kernel_size=1, stride=1, padding=0),\n                                      nn.BatchNorm2d(conv_out),\n                                      nn.ReLU(inplace=inplace)\n                                      )\n        # Lateral layers\n        self.latlayer1 = nn.Sequential(nn.Conv2d(out[2], conv_out, kernel_size=1, stride=1, padding=0),\n                                       nn.BatchNorm2d(conv_out),\n                                       nn.ReLU(inplace=inplace)\n                                       )\n        self.latlayer2 = nn.Sequential(nn.Conv2d(out[1], conv_out, kernel_size=1, stride=1, padding=0),\n                                       nn.BatchNorm2d(conv_out),\n                                       nn.ReLU(inplace=inplace)\n                                       )\n        self.latlayer3 = nn.Sequential(nn.Conv2d(out[0], conv_out, kernel_size=1, stride=1, padding=0),\n                                       nn.BatchNorm2d(conv_out),\n                                       nn.ReLU(inplace=inplace)\n                                       )\n\n        # Smooth layers\n\n        self.smooth1 = nn.Sequential(nn.Conv2d(conv_out, conv_out, kernel_size=3, stride=1, padding=1, groups=conv_out),\n                                     nn.BatchNorm2d(conv_out),\n                                     nn.ReLU(inplace=inplace),\n                                     nn.Conv2d(conv_out, conv_out, kernel_size=1, padding=0, stride=1),\n                                     nn.BatchNorm2d(conv_out),\n                                     nn.ReLU(inplace=inplace)\n                                     )\n        self.smooth2 = nn.Sequential(nn.Conv2d(conv_out, conv_out, kernel_size=3, stride=1, padding=1, groups=conv_out),\n                                     nn.BatchNorm2d(conv_out),\n                                     nn.ReLU(inplace=inplace),\n                                     nn.Conv2d(conv_out, conv_out, kernel_size=1, padding=0, stride=1),\n                                     nn.BatchNorm2d(conv_out),\n                                     nn.ReLU(inplace=inplace)\n                                     )\n        self.smooth3 = nn.Sequential(nn.Conv2d(conv_out, conv_out, kernel_size=3, stride=1, padding=1, groups=conv_out),\n                                     nn.BatchNorm2d(conv_out),\n                                     nn.ReLU(inplace=inplace),\n                                     nn.Conv2d(conv_out, conv_out, kernel_size=1, padding=0, stride=1),\n                                     nn.BatchNorm2d(conv_out),\n                                     nn.ReLU(inplace=inplace)\n                                     )\n\n        self.conv = nn.Sequential(\n            nn.Conv2d(conv_out, conv_out, kernel_size=3, padding=1, stride=1),\n            nn.BatchNorm2d(conv_out),\n            nn.ReLU(inplace=inplace)\n        )\n        self.out_conv = nn.Conv2d(conv_out, result_num, kernel_size=1, stride=1)\n\n    def forward(self, input: torch.Tensor):\n        _, _, H, W = input.size()\n        c2, c3, c4, c5 = self.backbone(input)\n        # Top-down\n        p5 = self.toplayer(c5)\n        p4 = self._upsample_add(p5, self.latlayer1(c4))\n        p4 = self.smooth1(p4)\n        p3 = self._upsample_add(p4, self.latlayer2(c3))\n        p3 = self.smooth2(p3)\n        p2 = self._upsample_add(p3, self.latlayer3(c2))\n        p2 = self.smooth3(p2)\n\n        x = self._upsample_cat(p2, p3, p4, p5)\n        x = self.conv(x)\n        x = self.out_conv(x)\n\n        if self.train:\n            x = F.interpolate(x, size=(H, W), mode='nearest')\n        else:\n            x = F.interpolate(x, size=(H // self.scale, W // self.scale), mode='nearest')\n        return x\n\n    def _upsample_add(self, x, y):\n        return F.interpolate(x, size=y.size()[2:], mode='nearest') + y\n\n    def _upsample_cat(self, p2, p3, p4, p5):\n        h, w = p2.size()[2:]\n        p3 = F.interpolate(p3, size=(h, w), mode='nearest')\n        p4 = F.interpolate(p4, size=(h, w), mode='nearest')\n        p5 = F.interpolate(p5, size=(h, w), mode='nearest')\n\n        return p2 + p3 + p4 + p5\n\n\n\nif __name__ == '__main__':\n    import time\n\n    device = torch.device('cpu')\n    backbone = 'shufflenetv2'\n    net = PSENet(backbone=backbone, pretrained=False, result_num=6).to(device)\n    net.eval()\n    x = torch.zeros(1, 3, 512, 512).to(device)\n    start = time.time()\n    y = net(x)\n    print(time.time() - start)\n    print(y.shape)\n    # torch.save(net.state_dict(),f'{backbone}.pth')\n"""
psenet/resnet.py,8,"b'# -*- coding: utf-8 -*-\r\n# @Time    : 2019/1/2 17:30\r\n# @Author  : zhoujun\r\nimport torch\r\nimport torch.nn as nn\r\nimport math\r\nimport logging\r\nimport torch.utils.model_zoo as model_zoo\r\nimport torchvision.models.resnet\r\n\r\nlogger = logging.getLogger(\'project\')\r\n\r\n__all__ = [\'ResNet\', \'resnet50\', \'resnet101\',\r\n           \'resnet152\']\r\n\r\nmodel_urls = {\r\n    \'resnet18\': \'https://download.pytorch.org/models/resnet18-5c106cde.pth\',\r\n    \'resnet34\': \'https://download.pytorch.org/models/resnet34-333f7ec4.pth\',\r\n    \'resnet50\': \'https://download.pytorch.org/models/resnet50-19c8e357.pth\',\r\n    \'resnet101\': \'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth\',\r\n    \'resnet152\': \'https://download.pytorch.org/models/resnet152-b121ed2d.pth\',\r\n}\r\n\r\n\r\ndef conv3x3(in_planes, out_planes, stride=1):\r\n    """"""3x3 convolution with padding""""""\r\n    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,\r\n                     padding=1, bias=False)\r\n\r\n\r\nclass BasicBlock(nn.Module):\r\n    expansion = 1\r\n\r\n    def __init__(self, inplanes, planes, stride=1, downsample=None):\r\n        super(BasicBlock, self).__init__()\r\n        self.conv1 = conv3x3(inplanes, planes, stride)\r\n        self.bn1 = nn.BatchNorm2d(planes)\r\n        self.relu = nn.ReLU(inplace=True)\r\n        self.conv2 = conv3x3(planes, planes)\r\n        self.bn2 = nn.BatchNorm2d(planes)\r\n        self.downsample = downsample\r\n        self.stride = stride\r\n\r\n    def forward(self, x):\r\n        residual = x\r\n\r\n        out = self.conv1(x)\r\n        out = self.bn1(out)\r\n        out = self.relu(out)\r\n\r\n        out = self.conv2(out)\r\n        out = self.bn2(out)\r\n\r\n        if self.downsample is not None:\r\n            residual = self.downsample(x)\r\n\r\n        out += residual\r\n        out = self.relu(out)\r\n\r\n        return out\r\n\r\n\r\nclass Bottleneck(nn.Module):\r\n    expansion = 4\r\n\r\n    def __init__(self, inplanes, planes, stride=1, downsample=None):\r\n        super(Bottleneck, self).__init__()\r\n        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, bias=False)\r\n        self.bn1 = nn.BatchNorm2d(planes)\r\n        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride,\r\n                               padding=1, bias=False)\r\n        self.bn2 = nn.BatchNorm2d(planes)\r\n        self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)\r\n        self.bn3 = nn.BatchNorm2d(planes * 4)\r\n        self.relu = nn.ReLU(inplace=True)\r\n        self.downsample = downsample\r\n        self.stride = stride\r\n\r\n    def forward(self, x):\r\n        residual = x\r\n\r\n        out = self.conv1(x)\r\n        out = self.bn1(out)\r\n        out = self.relu(out)\r\n\r\n        out = self.conv2(out)\r\n        out = self.bn2(out)\r\n        out = self.relu(out)\r\n\r\n        out = self.conv3(out)\r\n        out = self.bn3(out)\r\n\r\n        if self.downsample is not None:\r\n            residual = self.downsample(x)\r\n\r\n        out += residual\r\n        out = self.relu(out)\r\n\r\n        return out\r\n\r\n\r\nclass ResNet(nn.Module):\r\n\r\n    def __init__(self, block, layers):\r\n        self.inplanes = 64\r\n        super(ResNet, self).__init__()\r\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3,\r\n                               bias=False)\r\n        self.bn1 = nn.BatchNorm2d(64)\r\n        self.relu = nn.ReLU(inplace=True)\r\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\r\n        self.layer1 = self._make_layer(block, 64, layers[0])\r\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\r\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\r\n        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)\r\n\r\n        for m in self.modules():\r\n            if isinstance(m, nn.Conv2d):\r\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\r\n                m.weight.data.normal_(0, math.sqrt(2. / n))\r\n            elif isinstance(m, nn.BatchNorm2d):\r\n                m.weight.data.fill_(1)\r\n                m.bias.data.zero_()\r\n\r\n    def _make_layer(self, block, planes, blocks, stride=1):\r\n        downsample = None\r\n        if stride != 1 or self.inplanes != planes * block.expansion:\r\n            downsample = nn.Sequential(\r\n                nn.Conv2d(self.inplanes, planes * block.expansion,\r\n                          kernel_size=1, stride=stride, bias=False),\r\n                nn.BatchNorm2d(planes * block.expansion),\r\n            )\r\n\r\n        layers = []\r\n        layers.append(block(self.inplanes, planes, stride, downsample))\r\n        self.inplanes = planes * block.expansion\r\n        for i in range(1, blocks):\r\n            layers.append(block(self.inplanes, planes))\r\n\r\n        return nn.Sequential(*layers)\r\n\r\n    def _load_pretrained_model(self, model_url):\r\n        pretrain_dict = model_zoo.load_url(model_url)\r\n        model_dict = {}\r\n        state_dict = self.state_dict()\r\n        for k, v in pretrain_dict.items():\r\n            if k in state_dict:\r\n                model_dict[k] = v\r\n        state_dict.update(model_dict)\r\n        self.load_state_dict(state_dict)\r\n        logger.info(\'load pretrained model from imagenet\')\r\n\r\n    def forward(self, input):\r\n        x = self.conv1(input)\r\n        x = self.bn1(x)\r\n        x = self.relu(x)\r\n        x = self.maxpool(x)\r\n        c2 = self.layer1(x)\r\n        c3 = self.layer2(c2)\r\n        c4 = self.layer3(c3)\r\n        c5 = self.layer4(c4)\r\n        return c2, c3, c4, c5\r\n\r\ndef resnet18(pretrained=False, **kwargs):\r\n    """"""Constructs a ResNet-18 model.\r\n\r\n    Args:\r\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\r\n    """"""\r\n    model = ResNet(BasicBlock, [2, 2, 2, 2], **kwargs)\r\n    if pretrained:\r\n        model._load_pretrained_model(model_urls[\'resnet18\'])\r\n    return model\r\n\r\n\r\ndef resnet34(pretrained=False, **kwargs):\r\n    """"""Constructs a ResNet-34 model.\r\n\r\n    Args:\r\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\r\n    """"""\r\n    model = ResNet(BasicBlock, [3, 4, 6, 3], **kwargs)\r\n    if pretrained:\r\n        model._load_pretrained_model(model_urls[\'resnet34\'])\r\n    return model\r\n\r\ndef resnet50(pretrained=False, **kwargs):\r\n    """"""Constructs a ResNet-50 model.\r\n\r\n    Args:\r\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\r\n    """"""\r\n    model = ResNet(Bottleneck, [3, 4, 6, 3], **kwargs)\r\n    if pretrained:\r\n        model._load_pretrained_model(model_urls[\'resnet50\'])\r\n    return model\r\n\r\n\r\n\r\n\r\n\r\ndef resnet101(pretrained=False, **kwargs):\r\n    """"""Constructs a ResNet-101 model.\r\n\r\n    Args:\r\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\r\n    """"""\r\n    model = ResNet(Bottleneck, [3, 4, 23, 3], **kwargs)\r\n    if pretrained:\r\n        model._load_pretrained_model(model_urls[\'resnet101\'])\r\n    return model\r\n\r\n\r\ndef resnet152(pretrained=False, **kwargs):\r\n    """"""Constructs a ResNet-152 model.\r\n\r\n    Args:\r\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\r\n    """"""\r\n    model = ResNet(Bottleneck, [3, 8, 36, 3], **kwargs)\r\n    if pretrained:\r\n        model._load_pretrained_model(model_urls[\'resnet152\'])\r\n    return model\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    x = torch.zeros(1, 3, 640, 640)\r\n    net = resnet50()\r\n    y = net(x)\r\n    for u in y:\r\n        print(u.shape)\r\n'"
psenet/pse/__init__.py,1,"b'import subprocess\nimport os\nimport numpy as np\nimport cv2\nimport torch\n\nBASE_DIR = os.path.dirname(os.path.realpath(__file__))\n\nif subprocess.call([\'make\', \'-C\', BASE_DIR]) != 0:  # return value\n    raise RuntimeError(\'Cannot compile pse: {}\'.format(BASE_DIR))\n\ndef pse_warpper(kernals, min_area=5):\n    \'\'\'\n    reference https://github.com/liuheng92/tensorflow_PSENet/blob/feature_dev/pse\n    :param kernals:\n    :param min_area:\n    :return:\n    \'\'\'\n\n    from .pse import pse_cpp\n\n    kernal_num = len(kernals)\n    if not kernal_num:\n        return np.array([]), []\n    kernals = np.array(kernals)\n\n    label_num, label = cv2.connectedComponents(kernals[0].astype(np.uint8), connectivity=4)\n    label_values = []\n    for label_idx in range(1, label_num):\n        if np.sum(label == label_idx) < min_area:\n            label[label == label_idx] = 0\n            continue\n        label_values.append(label_idx)\n\n    pred = pse_cpp(label, kernals, c=kernal_num)\n\n    return np.array(pred), label_values\n\n\ndef decode(preds, scale,\n           threshold=0.7311 ,\n           # threshold=0.7\n           no_sigmode = False\n           ):\n    """"""\n    \xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe4\xb8\x8a\xe4\xbd\xbf\xe7\x94\xa8sigmoid \xe5\xb0\x86\xe5\x80\xbc\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\xbd\xae\xe4\xbf\xa1\xe5\xba\xa6\xef\xbc\x8c\xe5\xb9\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe9\x98\x88\xe5\x80\xbc\xe6\x9d\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x96\x87\xe5\xad\x97\xe5\x92\x8c\xe8\x83\x8c\xe6\x99\xaf\xe7\x9a\x84\xe5\x8c\xba\xe5\x88\x86\n    :param preds: \xe7\xbd\x91\xe7\xbb\x9c\xe8\xbe\x93\xe5\x87\xba\n    :param scale: \xe7\xbd\x91\xe7\xbb\x9c\xe7\x9a\x84scale\n    :param threshold: sigmoid\xe7\x9a\x84\xe9\x98\x88\xe5\x80\xbc\n    :return: \xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe5\x9b\xbe\xe5\x92\x8c\xe6\x96\x87\xe6\x9c\xac\xe6\xa1\x86\n    """"""\n    if not no_sigmode:\n        preds = torch.sigmoid(preds)\n        preds = preds.detach().cpu().numpy()\n\n\n    score = preds[-1].astype(np.float32)\n\n    preds = preds > threshold\n    # preds = preds * preds[-1] # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84kernel\xe4\xbd\x9c\xe4\xb8\xba\xe5\x85\xb6\xe4\xbb\x96\xe5\xb0\x8f\xe5\x9b\xbe\xe7\x9a\x84mask,\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xaf\x9d\xe6\x95\x88\xe6\x9e\x9c\xe6\x9b\xb4\xe5\xa5\xbd\n\n    pred, label_values = pse_warpper(preds, 5)\n\n    bbox_list = []\n    rects = []\n    for label_value in label_values:\n        points = np.array(np.where(pred == label_value)).transpose((1, 0))[:, ::-1]\n\n        if points.shape[0] < 800 / (scale * scale):\n            continue\n\n        score_i = np.mean(score[pred == label_value])\n        if score_i < 0.93:\n            continue\n\n        rect = cv2.minAreaRect(points)\n\n        bbox = cv2.boxPoints(rect)\n\n        bbox_list.append([bbox[1], bbox[2], bbox[3], bbox[0]])\n        rects.append(rect)\n\n    return pred, np.array(bbox_list),rects\n'"
