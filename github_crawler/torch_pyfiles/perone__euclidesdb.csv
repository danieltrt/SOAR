file_path,api_count,code
python/setup.py,1,"b""from setuptools import setup, find_packages\nfrom codecs import open\nfrom os import path\n\nimport euclides as ec\n\nhere = path.abspath(path.dirname(__file__))\n\nwith open('requirements.txt') as f:\n    requirements = f.read().splitlines()\n\nsetup(\n    name='euclides',\n    version=ec.__version__,\n    description='EuclidesDB Python client API.',\n    url='https://github.com/perone/euclidesdb',\n    author='Christian S. Perone',\n    author_email='christian.perone@gmail.com',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python :: 3',\n    ],\n    packages=find_packages(exclude=['contrib', 'docs', 'tests']),\n    install_requires=requirements,\n    # entry_points={\n        # 'console_scripts': [\n        #    'cmdname=medicaltorch.mod:function',\n        # ],\n    # },\n)\n"""
docs/source/conf.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Configuration file for the Sphinx documentation builder.\n#\n# This file does only contain a selection of the most common options. For a\n# full list see the documentation:\n# http://www.sphinx-doc.org/en/master/config\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\n# import os\n# import sys\n# sys.path.insert(0, os.path.abspath(\'.\'))\n\n\n# -- Project information -----------------------------------------------------\n\nproject = \'euclidesdb\'\ncopyright = \'2018, Christian S. Perone\'\nauthor = \'Christian S. Perone\'\n\n# The short X.Y version\nversion = \'0.2.0\'\n# The full version, including alpha/beta/rc tags\nrelease = \'0.2.0\'\n\n\n# -- General configuration ---------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = \'1.0\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = [\'.rst\', \'.md\']\nsource_suffix = \'.rst\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set ""language"" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = []\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = None\n\nhtml_scaled_image_link = False\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \'alabaster\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n\nhtml_theme_options = {\n    \'logo\': \'img/logo.png\',\n    \'github_user\': \'perone\',\n    \'github_repo\': \'euclidesdb\',\n    \'github_type\': \'star\',\n    \'github_button\': True,\n    \'github_banner\': False,\n    \'logo_name\': False,\n}\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don\'t match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``[\'localtoc.html\', \'relations.html\', \'sourcelink.html\',\n# \'searchbox.html\']``.\n#\n# html_sidebars = {}\n\n\n# -- Options for HTMLHelp output ---------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'euclidesdbdoc\'\n\n\n# -- Options for LaTeX output ------------------------------------------------\n\nlatex_elements = {\n    # The paper size (\'letterpaper\' or \'a4paper\').\n    #\n    # \'papersize\': \'letterpaper\',\n\n    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n    #\n    # \'pointsize\': \'10pt\',\n\n    # Additional stuff for the LaTeX preamble.\n    #\n    # \'preamble\': \'\',\n\n    # Latex figure (float) alignment\n    #\n    # \'figure_align\': \'htbp\',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (master_doc, \'euclidesdb.tex\', \'euclidesdb Documentation\',\n     \'Christian S. Perone\', \'manual\'),\n]\n\n\n# -- Options for manual page output ------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, \'euclidesdb\', \'euclidesdb Documentation\',\n     [author], 1)\n]\n\n\n# -- Options for Texinfo output ----------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (master_doc, \'euclidesdb\', \'euclidesdb Documentation\',\n     author, \'euclidesdb\', \'One line description of project.\',\n     \'Miscellaneous\'),\n]\n\n\n# -- Options for Epub output -------------------------------------------------\n\n# Bibliographic Dublin Core info.\nepub_title = project\n\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#\n# epub_identifier = \'\'\n\n# A unique identification for the text.\n#\n# epub_uid = \'\'\n\n# A list of files that should not be packed into the epub file.\nepub_exclude_files = [\'search.html\']\n'"
models/resnet101/resnet_trace.py,11,"b'from torchvision.models import resnet\nimport torch.utils.model_zoo as model_zoo\n\nimport torch\n\nimport torch.nn.functional as F\n\n\nclass ResnetFeature(resnet.ResNet):\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.relu(x)\n        x = self.maxpool(x)\n\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.layer4(x)\n\n        x = self.avgpool(x)\n        x_feat = x.view(x.size(0), -1)\n        x = self.fc(x_feat)\n        x = F.softmax(x, dim=1)\n\n        return x, x_feat\n\n\ndef resnet101(pretrained=False, **kwargs):\n    model = ResnetFeature(resnet.Bottleneck, [3, 4, 23, 3], **kwargs)\n    if pretrained:\n        model.load_state_dict(model_zoo.load_url(resnet.model_urls[\'resnet101\']))\n    return model\n\n\nclass Resnet101Module(torch.jit.ScriptModule):\n    def __init__(self):\n        super(Resnet101Module, self).__init__()\n        self.means = torch.nn.Parameter(torch.tensor([0.485, 0.456, 0.406])\n                                        .resize_(1, 3, 1, 1))\n        self.stds = torch.nn.Parameter(torch.tensor([0.229, 0.224, 0.225])\n                                        .resize_(1, 3, 1, 1))\n        resnet_model = resnet101(pretrained=True)\n        resnet_model.eval()\n        self.resnet = torch.jit.trace(resnet_model,\n                                      torch.rand(1, 3, 224, 224))\n\n    @torch.jit.script_method\n    def helper(self, input):\n        return self.resnet((input - self.means) / self.stds)\n\n    @torch.jit.script_method\n    def forward(self, input):\n        return self.helper(input)\n\n\nmodel = Resnet101Module()\nmodel.eval()\ntraced_net = torch.jit.trace(model,\n                             torch.rand(1, 3, 224, 224))\ntraced_net.save(""resnet101.pth"")\n'"
models/resnet18/resnet_trace.py,11,"b'from torchvision.models import resnet\nimport torch.utils.model_zoo as model_zoo\n\nimport torch\n\nimport torch.nn.functional as F\n\n\nclass ResnetFeature(resnet.ResNet):\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.relu(x)\n        x = self.maxpool(x)\n\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.layer4(x)\n\n        x = self.avgpool(x)\n        x_feat = x.view(x.size(0), -1)\n        x = self.fc(x_feat)\n        x = F.softmax(x, dim=1)\n\n        return x, x_feat\n\n\ndef resnet18(pretrained=False, **kwargs):\n    model = ResnetFeature(resnet.BasicBlock, [2, 2, 2, 2], **kwargs)\n    if pretrained:\n        model.load_state_dict(model_zoo.load_url(resnet.model_urls[\'resnet18\']))\n    return model\n\n\nclass Resnet18Module(torch.jit.ScriptModule):\n    def __init__(self):\n        super(Resnet18Module, self).__init__()\n        self.means = torch.nn.Parameter(torch.tensor([0.485, 0.456, 0.406])\n                                        .resize_(1, 3, 1, 1))\n        self.stds = torch.nn.Parameter(torch.tensor([0.229, 0.224, 0.225])\n                                        .resize_(1, 3, 1, 1))\n        resnet_model = resnet18(pretrained=True)\n        resnet_model.eval()\n        self.resnet = torch.jit.trace(resnet_model,\n                                      torch.rand(1, 3, 224, 224))\n\n    @torch.jit.script_method\n    def helper(self, input):\n        return self.resnet((input - self.means) / self.stds)\n\n    @torch.jit.script_method\n    def forward(self, input):\n        return self.helper(input)\n\n\nmodel = Resnet18Module()\nmodel.eval()\ntraced_net = torch.jit.trace(model,\n                             torch.rand(1, 3, 224, 224))\ntraced_net.save(""resnet18.pth"")\n'"
models/vgg16/vgg16_trace.py,11,"b'from torchvision.models import vgg\nimport torch.utils.model_zoo as model_zoo\n\nimport torchvision\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\n\n\nclass VGG16Feature(vgg.VGG):\n    def __init__(self, features, num_classes=1000, init_weights=True):\n        super(VGG16Feature, self).__init__(features, num_classes, init_weights)\n        self.features = features\n        self.classifier = nn.Sequential(\n            nn.Linear(512 * 7 * 7, 4096),\n            nn.ReLU(True),\n            nn.Dropout(),\n            nn.Linear(4096, 4096),\n            nn.ReLU(True),\n            nn.Dropout(),\n        )\n\n        self.classifier_final = nn.Sequential(\n            nn.Linear(4096, num_classes),\n            nn.Softmax(dim=1),\n        )\n\n        if init_weights:\n            self._initialize_weights()\n\n    def forward(self, x):\n        x = self.features(x)\n        x = x.view(x.size(0), -1)\n        x_feats = self.classifier(x)\n        x = self.classifier_final(x_feats)\n        return x, x_feats\n\n\ndef vgg16(pretrained=False, **kwargs):\n    if pretrained:\n        kwargs[\'init_weights\'] = False\n    model = VGG16Feature(vgg.make_layers(vgg.cfgs[\'D\'], batch_norm=True), **kwargs)\n\n    if pretrained:\n        # Stitching to split the features from predictions\n        state_dict = model_zoo.load_url(vgg.model_urls[\'vgg16_bn\'])\n        state_dict[""classifier_final.0.weight""] = state_dict[""classifier.6.weight""]\n        state_dict[""classifier_final.0.bias""] = state_dict[""classifier.6.bias""]\n        del state_dict[""classifier.6.weight""]\n        del state_dict[""classifier.6.bias""]\n        model.load_state_dict(state_dict)\n    return model\n\n\nclass VGG16Module(torch.jit.ScriptModule):\n    def __init__(self):\n        super(VGG16Module, self).__init__()\n        self.means = torch.nn.Parameter(torch.tensor([0.485, 0.456, 0.406])\n                                        .resize_(1, 3, 1, 1))\n        self.stds = torch.nn.Parameter(torch.tensor([0.229, 0.224, 0.225])\n                                        .resize_(1, 3, 1, 1))\n        vgg16_model = vgg16(pretrained=True)\n        vgg16_model.eval()\n        self.vgg16 = torch.jit.trace(vgg16_model,\n                                      torch.rand(1, 3, 224, 224))\n\n    @torch.jit.script_method\n    def helper(self, input):\n        return self.vgg16((input - self.means) / self.stds)\n\n    @torch.jit.script_method\n    def forward(self, input):\n        return self.helper(input)\n\n\nx = vgg16(pretrained=True)\n\n\nmodel = VGG16Module()\nmodel.eval()\ntraced_net = torch.jit.trace(model,\n                             torch.rand(1, 3, 224, 224))\ntraced_net.save(""vgg16.pth"")\n'"
python/euclides/__init__.py,0,"b'__author__ = ""Christian S. Perone""\n__version__ = ""0.3.0""\n\nfrom .services import *\n'"
python/euclides/euclidesproto_pb2.py,0,"b'# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: euclidesproto.proto\n\nimport sys\n_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode(\'latin1\'))\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\n\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name=\'euclidesproto.proto\',\n  package=\'euclidesproto\',\n  syntax=\'proto3\',\n  serialized_options=_b(\'\\n\\020euclidesdb.protoB\\rEuclidesProtoP\\001\'),\n  serialized_pb=_b(\'\\n\\x13\\x65uclidesproto.proto\\x12\\reuclidesproto\\"".\\n\\x12\\x45uclidesDBMetadata\\x12\\x18\\n\\x10\\x64\\x61tabase_version\\x18\\x01 \\x01(\\x05\\""L\\n\\x17\\x46indSimilarImageRequest\\x12\\r\\n\\x05top_k\\x18\\x01 \\x01(\\x05\\x12\\x12\\n\\nimage_data\\x18\\x02 \\x01(\\x0c\\x12\\x0e\\n\\x06models\\x18\\x03 \\x03(\\t\\""N\\n\\x1b\\x46indSimilarImageByIdRequest\\x12\\r\\n\\x05top_k\\x18\\x01 \\x01(\\x05\\x12\\x10\\n\\x08image_id\\x18\\x02 \\x01(\\x05\\x12\\x0e\\n\\x06models\\x18\\x03 \\x03(\\t\\""D\\n\\rSearchResults\\x12\\x11\\n\\ttop_k_ids\\x18\\x01 \\x03(\\x05\\x12\\x11\\n\\tdistances\\x18\\x02 \\x03(\\x02\\x12\\r\\n\\x05model\\x18\\x03 \\x01(\\t\\""F\\n\\x15\\x46indSimilarImageReply\\x12-\\n\\x07results\\x18\\x01 \\x03(\\x0b\\x32\\x1c.euclidesproto.SearchResults\\""_\\n\\x0f\\x41\\x64\\x64ImageRequest\\x12\\x10\\n\\x08image_id\\x18\\x01 \\x01(\\x05\\x12\\x12\\n\\nimage_data\\x18\\x02 \\x01(\\x0c\\x12\\x16\\n\\x0eimage_metadata\\x18\\x03 \\x01(\\x0c\\x12\\x0e\\n\\x06models\\x18\\x04 \\x03(\\t\\""&\\n\\x12RemoveImageRequest\\x12\\x10\\n\\x08image_id\\x18\\x01 \\x01(\\x05\\""$\\n\\x10RemoveImageReply\\x12\\x10\\n\\x08image_id\\x18\\x01 \\x01(\\x05\\""C\\n\\x0bItemVectors\\x12\\r\\n\\x05model\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0bpredictions\\x18\\x02 \\x03(\\x02\\x12\\x10\\n\\x08\\x66\\x65\\x61tures\\x18\\x03 \\x03(\\x02\\""Z\\n\\x08ItemData\\x12\\x0f\\n\\x07item_id\\x18\\x01 \\x01(\\x05\\x12\\x10\\n\\x08metadata\\x18\\x02 \\x01(\\x0c\\x12+\\n\\x07vectors\\x18\\x03 \\x03(\\x0b\\x32\\x1a.euclidesproto.ItemVectors\\""<\\n\\rAddImageReply\\x12+\\n\\x07vectors\\x18\\x01 \\x03(\\x0b\\x32\\x1a.euclidesproto.ItemVectors\\""(\\n\\x0fShutdownRequest\\x12\\x15\\n\\rshutdown_type\\x18\\x01 \\x01(\\x05\\""!\\n\\rShutdownReply\\x12\\x10\\n\\x08shutdown\\x18\\x01 \\x01(\\x08\\x32\\xc6\\x03\\n\\x07Similar\\x12J\\n\\x08Shutdown\\x12\\x1e.euclidesproto.ShutdownRequest\\x1a\\x1c.euclidesproto.ShutdownReply\\""\\x00\\x12\\x62\\n\\x10\\x46indSimilarImage\\x12&.euclidesproto.FindSimilarImageRequest\\x1a$.euclidesproto.FindSimilarImageReply\\""\\x00\\x12j\\n\\x14\\x46indSimilarImageById\\x12*.euclidesproto.FindSimilarImageByIdRequest\\x1a$.euclidesproto.FindSimilarImageReply\\""\\x00\\x12J\\n\\x08\\x41\\x64\\x64Image\\x12\\x1e.euclidesproto.AddImageRequest\\x1a\\x1c.euclidesproto.AddImageReply\\""\\x00\\x12S\\n\\x0bRemoveImage\\x12!.euclidesproto.RemoveImageRequest\\x1a\\x1f.euclidesproto.RemoveImageReply\\""\\x00\\x42#\\n\\x10\\x65uclidesdb.protoB\\rEuclidesProtoP\\x01\\x62\\x06proto3\')\n)\n\n\n\n\n_EUCLIDESDBMETADATA = _descriptor.Descriptor(\n  name=\'EuclidesDBMetadata\',\n  full_name=\'euclidesproto.EuclidesDBMetadata\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'database_version\', full_name=\'euclidesproto.EuclidesDBMetadata.database_version\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=38,\n  serialized_end=84,\n)\n\n\n_FINDSIMILARIMAGEREQUEST = _descriptor.Descriptor(\n  name=\'FindSimilarImageRequest\',\n  full_name=\'euclidesproto.FindSimilarImageRequest\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'top_k\', full_name=\'euclidesproto.FindSimilarImageRequest.top_k\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'image_data\', full_name=\'euclidesproto.FindSimilarImageRequest.image_data\', index=1,\n      number=2, type=12, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b(""""),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'models\', full_name=\'euclidesproto.FindSimilarImageRequest.models\', index=2,\n      number=3, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=86,\n  serialized_end=162,\n)\n\n\n_FINDSIMILARIMAGEBYIDREQUEST = _descriptor.Descriptor(\n  name=\'FindSimilarImageByIdRequest\',\n  full_name=\'euclidesproto.FindSimilarImageByIdRequest\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'top_k\', full_name=\'euclidesproto.FindSimilarImageByIdRequest.top_k\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'image_id\', full_name=\'euclidesproto.FindSimilarImageByIdRequest.image_id\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'models\', full_name=\'euclidesproto.FindSimilarImageByIdRequest.models\', index=2,\n      number=3, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=164,\n  serialized_end=242,\n)\n\n\n_SEARCHRESULTS = _descriptor.Descriptor(\n  name=\'SearchResults\',\n  full_name=\'euclidesproto.SearchResults\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'top_k_ids\', full_name=\'euclidesproto.SearchResults.top_k_ids\', index=0,\n      number=1, type=5, cpp_type=1, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'distances\', full_name=\'euclidesproto.SearchResults.distances\', index=1,\n      number=2, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'model\', full_name=\'euclidesproto.SearchResults.model\', index=2,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=244,\n  serialized_end=312,\n)\n\n\n_FINDSIMILARIMAGEREPLY = _descriptor.Descriptor(\n  name=\'FindSimilarImageReply\',\n  full_name=\'euclidesproto.FindSimilarImageReply\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'results\', full_name=\'euclidesproto.FindSimilarImageReply.results\', index=0,\n      number=1, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=314,\n  serialized_end=384,\n)\n\n\n_ADDIMAGEREQUEST = _descriptor.Descriptor(\n  name=\'AddImageRequest\',\n  full_name=\'euclidesproto.AddImageRequest\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'image_id\', full_name=\'euclidesproto.AddImageRequest.image_id\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'image_data\', full_name=\'euclidesproto.AddImageRequest.image_data\', index=1,\n      number=2, type=12, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b(""""),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'image_metadata\', full_name=\'euclidesproto.AddImageRequest.image_metadata\', index=2,\n      number=3, type=12, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b(""""),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'models\', full_name=\'euclidesproto.AddImageRequest.models\', index=3,\n      number=4, type=9, cpp_type=9, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=386,\n  serialized_end=481,\n)\n\n\n_REMOVEIMAGEREQUEST = _descriptor.Descriptor(\n  name=\'RemoveImageRequest\',\n  full_name=\'euclidesproto.RemoveImageRequest\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'image_id\', full_name=\'euclidesproto.RemoveImageRequest.image_id\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=483,\n  serialized_end=521,\n)\n\n\n_REMOVEIMAGEREPLY = _descriptor.Descriptor(\n  name=\'RemoveImageReply\',\n  full_name=\'euclidesproto.RemoveImageReply\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'image_id\', full_name=\'euclidesproto.RemoveImageReply.image_id\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=523,\n  serialized_end=559,\n)\n\n\n_ITEMVECTORS = _descriptor.Descriptor(\n  name=\'ItemVectors\',\n  full_name=\'euclidesproto.ItemVectors\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'model\', full_name=\'euclidesproto.ItemVectors.model\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'predictions\', full_name=\'euclidesproto.ItemVectors.predictions\', index=1,\n      number=2, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'features\', full_name=\'euclidesproto.ItemVectors.features\', index=2,\n      number=3, type=2, cpp_type=6, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=561,\n  serialized_end=628,\n)\n\n\n_ITEMDATA = _descriptor.Descriptor(\n  name=\'ItemData\',\n  full_name=\'euclidesproto.ItemData\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'item_id\', full_name=\'euclidesproto.ItemData.item_id\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'metadata\', full_name=\'euclidesproto.ItemData.metadata\', index=1,\n      number=2, type=12, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b(""""),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'vectors\', full_name=\'euclidesproto.ItemData.vectors\', index=2,\n      number=3, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=630,\n  serialized_end=720,\n)\n\n\n_ADDIMAGEREPLY = _descriptor.Descriptor(\n  name=\'AddImageReply\',\n  full_name=\'euclidesproto.AddImageReply\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'vectors\', full_name=\'euclidesproto.AddImageReply.vectors\', index=0,\n      number=1, type=11, cpp_type=10, label=3,\n      has_default_value=False, default_value=[],\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=722,\n  serialized_end=782,\n)\n\n\n_SHUTDOWNREQUEST = _descriptor.Descriptor(\n  name=\'ShutdownRequest\',\n  full_name=\'euclidesproto.ShutdownRequest\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'shutdown_type\', full_name=\'euclidesproto.ShutdownRequest.shutdown_type\', index=0,\n      number=1, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=784,\n  serialized_end=824,\n)\n\n\n_SHUTDOWNREPLY = _descriptor.Descriptor(\n  name=\'ShutdownReply\',\n  full_name=\'euclidesproto.ShutdownReply\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'shutdown\', full_name=\'euclidesproto.ShutdownReply.shutdown\', index=0,\n      number=1, type=8, cpp_type=7, label=1,\n      has_default_value=False, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=826,\n  serialized_end=859,\n)\n\n_FINDSIMILARIMAGEREPLY.fields_by_name[\'results\'].message_type = _SEARCHRESULTS\n_ITEMDATA.fields_by_name[\'vectors\'].message_type = _ITEMVECTORS\n_ADDIMAGEREPLY.fields_by_name[\'vectors\'].message_type = _ITEMVECTORS\nDESCRIPTOR.message_types_by_name[\'EuclidesDBMetadata\'] = _EUCLIDESDBMETADATA\nDESCRIPTOR.message_types_by_name[\'FindSimilarImageRequest\'] = _FINDSIMILARIMAGEREQUEST\nDESCRIPTOR.message_types_by_name[\'FindSimilarImageByIdRequest\'] = _FINDSIMILARIMAGEBYIDREQUEST\nDESCRIPTOR.message_types_by_name[\'SearchResults\'] = _SEARCHRESULTS\nDESCRIPTOR.message_types_by_name[\'FindSimilarImageReply\'] = _FINDSIMILARIMAGEREPLY\nDESCRIPTOR.message_types_by_name[\'AddImageRequest\'] = _ADDIMAGEREQUEST\nDESCRIPTOR.message_types_by_name[\'RemoveImageRequest\'] = _REMOVEIMAGEREQUEST\nDESCRIPTOR.message_types_by_name[\'RemoveImageReply\'] = _REMOVEIMAGEREPLY\nDESCRIPTOR.message_types_by_name[\'ItemVectors\'] = _ITEMVECTORS\nDESCRIPTOR.message_types_by_name[\'ItemData\'] = _ITEMDATA\nDESCRIPTOR.message_types_by_name[\'AddImageReply\'] = _ADDIMAGEREPLY\nDESCRIPTOR.message_types_by_name[\'ShutdownRequest\'] = _SHUTDOWNREQUEST\nDESCRIPTOR.message_types_by_name[\'ShutdownReply\'] = _SHUTDOWNREPLY\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\nEuclidesDBMetadata = _reflection.GeneratedProtocolMessageType(\'EuclidesDBMetadata\', (_message.Message,), dict(\n  DESCRIPTOR = _EUCLIDESDBMETADATA,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.EuclidesDBMetadata)\n  ))\n_sym_db.RegisterMessage(EuclidesDBMetadata)\n\nFindSimilarImageRequest = _reflection.GeneratedProtocolMessageType(\'FindSimilarImageRequest\', (_message.Message,), dict(\n  DESCRIPTOR = _FINDSIMILARIMAGEREQUEST,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.FindSimilarImageRequest)\n  ))\n_sym_db.RegisterMessage(FindSimilarImageRequest)\n\nFindSimilarImageByIdRequest = _reflection.GeneratedProtocolMessageType(\'FindSimilarImageByIdRequest\', (_message.Message,), dict(\n  DESCRIPTOR = _FINDSIMILARIMAGEBYIDREQUEST,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.FindSimilarImageByIdRequest)\n  ))\n_sym_db.RegisterMessage(FindSimilarImageByIdRequest)\n\nSearchResults = _reflection.GeneratedProtocolMessageType(\'SearchResults\', (_message.Message,), dict(\n  DESCRIPTOR = _SEARCHRESULTS,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.SearchResults)\n  ))\n_sym_db.RegisterMessage(SearchResults)\n\nFindSimilarImageReply = _reflection.GeneratedProtocolMessageType(\'FindSimilarImageReply\', (_message.Message,), dict(\n  DESCRIPTOR = _FINDSIMILARIMAGEREPLY,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.FindSimilarImageReply)\n  ))\n_sym_db.RegisterMessage(FindSimilarImageReply)\n\nAddImageRequest = _reflection.GeneratedProtocolMessageType(\'AddImageRequest\', (_message.Message,), dict(\n  DESCRIPTOR = _ADDIMAGEREQUEST,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.AddImageRequest)\n  ))\n_sym_db.RegisterMessage(AddImageRequest)\n\nRemoveImageRequest = _reflection.GeneratedProtocolMessageType(\'RemoveImageRequest\', (_message.Message,), dict(\n  DESCRIPTOR = _REMOVEIMAGEREQUEST,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.RemoveImageRequest)\n  ))\n_sym_db.RegisterMessage(RemoveImageRequest)\n\nRemoveImageReply = _reflection.GeneratedProtocolMessageType(\'RemoveImageReply\', (_message.Message,), dict(\n  DESCRIPTOR = _REMOVEIMAGEREPLY,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.RemoveImageReply)\n  ))\n_sym_db.RegisterMessage(RemoveImageReply)\n\nItemVectors = _reflection.GeneratedProtocolMessageType(\'ItemVectors\', (_message.Message,), dict(\n  DESCRIPTOR = _ITEMVECTORS,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.ItemVectors)\n  ))\n_sym_db.RegisterMessage(ItemVectors)\n\nItemData = _reflection.GeneratedProtocolMessageType(\'ItemData\', (_message.Message,), dict(\n  DESCRIPTOR = _ITEMDATA,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.ItemData)\n  ))\n_sym_db.RegisterMessage(ItemData)\n\nAddImageReply = _reflection.GeneratedProtocolMessageType(\'AddImageReply\', (_message.Message,), dict(\n  DESCRIPTOR = _ADDIMAGEREPLY,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.AddImageReply)\n  ))\n_sym_db.RegisterMessage(AddImageReply)\n\nShutdownRequest = _reflection.GeneratedProtocolMessageType(\'ShutdownRequest\', (_message.Message,), dict(\n  DESCRIPTOR = _SHUTDOWNREQUEST,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.ShutdownRequest)\n  ))\n_sym_db.RegisterMessage(ShutdownRequest)\n\nShutdownReply = _reflection.GeneratedProtocolMessageType(\'ShutdownReply\', (_message.Message,), dict(\n  DESCRIPTOR = _SHUTDOWNREPLY,\n  __module__ = \'euclidesproto_pb2\'\n  # @@protoc_insertion_point(class_scope:euclidesproto.ShutdownReply)\n  ))\n_sym_db.RegisterMessage(ShutdownReply)\n\n\nDESCRIPTOR._options = None\n\n_SIMILAR = _descriptor.ServiceDescriptor(\n  name=\'Similar\',\n  full_name=\'euclidesproto.Similar\',\n  file=DESCRIPTOR,\n  index=0,\n  serialized_options=None,\n  serialized_start=862,\n  serialized_end=1316,\n  methods=[\n  _descriptor.MethodDescriptor(\n    name=\'Shutdown\',\n    full_name=\'euclidesproto.Similar.Shutdown\',\n    index=0,\n    containing_service=None,\n    input_type=_SHUTDOWNREQUEST,\n    output_type=_SHUTDOWNREPLY,\n    serialized_options=None,\n  ),\n  _descriptor.MethodDescriptor(\n    name=\'FindSimilarImage\',\n    full_name=\'euclidesproto.Similar.FindSimilarImage\',\n    index=1,\n    containing_service=None,\n    input_type=_FINDSIMILARIMAGEREQUEST,\n    output_type=_FINDSIMILARIMAGEREPLY,\n    serialized_options=None,\n  ),\n  _descriptor.MethodDescriptor(\n    name=\'FindSimilarImageById\',\n    full_name=\'euclidesproto.Similar.FindSimilarImageById\',\n    index=2,\n    containing_service=None,\n    input_type=_FINDSIMILARIMAGEBYIDREQUEST,\n    output_type=_FINDSIMILARIMAGEREPLY,\n    serialized_options=None,\n  ),\n  _descriptor.MethodDescriptor(\n    name=\'AddImage\',\n    full_name=\'euclidesproto.Similar.AddImage\',\n    index=3,\n    containing_service=None,\n    input_type=_ADDIMAGEREQUEST,\n    output_type=_ADDIMAGEREPLY,\n    serialized_options=None,\n  ),\n  _descriptor.MethodDescriptor(\n    name=\'RemoveImage\',\n    full_name=\'euclidesproto.Similar.RemoveImage\',\n    index=4,\n    containing_service=None,\n    input_type=_REMOVEIMAGEREQUEST,\n    output_type=_REMOVEIMAGEREPLY,\n    serialized_options=None,\n  ),\n])\n_sym_db.RegisterServiceDescriptor(_SIMILAR)\n\nDESCRIPTOR.services_by_name[\'Similar\'] = _SIMILAR\n\n# @@protoc_insertion_point(module_scope)\n'"
python/euclides/euclidesproto_pb2_grpc.py,0,"b'# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!\nimport grpc\n\nfrom . import euclidesproto_pb2 as euclidesproto__pb2\n\n\nclass SimilarStub(object):\n  # missing associated documentation comment in .proto file\n  pass\n\n  def __init__(self, channel):\n    """"""Constructor.\n\n    Args:\n      channel: A grpc.Channel.\n    """"""\n    self.Shutdown = channel.unary_unary(\n        \'/euclidesproto.Similar/Shutdown\',\n        request_serializer=euclidesproto__pb2.ShutdownRequest.SerializeToString,\n        response_deserializer=euclidesproto__pb2.ShutdownReply.FromString,\n        )\n    self.FindSimilarImage = channel.unary_unary(\n        \'/euclidesproto.Similar/FindSimilarImage\',\n        request_serializer=euclidesproto__pb2.FindSimilarImageRequest.SerializeToString,\n        response_deserializer=euclidesproto__pb2.FindSimilarImageReply.FromString,\n        )\n    self.FindSimilarImageById = channel.unary_unary(\n        \'/euclidesproto.Similar/FindSimilarImageById\',\n        request_serializer=euclidesproto__pb2.FindSimilarImageByIdRequest.SerializeToString,\n        response_deserializer=euclidesproto__pb2.FindSimilarImageReply.FromString,\n        )\n    self.AddImage = channel.unary_unary(\n        \'/euclidesproto.Similar/AddImage\',\n        request_serializer=euclidesproto__pb2.AddImageRequest.SerializeToString,\n        response_deserializer=euclidesproto__pb2.AddImageReply.FromString,\n        )\n    self.RemoveImage = channel.unary_unary(\n        \'/euclidesproto.Similar/RemoveImage\',\n        request_serializer=euclidesproto__pb2.RemoveImageRequest.SerializeToString,\n        response_deserializer=euclidesproto__pb2.RemoveImageReply.FromString,\n        )\n\n\nclass SimilarServicer(object):\n  # missing associated documentation comment in .proto file\n  pass\n\n  def Shutdown(self, request, context):\n    # missing associated documentation comment in .proto file\n    pass\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details(\'Method not implemented!\')\n    raise NotImplementedError(\'Method not implemented!\')\n\n  def FindSimilarImage(self, request, context):\n    # missing associated documentation comment in .proto file\n    pass\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details(\'Method not implemented!\')\n    raise NotImplementedError(\'Method not implemented!\')\n\n  def FindSimilarImageById(self, request, context):\n    # missing associated documentation comment in .proto file\n    pass\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details(\'Method not implemented!\')\n    raise NotImplementedError(\'Method not implemented!\')\n\n  def AddImage(self, request, context):\n    # missing associated documentation comment in .proto file\n    pass\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details(\'Method not implemented!\')\n    raise NotImplementedError(\'Method not implemented!\')\n\n  def RemoveImage(self, request, context):\n    # missing associated documentation comment in .proto file\n    pass\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details(\'Method not implemented!\')\n    raise NotImplementedError(\'Method not implemented!\')\n\n\ndef add_SimilarServicer_to_server(servicer, server):\n  rpc_method_handlers = {\n      \'Shutdown\': grpc.unary_unary_rpc_method_handler(\n          servicer.Shutdown,\n          request_deserializer=euclidesproto__pb2.ShutdownRequest.FromString,\n          response_serializer=euclidesproto__pb2.ShutdownReply.SerializeToString,\n      ),\n      \'FindSimilarImage\': grpc.unary_unary_rpc_method_handler(\n          servicer.FindSimilarImage,\n          request_deserializer=euclidesproto__pb2.FindSimilarImageRequest.FromString,\n          response_serializer=euclidesproto__pb2.FindSimilarImageReply.SerializeToString,\n      ),\n      \'FindSimilarImageById\': grpc.unary_unary_rpc_method_handler(\n          servicer.FindSimilarImageById,\n          request_deserializer=euclidesproto__pb2.FindSimilarImageByIdRequest.FromString,\n          response_serializer=euclidesproto__pb2.FindSimilarImageReply.SerializeToString,\n      ),\n      \'AddImage\': grpc.unary_unary_rpc_method_handler(\n          servicer.AddImage,\n          request_deserializer=euclidesproto__pb2.AddImageRequest.FromString,\n          response_serializer=euclidesproto__pb2.AddImageReply.SerializeToString,\n      ),\n      \'RemoveImage\': grpc.unary_unary_rpc_method_handler(\n          servicer.RemoveImage,\n          request_deserializer=euclidesproto__pb2.RemoveImageRequest.FromString,\n          response_serializer=euclidesproto__pb2.RemoveImageReply.SerializeToString,\n      ),\n  }\n  generic_handler = grpc.method_handlers_generic_handler(\n      \'euclidesproto.Similar\', rpc_method_handlers)\n  server.add_generic_rpc_handlers((generic_handler,))\n'"
python/euclides/services.py,0,"b'import io\nimport grpc\n\nfrom . import euclidesproto_pb2_grpc as ec_grpc\nfrom . import euclidesproto_pb2 as ec_proto\n\n\nclass Channel(object):\n    def __init__(self, hostname, port, options=None):\n        self.hostname = hostname\n        self.port = port\n        self.options = options or []\n\n        self.hostport = ""{}:{}"".format(hostname, port)\n\n        self._channel = grpc.insecure_channel(\n            target=self.hostport,\n            options=self.options)\n\n    def close(self):\n        self._channel.close()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        self._channel.close()\n\n\nclass EuclidesDB(object):\n    SHUTDOWN_REGULAR = 0\n    SHUTDOWN_REFRESH = 1\n\n    def __init__(self, channel, wire_image=""jpeg""):\n        self.channel = channel\n        self.stub = ec_grpc.SimilarStub(self.channel._channel)\n        self.wire_image = wire_image\n\n    def add_image(self, image_id, models, image):\n        bytes_img = io.BytesIO()\n        image.save(bytes_img, format=self.wire_image)\n        request = ec_proto.AddImageRequest()\n        request.image_id = int(image_id)\n        request.models.extend(models)\n        request.image_data = bytes_img.getvalue()\n        reply = self.stub.AddImage(request)\n        return reply\n\n    def remove_image(self, image_id):\n        request = ec_proto.RemoveImageRequest()\n        request.image_id = int(image_id)\n        reply = self.stub.RemoveImage(request)\n        return reply\n\n    def find_similar_image(self, image, models, top_k=5):\n        bytes_img = io.BytesIO()\n        image.save(bytes_img, format=self.wire_image)\n        request = ec_proto.FindSimilarImageRequest()\n        request.models.extend(models)\n        request.top_k = int(top_k)\n        request.image_data = bytes_img.getvalue()\n        reply = self.stub.FindSimilarImage(request)\n        return reply\n\n    def find_similar_image_by_id(self, image_id, models, top_k=5):\n        request = ec_proto.FindSimilarImageByIdRequest()\n        request.models.extend(models)\n        request.top_k = int(top_k)\n        request.image_id = image_id\n        reply = self.stub.FindSimilarImageById(request)\n        return reply\n\n    def __shutdown(self, shutdown_type):\n        request = ec_proto.ShutdownRequest()\n        request.shutdown_type = shutdown_type\n        reply = self.stub.Shutdown(request)\n        return reply\n\n    def refresh_index(self):\n        self.__shutdown(EuclidesDB.SHUTDOWN_REFRESH)\n\n    def shutdown(self):\n        self.__shutdown(EuclidesDB.SHUTDOWN_REGULAR)\n\n'"
python/examples/add_image.py,0,"b'import argparse\n\nimport euclides\n\nfrom PIL import Image\nimport numpy as np\n\n\ndef center_crop(image, new_height, new_width):\n    height, width = image.size\n    left = np.ceil((width - new_width)/2.)\n    top = np.ceil((height - new_height)/2.)\n    right = np.floor((width + new_width)/2.)\n    bottom = np.floor((height + new_height)/2.)\n    return image.crop((left, top, right, bottom))\n\n\ndef run_main():\n    parser = argparse.ArgumentParser(\n        description=\'Add a new image into database.\')\n    parser.add_argument(\'--id\', dest=\'image_id\', type=int, required=True,\n                        help=\'ID of the image to add into EuclidesDB.\')\n    parser.add_argument(\'--file\', dest=\'filename\', type=str, required=True,\n                        help=\'Image file name.\')\n    args = parser.parse_args()\n\n    image = Image.open(args.filename)\n    image_id = int(args.image_id)\n    image.thumbnail((300, 300), Image.ANTIALIAS)\n    image = center_crop(image, 224, 224)\n\n    with euclides.Channel(""localhost"", 50000) as channel:\n        db = euclides.EuclidesDB(channel)\n        ret_add = db.add_image(image_id, [""resnet18""], image)\n\n        # After finishing adding items, you need to tell\n        # the database to refresh the indexes to add newly\n        # indexed items.\n        db.refresh_index()\n\n    predictions = ret_add.vectors[0].predictions\n    print(""Preds Len: "", len(predictions))\n\n    # Category should be 281: \'tabby, tabby cat\' for cat.jpg\n    # Classes from https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a\n    print(""Category : "", np.array(predictions).argmax())\n\n\nif __name__ == ""__main__"":\n    run_main()\n'"
python/examples/add_image_directory.py,0,"b'import argparse\nimport json\nfrom pathlib import Path\n\nimport euclides\n\nfrom PIL import Image\nimport numpy as np\n\n\ndef center_crop(image, new_height, new_width):\n    height, width = image.size\n    left = np.ceil((width - new_width)/2.)\n    top = np.ceil((height - new_height)/2.)\n    right = np.floor((width + new_width)/2.)\n    bottom = np.floor((height + new_height)/2.)\n    return image.crop((left, top, right, bottom))\n\n\ndef add_image(db, id_item, filepath):\n    image = Image.open(filepath)\n    image.thumbnail((300, 300), Image.ANTIALIAS)\n    image = center_crop(image, 224, 224)\n    return db.add_image(id_item, [""resnet18""], image)\n\n\ndef run_main():\n    parser = argparse.ArgumentParser(\n        description=\'Add all images from a directory into the database.\')\n    parser.add_argument(\'--directory\', dest=\'directory\', type=str, required=True,\n                        help=\'Image file name (ex. ./images).\')\n    parser.add_argument(\'--pattern\', dest=\'pattern\', type=str, required=True,\n                        help=\'Image file pattern (ex. *.jpg).\')\n    parser.add_argument(\'--output\', dest=\'output\', type=str, required=True,\n                        help=\'Output filename with IDs (ex. output.json).\')\n    args = parser.parse_args()\n\n    channel = euclides.Channel(""localhost"", 50000)\n    db = euclides.EuclidesDB(channel)\n\n    path = Path(args.directory)\n    items_dict = {}\n    for id_item, pfile in enumerate(path.glob(args.pattern)):\n        print(""Adding file"", pfile.name)\n        add_image(db, id_item, pfile.absolute())\n        items_dict[pfile.name] = id_item\n\n    with open(args.output, ""w"") as fhandle:\n        json.dump(items_dict, fhandle)\n\n    db.refresh_index()\n    channel.close()\n\n\nif __name__ == ""__main__"":\n    run_main()\n'"
python/examples/find_similar.py,0,"b'import argparse\n\nimport euclides\n\nfrom PIL import Image\nimport numpy as np\n\n\ndef center_crop(image, new_height, new_width):\n    height, width = image.size\n    left = np.ceil((width - new_width)/2.)\n    top = np.ceil((height - new_height)/2.)\n    right = np.floor((width + new_width)/2.)\n    bottom = np.floor((height + new_height)/2.)\n    return image.crop((left, top, right, bottom))\n\n\ndef run_main():\n    parser = argparse.ArgumentParser(description=\'Find similar images in EuclidesDB.\')\n    parser.add_argument(\'--topk\', dest=\'topk\', type=int, required=True,\n                        help=\'Find top k results.\')\n    parser.add_argument(\'--file\', dest=\'filename\', type=str, required=True,\n                        help=\'Image file name.\')\n    args = parser.parse_args()\n\n    image = Image.open(args.filename)\n    image.thumbnail((300, 300), Image.ANTIALIAS)\n    image = center_crop(image, 224, 224)\n\n    with euclides.Channel(""localhost"", 50000) as channel:\n        db = euclides.EuclidesDB(channel)\n        ret_similar = db.find_similar_image(image, [""resnet18""], args.topk)\n\n    print(ret_similar)\n\n\nif __name__ == ""__main__"":\n    run_main()\n'"
source/python/addimage.py,0,"b'import io\nimport sys\n\nfrom PIL import Image\nimport grpc\n\nimport euclidesproto_pb2_grpc as ir_grpc\nimport euclidesproto_pb2 as ir\n\nfrom torchvision.transforms import functional as F\n\n\ndef run_main():\n    im = Image.open(sys.argv[1])\n    image_id = int(sys.argv[2])\n    im.thumbnail((300, 300), Image.ANTIALIAS)\n    img = F.center_crop(im, 224)\n\n    temp = io.BytesIO()\n    img.save(temp, format=""jpeg"")\n    #img.save(""out.jpg"", format=""jpeg"")\n\n    with grpc.insecure_channel(\'localhost:50000\') as channel:\n        stub = ir_grpc.SimilarStub(channel)\n        req = ir.AddImageRequest()\n        req.image_id = image_id\n        req.models.append(""resnet18"")\n        req.models.append(""vgg16"")\n        req.image_data = temp.getvalue()\n        reply = stub.AddImage(req)\n        print(""Num model space added: "", len(reply.vectors))\n\n\nif __name__ == ""__main__"":\n    run_main()\n'"
source/python/findsimilar.py,0,"b'import io\nimport sys\nfrom PIL import Image\nimport grpc\n\nimport euclidesproto_pb2_grpc as ir_grpc\nimport euclidesproto_pb2 as ir\n\nfrom torchvision.transforms import functional as F\n\ndef run_main():\n    im = Image.open(sys.argv[1])\n    im.thumbnail((300, 300), Image.ANTIALIAS)\n    img = F.center_crop(im, 224)\n\n    temp = io.BytesIO()\n    img.save(temp, format=""jpeg"")\n    #img.save(""out.jpg"", format=""jpeg"")\n\n    with grpc.insecure_channel(\'localhost:50000\') as channel:\n        stub = ir_grpc.SimilarStub(channel)\n        req = ir.FindSimilarRequest()\n        req.top_k = 10\n        req.models.append(""resnet18"")\n        req.models.append(""vgg16"")\n        req.image_data = temp.getvalue()\n        reply = stub.FindSimilar(req)\n        print(reply)\n\n\nif __name__ == ""__main__"":\n    run_main()'"
source/python/shutdown.py,0,"b'import sys\nimport grpc\n\nimport euclidesproto_pb2_grpc as ir_grpc\nimport euclidesproto_pb2 as ir\n\ndef run_main():\n    shutdown_type = int(sys.argv[1])\n\n    with grpc.insecure_channel(\'localhost:50000\') as channel:\n        stub = ir_grpc.SimilarStub(channel)\n        req = ir.ShutdownRequest()\n        req.shutdown_type = shutdown_type\n        reply = stub.Shutdown(req)\n        print(reply)\n\n\nif __name__ == ""__main__"":\n    run_main()'"
