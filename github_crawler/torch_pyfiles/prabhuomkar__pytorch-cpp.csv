file_path,api_count,code
tutorials/advanced/neural_style_transfer/model/create_vgg19_layers_scriptmodule.py,2,"b'import torch\nimport torchvision\n\n\ndef main():\n    # Download and load the pretrained VGG19 layers.\n    vgg_19_layers = torchvision.models.vgg19(pretrained=True).features\n\n    for param in vgg_19_layers.parameters():\n        param.requires_grad = False\n\n    example = torch.rand(1, 3, 224, 224)\n\n    traced_script_module = torch.jit.trace(vgg_19_layers, example)\n\n    # Serialize scriptmodule to a file.\n    filename = ""vgg19_layers.pt""\n    traced_script_module.save(filename)\n    print(f""Successfully created scriptmodule file {filename}."")\n\n\nif __name__ == ""__main__"":\n    main()\n'"
tutorials/basics/pytorch_basics/models/create_resnet18_scriptmodule.py,5,"b'import torch\nimport torchvision\n\n\ndef main():\n    # Source: https://github.com/yunjey/pytorch-tutorial/blob/master/tutorials/01-basics/pytorch_basics/main.py\n    # Download and load the pretrained ResNet-18.\n    model = torchvision.models.resnet18(pretrained=True)\n\n    # If you want to finetune only the top layer of the model, set as below\n    for param in model.parameters():\n        param.requires_grad = False\n\n    # Replace the top layer for finetuning.\n    model.fc = torch.nn.Linear(model.fc.in_features, 100)\n\n    # Source: https://pytorch.org/tutorials/advanced/cpp_export.html#converting-to-torch-script-via-tracing\n    # An example input you would normally provide to your model\'s forward() method.\n    example = torch.rand(1, 3, 224, 224)\n\n    # Use torch.jit.trace to generate a torch.jit.ScriptModule via tracing.\n    traced_script_module = torch.jit.trace(model, example)\n\n    # Serialize scriptmodule to a file.\n    filename = ""resnet18_scriptmodule.pt""\n    traced_script_module.save(filename)\n    print(f""Successfully created scriptmodule file {filename}."")\n\n\nif __name__ == ""__main__"":\n    main()\n'"
