file_path,api_count,code
load_data.py,2,"b'# _*_ coding: utf-8 _*_\n\nimport os\nimport sys\nimport torch\nfrom torch.nn import functional as F\nimport numpy as np\nfrom torchtext import data\nfrom torchtext import datasets\nfrom torchtext.vocab import Vectors, GloVe\n\ndef load_dataset(test_sen=None):\n\n    """"""\n    tokenizer : Breaks sentences into a list of words. If sequential=False, no tokenization is applied\n    Field : A class that stores information about the way of preprocessing\n    fix_length : An important property of TorchText is that we can let the input to be variable length, and TorchText will\n                 dynamically pad each sequence to the longest sequence in that ""batch"". But here we are using fi_length which\n                 will pad each sequence to have a fix length of 200.\n                 \n    build_vocab : It will first make a vocabulary or dictionary mapping all the unique words present in the train_data to an\n                  idx and then after it will use GloVe word embedding to map the index to the corresponding word embedding.\n                  \n    vocab.vectors : This returns a torch tensor of shape (vocab_size x embedding_dim) containing the pre-trained word embeddings.\n    BucketIterator : Defines an iterator that batches examples of similar lengths together to minimize the amount of padding needed.\n    \n    """"""\n    \n    tokenize = lambda x: x.split()\n    TEXT = data.Field(sequential=True, tokenize=tokenize, lower=True, include_lengths=True, batch_first=True, fix_length=200)\n    LABEL = data.LabelField(tensor_type=torch.FloatTensor)\n    train_data, test_data = datasets.IMDB.splits(TEXT, LABEL)\n    TEXT.build_vocab(train_data, vectors=GloVe(name=\'6B\', dim=300))\n    LABEL.build_vocab(train_data)\n\n    word_embeddings = TEXT.vocab.vectors\n    print (""Length of Text Vocabulary: "" + str(len(TEXT.vocab)))\n    print (""Vector size of Text Vocabulary: "", TEXT.vocab.vectors.size())\n    print (""Label Length: "" + str(len(LABEL.vocab)))\n\n    train_data, valid_data = train_data.split() # Further splitting of training_data to create new training_data & validation_data\n    train_iter, valid_iter, test_iter = data.BucketIterator.splits((train_data, valid_data, test_data), batch_size=32, sort_key=lambda x: len(x.text), repeat=False, shuffle=True)\n\n    \'\'\'Alternatively we can also use the default configurations\'\'\'\n    # train_iter, test_iter = datasets.IMDB.iters(batch_size=32)\n\n    vocab_size = len(TEXT.vocab)\n\n    return TEXT, vocab_size, word_embeddings, train_iter, valid_iter, test_iter\n'"
main.py,13,"b'import os\nimport time\nimport load_data\nimport torch\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\nimport torch.optim as optim\nimport numpy as np\nfrom models.LSTM import LSTMClassifier\n\nTEXT, vocab_size, word_embeddings, train_iter, valid_iter, test_iter = load_data.load_dataset()\n\ndef clip_gradient(model, clip_value):\n    params = list(filter(lambda p: p.grad is not None, model.parameters()))\n    for p in params:\n        p.grad.data.clamp_(-clip_value, clip_value)\n    \ndef train_model(model, train_iter, epoch):\n    total_epoch_loss = 0\n    total_epoch_acc = 0\n    model.cuda()\n    optim = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()))\n    steps = 0\n    model.train()\n    for idx, batch in enumerate(train_iter):\n        text = batch.text[0]\n        target = batch.label\n        target = torch.autograd.Variable(target).long()\n        if torch.cuda.is_available():\n            text = text.cuda()\n            target = target.cuda()\n        if (text.size()[0] is not 32):# One of the batch returned by BucketIterator has length different than 32.\n            continue\n        optim.zero_grad()\n        prediction = model(text)\n        loss = loss_fn(prediction, target)\n        num_corrects = (torch.max(prediction, 1)[1].view(target.size()).data == target.data).float().sum()\n        acc = 100.0 * num_corrects/len(batch)\n        loss.backward()\n        clip_gradient(model, 1e-1)\n        optim.step()\n        steps += 1\n        \n        if steps % 100 == 0:\n            print (f\'Epoch: {epoch+1}, Idx: {idx+1}, Training Loss: {loss.item():.4f}, Training Accuracy: {acc.item(): .2f}%\')\n        \n        total_epoch_loss += loss.item()\n        total_epoch_acc += acc.item()\n        \n    return total_epoch_loss/len(train_iter), total_epoch_acc/len(train_iter)\n\ndef eval_model(model, val_iter):\n    total_epoch_loss = 0\n    total_epoch_acc = 0\n    model.eval()\n    with torch.no_grad():\n        for idx, batch in enumerate(val_iter):\n            text = batch.text[0]\n            if (text.size()[0] is not 32):\n                continue\n            target = batch.label\n            target = torch.autograd.Variable(target).long()\n            if torch.cuda.is_available():\n                text = text.cuda()\n                target = target.cuda()\n            prediction = model(text)\n            loss = loss_fn(prediction, target)\n            num_corrects = (torch.max(prediction, 1)[1].view(target.size()).data == target.data).sum()\n            acc = 100.0 * num_corrects/len(batch)\n            total_epoch_loss += loss.item()\n            total_epoch_acc += acc.item()\n\n    return total_epoch_loss/len(val_iter), total_epoch_acc/len(val_iter)\n\t\n\nlearning_rate = 2e-5\nbatch_size = 32\noutput_size = 2\nhidden_size = 256\nembedding_length = 300\n\nmodel = LSTMClassifier(batch_size, output_size, hidden_size, vocab_size, embedding_length, word_embeddings)\nloss_fn = F.cross_entropy\n\nfor epoch in range(10):\n    train_loss, train_acc = train_model(model, train_iter, epoch)\n    val_loss, val_acc = eval_model(model, valid_iter)\n    \n    print(f\'Epoch: {epoch+1:02}, Train Loss: {train_loss:.3f}, Train Acc: {train_acc:.2f}%, Val. Loss: {val_loss:3f}, Val. Acc: {val_acc:.2f}%\')\n    \ntest_loss, test_acc = eval_model(model, test_iter)\nprint(f\'Test Loss: {test_loss:.3f}, Test Acc: {test_acc:.2f}%\')\n\n\'\'\' Let us now predict the sentiment on a single sentence just for the testing purpose. \'\'\'\ntest_sen1 = ""This is one of the best creation of Nolan. I can say, it\'s his magnum opus. Loved the soundtrack and especially those creative dialogues.""\ntest_sen2 = ""Ohh, such a ridiculous movie. Not gonna recommend it to anyone. Complete waste of time and money.""\n\ntest_sen1 = TEXT.preprocess(test_sen1)\ntest_sen1 = [[TEXT.vocab.stoi[x] for x in test_sen1]]\n\ntest_sen2 = TEXT.preprocess(test_sen2)\ntest_sen2 = [[TEXT.vocab.stoi[x] for x in test_sen2]]\n\ntest_sen = np.asarray(test_sen1)\ntest_sen = torch.LongTensor(test_sen)\ntest_tensor = Variable(test_sen, volatile=True)\ntest_tensor = test_tensor.cuda()\nmodel.eval()\noutput = model(test_tensor, 1)\nout = F.softmax(output, 1)\nif (torch.argmax(out[0]) == 1):\n    print (""Sentiment: Positive"")\nelse:\n    print (""Sentiment: Negative"")\n'"
models/CNN.py,4,"b'# _*_ coding: utf-8 _*_\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.nn import functional as F\n\nclass CNN(nn.Module):\n\tdef __init__(self, batch_size, output_size, in_channels, out_channels, kernel_heights, stride, padding, keep_probab, vocab_size, embedding_length, weights):\n\t\tsuper(CNN, self).__init__()\n\t\t\n\t\t""""""\n\t\tArguments\n\t\t---------\n\t\tbatch_size : Size of each batch which is same as the batch_size of the data returned by the TorchText BucketIterator\n\t\toutput_size : 2 = (pos, neg)\n\t\tin_channels : Number of input channels. Here it is 1 as the input data has dimension = (batch_size, num_seq, embedding_length)\n\t\tout_channels : Number of output channels after convolution operation performed on the input matrix\n\t\tkernel_heights : A list consisting of 3 different kernel_heights. Convolution will be performed 3 times and finally results from each kernel_height will be concatenated.\n\t\tkeep_probab : Probability of retaining an activation node during dropout operation\n\t\tvocab_size : Size of the vocabulary containing unique words\n\t\tembedding_length : Embedding dimension of GloVe word embeddings\n\t\tweights : Pre-trained GloVe word_embeddings which we will use to create our word_embedding look-up table\n\t\t--------\n\t\t\n\t\t""""""\n\t\tself.batch_size = batch_size\n\t\tself.output_size = output_size\n\t\tself.in_channels = in_channels\n\t\tself.out_channels = out_channels\n\t\tself.kernel_heights = kernel_heights\n\t\tself.stride = stride\n\t\tself.padding = padding\n\t\tself.vocab_size = vocab_size\n\t\tself.embedding_length = embedding_length\n\t\t\n\t\tself.word_embeddings = nn.Embedding(vocab_size, embedding_length)\n\t\tself.word_embeddings.weight = nn.Parameter(weights, requires_grad=False)\n\t\tself.conv1 = nn.Conv2d(in_channels, out_channels, (kernel_heights[0], embedding_length), stride, padding)\n\t\tself.conv2 = nn.Conv2d(in_channels, out_channels, (kernel_heights[1], embedding_length), stride, padding)\n\t\tself.conv3 = nn.Conv2d(in_channels, out_channels, (kernel_heights[2], embedding_length), stride, padding)\n\t\tself.dropout = nn.Dropout(keep_probab)\n\t\tself.label = nn.Linear(len(kernel_heights)*out_channels, output_size)\n\t\n\tdef conv_block(self, input, conv_layer):\n\t\tconv_out = conv_layer(input)# conv_out.size() = (batch_size, out_channels, dim, 1)\n\t\tactivation = F.relu(conv_out.squeeze(3))# activation.size() = (batch_size, out_channels, dim1)\n\t\tmax_out = F.max_pool1d(activation, activation.size()[2]).squeeze(2)# maxpool_out.size() = (batch_size, out_channels)\n\t\t\n\t\treturn max_out\n\t\n\tdef forward(self, input_sentences, batch_size=None):\n\t\t\n\t\t""""""\n\t\tThe idea of the Convolutional Neural Netwok for Text Classification is very simple. We perform convolution operation on the embedding matrix \n\t\twhose shape for each batch is (num_seq, embedding_length) with kernel of varying height but constant width which is same as the embedding_length.\n\t\tWe will be using ReLU activation after the convolution operation and then for each kernel height, we will use max_pool operation on each tensor \n\t\tand will filter all the maximum activation for every channel and then we will concatenate the resulting tensors. This output is then fully connected\n\t\tto the output layers consisting two units which basically gives us the logits for both positive and negative classes.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tinput_sentences: input_sentences of shape = (batch_size, num_sequences)\n\t\tbatch_size : default = None. Used only for prediction on a single sentence after training (batch_size = 1)\n\t\t\n\t\tReturns\n\t\t-------\n\t\tOutput of the linear layer containing logits for pos & neg class.\n\t\tlogits.size() = (batch_size, output_size)\n\t\t\n\t\t""""""\n\t\t\n\t\tinput = self.word_embeddings(input_sentences)\n\t\t# input.size() = (batch_size, num_seq, embedding_length)\n\t\tinput = input.unsqueeze(1)\n\t\t# input.size() = (batch_size, 1, num_seq, embedding_length)\n\t\tmax_out1 = self.conv_block(input, self.conv1)\n\t\tmax_out2 = self.conv_block(input, self.conv2)\n\t\tmax_out3 = self.conv_block(input, self.conv3)\n\t\t\n\t\tall_out = torch.cat((max_out1, max_out2, max_out3), 1)\n\t\t# all_out.size() = (batch_size, num_kernels*out_channels)\n\t\tfc_in = self.dropout(all_out)\n\t\t# fc_in.size()) = (batch_size, num_kernels*out_channels)\n\t\tlogits = self.label(fc_in)\n\t\t\n\t\treturn logits\n'"
models/LSTM.py,7,"b'# _*_ coding: utf-8 _*_\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.nn import functional as F\n\nclass LSTMClassifier(nn.Module):\n\tdef __init__(self, batch_size, output_size, hidden_size, vocab_size, embedding_length, weights):\n\t\tsuper(LSTMClassifier, self).__init__()\n\t\t\n\t\t""""""\n\t\tArguments\n\t\t---------\n\t\tbatch_size : Size of the batch which is same as the batch_size of the data returned by the TorchText BucketIterator\n\t\toutput_size : 2 = (pos, neg)\n\t\thidden_sie : Size of the hidden_state of the LSTM\n\t\tvocab_size : Size of the vocabulary containing unique words\n\t\tembedding_length : Embeddding dimension of GloVe word embeddings\n\t\tweights : Pre-trained GloVe word_embeddings which we will use to create our word_embedding look-up table \n\t\t\n\t\t""""""\n\t\t\n\t\tself.batch_size = batch_size\n\t\tself.output_size = output_size\n\t\tself.hidden_size = hidden_size\n\t\tself.vocab_size = vocab_size\n\t\tself.embedding_length = embedding_length\n\t\t\n\t\tself.word_embeddings = nn.Embedding(vocab_size, embedding_length)# Initializing the look-up table.\n\t\tself.word_embeddings.weight = nn.Parameter(weights, requires_grad=False) # Assigning the look-up table to the pre-trained GloVe word embedding.\n\t\tself.lstm = nn.LSTM(embedding_length, hidden_size)\n\t\tself.label = nn.Linear(hidden_size, output_size)\n\t\t\n\tdef forward(self, input_sentence, batch_size=None):\n\t\n\t\t"""""" \n\t\tParameters\n\t\t----------\n\t\tinput_sentence: input_sentence of shape = (batch_size, num_sequences)\n\t\tbatch_size : default = None. Used only for prediction on a single sentence after training (batch_size = 1)\n\t\t\n\t\tReturns\n\t\t-------\n\t\tOutput of the linear layer containing logits for positive & negative class which receives its input as the final_hidden_state of the LSTM\n\t\tfinal_output.shape = (batch_size, output_size)\n\t\t\n\t\t""""""\n\t\t\n\t\t\'\'\' Here we will map all the indexes present in the input sequence to the corresponding word vector using our pre-trained word_embedddins.\'\'\'\n\t\tinput = self.word_embeddings(input_sentence) # embedded input of shape = (batch_size, num_sequences,  embedding_length)\n\t\tinput = input.permute(1, 0, 2) # input.size() = (num_sequences, batch_size, embedding_length)\n\t\tif batch_size is None:\n\t\t\th_0 = Variable(torch.zeros(1, self.batch_size, self.hidden_size).cuda()) # Initial hidden state of the LSTM\n\t\t\tc_0 = Variable(torch.zeros(1, self.batch_size, self.hidden_size).cuda()) # Initial cell state of the LSTM\n\t\telse:\n\t\t\th_0 = Variable(torch.zeros(1, batch_size, self.hidden_size).cuda())\n\t\t\tc_0 = Variable(torch.zeros(1, batch_size, self.hidden_size).cuda())\n\t\toutput, (final_hidden_state, final_cell_state) = self.lstm(input, (h_0, c_0))\n\t\tfinal_output = self.label(final_hidden_state[-1]) # final_hidden_state.size() = (1, batch_size, hidden_size) & final_output.size() = (batch_size, output_size)\n\t\t\n\t\treturn final_output\n'"
models/LSTM_Attn.py,11,"b'# _*_ coding: utf-8 _*_\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.nn import functional as F\nimport numpy as np\n\nclass AttentionModel(torch.nn.Module):\n\tdef __init__(self, batch_size, output_size, hidden_size, vocab_size, embedding_length, weights):\n\t\tsuper(AttentionModel, self).__init__()\n\t\t\n\t\t""""""\n\t\tArguments\n\t\t---------\n\t\tbatch_size : Size of the batch which is same as the batch_size of the data returned by the TorchText BucketIterator\n\t\toutput_size : 2 = (pos, neg)\n\t\thidden_sie : Size of the hidden_state of the LSTM\n\t\tvocab_size : Size of the vocabulary containing unique words\n\t\tembedding_length : Embeddding dimension of GloVe word embeddings\n\t\tweights : Pre-trained GloVe word_embeddings which we will use to create our word_embedding look-up table \n\t\t\n\t\t--------\n\t\t\n\t\t""""""\n\t\t\n\t\tself.batch_size = batch_size\n\t\tself.output_size = output_size\n\t\tself.hidden_size = hidden_size\n\t\tself.vocab_size = vocab_size\n\t\tself.embedding_length = embedding_length\n\t\t\n\t\tself.word_embeddings = nn.Embedding(vocab_size, embedding_length)\n\t\tself.word_embeddings.weights = nn.Parameter(weights, requires_grad=False)\n\t\tself.lstm = nn.LSTM(embedding_length, hidden_size)\n\t\tself.label = nn.Linear(hidden_size, output_size)\n\t\t#self.attn_fc_layer = nn.Linear()\n\t\t\n\tdef attention_net(self, lstm_output, final_state):\n\n\t\t"""""" \n\t\tNow we will incorporate Attention mechanism in our LSTM model. In this new model, we will use attention to compute soft alignment score corresponding\n\t\tbetween each of the hidden_state and the last hidden_state of the LSTM. We will be using torch.bmm for the batch matrix multiplication.\n\t\t\n\t\tArguments\n\t\t---------\n\t\t\n\t\tlstm_output : Final output of the LSTM which contains hidden layer outputs for each sequence.\n\t\tfinal_state : Final time-step hidden state (h_n) of the LSTM\n\t\t\n\t\t---------\n\t\t\n\t\tReturns : It performs attention mechanism by first computing weights for each of the sequence present in lstm_output and and then finally computing the\n\t\t\t\t  new hidden state.\n\t\t\t\t  \n\t\tTensor Size :\n\t\t\t\t\thidden.size() = (batch_size, hidden_size)\n\t\t\t\t\tattn_weights.size() = (batch_size, num_seq)\n\t\t\t\t\tsoft_attn_weights.size() = (batch_size, num_seq)\n\t\t\t\t\tnew_hidden_state.size() = (batch_size, hidden_size)\n\t\t\t\t\t  \n\t\t""""""\n\t\t\n\t\thidden = final_state.squeeze(0)\n\t\tattn_weights = torch.bmm(lstm_output, hidden.unsqueeze(2)).squeeze(2)\n\t\tsoft_attn_weights = F.softmax(attn_weights, 1)\n\t\tnew_hidden_state = torch.bmm(lstm_output.transpose(1, 2), soft_attn_weights.unsqueeze(2)).squeeze(2)\n\t\t\n\t\treturn new_hidden_state\n\t\n\tdef forward(self, input_sentences, batch_size=None):\n\t\n\t\t"""""" \n\t\tParameters\n\t\t----------\n\t\tinput_sentence: input_sentence of shape = (batch_size, num_sequences)\n\t\tbatch_size : default = None. Used only for prediction on a single sentence after training (batch_size = 1)\n\t\t\n\t\tReturns\n\t\t-------\n\t\tOutput of the linear layer containing logits for pos & neg class which receives its input as the new_hidden_state which is basically the output of the Attention network.\n\t\tfinal_output.shape = (batch_size, output_size)\n\t\t\n\t\t""""""\n\t\t\n\t\tinput = self.word_embeddings(input_sentences)\n\t\tinput = input.permute(1, 0, 2)\n\t\tif batch_size is None:\n\t\t\th_0 = Variable(torch.zeros(1, self.batch_size, self.hidden_size).cuda())\n\t\t\tc_0 = Variable(torch.zeros(1, self.batch_size, self.hidden_size).cuda())\n\t\telse:\n\t\t\th_0 = Variable(torch.zeros(1, batch_size, self.hidden_size).cuda())\n\t\t\tc_0 = Variable(torch.zeros(1, batch_size, self.hidden_size).cuda())\n\t\t\t\n\t\toutput, (final_hidden_state, final_cell_state) = self.lstm(input, (h_0, c_0)) # final_hidden_state.size() = (1, batch_size, hidden_size) \n\t\toutput = output.permute(1, 0, 2) # output.size() = (batch_size, num_seq, hidden_size)\n\t\t\n\t\tattn_output = self.attention_net(output, final_hidden_state)\n\t\tlogits = self.label(attn_output)\n\t\t\n\t\treturn logits\n'"
models/RCNN.py,8,"b'# _*_ coding: utf-8 _*_\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.nn import functional as F\n\nclass RCNN(nn.Module):\n\tdef __init__(self, batch_size, output_size, hidden_size, vocab_size, embedding_length, weights):\n\t\tsuper(RCNN, self).__init__()\n\t\t\n\t\t""""""\n\t\tArguments\n\t\t---------\n\t\tbatch_size : Size of the batch which is same as the batch_size of the data returned by the TorchText BucketIterator\n\t\toutput_size : 2 = (pos, neg)\n\t\thidden_sie : Size of the hidden_state of the LSTM\n\t\tvocab_size : Size of the vocabulary containing unique words\n\t\tembedding_length : Embedding dimension of GloVe word embeddings\n\t\tweights : Pre-trained GloVe word_embeddings which we will use to create our word_embedding look-up table \n\t\t\n\t\t""""""\n\t\t\n\t\tself.batch_size = batch_size\n\t\tself.output_size = output_size\n\t\tself.hidden_size = hidden_size\n\t\tself.vocab_size = vocab_size\n\t\tself.embedding_length = embedding_length\n\t\t\n\t\tself.word_embeddings = nn.Embedding(vocab_size, embedding_length)# Initializing the look-up table.\n\t\tself.word_embeddings.weight = nn.Parameter(weights, requires_grad=False) # Assigning the look-up table to the pre-trained GloVe word embedding.\n\t\tself.dropout = 0.8\n\t\tself.lstm = nn.LSTM(embedding_length, hidden_size, dropout=self.dropout, bidirectional=True)\n\t\tself.W2 = nn.Linear(2*hidden_size+embedding_length, hidden_size)\n\t\tself.label = nn.Linear(hidden_size, output_size)\n\t\t\n\tdef forward(self, input_sentence, batch_size=None):\n\t\n\t\t"""""" \n\t\tParameters\n\t\t----------\n\t\tinput_sentence: input_sentence of shape = (batch_size, num_sequences)\n\t\tbatch_size : default = None. Used only for prediction on a single sentence after training (batch_size = 1)\n\t\t\n\t\tReturns\n\t\t-------\n\t\tOutput of the linear layer containing logits for positive & negative class which receives its input as the final_hidden_state of the LSTM\n\t\tfinal_output.shape = (batch_size, output_size)\n\t\t\n\t\t""""""\n\t\t\n\t\t""""""\n\t\t\n\t\tThe idea of the paper ""Recurrent Convolutional Neural Networks for Text Classification"" is that we pass the embedding vector\n\t\tof the text sequences through a bidirectional LSTM and then for each sequence, our final embedding vector is the concatenation of \n\t\tits own GloVe embedding and the left and right contextual embedding which in bidirectional LSTM is same as the corresponding hidden\n\t\tstate. This final embedding is passed through a linear layer which maps this long concatenated encoding vector back to the hidden_size\n\t\tvector. After this step, we use a max pooling layer across all sequences of texts. This converts any varying length text into a fixed\n\t\tdimension tensor of size (batch_size, hidden_size) and finally we map this to the output layer.\n\n\t\t""""""\n\t\tinput = self.word_embeddings(input_sentence) # embedded input of shape = (batch_size, num_sequences, embedding_length)\n\t\tinput = input.permute(1, 0, 2) # input.size() = (num_sequences, batch_size, embedding_length)\n\t\tif batch_size is None:\n\t\t\th_0 = Variable(torch.zeros(2, self.batch_size, self.hidden_size).cuda()) # Initial hidden state of the LSTM\n\t\t\tc_0 = Variable(torch.zeros(2, self.batch_size, self.hidden_size).cuda()) # Initial cell state of the LSTM\n\t\telse:\n\t\t\th_0 = Variable(torch.zeros(2, batch_size, self.hidden_size).cuda())\n\t\t\tc_0 = Variable(torch.zeros(2, batch_size, self.hidden_size).cuda())\n\n\t\toutput, (final_hidden_state, final_cell_state) = self.lstm(input, (h_0, c_0))\n\t\t\n\t\tfinal_encoding = torch.cat((output, input), 2).permute(1, 0, 2)\n\t\ty = self.W2(final_encoding) # y.size() = (batch_size, num_sequences, hidden_size)\n\t\ty = y.permute(0, 2, 1) # y.size() = (batch_size, hidden_size, num_sequences)\n\t\ty = F.max_pool1d(y, y.size()[2]) # y.size() = (batch_size, hidden_size, 1)\n\t\ty = y.squeeze(2)\n\t\tlogits = self.label(y)\n\t\t\n\t\treturn logits\n'"
models/RNN.py,5,"b'import torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.nn import functional as F\n\nclass RNN(nn.Module):\n\tdef __init__(self, batch_size, output_size, hidden_size, vocab_size, embedding_length, weights):\n\t\tsuper(RNN, self).__init__()\n\n\t\t""""""\n\t\tArguments\n\t\t---------\n\t\tbatch_size : Size of the batch which is same as the batch_size of the data returned by the TorchText BucketIterator\n\t\toutput_size : 2 = (pos, neg)\n\t\thidden_sie : Size of the hidden_state of the LSTM\n\t\tvocab_size : Size of the vocabulary containing unique words\n\t\tembedding_length : Embeddding dimension of GloVe word embeddings\n\t\tweights : Pre-trained GloVe word_embeddings which we will use to create our word_embedding look-up table \n\t\t\n\t\t""""""\n\n\t\tself.batch_size = batch_size\n\t\tself.output_size = output_size\n\t\tself.hidden_size = hidden_size\n\t\tself.vocab_size = vocab_size\n\t\tself.embedding_length = embedding_length\n\t\t\n\t\tself.word_embeddings = nn.Embedding(vocab_size, embedding_length)\n\t\tself.word_embeddings.weight = nn.Parameter(weights, requires_grad=False)\n\t\tself.rnn = nn.RNN(embedding_length, hidden_size, num_layers=2, bidirectional=True)\n\t\tself.label = nn.Linear(4*hidden_size, output_size)\n\t\n\tdef forward(self, input_sentences, batch_size=None):\n\t\t\n\t\t"""""" \n\t\tParameters\n\t\t----------\n\t\tinput_sentence: input_sentence of shape = (batch_size, num_sequences)\n\t\tbatch_size : default = None. Used only for prediction on a single sentence after training (batch_size = 1)\n\t\t\n\t\tReturns\n\t\t-------\n\t\tOutput of the linear layer containing logits for pos & neg class which receives its input as the final_hidden_state of RNN.\n\t\tlogits.size() = (batch_size, output_size)\n\t\t\n\t\t""""""\n\n\t\tinput = self.word_embeddings(input_sentences)\n\t\tinput = input.permute(1, 0, 2)\n\t\tif batch_size is None:\n\t\t\th_0 = Variable(torch.zeros(4, self.batch_size, self.hidden_size).cuda()) # 4 = num_layers*num_directions\n\t\telse:\n\t\t\th_0 =  Variable(torch.zeros(4, batch_size, self.hidden_size).cuda())\n\t\toutput, h_n = self.rnn(input, h_0)\n\t\t# h_n.size() = (4, batch_size, hidden_size)\n\t\th_n = h_n.permute(1, 0, 2) # h_n.size() = (batch_size, 4, hidden_size)\n\t\th_n = h_n.contiguous().view(h_n.size()[0], h_n.size()[1]*h_n.size()[2])\n\t\t# h_n.size() = (batch_size, 4*hidden_size)\n\t\tlogits = self.label(h_n) # logits.size() = (batch_size, output_size)\n\t\t\n\t\treturn logits\n'"
models/selfAttention.py,8,"b'# _*_ coding: utf-8 _*_\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.nn import functional as F\n\nclass SelfAttention(nn.Module):\n\tdef __init__(self, batch_size, output_size, hidden_size, vocab_size, embedding_length, weights):\n\t\tsuper(SelfAttention, self).__init__()\n\n\t\t""""""\n\t\tArguments\n\t\t---------\n\t\tbatch_size : Size of the batch which is same as the batch_size of the data returned by the TorchText BucketIterator\n\t\toutput_size : 2 = (pos, neg)\n\t\thidden_sie : Size of the hidden_state of the LSTM\n\t\tvocab_size : Size of the vocabulary containing unique words\n\t\tembedding_length : Embeddding dimension of GloVe word embeddings\n\t\tweights : Pre-trained GloVe word_embeddings which we will use to create our word_embedding look-up table \n\t\t\n\t\t--------\n\t\t\n\t\t""""""\n\n\t\tself.batch_size = batch_size\n\t\tself.output_size = output_size\n\t\tself.hidden_size = hidden_size\n\t\tself.vocab_size = vocab_size\n\t\tself.embedding_length = embedding_length\n\t\tself.weights = weights\n\n\t\tself.word_embeddings = nn.Embedding(vocab_size, embedding_length)\n\t\tself.word_embeddings.weights = nn.Parameter(weights, requires_grad=False)\n\t\tself.dropout = 0.8\n\t\tself.bilstm = nn.LSTM(embedding_length, hidden_size, dropout=self.dropout, bidirectional=True)\n\t\t# We will use da = 350, r = 30 & penalization_coeff = 1 as per given in the self-attention original ICLR paper\n\t\tself.W_s1 = nn.Linear(2*hidden_size, 350)\n\t\tself.W_s2 = nn.Linear(350, 30)\n\t\tself.fc_layer = nn.Linear(30*2*hidden_size, 2000)\n\t\tself.label = nn.Linear(2000, output_size)\n\n\tdef attention_net(self, lstm_output):\n\n\t\t""""""\n\t\tNow we will use self attention mechanism to produce a matrix embedding of the input sentence in which every row represents an\n\t\tencoding of the inout sentence but giving an attention to a specific part of the sentence. We will use 30 such embedding of \n\t\tthe input sentence and then finally we will concatenate all the 30 sentence embedding vectors and connect it to a fully \n\t\tconnected layer of size 2000 which will be connected to the output layer of size 2 returning logits for our two classes i.e., \n\t\tpos & neg.\n\n\t\tArguments\n\t\t---------\n\n\t\tlstm_output = A tensor containing hidden states corresponding to each time step of the LSTM network.\n\t\t---------\n\n\t\tReturns : Final Attention weight matrix for all the 30 different sentence embedding in which each of 30 embeddings give\n\t\t\t\t  attention to different parts of the input sentence.\n\n\t\tTensor size : lstm_output.size() = (batch_size, num_seq, 2*hidden_size)\n\t\t\t\t\t  attn_weight_matrix.size() = (batch_size, 30, num_seq)\n\n\t\t""""""\n\t\tattn_weight_matrix = self.W_s2(F.tanh(self.W_s1(lstm_output)))\n\t\tattn_weight_matrix = attn_weight_matrix.permute(0, 2, 1)\n\t\tattn_weight_matrix = F.softmax(attn_weight_matrix, dim=2)\n\n\t\treturn attn_weight_matrix\n\n\tdef forward(self, input_sentences, batch_size=None):\n\n\t\t"""""" \n\t\tParameters\n\t\t----------\n\t\tinput_sentence: input_sentence of shape = (batch_size, num_sequences)\n\t\tbatch_size : default = None. Used only for prediction on a single sentence after training (batch_size = 1)\n\t\t\n\t\tReturns\n\t\t-------\n\t\tOutput of the linear layer containing logits for pos & neg class.\n\t\t\n\t\t""""""\n\n\t\tinput = self.word_embeddings(input_sentences)\n\t\tinput = input.permute(1, 0, 2)\n\t\tif batch_size is None:\n\t\t\th_0 = Variable(torch.zeros(2, self.batch_size, self.hidden_size).cuda())\n\t\t\tc_0 = Variable(torch.zeros(2, self.batch_size, self.hidden_size).cuda())\n\t\telse:\n\t\t\th_0 = Variable(torch.zeros(2, batch_size, self.hidden_size).cuda())\n\t\t\tc_0 = Variable(torch.zeros(2, batch_size, self.hidden_size).cuda())\n\n\t\toutput, (h_n, c_n) = self.bilstm(input, (h_0, c_0))\n\t\toutput = output.permute(1, 0, 2)\n\t\t# output.size() = (batch_size, num_seq, 2*hidden_size)\n\t\t# h_n.size() = (1, batch_size, hidden_size)\n\t\t# c_n.size() = (1, batch_size, hidden_size)\n\t\tattn_weight_matrix = self.attention_net(output)\n\t\t# attn_weight_matrix.size() = (batch_size, r, num_seq)\n\t\t# output.size() = (batch_size, num_seq, 2*hidden_size)\n\t\thidden_matrix = torch.bmm(attn_weight_matrix, output)\n\t\t# hidden_matrix.size() = (batch_size, r, 2*hidden_size)\n\t\t# Let\'s now concatenate the hidden_matrix and connect it to the fully connected layer.\n\t\tfc_out = self.fc_layer(hidden_matrix.view(-1, hidden_matrix.size()[1]*hidden_matrix.size()[2]))\n\t\tlogits = self.label(fc_out)\n\t\t# logits.size() = (batch_size, output_size)\n\n\t\treturn logits'"
