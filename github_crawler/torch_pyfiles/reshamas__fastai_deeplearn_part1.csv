file_path,api_count,code
tools/check_links.py,0,"b'#!/usr/bin/env python\n\n# Objective:  run a script to check an *.md file to see that all links are valid\n\n# EXAMPLE of how to run file:  \n""""""\n\xe2\x96\xb6 pwd\n/Users/reshamashaikh/ds/my_repos/fastai_deeplearn_part1/tools\n\nmy_repos/fastai_deeplearn_part1/tools \n\xe2\x96\xb6 python check_links.py -v /Users/reshamashaikh/ds/my_repos/fastai_deeplearn_part1/README.md\nVALID   http://www.fast.ai\nVALID   http://forums.fast.ai/c/part1-v2\nVALID   http://forums.fast.ai/c/part1v2-beg\nVALID   https://github.com/fastai/fastai\nVALID   tools/aws_ami_gpu_setup.md\nVALID   tools/tmux.md\nVALID   resources.md\n\nmy_repos/fastai_deeplearn_part1/tools\n\xe2\x96\xb6 python check_links.py -v /Users/reshamashaikh/ds/my_repos/fastai_deeplearn_part1/tools/tmux.md\nVALID   #section-a\nVALID   #section-b\nVALID   #section-c\nVALID   #section-d\nVALID   #section-e\nVALID   https://hackernoon.com/a-gentle-introduction-to-tmux-8d784c404340\nVALID   https://alekshnayder.com\nVALID   http://console.aws.amazon.com/\n\n""""""\n\n# Running Python 3\n\n__author__ = \'taylanbil\'\n\n\nimport os\nimport markdown\nfrom argparse import ArgumentParser\n\nfrom bs4 import BeautifulSoup\n\n\nclass LinkChecker(object):\n\n    def __init__(self, mdfilename, verbose=False):\n        """"""\n        input: mdfilename has to be the full path!!!\n        """"""\n        self.mdfilename = mdfilename\n        self.path = os.path.abspath(os.path.dirname(mdfilename))\n        self.soup = self.get_soup()\n        self.verbose = verbose\n\n    def validate_link(self, link):\n        if link.startswith(\'http\'):\n            return True\n        elif link.startswith(\'#\'):\n            return bool(self.soup.find_all(\'a\', {\'name\': link[1:]}))\n        elif link.startswith(\'/\'):\n            return os.path.exists(os.path.join(self.path, link[1:]))\n        else:\n            return os.path.exists(os.path.join(self.path, link))\n\n    def get_soup(self):\n        with open(self.mdfilename, \'r\') as f:\n            md = markdown.markdown(f.read())\n        soup = BeautifulSoup(md, ""lxml"")\n        return soup\n\n    def get_links(self):\n        for link in self.soup.find_all(\'a\', href=True):\n            yield link[\'href\']\n\n    def process_link(self, link):\n        isvalid = \'VALID\' if self.validate_link(link) else \'INVALID\'\n        if self.verbose or isvalid == \'INVALID\':\n            print(\'{isvalid}\\t{link}\'.format(isvalid=isvalid, link=link))\n\n    def main(self):\n        for link in self.get_links():\n            self.process_link(link)\n\n\ndef get_namespace():\n    parser = ArgumentParser()\n    parser.add_argument(\n        \'mdfilename\', help=\'\'\'full path to the .md file you would like\n        to check links in\'\'\')\n    parser.add_argument(\n        \'-v\', \'--verbose\', action=\'store_true\',\n        help=\'\'\'verbose flag. if specified, prints all links with\n        results. Otherwise, prints invalid links only\'\'\')\n    return parser.parse_args()\n\n\nif __name__ == \'__main__\':\n    ns = get_namespace()\n    LC = LinkChecker(ns.mdfilename, verbose=ns.verbose)\n    LC.main()\n\n    # # a test here\n    # mdfile = \'/Users/reshamashaikh/ds/my_repos/fastai_deeplearn_part1/README.md\'\n    # LC = LinkChecker(mdfile)\n    # LC.main()\n\n'"
