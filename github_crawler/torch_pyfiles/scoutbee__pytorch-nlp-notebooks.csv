file_path,api_count,code
transformer/__init__.py,0,b''
transformer/batch.py,9,"b'from collections import Counter\n\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom nltk.tokenize import wordpunct_tokenize\nfrom torch import optim\nfrom torch.autograd import Variable\nfrom torch.nn.utils.rnn import pad_sequence\nfrom torch.utils.data import Dataset, DataLoader, Subset\n\n\ndef tokenize(text):\n    """"""Turn text into discrete tokens.\n\n    Remove tokens that are not words.\n    """"""\n    text = text.lower()\n    tokens = wordpunct_tokenize(text)\n\n    # Only keep words\n    tokens = [token for token in tokens\n              if all(char.isalpha() for char in token)]\n\n    return tokens\n\n\nclass EnglishFrenchTranslations(Dataset):\n    def __init__(self, path, max_vocab, max_seq_len):\n        self.max_vocab = max_vocab\n        \n        # Extra tokens to add\n        self.padding_token = \'<PAD>\'\n        self.start_of_sequence_token = \'<SOS>\'\n        self.end_of_sequence_token = \'<EOS>\'\n        self.unknown_word_token = \'<UNK>\'\n        self.max_seq_len = max_seq_len\n        \n        # Helper function\n        self.flatten = lambda x: [sublst for lst in x for sublst in lst]\n        \n        # Load the data into a DataFrame\n        df = pd.read_csv(path, names=[\'english\', \'french\'], sep=\'\\t\')\n        \n        # filter out too long sequences\n        df = self.filter_seq_len(df, max_len=self.max_seq_len)\n        \n        # Tokenize inputs (English) and targets (French)\n        self.tokenize_df(df)\n\n        # To reduce computational complexity, replace rare words with <UNK>\n        self.replace_rare_tokens(df)\n        \n        # Prepare variables with mappings of tokens to indices\n        self.create_token2idx(df)\n        \n        # Remove sequences with mostly <UNK>\n        df = self.remove_mostly_unk(df)\n        \n        # Every sequence (input and target) should start with <SOS>\n        # and end with <EOS>\n        self.add_start_and_end_to_tokens(df)\n        \n        # Convert tokens to indices\n        self.tokens_to_indices(df)\n        \n    def __getitem__(self, idx):\n        """"""Return example at index idx.""""""\n        return self.indices_pairs[idx][0], self.indices_pairs[idx][1]\n    \n    def tokenize_df(self, df):\n        """"""Turn inputs and targets into tokens.""""""\n        df[\'tokens_inputs\'] = df.english.apply(tokenize)\n        df[\'tokens_targets\'] = df.french.apply(tokenize)\n        \n    def replace_rare_tokens(self, df):\n        """"""Replace rare tokens with <UNK>.""""""\n        common_tokens_inputs = self.get_most_common_tokens(\n            df.tokens_inputs.tolist(),\n        )\n        common_tokens_targets = self.get_most_common_tokens(\n            df.tokens_targets.tolist(),\n        )\n        \n        df.loc[:, \'tokens_inputs\'] = df.tokens_inputs.apply(\n            lambda tokens: [token if token in common_tokens_inputs \n                            else self.unknown_word_token for token in tokens]\n        )\n        df.loc[:, \'tokens_targets\'] = df.tokens_targets.apply(\n            lambda tokens: [token if token in common_tokens_targets\n                            else self.unknown_word_token for token in tokens]\n        )\n\n    def get_most_common_tokens(self, tokens_series):\n        """"""Return the max_vocab most common tokens.""""""\n        all_tokens = self.flatten(tokens_series)\n        # Substract 4 for <PAD>, <SOS>, <EOS>, and <UNK>\n        common_tokens = set(list(zip(*Counter(all_tokens).most_common(\n            self.max_vocab - 4)))[0])\n        return common_tokens\n\n    def remove_mostly_unk(self, df, threshold=0.99):\n        """"""Remove sequences with mostly <UNK>.""""""\n        calculate_ratio = (\n            lambda tokens: sum(1 for token in tokens if token != \'<UNK>\')\n            / len(tokens) > threshold\n        )\n        df = df[df.tokens_inputs.apply(calculate_ratio)]\n        df = df[df.tokens_targets.apply(calculate_ratio)]\n        return df\n    \n    def filter_seq_len(self, df, max_len=100):\n        mask = (df[\'english\'].str.count(\' \') < max_len) & (df[\'french\'].str.count(\' \') < max_len)\n        return df.loc[mask]\n        \n    def create_token2idx(self, df):\n        """"""Create variables with mappings from tokens to indices.""""""\n        unique_tokens_inputs = set(self.flatten(df.tokens_inputs))\n        unique_tokens_targets = set(self.flatten(df.tokens_targets))\n        \n        for token in reversed([\n            self.padding_token,\n            self.start_of_sequence_token,\n            self.end_of_sequence_token,\n            self.unknown_word_token,\n        ]):\n            if token in unique_tokens_inputs:\n                unique_tokens_inputs.remove(token)\n            if token in unique_tokens_targets:\n                unique_tokens_targets.remove(token)\n                \n        unique_tokens_inputs = sorted(list(unique_tokens_inputs))\n        unique_tokens_targets = sorted(list(unique_tokens_targets))\n\n        # Add <PAD>, <SOS>, <EOS>, and <UNK> tokens\n        for token in reversed([\n            self.padding_token,\n            self.start_of_sequence_token,\n            self.end_of_sequence_token,\n            self.unknown_word_token,\n        ]):\n            \n            unique_tokens_inputs = [token] + unique_tokens_inputs\n            unique_tokens_targets = [token] + unique_tokens_targets\n            \n        self.token2idx_inputs = {token: idx for idx, token\n                                 in enumerate(unique_tokens_inputs)}\n        self.idx2token_inputs = {idx: token for token, idx\n                                 in self.token2idx_inputs.items()}\n        \n        self.token2idx_targets = {token: idx for idx, token\n                                  in enumerate(unique_tokens_targets)}\n        self.idx2token_targets = {idx: token for token, idx\n                                  in self.token2idx_targets.items()}\n        \n    def add_start_and_end_to_tokens(self, df):\n        """"""Add <SOS> and <EOS> tokens to the end of every input and output.""""""\n        df.loc[:, \'tokens_inputs\'] = (\n            [self.start_of_sequence_token]\n            + df.tokens_inputs\n            + [self.end_of_sequence_token]\n        )\n        df.loc[:, \'tokens_targets\'] = (\n            [self.start_of_sequence_token]\n            + df.tokens_targets\n            + [self.end_of_sequence_token]\n        )\n        \n    def tokens_to_indices(self, df):\n        """"""Convert tokens to indices.""""""\n        df[\'indices_inputs\'] = df.tokens_inputs.apply(\n            lambda tokens: [self.token2idx_inputs[token] for token in tokens])\n        df[\'indices_targets\'] = df.tokens_targets.apply(\n            lambda tokens: [self.token2idx_targets[token] for token in tokens])\n             \n        self.indices_pairs = list(zip(df.indices_inputs, df.indices_targets))\n        \n    def __len__(self):\n        return len(self.indices_pairs)\n\n\ndef collate(batch, src_pad, trg_pad, device):\n    inputs = [torch.LongTensor(item[0]) for item in batch]\n    targets = [torch.LongTensor(item[1]) for item in batch]\n    \n    # Pad sequencse so that they are all the same length (within one minibatch)\n    padded_inputs = pad_sequence(inputs, padding_value=src_pad, batch_first=True)\n    padded_targets = pad_sequence(targets, padding_value=trg_pad, batch_first=True)\n    \n    # Sort by length for CUDA optimizations\n    lengths = torch.LongTensor([len(x) for x in inputs])\n    lengths, permutation = lengths.sort(dim=0, descending=True)\n\n    return padded_inputs[permutation].to(device), padded_targets[permutation].to(device), lengths.to(device)\n\n\ndef no_peak_mask(size):\n    mask = np.triu(np.ones((1, size, size)), k=1).astype(\'uint8\')\n    mask =  Variable(torch.from_numpy(mask) == 0)\n    return mask\n\n\ndef create_masks(src, trg, src_pad_idx, trg_pad_idx):\n    src_mask = (src != src_pad_idx).unsqueeze(-2)\n    if trg is not None:\n        trg_mask = (trg != trg_pad_idx).unsqueeze(-2)\n        size = trg.size(1) # get seq_len for matrix\n        np_mask = no_peak_mask(size).to(trg_mask.device)\n        trg_mask = trg_mask & np_mask\n    else:\n        trg_mask = None\n    return src_mask, trg_mask\n'"
transformer/embed.py,3,"b""import torch\nimport torch.nn as nn\nimport math\nfrom torch.autograd import Variable\n\n\nclass Embedder(nn.Module):\n    def __init__(self, vocab_size, d_model):\n        super().__init__()\n        self.d_model = d_model\n        self.embed = nn.Embedding(vocab_size, d_model)\n    \n    def forward(self, x):\n        x = self.embed(x)\n        # make embeddings relatively larger\n        return x * math.sqrt(self.d_model)\n\n\nclass PositionalEncoder(nn.Module):\n    def __init__(self, d_model, max_seq_len=200, dropout=0.1):\n        super().__init__()\n        self.d_model = d_model\n        self.dropout = nn.Dropout(dropout)\n        # create constant 'pe' matrix \n        pe = torch.zeros(max_seq_len, d_model)\n        for pos in range(max_seq_len):\n            for i in range(0, d_model, 2):\n                pe[pos, i] = math.sin(pos / (10000 ** ((2 * i)/d_model)))\n                pe[pos, i + 1] = math.cos(pos / (10000 ** ((2 * (i + 1))/d_model)))\n        pe = pe.unsqueeze(0)\n        self.register_buffer('pe', pe)\n \n    def forward(self, x):\n        seq_len = x.size()[-2]\n        pe = Variable(self.pe[:,:seq_len], requires_grad=False)\n        if x.is_cuda:\n            pe.cuda()\n        x = x + pe\n        return self.dropout(x)\n"""
transformer/layer.py,1,"b""import torch\nimport torch.nn as nn\n\nfrom .sublayer import FeedForward, MultiHeadAttention, Norm\n\n\nclass EncoderLayer(nn.Module):\n    def __init__(self, d_model, heads, dropout=0.1):\n        super().__init__()\n        self.norm_1 = Norm(d_model)\n        self.norm_2 = Norm(d_model)\n        self.attn = MultiHeadAttention(heads, d_model, dropout=dropout)\n        self.ff = FeedForward(d_model, dropout=dropout)\n        self.dropout_1 = nn.Dropout(dropout)\n        self.dropout_2 = nn.Dropout(dropout)\n        \n    def forward(self, x, mask):\n        x2 = self.norm_1(x)\n        # encoder self-attention\n        x = x + self.dropout_1(self.attn(x2, x2, x2, mask))\n        x2 = self.norm_2(x)\n        x = x + self.dropout_2(self.ff(x2))\n        return x\n\n\nclass DecoderLayer(nn.Module):\n    '''build a decoder layer with 2 multi-head attention layers and 1 feed-forward layer'''\n    def __init__(self, d_model, heads, dropout=0.1):\n        super().__init__()\n        self.norm_1 = Norm(d_model)\n        self.norm_2 = Norm(d_model)\n        self.norm_3 = Norm(d_model)\n        \n        self.dropout_1 = nn.Dropout(dropout)\n        self.dropout_2 = nn.Dropout(dropout)\n        self.dropout_3 = nn.Dropout(dropout)\n        \n        self.attn_1 = MultiHeadAttention(heads, d_model, dropout=dropout)\n        self.attn_2 = MultiHeadAttention(heads, d_model, dropout=dropout)\n        self.ff = FeedForward(d_model, dropout=dropout)\n\n    def forward(self, x, e_outputs, src_mask, trg_mask):\n        x2 = self.norm_1(x)\n        # decoder self-attention with target masking\n        x = x + self.dropout_1(self.attn_1(x2, x2, x2, trg_mask))\n        x2 = self.norm_2(x)\n        # encoder-decoder attention\n        # q is previous position decoder output, k and v is from encoder output\n        x = x + self.dropout_2(self.attn_2(x2, e_outputs, e_outputs, src_mask))\n        x2 = self.norm_3(x)\n        x = x + self.dropout_3(self.ff(x2))\n        return x\n"""
transformer/model.py,12,"b'import math\n\nimport copy\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom .batch import no_peak_mask, create_masks\nfrom .layer import EncoderLayer, DecoderLayer\nfrom .embed import Embedder, PositionalEncoder\nfrom .sublayer import Norm\n\n\ndef get_layer_clones(module, N):\n    return nn.ModuleList([copy.deepcopy(module) for i in range(N)])\n\n\nclass Encoder(nn.Module):\n    def __init__(self, vocab_size, d_model, N, heads, dropout):\n        super().__init__()\n        self.N = N\n        self.embed = Embedder(vocab_size, d_model)\n        self.pe = PositionalEncoder(d_model, dropout=dropout)\n        self.layers = get_layer_clones(EncoderLayer(d_model, heads, dropout), N)\n        self.norm = Norm(d_model)\n    \n    def forward(self, src, mask):\n        x = self.embed(src)\n        x = self.pe(x)\n        for i in range(self.N):\n            x = self.layers[i](x, mask)\n        return self.norm(x)\n\n    \nclass Decoder(nn.Module):\n    def __init__(self, vocab_size, d_model, N, heads, dropout):\n        super().__init__()\n        self.N = N\n        self.embed = Embedder(vocab_size, d_model)\n        self.pe = PositionalEncoder(d_model, dropout=dropout)\n        self.layers = get_layer_clones(DecoderLayer(d_model, heads, dropout), N)\n        self.norm = Norm(d_model)\n    \n    def forward(self, trg, e_outputs, src_mask, trg_mask):\n        x = self.embed(trg)\n        x = self.pe(x)\n        for i in range(self.N):\n            x = self.layers[i](x, e_outputs, src_mask, trg_mask)\n        return self.norm(x)\n\n\nclass Transformer(nn.Module):\n    def __init__(self, src_vocab_size, trg_vocab_size, d_model, N, heads, dropout):\n        super().__init__()\n        self.encoder = Encoder(src_vocab_size, d_model, N, heads, dropout)\n        self.decoder = Decoder(trg_vocab_size, d_model, N, heads, dropout)\n        self.out = nn.Linear(d_model, trg_vocab_size)\n    \n    def forward(self, src, trg, src_mask, trg_mask):\n        e_outputs = self.encoder(src, src_mask)\n        d_output = self.decoder(trg, e_outputs, src_mask, trg_mask)\n        output = self.out(d_output)\n        return output\n    \n    def pred_init_seq(self, src, src_mask, sos, max_seq_len, beam_size):\n        batch_size = len(src)\n        encoder_output = self.encoder(src, src_mask)\n        targets = torch.LongTensor([[sos] for i in range(batch_size)]).to(src.device)\n        trg_mask = no_peak_mask(1).to(src.device)\n        \n        # 1st output (batch_size, 1, target_vocab)\n        output = F.softmax(\n            self.out(self.decoder(targets, encoder_output, src_mask, trg_mask)),\n            dim=-1,\n        )\n        \n        # top k word predictions\n        k_probs, k_idx = output[:, -1].data.topk(beam_size)\n        k_log_probs = torch.Tensor([\n            math.log(p) for p in k_probs.data.view(-1)\n        ]).view(batch_size, -1).to(src.device)\n        \n        # (batch_size, beam_size, max_seq_len)\n        k_outputs = torch.zeros(batch_size, beam_size, max_seq_len).long().to(src.device)\n        k_outputs[:, :, 0] = sos\n        k_outputs[:, :, 1] = k_idx\n\n        # (batch_size, beam_size, max_seq_len, d_model)\n        k_encoder_outputs = torch.stack([\n            torch.stack([encoder_output[batch, :, :] for k in range(beam_size)]) \\\n            for batch in range(batch_size)\n        ]).to(src.device)\n        \n        return k_outputs, k_encoder_outputs, k_log_probs\n         \n        \n    def predict(self, src, sos, src_pad, eos, max_seq_len, beam_size):\n        batch_size = src.size(0)\n        src_mask = (src != src_pad).unsqueeze(-2)\n        \n        for i in range(1, max_seq_len):\n            if i == 1:\n                outputs, encoder_outputs, log_probs = self.pred_init_seq(\n                    src, \n                    src_mask, \n                    sos,  \n                    max_seq_len,\n                    beam_size,\n                )\n                \n                encoder_outputs = encoder_outputs.transpose(0,1)\n                \n            else:\n                outputs = outputs.transpose(0,1)\n                trg_mask = no_peak_mask(i).to(src.device)\n                \n                # output shape: (batch_size, beam_size, max_seq_len, target_vocab)\n                output = torch.stack([\n                    F.softmax(\n                        self.out(self.decoder(\n                            outputs[beam, :, :i], \n                            encoder_outputs[beam], \n                            src_mask, \n                            trg_mask,\n                        )),\n                        dim=-1,\n                    ) for beam in range(beam_size)\n                ]).transpose(0,1)\n                \n                # get top k predictions for next word \n                # (batch_size, beam_size, 1 (last pos), k)\n                probs, idx = output[:, :, -1, :].data.topk(beam_size) \n                probs.to(src.device)\n                idx.to(src.device)\n                log_probs = torch.tensor(\n                    [math.log(p) for p in probs.data.view(-1)]\n                ).view(batch_size, beam_size, -1).to(src.device) + log_probs\n                k_probs, k_idx = log_probs.view(batch_size, -1).topk(beam_size)\n                \n                log_probs = k_probs\n                outputs = outputs.transpose(0,1)\n                outputs[:, :, :i] = outputs[:, k_idx // beam_size, :i]\n                outputs[:, :, i] = torch.stack(\n                    [row[k_idx[i]] for i, row in enumerate(idx.view(batch_size, -1).data)]\n                ).view(batch_size, beam_size)\n                \n        eos_bool = (outputs[:, 0, :] == eos)\n        output_seqs = []\n        for i, row in enumerate(eos_bool):\n            if torch.sum(row) > 0:\n                row_len = (row == 1).tolist().index(1)\n            else: \n                row_len = len(row)\n            output_seqs.append(outputs[i, 0, 1:row_len].tolist())\n        return torch.tensor(output_seqs).long()\n'"
transformer/sublayer.py,6,"b'import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport math\n\n\nclass Norm(nn.Module):\n    def __init__(self, d_model, eps = 1e-6):\n        super().__init__()\n\n        self.size = d_model        \n        # create two learnable parameters to calibrate normalisation\n        self.alpha = nn.Parameter(torch.ones(self.size))\n        self.bias = nn.Parameter(torch.zeros(self.size))\n        self.eps = eps\n\n    def forward(self, x):\n        norm = self.alpha * (x - x.mean(dim=-1, keepdim=True)) \n        norma = norm / (x.std(dim=-1, keepdim=True) + self.eps) + self.bias\n        return norm\n\n\ndef attention(q, k, v, d_k, mask=None, dropout=None):\n    scores = torch.matmul(q, k.transpose(-2, -1)) /  math.sqrt(d_k)\n    \n    if mask is not None:\n        mask = mask.unsqueeze(1)\n        scores = scores.masked_fill(mask == 0, -1e9)\n    \n    scores = F.softmax(scores, dim=-1)\n    \n    if dropout is not None:\n        scores = dropout(scores)\n        \n    output = torch.matmul(scores, v)\n    return output\n\n\nclass MultiHeadAttention(nn.Module):\n    def __init__(self, heads, d_model, dropout = 0.1):\n        super().__init__()\n\n        self.d_model = d_model\n        self.d_k = d_model // heads # d_model should be multiples of heads\n        self.h = heads\n\n        self.q_linear = nn.Linear(d_model, d_model)\n        self.v_linear = nn.Linear(d_model, d_model)\n        self.k_linear = nn.Linear(d_model, d_model)\n\n        self.dropout = nn.Dropout(dropout)\n        self.out = nn.Linear(d_model, d_model)\n\n    def forward(self, q, k, v, mask=None):\n        bs = q.size(0)\n\n        # perform linear transformation and split into N heads\n        k = self.k_linear(k).view(bs, -1, self.h, self.d_k)\n        q = self.q_linear(q).view(bs, -1, self.h, self.d_k)\n        v = self.v_linear(v).view(bs, -1, self.h, self.d_k)\n\n        # transpose to get dimensions bs * N * seq_len * d_model\n        k = k.transpose(1,2)\n        q = q.transpose(1,2)\n        v = v.transpose(1,2)\n\n        # calculate attention\n        scores = attention(q, k, v, self.d_k, mask, self.dropout)\n\n        # concatenate heads and put through final linear layer\n        concat = scores.transpose(1,2).contiguous().view(bs, -1, self.d_model)\n        output = self.out(concat)\n        # output: (batch_size, seq_len, d_model)\n        return output\n\n\nclass FeedForward(nn.Module):\n    def __init__(self, d_model, d_ff=2048, dropout = 0.1):\n        super().__init__() \n    \n        # set d_ff by default to 2048\n        self.linear_1 = nn.Linear(d_model, d_ff)\n        self.dropout = nn.Dropout(dropout)\n        self.linear_2 = nn.Linear(d_ff, d_model)\n    \n    def forward(self, x):\n        x = self.dropout(F.relu(self.linear_1(x)))\n        x = self.linear_2(x)\n        return x\n'"
