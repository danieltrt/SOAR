file_path,api_count,code
run.py,35,"b""#!/usr/bin/env python\n\nimport torch\n\nimport getopt\nimport math\nimport numpy\nimport os\nimport PIL\nimport PIL.Image\nimport sys\n\n##########################################################\n\nassert(int(str('').join(torch.__version__.split('.')[0:2])) >= 13) # requires at least pytorch version 1.3.0\n\ntorch.set_grad_enabled(False) # make sure to not compute gradients for computational performance\n\ntorch.backends.cudnn.enabled = True # make sure to use cudnn for computational performance\n\n##########################################################\n\narguments_strModel = 'sintel-final'\narguments_strFirst = './images/first.png'\narguments_strSecond = './images/second.png'\narguments_strOut = './out.flo'\n\nfor strOption, strArgument in getopt.getopt(sys.argv[1:], '', [ strParameter[2:] + '=' for strParameter in sys.argv[1::2] ])[0]:\n\tif strOption == '--model' and strArgument != '': arguments_strModel = strArgument # which model to use, see below\n\tif strOption == '--first' and strArgument != '': arguments_strFirst = strArgument # path to the first frame\n\tif strOption == '--second' and strArgument != '': arguments_strSecond = strArgument # path to the second frame\n\tif strOption == '--out' and strArgument != '': arguments_strOut = strArgument # path to where the output should be stored\n# end\n\n##########################################################\n\nbackwarp_tenGrid = {}\n\ndef backwarp(tenInput, tenFlow):\n\tif str(tenFlow.size()) not in backwarp_tenGrid:\n\t\ttenHorizontal = torch.linspace(-1.0, 1.0, tenFlow.shape[3]).view(1, 1, 1, tenFlow.shape[3]).expand(tenFlow.shape[0], -1, tenFlow.shape[2], -1)\n\t\ttenVertical = torch.linspace(-1.0, 1.0, tenFlow.shape[2]).view(1, 1, tenFlow.shape[2], 1).expand(tenFlow.shape[0], -1, -1, tenFlow.shape[3])\n\n\t\tbackwarp_tenGrid[str(tenFlow.size())] = torch.cat([ tenHorizontal, tenVertical ], 1).cuda()\n\t# end\n\n\ttenFlow = torch.cat([ tenFlow[:, 0:1, :, :] / ((tenInput.shape[3] - 1.0) / 2.0), tenFlow[:, 1:2, :, :] / ((tenInput.shape[2] - 1.0) / 2.0) ], 1)\n\n\treturn torch.nn.functional.grid_sample(input=tenInput, grid=(backwarp_tenGrid[str(tenFlow.size())] + tenFlow).permute(0, 2, 3, 1), mode='bilinear', padding_mode='border', align_corners=True)\n# end\n\n##########################################################\n\nclass Network(torch.nn.Module):\n\tdef __init__(self):\n\t\tsuper(Network, self).__init__()\n\n\t\tclass Preprocess(torch.nn.Module):\n\t\t\tdef __init__(self):\n\t\t\t\tsuper(Preprocess, self).__init__()\n\t\t\t# end\n\n\t\t\tdef forward(self, tenInput):\n\t\t\t\ttenBlue = (tenInput[:, 0:1, :, :] - 0.406) / 0.225\n\t\t\t\ttenGreen = (tenInput[:, 1:2, :, :] - 0.456) / 0.224\n\t\t\t\ttenRed = (tenInput[:, 2:3, :, :] - 0.485) / 0.229\n\n\t\t\t\treturn torch.cat([ tenRed, tenGreen, tenBlue ], 1)\n\t\t\t# end\n\t\t# end\n\n\t\tclass Basic(torch.nn.Module):\n\t\t\tdef __init__(self, intLevel):\n\t\t\t\tsuper(Basic, self).__init__()\n\n\t\t\t\tself.netBasic = torch.nn.Sequential(\n\t\t\t\t\ttorch.nn.Conv2d(in_channels=8, out_channels=32, kernel_size=7, stride=1, padding=3),\n\t\t\t\t\ttorch.nn.ReLU(inplace=False),\n\t\t\t\t\ttorch.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=7, stride=1, padding=3),\n\t\t\t\t\ttorch.nn.ReLU(inplace=False),\n\t\t\t\t\ttorch.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=7, stride=1, padding=3),\n\t\t\t\t\ttorch.nn.ReLU(inplace=False),\n\t\t\t\t\ttorch.nn.Conv2d(in_channels=32, out_channels=16, kernel_size=7, stride=1, padding=3),\n\t\t\t\t\ttorch.nn.ReLU(inplace=False),\n\t\t\t\t\ttorch.nn.Conv2d(in_channels=16, out_channels=2, kernel_size=7, stride=1, padding=3)\n\t\t\t\t)\n\t\t\t# end\n\n\t\t\tdef forward(self, tenInput):\n\t\t\t\treturn self.netBasic(tenInput)\n\t\t\t# end\n\t\t# end\n\n\t\tself.netPreprocess = Preprocess()\n\n\t\tself.netBasic = torch.nn.ModuleList([ Basic(intLevel) for intLevel in range(6) ])\n\n\t\tself.load_state_dict({ strKey.replace('module', 'net'): tenWeight for strKey, tenWeight in torch.load(__file__.replace('run.py', 'network-' + arguments_strModel + '.pytorch')).items() })\n\t# end\n\n\tdef forward(self, tenFirst, tenSecond):\n\t\ttenFlow = []\n\n\t\ttenFirst = [ self.netPreprocess(tenFirst) ]\n\t\ttenSecond = [ self.netPreprocess(tenSecond) ]\n\n\t\tfor intLevel in range(5):\n\t\t\tif tenFirst[0].shape[2] > 32 or tenFirst[0].shape[3] > 32:\n\t\t\t\ttenFirst.insert(0, torch.nn.functional.avg_pool2d(input=tenFirst[0], kernel_size=2, stride=2, count_include_pad=False))\n\t\t\t\ttenSecond.insert(0, torch.nn.functional.avg_pool2d(input=tenSecond[0], kernel_size=2, stride=2, count_include_pad=False))\n\t\t\t# end\n\t\t# end\n\n\t\ttenFlow = tenFirst[0].new_zeros([ tenFirst[0].shape[0], 2, int(math.floor(tenFirst[0].shape[2] / 2.0)), int(math.floor(tenFirst[0].shape[3] / 2.0)) ])\n\n\t\tfor intLevel in range(len(tenFirst)):\n\t\t\ttenUpsampled = torch.nn.functional.interpolate(input=tenFlow, scale_factor=2, mode='bilinear', align_corners=True) * 2.0\n\n\t\t\tif tenUpsampled.shape[2] != tenFirst[intLevel].shape[2]: tenUpsampled = torch.nn.functional.pad(input=tenUpsampled, pad=[ 0, 0, 0, 1 ], mode='replicate')\n\t\t\tif tenUpsampled.shape[3] != tenFirst[intLevel].shape[3]: tenUpsampled = torch.nn.functional.pad(input=tenUpsampled, pad=[ 0, 1, 0, 0 ], mode='replicate')\n\n\t\t\ttenFlow = self.netBasic[intLevel](torch.cat([ tenFirst[intLevel], backwarp(tenInput=tenSecond[intLevel], tenFlow=tenUpsampled), tenUpsampled ], 1)) + tenUpsampled\n\t\t# end\n\n\t\treturn tenFlow\n\t# end\n# end\n\nnetNetwork = None\n\n##########################################################\n\ndef estimate(tenFirst, tenSecond):\n\tglobal netNetwork\n\n\tif netNetwork is None:\n\t\tnetNetwork = Network().cuda().eval()\n\t# end\n\n\tassert(tenFirst.shape[1] == tenSecond.shape[1])\n\tassert(tenFirst.shape[2] == tenSecond.shape[2])\n\n\tintWidth = tenFirst.shape[2]\n\tintHeight = tenFirst.shape[1]\n\n\tassert(intWidth == 1024) # remember that there is no guarantee for correctness, comment this line out if you acknowledge this and want to continue\n\tassert(intHeight == 416) # remember that there is no guarantee for correctness, comment this line out if you acknowledge this and want to continue\n\n\ttenPreprocessedFirst = tenFirst.cuda().view(1, 3, intHeight, intWidth)\n\ttenPreprocessedSecond = tenSecond.cuda().view(1, 3, intHeight, intWidth)\n\n\tintPreprocessedWidth = int(math.floor(math.ceil(intWidth / 32.0) * 32.0))\n\tintPreprocessedHeight = int(math.floor(math.ceil(intHeight / 32.0) * 32.0))\n\n\ttenPreprocessedFirst = torch.nn.functional.interpolate(input=tenPreprocessedFirst, size=(intPreprocessedHeight, intPreprocessedWidth), mode='bilinear', align_corners=False)\n\ttenPreprocessedSecond = torch.nn.functional.interpolate(input=tenPreprocessedSecond, size=(intPreprocessedHeight, intPreprocessedWidth), mode='bilinear', align_corners=False)\n\n\ttenFlow = torch.nn.functional.interpolate(input=netNetwork(tenPreprocessedFirst, tenPreprocessedSecond), size=(intHeight, intWidth), mode='bilinear', align_corners=False)\n\n\ttenFlow[:, 0, :, :] *= float(intWidth) / float(intPreprocessedWidth)\n\ttenFlow[:, 1, :, :] *= float(intHeight) / float(intPreprocessedHeight)\n\n\treturn tenFlow[0, :, :, :].cpu()\n# end\n\n##########################################################\n\nif __name__ == '__main__':\n\ttenFirst = torch.FloatTensor(numpy.ascontiguousarray(numpy.array(PIL.Image.open(arguments_strFirst))[:, :, ::-1].transpose(2, 0, 1).astype(numpy.float32) * (1.0 / 255.0)))\n\ttenSecond = torch.FloatTensor(numpy.ascontiguousarray(numpy.array(PIL.Image.open(arguments_strSecond))[:, :, ::-1].transpose(2, 0, 1).astype(numpy.float32) * (1.0 / 255.0)))\n\n\ttenOutput = estimate(tenFirst, tenSecond)\n\n\tobjOutput = open(arguments_strOut, 'wb')\n\n\tnumpy.array([ 80, 73, 69, 72 ], numpy.uint8).tofile(objOutput)\n\tnumpy.array([ tenOutput.shape[2], tenOutput.shape[1] ], numpy.int32).tofile(objOutput)\n\tnumpy.array(tenOutput.numpy().transpose(1, 2, 0), numpy.float32).tofile(objOutput)\n\n\tobjOutput.close()\n# end"""
comparison/comparison.py,2,"b""#!/usr/bin/env python\n\nimport math\nimport moviepy\nimport moviepy.editor\nimport numpy\nimport PIL\nimport PIL.Image\nimport PIL.ImageFont\nimport PIL.ImageDraw\n\nintX = 32\nintY = 416 - 64\n\nobjImages = [ {\n\t'strFile': 'official - torch.png',\n\t'strText': 'official - Torch'\n}, {\n\t'strFile': 'this - pytorch.png',\n\t'strText': 'this - PyTorch'\n} ]\n\nnpyImages = []\n\nfor objImage in objImages:\n\tobjOutput = PIL.Image.open(objImage['strFile']).convert('RGB')\n\n\tfor intU in [ intShift - 10 for intShift in range(20) ]:\n\t\tfor intV in [ intShift - 10 for intShift in range(20) ]:\n\t\t\tif math.sqrt(math.pow(intU, 2.0) + math.pow(intV, 2.0)) <= 5.0:\n\t\t\t\tPIL.ImageDraw.Draw(objOutput).text((intX + intU, intY + intV), objImage['strText'], (255, 255, 255), PIL.ImageFont.truetype('freefont/FreeSerifBold.ttf', 32))\n\t\t\t# end\n\t\t# end\n\t# end\n\n\tPIL.ImageDraw.Draw(objOutput).text((intX, intY), objImage['strText'], (0, 0, 0), PIL.ImageFont.truetype('freefont/FreeSerifBold.ttf', 32))\n\n\tnpyImages.append(numpy.array(objOutput))\n# end\n\nmoviepy.editor.ImageSequenceClip(sequence=npyImages, fps=1).write_gif(filename='comparison.gif', program='ImageMagick', opt='optimizeplus')"""
