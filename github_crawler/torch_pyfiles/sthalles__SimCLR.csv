file_path,api_count,code
run.py,0,"b'from simclr import SimCLR\nimport yaml\nfrom data_aug.dataset_wrapper import DataSetWrapper\n\n\ndef main():\n    config = yaml.load(open(""config.yaml"", ""r""), Loader=yaml.FullLoader)\n    dataset = DataSetWrapper(config[\'batch_size\'], **config[\'dataset\'])\n\n    simclr = SimCLR(dataset, config)\n    simclr.train()\n\n\nif __name__ == ""__main__"":\n    main()\n'"
simclr.py,9,"b'import torch\nfrom models.resnet_simclr import ResNetSimCLR\nfrom torch.utils.tensorboard import SummaryWriter\nimport torch.nn.functional as F\nfrom loss.nt_xent import NTXentLoss\nimport os\nimport shutil\nimport sys\n\napex_support = False\ntry:\n    sys.path.append(\'./apex\')\n    from apex import amp\n\n    apex_support = True\nexcept:\n    print(""Please install apex for mixed precision training from: https://github.com/NVIDIA/apex"")\n    apex_support = False\n\nimport numpy as np\n\ntorch.manual_seed(0)\n\n\ndef _save_config_file(model_checkpoints_folder):\n    if not os.path.exists(model_checkpoints_folder):\n        os.makedirs(model_checkpoints_folder)\n        shutil.copy(\'./config.yaml\', os.path.join(model_checkpoints_folder, \'config.yaml\'))\n\n\nclass SimCLR(object):\n\n    def __init__(self, dataset, config):\n        self.config = config\n        self.device = self._get_device()\n        self.writer = SummaryWriter()\n        self.dataset = dataset\n        self.nt_xent_criterion = NTXentLoss(self.device, config[\'batch_size\'], **config[\'loss\'])\n\n    def _get_device(self):\n        device = \'cuda\' if torch.cuda.is_available() else \'cpu\'\n        print(""Running on:"", device)\n        return device\n\n    def _step(self, model, xis, xjs, n_iter):\n\n        # get the representations and the projections\n        ris, zis = model(xis)  # [N,C]\n\n        # get the representations and the projections\n        rjs, zjs = model(xjs)  # [N,C]\n\n        # normalize projection feature vectors\n        zis = F.normalize(zis, dim=1)\n        zjs = F.normalize(zjs, dim=1)\n\n        loss = self.nt_xent_criterion(zis, zjs)\n        return loss\n\n    def train(self):\n\n        train_loader, valid_loader = self.dataset.get_data_loaders()\n\n        model = ResNetSimCLR(**self.config[""model""]).to(self.device)\n        model = self._load_pre_trained_weights(model)\n\n        optimizer = torch.optim.Adam(model.parameters(), 3e-4, weight_decay=eval(self.config[\'weight_decay\']))\n\n        scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=len(train_loader), eta_min=0,\n                                                               last_epoch=-1)\n\n        if apex_support and self.config[\'fp16_precision\']:\n            model, optimizer = amp.initialize(model, optimizer,\n                                              opt_level=\'O2\',\n                                              keep_batchnorm_fp32=True)\n\n        model_checkpoints_folder = os.path.join(self.writer.log_dir, \'checkpoints\')\n\n        # save config file\n        _save_config_file(model_checkpoints_folder)\n\n        n_iter = 0\n        valid_n_iter = 0\n        best_valid_loss = np.inf\n\n        for epoch_counter in range(self.config[\'epochs\']):\n            for (xis, xjs), _ in train_loader:\n                optimizer.zero_grad()\n\n                xis = xis.to(self.device)\n                xjs = xjs.to(self.device)\n\n                loss = self._step(model, xis, xjs, n_iter)\n\n                if n_iter % self.config[\'log_every_n_steps\'] == 0:\n                    self.writer.add_scalar(\'train_loss\', loss, global_step=n_iter)\n\n                if apex_support and self.config[\'fp16_precision\']:\n                    with amp.scale_loss(loss, optimizer) as scaled_loss:\n                        scaled_loss.backward()\n                else:\n                    loss.backward()\n\n                optimizer.step()\n                n_iter += 1\n\n            # validate the model if requested\n            if epoch_counter % self.config[\'eval_every_n_epochs\'] == 0:\n                valid_loss = self._validate(model, valid_loader)\n                if valid_loss < best_valid_loss:\n                    # save the model weights\n                    best_valid_loss = valid_loss\n                    torch.save(model.state_dict(), os.path.join(model_checkpoints_folder, \'model.pth\'))\n\n                self.writer.add_scalar(\'validation_loss\', valid_loss, global_step=valid_n_iter)\n                valid_n_iter += 1\n\n            # warmup for the first 10 epochs\n            if epoch_counter >= 10:\n                scheduler.step()\n            self.writer.add_scalar(\'cosine_lr_decay\', scheduler.get_lr()[0], global_step=n_iter)\n\n    def _load_pre_trained_weights(self, model):\n        try:\n            checkpoints_folder = os.path.join(\'./runs\', self.config[\'fine_tune_from\'], \'checkpoints\')\n            state_dict = torch.load(os.path.join(checkpoints_folder, \'model.pth\'))\n            model.load_state_dict(state_dict)\n            print(""Loaded pre-trained model with success."")\n        except FileNotFoundError:\n            print(""Pre-trained weights not found. Training from scratch."")\n\n        return model\n\n    def _validate(self, model, valid_loader):\n\n        # validation steps\n        with torch.no_grad():\n            model.eval()\n\n            valid_loss = 0.0\n            counter = 0\n            for (xis, xjs), _ in valid_loader:\n                xis = xis.to(self.device)\n                xjs = xjs.to(self.device)\n\n                loss = self._step(model, xis, xjs, counter)\n                valid_loss += loss.item()\n                counter += 1\n            valid_loss /= counter\n        model.train()\n        return valid_loss\n'"
data_aug/dataset_wrapper.py,2,"b""import numpy as np\nfrom torch.utils.data import DataLoader\nfrom torch.utils.data.sampler import SubsetRandomSampler\nimport torchvision.transforms as transforms\nfrom data_aug.gaussian_blur import GaussianBlur\nfrom torchvision import datasets\n\nnp.random.seed(0)\n\n\nclass DataSetWrapper(object):\n\n    def __init__(self, batch_size, num_workers, valid_size, input_shape, s):\n        self.batch_size = batch_size\n        self.num_workers = num_workers\n        self.valid_size = valid_size\n        self.s = s\n        self.input_shape = eval(input_shape)\n\n    def get_data_loaders(self):\n        data_augment = self._get_simclr_pipeline_transform()\n\n        train_dataset = datasets.STL10('./data', split='train+unlabeled', download=True,\n                                       transform=SimCLRDataTransform(data_augment))\n\n        train_loader, valid_loader = self.get_train_validation_data_loaders(train_dataset)\n        return train_loader, valid_loader\n\n    def _get_simclr_pipeline_transform(self):\n        # get a set of data augmentation transformations as described in the SimCLR paper.\n        color_jitter = transforms.ColorJitter(0.8 * self.s, 0.8 * self.s, 0.8 * self.s, 0.2 * self.s)\n        data_transforms = transforms.Compose([transforms.RandomResizedCrop(size=self.input_shape[0]),\n                                              transforms.RandomHorizontalFlip(),\n                                              transforms.RandomApply([color_jitter], p=0.8),\n                                              transforms.RandomGrayscale(p=0.2),\n                                              GaussianBlur(kernel_size=int(0.1 * self.input_shape[0])),\n                                              transforms.ToTensor()])\n        return data_transforms\n\n    def get_train_validation_data_loaders(self, train_dataset):\n        # obtain training indices that will be used for validation\n        num_train = len(train_dataset)\n        indices = list(range(num_train))\n        np.random.shuffle(indices)\n\n        split = int(np.floor(self.valid_size * num_train))\n        train_idx, valid_idx = indices[split:], indices[:split]\n\n        # define samplers for obtaining training and validation batches\n        train_sampler = SubsetRandomSampler(train_idx)\n        valid_sampler = SubsetRandomSampler(valid_idx)\n\n        train_loader = DataLoader(train_dataset, batch_size=self.batch_size, sampler=train_sampler,\n                                  num_workers=self.num_workers, drop_last=True, shuffle=False)\n\n        valid_loader = DataLoader(train_dataset, batch_size=self.batch_size, sampler=valid_sampler,\n                                  num_workers=self.num_workers, drop_last=True)\n        return train_loader, valid_loader\n\n\nclass SimCLRDataTransform(object):\n    def __init__(self, transform):\n        self.transform = transform\n\n    def __call__(self, sample):\n        xi = self.transform(sample)\n        xj = self.transform(sample)\n        return xi, xj\n"""
data_aug/gaussian_blur.py,0,"b'import cv2\nimport numpy as np\n\nnp.random.seed(0)\n\n\nclass GaussianBlur(object):\n    # Implements Gaussian blur as described in the SimCLR paper\n    def __init__(self, kernel_size, min=0.1, max=2.0):\n        self.min = min\n        self.max = max\n        # kernel size is set to be 10% of the image height/width\n        self.kernel_size = kernel_size\n\n    def __call__(self, sample):\n        sample = np.array(sample)\n\n        # blur the image with a 50% chance\n        prob = np.random.random_sample()\n\n        if prob < 0.5:\n            sigma = (self.max - self.min) * np.random.random_sample() + self.min\n            sample = cv2.GaussianBlur(sample, (self.kernel_size, self.kernel_size), sigma)\n\n        return sample\n'"
loss/nt_xent.py,14,"b'import torch\nimport numpy as np\n\n\nclass NTXentLoss(torch.nn.Module):\n\n    def __init__(self, device, batch_size, temperature, use_cosine_similarity):\n        super(NTXentLoss, self).__init__()\n        self.batch_size = batch_size\n        self.temperature = temperature\n        self.device = device\n        self.softmax = torch.nn.Softmax(dim=-1)\n        self.mask_samples_from_same_repr = self._get_correlated_mask().type(torch.bool)\n        self.similarity_function = self._get_similarity_function(use_cosine_similarity)\n        self.criterion = torch.nn.CrossEntropyLoss(reduction=""sum"")\n\n    def _get_similarity_function(self, use_cosine_similarity):\n        if use_cosine_similarity:\n            self._cosine_similarity = torch.nn.CosineSimilarity(dim=-1)\n            return self._cosine_simililarity\n        else:\n            return self._dot_simililarity\n\n    def _get_correlated_mask(self):\n        diag = np.eye(2 * self.batch_size)\n        l1 = np.eye((2 * self.batch_size), 2 * self.batch_size, k=-self.batch_size)\n        l2 = np.eye((2 * self.batch_size), 2 * self.batch_size, k=self.batch_size)\n        mask = torch.from_numpy((diag + l1 + l2))\n        mask = (1 - mask).type(torch.bool)\n        return mask.to(self.device)\n\n    @staticmethod\n    def _dot_simililarity(x, y):\n        v = torch.tensordot(x.unsqueeze(1), y.T.unsqueeze(0), dims=2)\n        # x shape: (N, 1, C)\n        # y shape: (1, C, 2N)\n        # v shape: (N, 2N)\n        return v\n\n    def _cosine_simililarity(self, x, y):\n        # x shape: (N, 1, C)\n        # y shape: (1, 2N, C)\n        # v shape: (N, 2N)\n        v = self._cosine_similarity(x.unsqueeze(1), y.unsqueeze(0))\n        return v\n\n    def forward(self, zis, zjs):\n        representations = torch.cat([zjs, zis], dim=0)\n\n        similarity_matrix = self.similarity_function(representations, representations)\n\n        # filter out the scores from the positive samples\n        l_pos = torch.diag(similarity_matrix, self.batch_size)\n        r_pos = torch.diag(similarity_matrix, -self.batch_size)\n        positives = torch.cat([l_pos, r_pos]).view(2 * self.batch_size, 1)\n\n        negatives = similarity_matrix[self.mask_samples_from_same_repr].view(2 * self.batch_size, -1)\n\n        logits = torch.cat((positives, negatives), dim=1)\n        logits /= self.temperature\n\n        labels = torch.zeros(2 * self.batch_size).to(self.device).long()\n        loss = self.criterion(logits, labels)\n\n        return loss / (2 * self.batch_size)\n'"
models/baseline_encoder.py,3,"b'import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision.models as models\n\n\nclass Encoder(nn.Module):\n    def __init__(self, out_dim=64):\n        super(Encoder, self).__init__()\n        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)\n        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)\n        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)\n        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1)\n        self.pool = nn.MaxPool2d(2, 2)\n\n        # projection MLP\n        self.l1 = nn.Linear(64, 64)\n        self.l2 = nn.Linear(64, out_dim)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = F.relu(x)\n        x = self.pool(x)\n\n        x = self.conv2(x)\n        x = F.relu(x)\n        x = self.pool(x)\n\n        x = self.conv3(x)\n        x = F.relu(x)\n        x = self.pool(x)\n\n        x = self.conv4(x)\n        x = F.relu(x)\n        x = self.pool(x)\n\n        h = torch.mean(x, dim=[2, 3])\n\n        x = self.l1(h)\n        x = F.relu(x)\n        x = self.l2(x)\n\n        return h, x\n'"
models/resnet_simclr.py,2,"b'import torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision.models as models\n\n\nclass ResNetSimCLR(nn.Module):\n\n    def __init__(self, base_model, out_dim):\n        super(ResNetSimCLR, self).__init__()\n        self.resnet_dict = {""resnet18"": models.resnet18(pretrained=False),\n                            ""resnet50"": models.resnet50(pretrained=False)}\n\n        resnet = self._get_basemodel(base_model)\n        num_ftrs = resnet.fc.in_features\n\n        self.features = nn.Sequential(*list(resnet.children())[:-1])\n\n        # projection MLP\n        self.l1 = nn.Linear(num_ftrs, num_ftrs)\n        self.l2 = nn.Linear(num_ftrs, out_dim)\n\n    def _get_basemodel(self, model_name):\n        try:\n            model = self.resnet_dict[model_name]\n            print(""Feature extractor:"", model_name)\n            return model\n        except:\n            raise (""Invalid model name. Check the config file and pass one of: resnet18 or resnet50"")\n\n    def forward(self, x):\n        h = self.features(x)\n        h = h.squeeze()\n\n        x = self.l1(h)\n        x = F.relu(x)\n        x = self.l2(x)\n        return h, x\n'"
