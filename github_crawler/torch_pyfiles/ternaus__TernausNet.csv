file_path,api_count,code
setup.py,0,"b'import io\nimport os\nimport sys\nfrom shutil import rmtree\nimport re\nfrom setuptools import Command, find_packages, setup\n\n# Package meta-data.\nname = ""ternausnet""\ndescription = ""UNet with VGG encoders""\nurl = ""https://github.com/ternaus/TernausNet""\nemail = ""iglovikov@gmail.com""\nauthor = ""Vladimir Iglovikov""\nrequires_python = "">=3.0.0""\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\n\n\ndef get_version():\n    version_file = os.path.join(current_dir, name, ""__init__.py"")\n    with io.open(version_file, encoding=""utf-8"") as f:\n        return re.search(r\'^__version__ = [\\\'""]([^\\\'""]*)[\\\'""]\', f.read(), re.M).group(1)\n\n\n# What packages are required for this module to be executed?\ntry:\n    with open(os.path.join(current_dir, ""requirements.txt""), encoding=""utf-8"") as f:\n        required = f.read().split(""\\n"")\nexcept FileNotFoundError:\n    required = []\n\n# What packages are optional?\nextras = {""test"": [""pytest""]}\n\nversion = get_version()\n\nabout = {""__version__"": version}\n\n\ndef get_test_requirements():\n    requirements = [""pytest""]\n    if sys.version_info < (3, 3):\n        requirements.append(""mock"")\n    return requirements\n\n\ndef get_long_description():\n    base_dir = os.path.abspath(os.path.dirname(__file__))\n    with io.open(os.path.join(base_dir, ""README.md""), encoding=""utf-8"") as f:\n        return f.read()\n\n\nclass UploadCommand(Command):\n    """"""Support setup.py upload.""""""\n\n    description = ""Build and publish the package.""\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        """"""Print things in bold.""""""\n        print(s)\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status(""Removing previous builds..."")\n            rmtree(os.path.join(current_dir, ""dist""))\n        except OSError:\n            pass\n\n        self.status(""Building Source and Wheel (universal) distribution..."")\n        os.system(""{0} setup.py sdist bdist_wheel --universal"".format(sys.executable))\n\n        self.status(""Uploading the package to PyPI via Twine..."")\n        os.system(""twine upload dist/*"")\n\n        self.status(""Pushing git tags..."")\n        os.system(""git tag v{0}"".format(about[""__version__""]))\n        os.system(""git push --tags"")\n\n        sys.exit()\n\n\nsetup(\n    name=name,\n    version=version,\n    description=description,\n    long_description=get_long_description(),\n    long_description_content_type=""text/markdown"",\n    author=""Vladimir Iglovikov"",\n    license=""MIT"",\n    url=url,\n    packages=find_packages(exclude=[""tests"", ""docs"", ""images""]),\n    install_requires=required,\n    extras_require=extras,\n    classifiers=[\n        ""License :: OSI Approved :: MIT License"",\n        ""Intended Audience :: Developers"",\n        ""Intended Audience :: Science/Research"",\n        ""Operating System :: OS Independent"",\n        ""Programming Language :: Python"",\n        ""Programming Language :: Python :: 3"",\n        ""Topic :: Software Development :: Libraries"",\n        ""Topic :: Software Development :: Libraries :: Python Modules"",\n    ],\n    cmdclass={""upload"": UploadCommand},\n)\n'"
ternausnet/__init__.py,0,"b'from __future__ import absolute_import\n\n__version__ = ""0.0.1""\n'"
ternausnet/models.py,17,"b'import torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import functional as F\nfrom torchvision import models\n\n\ndef conv3x3(in_: int, out: int) -> nn.Module:\n    return nn.Conv2d(in_, out, 3, padding=1)\n\n\nclass ConvRelu(nn.Module):\n    def __init__(self, in_: int, out: int) -> None:\n        super().__init__()\n        self.conv = conv3x3(in_, out)\n        self.activation = nn.ReLU(inplace=True)\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        x = self.conv(x)\n        x = self.activation(x)\n        return x\n\n\nclass DecoderBlock(nn.Module):\n    def __init__(\n        self, in_channels: int, middle_channels: int, out_channels: int\n    ) -> None:\n        super().__init__()\n\n        self.block = nn.Sequential(\n            ConvRelu(in_channels, middle_channels),\n            nn.ConvTranspose2d(\n                middle_channels,\n                out_channels,\n                kernel_size=3,\n                stride=2,\n                padding=1,\n                output_padding=1,\n            ),\n            nn.ReLU(inplace=True),\n        )\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        return self.block(x)\n\n\nclass UNet11(nn.Module):\n    def __init__(self, num_filters: int = 32, pretrained: bool = False) -> None:\n        """"""\n\n        Args:\n            num_filters:\n            pretrained:\n                False - no pre-trained network is used\n                True  - encoder is pre-trained with VGG11\n        """"""\n        super().__init__()\n        self.pool = nn.MaxPool2d(2, 2)\n\n        self.encoder = models.vgg11(pretrained=pretrained).features\n\n        self.relu = self.encoder[1]\n        self.conv1 = self.encoder[0]\n        self.conv2 = self.encoder[3]\n        self.conv3s = self.encoder[6]\n        self.conv3 = self.encoder[8]\n        self.conv4s = self.encoder[11]\n        self.conv4 = self.encoder[13]\n        self.conv5s = self.encoder[16]\n        self.conv5 = self.encoder[18]\n\n        self.center = DecoderBlock(\n            num_filters * 8 * 2, num_filters * 8 * 2, num_filters * 8\n        )\n        self.dec5 = DecoderBlock(\n            num_filters * (16 + 8), num_filters * 8 * 2, num_filters * 8\n        )\n        self.dec4 = DecoderBlock(\n            num_filters * (16 + 8), num_filters * 8 * 2, num_filters * 4\n        )\n        self.dec3 = DecoderBlock(\n            num_filters * (8 + 4), num_filters * 4 * 2, num_filters * 2\n        )\n        self.dec2 = DecoderBlock(\n            num_filters * (4 + 2), num_filters * 2 * 2, num_filters\n        )\n        self.dec1 = ConvRelu(num_filters * (2 + 1), num_filters)\n\n        self.final = nn.Conv2d(num_filters, 1, kernel_size=1)\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        conv1 = self.relu(self.conv1(x))\n        conv2 = self.relu(self.conv2(self.pool(conv1)))\n        conv3s = self.relu(self.conv3s(self.pool(conv2)))\n        conv3 = self.relu(self.conv3(conv3s))\n        conv4s = self.relu(self.conv4s(self.pool(conv3)))\n        conv4 = self.relu(self.conv4(conv4s))\n        conv5s = self.relu(self.conv5s(self.pool(conv4)))\n        conv5 = self.relu(self.conv5(conv5s))\n\n        center = self.center(self.pool(conv5))\n\n        dec5 = self.dec5(torch.cat([center, conv5], 1))\n        dec4 = self.dec4(torch.cat([dec5, conv4], 1))\n        dec3 = self.dec3(torch.cat([dec4, conv3], 1))\n        dec2 = self.dec2(torch.cat([dec3, conv2], 1))\n        dec1 = self.dec1(torch.cat([dec2, conv1], 1))\n        return self.final(dec1)\n\n\nclass Interpolate(nn.Module):\n    def __init__(\n        self,\n        size: int = None,\n        scale_factor: int = None,\n        mode: str = ""nearest"",\n        align_corners: bool = False,\n    ):\n        super().__init__()\n        self.interp = nn.functional.interpolate\n        self.size = size\n        self.mode = mode\n        self.scale_factor = scale_factor\n        self.align_corners = align_corners\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        x = self.interp(\n            x,\n            size=self.size,\n            scale_factor=self.scale_factor,\n            mode=self.mode,\n            align_corners=self.align_corners,\n        )\n        return x\n\n\nclass DecoderBlockV2(nn.Module):\n    def __init__(\n        self,\n        in_channels: int,\n        middle_channels: int,\n        out_channels: int,\n        is_deconv: bool = True,\n    ):\n        super().__init__()\n        self.in_channels = in_channels\n\n        if is_deconv:\n            """"""\n                Paramaters for Deconvolution were chosen to avoid artifacts, following\n                link https://distill.pub/2016/deconv-checkerboard/\n            """"""\n\n            self.block = nn.Sequential(\n                ConvRelu(in_channels, middle_channels),\n                nn.ConvTranspose2d(\n                    middle_channels, out_channels, kernel_size=4, stride=2, padding=1\n                ),\n                nn.ReLU(inplace=True),\n            )\n        else:\n            self.block = nn.Sequential(\n                Interpolate(scale_factor=2, mode=""bilinear""),\n                ConvRelu(in_channels, middle_channels),\n                ConvRelu(middle_channels, out_channels),\n            )\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        return self.block(x)\n\n\nclass UNet16(nn.Module):\n    def __init__(\n        self,\n        num_classes: int = 1,\n        num_filters: int = 32,\n        pretrained: bool = False,\n        is_deconv: bool = False,\n    ):\n        """"""\n\n        Args:\n            num_classes:\n            num_filters:\n            pretrained:\n                False - no pre-trained network used\n                True - encoder pre-trained with VGG16\n            is_deconv:\n                False: bilinear interpolation is used in decoder\n                True: deconvolution is used in decoder\n        """"""\n        super().__init__()\n        self.num_classes = num_classes\n\n        self.pool = nn.MaxPool2d(2, 2)\n\n        self.encoder = torchvision.models.vgg16(pretrained=pretrained).features\n\n        self.relu = nn.ReLU(inplace=True)\n\n        self.conv1 = nn.Sequential(\n            self.encoder[0], self.relu, self.encoder[2], self.relu\n        )\n\n        self.conv2 = nn.Sequential(\n            self.encoder[5], self.relu, self.encoder[7], self.relu\n        )\n\n        self.conv3 = nn.Sequential(\n            self.encoder[10],\n            self.relu,\n            self.encoder[12],\n            self.relu,\n            self.encoder[14],\n            self.relu,\n        )\n\n        self.conv4 = nn.Sequential(\n            self.encoder[17],\n            self.relu,\n            self.encoder[19],\n            self.relu,\n            self.encoder[21],\n            self.relu,\n        )\n\n        self.conv5 = nn.Sequential(\n            self.encoder[24],\n            self.relu,\n            self.encoder[26],\n            self.relu,\n            self.encoder[28],\n            self.relu,\n        )\n\n        self.center = DecoderBlockV2(\n            512, num_filters * 8 * 2, num_filters * 8, is_deconv\n        )\n\n        self.dec5 = DecoderBlockV2(\n            512 + num_filters * 8, num_filters * 8 * 2, num_filters * 8, is_deconv\n        )\n        self.dec4 = DecoderBlockV2(\n            512 + num_filters * 8, num_filters * 8 * 2, num_filters * 8, is_deconv\n        )\n        self.dec3 = DecoderBlockV2(\n            256 + num_filters * 8, num_filters * 4 * 2, num_filters * 2, is_deconv\n        )\n        self.dec2 = DecoderBlockV2(\n            128 + num_filters * 2, num_filters * 2 * 2, num_filters, is_deconv\n        )\n        self.dec1 = ConvRelu(64 + num_filters, num_filters)\n        self.final = nn.Conv2d(num_filters, num_classes, kernel_size=1)\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        conv1 = self.conv1(x)\n        conv2 = self.conv2(self.pool(conv1))\n        conv3 = self.conv3(self.pool(conv2))\n        conv4 = self.conv4(self.pool(conv3))\n        conv5 = self.conv5(self.pool(conv4))\n\n        center = self.center(self.pool(conv5))\n\n        dec5 = self.dec5(torch.cat([center, conv5], 1))\n\n        dec4 = self.dec4(torch.cat([dec5, conv4], 1))\n        dec3 = self.dec3(torch.cat([dec4, conv3], 1))\n        dec2 = self.dec2(torch.cat([dec3, conv2], 1))\n        dec1 = self.dec1(torch.cat([dec2, conv1], 1))\n        return self.final(dec1)\n'"
