file_path,api_count,code
pip_package/setup.py,0,"b'import setuptools\n\nwith open(""README.md"", ""r"") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=""ai_lab_gui"",\n    version=""0.0.4"",\n    author=""Timothy Liu"",\n    author_email=""timothyl@nvidia.com"",\n    description=""Beginner\'s GUI for the AI Lab container"",\n    long_description=long_description,\n    long_description_content_type=""text/markdown"",\n    url=""https://github.com/NVAITC/ai-lab"",\n    packages=setuptools.find_packages(),\n    include_package_data=True,\n    classifiers=[\n        ""Programming Language :: Python :: 3"",\n        ""License :: OSI Approved :: GNU General Public License v3 (GPLv3)"",\n        ""Operating System :: POSIX :: Linux "",\n        ""Topic :: Scientific/Engineering :: Artificial Intelligence""\n    ],\n    entry_points = {\n        \'console_scripts\': [\'ai_lab=ai_lab_gui.app:main\'],\n    },\n    install_requires=[\n        \'docker\',\n        \'flask\'\n    ]\n)\n\n'"
src/jupyter_notebook_config.py,0,"b'# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport subprocess\nimport os\nimport errno\nimport stat\nfrom jupyter_core.paths import jupyter_data_dir\nfrom notebook.auth import passwd\n\nc = get_config()\nc.NotebookApp.ip = ""0.0.0.0""\nc.NotebookApp.port = 8888\nc.NotebookApp.open_browser = False\nc.NotebookApp.token = """"\nc.NotebookApp.allow_origin = ""*""\n\nnb_password = os.getenv(""NB_PASSWD"", """")\nc.NotebookApp.password = passwd(nb_password)\n\nc.FileContentsManager.delete_to_trash = False\n\n# Generate a self-signed certificate\nif ""GEN_CERT"" in os.environ:\n    dir_name = jupyter_data_dir()\n    pem_file = os.path.join(dir_name, ""notebook.pem"")\n    try:\n        os.makedirs(dir_name)\n    except OSError as exc:  # Python >2.5\n        if exc.errno == errno.EEXIST and os.path.isdir(dir_name):\n            pass\n        else:\n            raise\n    # Generate a certificate if one doesn\'t exist on disk\n    subprocess.check_call([""openssl"", ""req"", ""-new"",\n                           ""-newkey"", ""rsa:2048"",\n                           ""-days"", ""365"",\n                           ""-nodes"", ""-x509"",\n                           ""-subj"", ""/C=XX/ST=XX/L=XX/O=generated/CN=generated"",\n                           ""-keyout"", pem_file,\n                           ""-out"", pem_file])\n    # Restrict access to the file\n    os.chmod(pem_file, stat.S_IRUSR | stat.S_IWUSR)\n    c.NotebookApp.certfile = pem_file\n'"
pip_package/ai_lab_gui/__init__.py,0,"b'name = ""ai_lab_gui""\n\n'"
pip_package/ai_lab_gui/app.py,0,"b'import flask\nfrom flask import Flask, render_template\n\nimport docker\n\n\nclass DockerCTL(object):\n\n    def __init__(self, cnt_name=""nvaitc/ai-lab""):\n        self.cnt_name = cnt_name\n        self.client = docker.from_env()\n\n    def pull_cnt(self, tag):\n        self.client.images.pull(self.cnt_name+"":""+tag)\n\n    def start_cnt(self, port, vol, tag, passwd=""""):\n        try:\n            container = self.client.containers.get(""ai-lab-gui"")\n            self.stop_cnt()\n        except Exception as e:\n            print(""[INFO  ] Expected: "", str(e),\n                  "" i.e. Container does not exist"")\n\n        cnt_name = self.cnt_name+"":""+tag\n        ports_dict = {\'8888/tcp\': port}\n        vols_dict = {vol: {\'bind\': \'/home/jovyan\', \'mode\': \'rw\'}}\n        container = self.client.containers.run(cnt_name, auto_remove=True, detach=True,\n                                               name=""ai-lab-gui"", environment=[\'NB_PASSWD=""\'+passwd+\'""\']\n                                               ports=ports_dict, remove=True, shm_size=""2g"",\n                                               volumes=vols_dict)\n        return container\n\n    def stop_cnt(self):\n        container = self.client.containers.get(""ai-lab-gui"")\n        container.stop()\n\n    def get_cnt(self):\n        try:\n            container = self.client.containers.get(""ai-lab-gui"")\n        except Exception:\n            container = None\n        return container\n\n\napp = Flask(__name__)\n\ndctl = DockerCTL()\n\n\n@app.route(\'/\')\n@app.route(\'/index\')\ndef index():\n    return render_template(""index.html"")\n\n\n@app.route(\'/start\', methods=[""POST""])\ndef start_server():\n    print(""[INFO  ] Starting container"")\n    try:\n        port = flask.request.args.get(""port"")\n        vol = flask.request.args.get(""vol"")\n        tag = flask.request.args.get(""tag"")\n        passwd = flask.request.args.get(""passwd"")\n\n        container = dctl.start_cnt(port, vol, tag, passwd)\n\n        print(""[INFO  ] Started container"")\n\n    except Exception as e:\n        print(""[ERROR ] ""+str(e))\n\n    return render_template(""index.html"")\n\n\n@app.route(\'/stop\', methods=[""POST""])\ndef end_server():\n    print(""[INFO  ] Stopping container"")\n    try:\n        dctl.stop_cnt()\n        print(""[INFO  ] Stopped container"")\n    except Exception as e:\n        print(""[ERROR ] ""+str(e))\n\n    return render_template(""index.html"")\n\n\n@app.route(\'/pull\', methods=[""POST""])\ndef pull_image():\n    print(""[INFO  ] Pulling image"")\n    try:\n        tag = flask.request.args.get(""tag"")\n\n        dctl.pull_cnt(tag)\n\n        print(""[INFO  ] Pulled image"")\n        response = {""status"": ""ok""}\n\n    except Exception as e:\n        print(""[ERROR ] ""+str(e))\n        response = {""status"": str(e)}\n\n    return flask.jsonify(response)\n\n\n@app.route(\'/query\', methods=[""GET""])\ndef get_server_data():\n    try:\n        container = dctl.get_cnt()\n\n        #print(""\\n"", container.attrs, ""\\n"")\n\n        port_binding = container.attrs[""HostConfig""][""PortBindings""][""8888/tcp""][0][""HostPort""]\n        vol_mount = container.attrs[""HostConfig""][""Binds""]\n        runtime = container.attrs[""HostConfig""][""Runtime""]\n        image = container.attrs[""Config""][""Image""]\n        state = container.attrs[""State""][""Status""]\n\n        env = container.attrs[""Config""][""Env""]\n        cuda_version = ""unknown""\n        nccl_version = ""unknown""\n        for item in env:\n            if ""CUDA_VERSION"" in item:\n                cuda_version = item.replace(""_VERSION"", """")\n            elif ""NCCL_VERSION"" in item:\n                nccl_version = item.replace(""_VERSION"", """")\n\n        logs = str(container.logs())[-4000:]\n\n        print(""[INFO  ] Container state:"", state)\n        print(""[INFO  ] Port binding:"", port_binding)\n        print(""[INFO  ] Volume mount:"", vol_mount)\n\n        response = {""state"": state,\n                    ""cuda"": cuda_version,\n                    ""nccl"": nccl_version,\n                    ""image"": image,\n                    ""runtime"": runtime,\n                    ""port"": port_binding,\n                    ""vol"": vol_mount,\n                    ""logs"": logs}\n\n    except Exception as e:\n        response = {""state"": ""not running"",\n                    ""cuda"": ""unknown"",\n                    ""nccl"": ""unknown"",\n                    ""image"": ""none"",\n                    ""runtime"": ""none"",\n                    ""port"": ""none"",\n                    ""vol"": ""none"",\n                    ""logs"": ""No logs: ""+str(e)}\n\n    return flask.jsonify(response)\n\n\ndef main():\n    import threading\n    import webbrowser\n    port = 5050\n    url = ""http://0.0.0.0:""+str(port)\n    try:\n        threading.Timer(1.25, lambda: webbrowser.open(url)).start()\n    except Exception as e:\n        print(""[ERROR ] ""+str(e))\n    app.run(debug=False, port=port, host=\'0.0.0.0\')\n\n\nif __name__ == ""__main__"":\n    main()\n'"
