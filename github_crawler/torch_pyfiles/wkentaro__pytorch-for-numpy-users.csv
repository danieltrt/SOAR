file_path,api_count,code
generate_index_html.py,0,"b'#!/usr/bin/env python\n\nimport collections\nimport os.path as osp\nimport string\n\nimport yaml\n\nfrom generate_readme_md import get_section\n\n\ndef get_contents():\n    # keep order in yaml file\n    yaml.add_constructor(\n        yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,\n        lambda loader, node: collections.OrderedDict(\n            loader.construct_pairs(node)\n        ),\n    )\n\n    yaml_file = osp.join(here, ""conversions.yaml"")\n    with open(yaml_file) as f:\n        data = yaml.safe_load(f)\n    contents = []\n    contents.append(""<div class=\'row\'>"")\n    for title, data in data.items():\n        section = get_section(title, data)\n        section = section.replace(\n            ""<table>"",\n            ""<div class=\'table-responsive\'>""\n            ""<table class=\'table table-bordered table-hover\'>"",\n        )\n        section = section.replace(""</table>"", ""</table></div>"")\n        section = section.replace(""<td>"", ""<td style=\'width: 50%\'>"")\n        contents.append(""<div class=\'col-md-6\'>"")\n        contents.append(section)\n        contents.append(""</div>"")\n    contents.append(""</div>"")\n    return ""\\n"".join(contents)\n\n\nhere = osp.dirname(osp.abspath(__file__))\n\n\ndef main():\n    with open(osp.join(here, ""index.html.in"")) as f:\n        template = f.read()\n    template = string.Template(template)\n    readme = template.substitute(CONTENTS=get_contents())\n    print(readme)\n\n\nif __name__ == ""__main__"":\n    main()\n'"
generate_readme_md.py,0,"b'#!/usr/bin/env python\n\nimport collections\nimport os.path as osp\nimport string\n\nimport tabulate\nimport yaml\n\n\ndef get_section(title, data, h=2):\n    if not isinstance(data, list):\n        content = ""<h{0:d}>{1:s}</h{0:d}>\\n\\n"".format(h, title.capitalize())\n        for sub_title, sub_data in data.items():\n            content += get_section(sub_title, sub_data, h=h + 1)\n        return content\n\n    headers = [""Numpy"", ""PyTorch""]\n    keys = [""numpy"", ""pytorch""]\n    rows = []\n    for d in data:\n        row = []\n        for key in keys:\n            if isinstance(d[key], dict):\n                content = d[key][""content""]\n                is_code = d[key].get(""is_code"", True)\n            elif d[key] is None:\n                content = """"\n                is_code = False\n            else:\n                content = d[key]\n                is_code = True\n            if is_code and content:\n                content = ""<pre>\\n{:s}</pre>"".format(content)\n            row.append(content)\n        rows.append(row)\n\n    contents = []\n    contents.append(""<h{0:d}>{1:s}</h{0:d}>"".format(h, title.capitalize()))\n    contents.append(tabulate.tabulate(rows, headers=headers, tablefmt=""html""))\n    return ""\\n"".join(contents)\n\n\ndef get_contents():\n    # keep order in yaml file\n    yaml.add_constructor(\n        yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,\n        lambda loader, node: collections.OrderedDict(\n            loader.construct_pairs(node)\n        ),\n    )\n\n    yaml_file = osp.join(here, ""conversions.yaml"")\n    with open(yaml_file) as f:\n        data = yaml.safe_load(f)\n    contents = []\n    for title, data in data.items():\n        section = get_section(title, data)\n        contents.append(section)\n    return ""\\n"".join(contents)\n\n\nhere = osp.dirname(osp.abspath(__file__))\n\n\ndef main():\n    with open(osp.join(here, ""README.md.in"")) as f:\n        template = f.read()\n    template = string.Template(template)\n    readme = template.substitute(CONTENTS=get_contents())\n    print(readme)\n\n\nif __name__ == ""__main__"":\n    main()\n'"
run_tests.py,1,"b'#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport glob\nimport os\nimport os.path as osp\nimport subprocess\n\nimport yaml\n\n\ndef parse(data):\n    for _, datum in data.items():\n        if isinstance(datum, dict):\n            for key_content in parse(datum):\n                yield key_content\n        else:\n            for item in datum:\n                for key in item:\n                    item_k = item[key]\n                    if isinstance(item_k, dict):\n                        content = item_k[""content""]\n                        is_code = item_k.get(""is_code"", True)\n                        if item_k.get(""skip_test"", False):\n                            continue\n                    else:\n                        content = item_k\n                        is_code = True\n                    if is_code and content is not None:\n                        yield key, content\n\n\ndef main():\n    here = osp.dirname(osp.abspath(__file__))\n\n    with open(osp.join(here, ""conversions.yaml"")) as f:\n        data = yaml.load(f)\n\n    for fname in glob.glob(osp.join(here, ""tests/*.py"")):\n        os.remove(fname)\n\n    for i, (key, content) in enumerate(parse(data)):\n        if key == ""numpy"":\n            code = """"""\\\nimport numpy as np\n\n\ndef test_{key}_{id:04d}():\n    x = np.array([[1, 2, 3], [4, 5, 6]])\n{content}\n""""""\n        elif key == ""pytorch"":\n            code = """"""\\\nimport torch\n\n\ndef test_{key}_{id:04d}():\n    x = torch.tensor([[1, 2, 3], [4, 5, 6]])\n{content}\n""""""\n        else:\n            raise ValueError\n\n        content = ""\\n"".join("" "" * 4 + line for line in content.splitlines())\n        code = code.format(key=key, id=i, content=content)\n\n        test_file = osp.join(\n            here, ""tests/test_{key}_{id:04d}.py"".format(key=key, id=i)\n        )\n        with open(test_file, ""w"") as f:\n            f.write(code)\n\n    cmd = ""pytest -vs tests""\n    print(""+ %s"" % cmd)\n    subprocess.call(cmd, shell=True)\n\n\nif __name__ == ""__main__"":\n    main()\n'"
