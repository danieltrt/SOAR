file_path,api_count,code
accuracy.py,0,"b'from __future__ import print_function, division\n\n\ndef accuracy(output, target, topk=(1,)):\n    """"""\n    Calc top1 and top5\n    :param output: logits\n    :param target: groundtruth\n    :param topk: top1 and top5\n    :return:\n    """"""\n    maxk = max(topk)\n    _, pred = output.topk(maxk, 1, True, True)\n    pred = pred.t()\n    correct = pred.eq(target.view(1, -1).expand_as(pred))\n    res = []\n    for k in topk:\n        correct_k = correct[:k].view(-1).float().sum(0)\n        res.append(correct_k.mul_(100.0))\n    return res\n'"
dataloader.py,1,"b""#! -*- coding: utf-8 -*-\n\nfrom __future__ import print_function, division\n\nimport os\n\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms\n\nTRAIN_DIR = 'train'\nVALIDATION_DIR = 'valid'\n\nMEAN_RGB = (0.485, 0.456, 0.406)\nVAR_RGB = (0.229, 0.224, 0.225)\n\ntransform_train = transforms.Compose([\n    transforms.RandomSizedCrop(224, scale=(0.2, 1.0)),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize(MEAN_RGB, VAR_RGB),\n])\n\ntransform_test = transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(MEAN_RGB, VAR_RGB),\n])\n\n\ndef get_imagenet_dataset(batch_size, dataset_root='./dataset/imagenet/', dataset_tpye='train'):\n    if dataset_tpye == 'train':\n        train_dataset_root = os.path.join(dataset_root, TRAIN_DIR)\n        trainset = datasets.ImageFolder(root=train_dataset_root, transform=transform_train)\n        trainloader = DataLoader(trainset,\n                                 batch_size=batch_size,\n                                 shuffle=True,\n                                 num_workers=8,\n                                 pin_memory=True,\n                                 drop_last=False)\n        print('Succeed to init ImageNet train DataLoader!')\n        return trainloader\n    elif dataset_tpye == 'val' or dataset_tpye == 'valid':\n        val_dataset_root = os.path.join(dataset_root, VALIDATION_DIR)\n        valset = datasets.ImageFolder(root=val_dataset_root, transform=transform_test)\n        valloader = DataLoader(valset,\n                               batch_size=batch_size,\n                               shuffle=False,\n                               num_workers=8,\n                               pin_memory=False,\n                               drop_last=False)\n        print('Succeed to init ImageNet val DataLoader!')\n        return valloader\n    else:\n        raise Exception('IMAGENET DataLoader: Unknown dataset type -- %s' % dataset_tpye)\n"""
verify.py,2,"b'from __future__ import print_function, division\n\nimport os\nimport argparse\n\nimport torch\n\nfrom models.MoGA_A import MoGaA\nfrom models.MoGA_B import MoGaB\nfrom models.MoGA_C import MoGaC\nfrom dataloader import get_imagenet_dataset\nfrom accuracy import accuracy\n\nparser = argparse.ArgumentParser(description=\'MoGA Config\')\nparser.add_argument(\'--model\', default=\'MoGA_A\', choices=[\'MoGA_A\', \'MoGA_B\', \'MoGA_C\'])\nparser.add_argument(\'--device\', default=\'cpu\', choices=[\'cuda\', \'cpu\'])\nparser.add_argument(\'--val-dataset-root\', default=\'/Your_Root/ILSVRC2012\', help=""val dataset root path"")\nparser.add_argument(\'--pretrained-path\', default=\'./pretrained/a.pth\', help=""checkpoint path"")\nparser.add_argument(\'--batch-size\', default=256, type=int, help=\'val batch size\')\nparser.add_argument(\'--gpu-id\', default=0, type=int, help=\'gpu to run\')\nargs = parser.parse_args()\n\nif __name__ == ""__main__"":\n    assert args.model in [\'MoGA_A\', \'MoGA_B\', \'MoGA_C\'], ""Unknown model name %s"" % args.model\n    if args.device == ""cuda"":\n        os.environ[""CUDA_VISIBLE_DEVICES""] = str(args.gpu_id)\n    if args.model == ""MoGA_A"":\n        model = MoGaA()\n    elif args.model == ""MoGA_B"":\n        model = MoGaB()\n    elif args.model == ""MoGA_C"":\n        model = MoGaC()\n\n    device = torch.device(args.device)\n    pretrained_path = args.pretrained_path\n    model_dict = torch.load(pretrained_path, map_location=device)\n    model.load_state_dict(model_dict[""model_state""])\n    if device.type == \'cuda\':\n        model.cuda()\n    model.eval()\n\n    val_dataloader = get_imagenet_dataset(batch_size=args.batch_size,\n                                          dataset_root=args.val_dataset_root,\n                                          dataset_tpye=""valid"")\n\n    print(""Start to evaluate ..."")\n    total_top1 = 0.0\n    total_top5 = 0.0\n    total_counter = 0.0\n    for image, label in val_dataloader:\n        image, label = image.to(device), label.to(device)\n        result = model(image)\n        top1, top5 = accuracy(result, label, topk=(1, 5))\n        if device.type == \'cuda\':\n            total_counter += image.cpu().data.shape[0]\n            total_top1 += top1.cpu().data.numpy()\n            total_top5 += top5.cpu().data.numpy()\n        else:\n            total_counter += image.data.shape[0]\n            total_top1 += top1.data.numpy()\n            total_top5 += top5.data.numpy()\n    mean_top1 = total_top1 / total_counter\n    mean_top5 = total_top5 / total_counter\n    print(\'Evaluate Result: Total: %d\\tmTop1: %.4f\\tmTop5: %.6f\' % (total_counter, mean_top1, mean_top5))\n'"
models/MoGA_A.py,3,"b'import math\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\ndef stem(inp, oup, stride):\n    return nn.Sequential(\n        nn.Conv2d(inp, oup, 3, stride, 1, bias=False),\n        nn.BatchNorm2d(oup),\n        # nn.ReLU6(inplace=True)\n        Hswish()\n    )\n\n\ndef separable_conv(inp, oup):\n    return nn.Sequential(\n        nn.Conv2d(inp, inp, 3, 1, 1, groups=inp, bias=False),\n        nn.BatchNorm2d(inp),\n        nn.ReLU(inplace=True),\n        nn.Conv2d(inp, oup, 1, 1, 0, bias=False),\n        nn.BatchNorm2d(oup),\n    )\n\n\ndef conv_before_pooling(inp, oup):\n    return nn.Sequential(\n        nn.Conv2d(inp, oup, 1, 1, 0, bias=False),\n        nn.BatchNorm2d(oup),\n        # nn.ReLU6(inplace=True)\n        Hswish()\n    )\n\n\ndef conv_head(inp, oup):\n    return nn.Sequential(\n            nn.Conv2d(inp, oup, 1, bias=False),\n            Hswish(inplace=True),\n            nn.Dropout2d(0.2)\n    )\n\n\ndef classifier(inp, nclass):\n    return nn.Linear(inp, nclass)\n\n\nclass Hswish(nn.Module):\n    def __init__(self, inplace=True):\n        super(Hswish, self).__init__()\n        self.inplace = inplace\n\n    def forward(self, x):\n        return x * F.relu6(x + 3., inplace=self.inplace) / 6.\n\n\nclass Hsigmoid(nn.Module):\n    def __init__(self, inplace=True):\n        super(Hsigmoid, self).__init__()\n        self.inplace = inplace\n\n    def forward(self, x):\n        return F.relu6(x + 3., inplace=self.inplace) / 6.\n\n\nclass SEModule(nn.Module):\n    def __init__(self, channel, act, reduction=4):\n        super(SEModule, self).__init__()\n        self.avg_pool = nn.AdaptiveAvgPool2d(1)\n        self.conv = nn.Sequential(\n            nn.Conv2d(channel, channel // reduction, 1, 1, 0, bias=True),\n            act\n        )\n        self.fc = nn.Sequential(\n            nn.Conv2d(channel // reduction, channel, 1, 1, 0, bias=True),\n            Hsigmoid()\n        )\n\n    def forward(self, x):\n        y = self.avg_pool(x)\n        y = self.conv(y)\n        y = self.fc(y)\n        return torch.mul(x, y)\n\nclass InvertedResidual(nn.Module):\n    def __init__(self, inp, oup, kernel_size, stride, expand_ratio, act, se):\n        super(InvertedResidual, self).__init__()\n        assert stride in [1, 2]\n        self.stride = stride\n        self.act = act\n        self.se = se\n        padding = kernel_size // 2\n        hidden_dim = round(inp * expand_ratio)\n        self.use_res_connect = self.stride == 1 and inp == oup\n        self.conv1 = nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)\n        self.bn1 = nn.BatchNorm2d(hidden_dim)\n        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding, groups=hidden_dim, bias=False)\n        self.bn2 = nn.BatchNorm2d(hidden_dim)\n        if self.se:\n            self.mid_se = SEModule(hidden_dim, act)\n        self.conv3 = nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False)\n        self.bn3 = nn.BatchNorm2d(oup)\n\n    def forward(self, x):\n        inputs = x\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.act(x)\n        x = self.conv2(x)\n        x = self.bn2(x)\n        x = self.act(x)\n        if self.se:\n            x = self.mid_se(x)\n        x = self.conv3(x)\n        x = self.bn3(x)\n        if self.use_res_connect:\n            return inputs + x\n        else:\n            return x\n\n\nclass MoGaA(nn.Module):\n    def __init__(self, n_class=1000, input_size=224):\n        super(MoGaA, self).__init__()\n        assert input_size % 32 == 0\n        mb_config = [\n            # expansion, out_channel, kernel_size, stride, act(0 RE 1 Hs), se\n            [6, 24, 5, 2, 0, 0],\n            [6, 24, 7, 1, 0, 0],\n            [6, 40, 3, 2, 0, 0],\n            [6, 40, 3, 1, 0, 1],\n            [3, 40, 3, 1, 0, 1],\n            [6, 80, 3, 2, 1, 1],\n            [6, 80, 3, 1, 1, 0],\n            [6, 80, 7, 1, 1, 0],\n            [3, 80, 7, 1, 1, 1],\n            [6, 112, 7, 1, 1, 0],\n            [6, 112, 3, 1, 1, 0],\n            [6, 160, 3, 2, 1, 0],\n            [6, 160, 5, 1, 1, 1],\n            [6, 160, 5, 1, 1, 1],\n        ]\n\n        first_filter = 16\n        second_filter = 16\n        second_last_filter = 960\n        last_channel = 1280\n\n        self.last_channel = last_channel\n        self.stem = stem(3, first_filter, 2)\n        self.separable_conv = separable_conv(first_filter, second_filter)\n        self.mb_module = list()\n        input_channel = second_filter\n        for t, c, k, s, a, se in mb_config:\n            output_channel = c\n            act = nn.ReLU(inplace=True) if a==0 else Hswish(inplace=True)\n            self.mb_module.append(InvertedResidual(input_channel, output_channel, k, s, expand_ratio=t, act=act, se=se!=0))\n            input_channel = output_channel\n        self.mb_module = nn.Sequential(*self.mb_module)\n        self.conv_before_pooling = conv_before_pooling(input_channel, second_last_filter)\n        self.global_pooling = nn.AdaptiveAvgPool2d(1)\n        self.conv_head = conv_head(second_last_filter, last_channel)\n        self.classifier = classifier(last_channel, n_class)\n        self._initialize_weights()\n\n    def forward(self, x):\n        x = self.stem(x)\n        x = self.separable_conv(x)\n        x = self.mb_module(x)\n        x = self.conv_before_pooling(x)\n        x = self.global_pooling(x)\n        x = self.conv_head(x)\n        x = x.view(x.size(0), -1)\n        x = self.classifier(x)\n        return x\n\n    def _initialize_weights(self):\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. / n))\n                if m.bias is not None:\n                    m.bias.data.zero_()\n            elif isinstance(m, nn.BatchNorm2d):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n            elif isinstance(m, nn.Linear):\n                n = m.weight.size(0)  # fan-out\n                init_range = 1.0 / math.sqrt(n)\n                m.weight.data.uniform_(-init_range, init_range)\n                m.bias.data.zero_()\n'"
models/MoGA_B.py,3,"b'import math\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\ndef stem(inp, oup, stride):\n    return nn.Sequential(\n        nn.Conv2d(inp, oup, 3, stride, 1, bias=False),\n        nn.BatchNorm2d(oup),\n        # nn.ReLU6(inplace=True)\n        Hswish()\n    )\n\n\ndef separable_conv(inp, oup):\n    return nn.Sequential(\n        nn.Conv2d(inp, inp, 3, 1, 1, groups=inp, bias=False),\n        nn.BatchNorm2d(inp),\n        nn.ReLU(inplace=True),\n        nn.Conv2d(inp, oup, 1, 1, 0, bias=False),\n        nn.BatchNorm2d(oup),\n    )\n\n\ndef conv_before_pooling(inp, oup):\n    return nn.Sequential(\n        nn.Conv2d(inp, oup, 1, 1, 0, bias=False),\n        nn.BatchNorm2d(oup),\n        # nn.ReLU6(inplace=True)\n        Hswish()\n    )\n\n\ndef conv_head(inp, oup):\n    return nn.Sequential(\n            nn.Conv2d(inp, oup, 1, bias=False),\n            Hswish(inplace=True),\n            nn.Dropout2d(0.2)\n    )\n\n\ndef classifier(inp, nclass):\n    return nn.Linear(inp, nclass)\n\n\nclass Hswish(nn.Module):\n    def __init__(self, inplace=True):\n        super(Hswish, self).__init__()\n        self.inplace = inplace\n\n    def forward(self, x):\n        return x * F.relu6(x + 3., inplace=self.inplace) / 6.\n\n\nclass Hsigmoid(nn.Module):\n    def __init__(self, inplace=True):\n        super(Hsigmoid, self).__init__()\n        self.inplace = inplace\n\n    def forward(self, x):\n        return F.relu6(x + 3., inplace=self.inplace) / 6.\n\n\nclass SEModule(nn.Module):\n    def __init__(self, channel, act, reduction=4):\n        super(SEModule, self).__init__()\n        self.avg_pool = nn.AdaptiveAvgPool2d(1)\n        self.conv = nn.Sequential(\n            nn.Conv2d(channel, channel // reduction, 1, 1, 0, bias=True),\n            act\n        )\n        self.fc = nn.Sequential(\n            nn.Conv2d(channel // reduction, channel, 1, 1, 0, bias=True),\n            Hsigmoid()\n        )\n\n    def forward(self, x):\n        y = self.avg_pool(x)\n        y = self.conv(y)\n        y = self.fc(y)\n        return torch.mul(x, y)\n\nclass InvertedResidual(nn.Module):\n    def __init__(self, inp, oup, kernel_size, stride, expand_ratio, act, se):\n        super(InvertedResidual, self).__init__()\n        assert stride in [1, 2]\n        self.stride = stride\n        self.act = act\n        self.se = se\n        padding = kernel_size // 2\n        hidden_dim = round(inp * expand_ratio)\n        self.use_res_connect = self.stride == 1 and inp == oup\n        self.conv1 = nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)\n        self.bn1 = nn.BatchNorm2d(hidden_dim)\n        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding, groups=hidden_dim, bias=False)\n        self.bn2 = nn.BatchNorm2d(hidden_dim)\n        if self.se:\n            self.mid_se = SEModule(hidden_dim, act)\n        self.conv3 = nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False)\n        self.bn3 = nn.BatchNorm2d(oup)\n\n    def forward(self, x):\n        inputs = x\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.act(x)\n        x = self.conv2(x)\n        x = self.bn2(x)\n        x = self.act(x)\n        if self.se:\n            x = self.mid_se(x)\n        x = self.conv3(x)\n        x = self.bn3(x)\n        if self.use_res_connect:\n            return inputs + x\n        else:\n            return x\n\n\nclass MoGaB(nn.Module):\n    def __init__(self, n_class=1000, input_size=224):\n        super(MoGaB, self).__init__()\n        assert input_size % 32 == 0\n        mb_config = [\n            # expansion, out_channel, kernel_size, stride, act(0 RE 1 Hs), se\n            [3, 24, 3, 2, 0, 0],\n            [3, 24, 3, 1, 0, 0],\n            [6, 40, 7, 2, 0, 0],\n            [3, 40, 3, 1, 0, 0],\n            [6, 40, 5, 1, 0, 0],\n            [6, 80, 3, 2, 1, 1],\n            [6, 80, 5, 1, 1, 1],\n            [3, 80, 3, 1, 1, 0],\n            [6, 80, 7, 1, 1, 1],\n            [6, 112, 7, 1, 1, 0],\n            [3, 112, 5, 1, 1, 0],\n            [6, 160, 7, 2, 1, 1],\n            [6, 160, 7, 1, 1, 1],\n            [6, 160, 3, 1, 1, 1],\n        ]\n\n        first_filter = 16\n        second_filter = 16\n        second_last_filter = 960\n        last_channel = 1280\n\n        self.last_channel = last_channel\n        self.stem = stem(3, first_filter, 2)\n        self.separable_conv = separable_conv(first_filter, second_filter)\n        self.mb_module = list()\n        input_channel = second_filter\n        for t, c, k, s, a, se in mb_config:\n            output_channel = c\n            act = nn.ReLU(inplace=True) if a==0 else Hswish(inplace=True)\n            self.mb_module.append(InvertedResidual(input_channel, output_channel, k, s, expand_ratio=t, act=act, se=se!=0))\n            input_channel = output_channel\n        self.mb_module = nn.Sequential(*self.mb_module)\n        self.conv_before_pooling = conv_before_pooling(input_channel, second_last_filter)\n        self.global_pooling = nn.AdaptiveAvgPool2d(1)\n        self.conv_head = conv_head(second_last_filter, last_channel)\n        self.classifier = classifier(last_channel, n_class)\n        self._initialize_weights()\n\n    def forward(self, x):\n        x = self.stem(x)\n        x = self.separable_conv(x)\n        x = self.mb_module(x)\n        x = self.conv_before_pooling(x)\n        x = self.global_pooling(x)\n        x = self.conv_head(x)\n        x = x.view(x.size(0), -1)\n        x = self.classifier(x)\n        return x\n\n    def _initialize_weights(self):\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. / n))\n                if m.bias is not None:\n                    m.bias.data.zero_()\n            elif isinstance(m, nn.BatchNorm2d):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n            elif isinstance(m, nn.Linear):\n                n = m.weight.size(0)  # fan-out\n                init_range = 1.0 / math.sqrt(n)\n                m.weight.data.uniform_(-init_range, init_range)\n                m.bias.data.zero_()\n'"
models/MoGA_C.py,3,"b'import math\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\ndef stem(inp, oup, stride):\n    return nn.Sequential(\n        nn.Conv2d(inp, oup, 3, stride, 1, bias=False),\n        nn.BatchNorm2d(oup),\n        # nn.ReLU6(inplace=True)\n        Hswish()\n    )\n\n\ndef separable_conv(inp, oup):\n    return nn.Sequential(\n        nn.Conv2d(inp, inp, 3, 1, 1, groups=inp, bias=False),\n        nn.BatchNorm2d(inp),\n        nn.ReLU(inplace=True),\n        nn.Conv2d(inp, oup, 1, 1, 0, bias=False),\n        nn.BatchNorm2d(oup),\n    )\n\n\ndef conv_before_pooling(inp, oup):\n    return nn.Sequential(\n        nn.Conv2d(inp, oup, 1, 1, 0, bias=False),\n        nn.BatchNorm2d(oup),\n        # nn.ReLU6(inplace=True)\n        Hswish()\n    )\n\n\ndef conv_head(inp, oup):\n    return nn.Sequential(\n            nn.Conv2d(inp, oup, 1, bias=False),\n            Hswish(inplace=True),\n            nn.Dropout2d(0.2)\n    )\n\n\ndef classifier(inp, nclass):\n    return nn.Linear(inp, nclass)\n\n\nclass Hswish(nn.Module):\n    def __init__(self, inplace=True):\n        super(Hswish, self).__init__()\n        self.inplace = inplace\n\n    def forward(self, x):\n        return x * F.relu6(x + 3., inplace=self.inplace) / 6.\n\n\nclass Hsigmoid(nn.Module):\n    def __init__(self, inplace=True):\n        super(Hsigmoid, self).__init__()\n        self.inplace = inplace\n\n    def forward(self, x):\n        return F.relu6(x + 3., inplace=self.inplace) / 6.\n\n\nclass SEModule(nn.Module):\n    def __init__(self, channel, act, reduction=4):\n        super(SEModule, self).__init__()\n        self.avg_pool = nn.AdaptiveAvgPool2d(1)\n        self.conv = nn.Sequential(\n            nn.Conv2d(channel, channel // reduction, 1, 1, 0, bias=True),\n            act\n        )\n        self.fc = nn.Sequential(\n            nn.Conv2d(channel // reduction, channel, 1, 1, 0, bias=True),\n            Hsigmoid()\n        )\n\n    def forward(self, x):\n        y = self.avg_pool(x)\n        y = self.conv(y)\n        y = self.fc(y)\n        return torch.mul(x, y)\n\nclass InvertedResidual(nn.Module):\n    def __init__(self, inp, oup, kernel_size, stride, expand_ratio, act, se):\n        super(InvertedResidual, self).__init__()\n        assert stride in [1, 2]\n        self.stride = stride\n        self.act = act\n        self.se = se\n        padding = kernel_size // 2\n        hidden_dim = round(inp * expand_ratio)\n        self.use_res_connect = self.stride == 1 and inp == oup\n        self.conv1 = nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)\n        self.bn1 = nn.BatchNorm2d(hidden_dim)\n        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding, groups=hidden_dim, bias=False)\n        self.bn2 = nn.BatchNorm2d(hidden_dim)\n        if self.se:\n            self.mid_se = SEModule(hidden_dim, act)\n        self.conv3 = nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False)\n        self.bn3 = nn.BatchNorm2d(oup)\n\n    def forward(self, x):\n        inputs = x\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.act(x)\n        x = self.conv2(x)\n        x = self.bn2(x)\n        x = self.act(x)\n        if self.se:\n            x = self.mid_se(x)\n        x = self.conv3(x)\n        x = self.bn3(x)\n        if self.use_res_connect:\n            return inputs + x\n        else:\n            return x\n\n\nclass MoGaC(nn.Module):\n    def __init__(self, n_class=1000, input_size=224):\n        super(MoGaC, self).__init__()\n        assert input_size % 32 == 0\n        mb_config = [\n            # expansion, out_channel, kernel_size, stride, act(0 RE 1 Hs), se\n            [3, 24, 5, 2, 0, 0],\n            [3, 24, 3, 1, 0, 0],\n            [3, 40, 5, 2, 0, 0],\n            [3, 40, 3, 1, 0, 0],\n            [3, 40, 5, 1, 0, 0],\n            [3, 80, 5, 2, 1, 0],\n            [6, 80, 5, 1, 1, 1],\n            [3, 80, 5, 1, 1, 0],\n            [3, 80, 5, 1, 1, 0],\n            [6, 112, 3, 1, 1, 0],\n            [6, 112, 3, 1, 1, 1],\n            [6, 160, 3, 2, 1, 1],\n            [6, 160, 3, 1, 1, 1],\n            [6, 160, 3, 1, 1, 1],\n        ]\n\n        first_filter = 16\n        second_filter = 16\n        second_last_filter = 960\n        last_channel = 1280\n\n        self.last_channel = last_channel\n        self.stem = stem(3, first_filter, 2)\n        self.separable_conv = separable_conv(first_filter, second_filter)\n        self.mb_module = list()\n        input_channel = second_filter\n        for t, c, k, s, a, se in mb_config:\n            output_channel = c\n            act = nn.ReLU(inplace=True) if a==0 else Hswish(inplace=True)\n            self.mb_module.append(InvertedResidual(input_channel, output_channel, k, s, expand_ratio=t, act=act, se=se!=0))\n            input_channel = output_channel\n        self.mb_module = nn.Sequential(*self.mb_module)\n        self.conv_before_pooling = conv_before_pooling(input_channel, second_last_filter)\n        self.global_pooling = nn.AdaptiveAvgPool2d(1)\n        self.conv_head = conv_head(second_last_filter, last_channel)\n        self.classifier = classifier(last_channel, n_class)\n        self._initialize_weights()\n\n    def forward(self, x):\n        x = self.stem(x)\n        x = self.separable_conv(x)\n        x = self.mb_module(x)\n        x = self.conv_before_pooling(x)\n        x = self.global_pooling(x)\n        x = self.conv_head(x)\n        x = x.view(x.size(0), -1)\n        x = self.classifier(x)\n        return x\n\n    def _initialize_weights(self):\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. / n))\n                if m.bias is not None:\n                    m.bias.data.zero_()\n            elif isinstance(m, nn.BatchNorm2d):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n            elif isinstance(m, nn.Linear):\n                n = m.weight.size(0)  # fan-out\n                init_range = 1.0 / math.sqrt(n)\n                m.weight.data.uniform_(-init_range, init_range)\n                m.bias.data.zero_()\n'"
models/__init__.py,0,b''
